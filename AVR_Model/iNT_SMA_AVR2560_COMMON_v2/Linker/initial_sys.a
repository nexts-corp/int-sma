;#include <delay.h>
;#include <stdlib.h>
;#include <i2c.h>
;#include "initial_sys.h"
;#include "uart.h"
;#include "timer.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include "io.h"
;#include "ds1672.h"
;#include "config.h"
;//#include "oled.h"
;#include "adc.h"
;#include "debug.h"
;#include "log.h"
;#include "sdcard.h"
;
;/*============================================================*/
;int initial_system(void)
; 0001 0012 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0001 0013     int res=0;
; 0001 0014     char viTest[9] = "AT+CSQ\r\n";
; 0001 0015     // Crystal Oscillator division factor: 1
; 0001 0016     #pragma optsize-
; 0001 0017     CLKPR=0x80;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;	res -> R16,R17
;	viTest -> Y+2
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0001 0018     CLKPR=0x00;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0001 0019     #ifdef _OPTIMIZE_SIZE_
; 0001 001A     #pragma optsize+
; 0001 001B     #endif
; 0001 001C 
; 0001 001D     init_uart();
;PCODE: $0000001C VOL: 0
; 0001 001E     iUartSetBaudRate(2,BAUD_RATE_38K4_def);
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0001 001F 
; 0001 0020     if(MCUSR & (1<<PORF)){
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0001 0021         printDebug("\r\nPower-on Reset\r\n");
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0001 0022         MCUSR &= ~(1<<PORF);
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0001 0023     }
; 0001 0024     if(MCUSR & (1<<EXTRF)){
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0001 0025         printDebug("\r\nExternal Reset\r\n");
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0001 0026         MCUSR &= ~(1<<EXTRF);
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0001 0027     }
; 0001 0028     if(MCUSR & (1<<BORF)){
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0001 0029         printDebug("\r\nBrown-out Reset\r\n");
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0001 002A         MCUSR &= ~(1<<BORF);
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0001 002B     }
; 0001 002C     if(MCUSR & (1<<WDRF)){
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0001 002D         printDebug("\r\nWatchdog Reset\r\n");
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0001 002E         MCUSR &= ~(1<<WDRF);
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0001 002F     }
; 0001 0030     if(MCUSR & (1<<JTRF)){
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0001 0031         printDebug("\r\nJTAG Reset\r\n");
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0001 0032         MCUSR &= ~(1<<JTRF);
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0001 0033     }
; 0001 0034 
; 0001 0035     // -------- Peripheral Initialize ----------- //
; 0001 0036     init_io();
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0001 0037     init_i2c();
;PCODE: $0000006D VOL: 0
; 0001 0038     init_spi();
;PCODE: $0000006E VOL: 0
; 0001 0039     init_adc();
;PCODE: $0000006F VOL: 0
; 0001 003A     init_timer();
;PCODE: $00000070 VOL: 0
; 0001 003B     init_common();
;PCODE: $00000071 VOL: 0
; 0001 003C 
; 0001 003D     enable_interrupt(2);
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0001 003E 
; 0001 003F     delay_ms(500);
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0001 0040 
; 0001 0041     // -------- Module Initialize ----------- //
; 0001 0042     BUZZER = 0;                 // BUZZER Off.
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0001 0043     init_RTC();         delay_ms(100);
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0001 0044     //init_oled();        delay_ms(100);
; 0001 0045     adc_init_read();            //getting first ADC to initial
;PCODE: $0000007D VOL: 0
; 0001 0046 
; 0001 0047     enable_interrupt(1);        // -- adc_sampling
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0001 0048     enable_interrupt(3);        // -- 1 sec timer
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0001 0049     enable_interrupt(4);        // -- 0.5 sec timer
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0001 004A 
; 0001 004B     //getAllConfig();
; 0001 004C 
; 0001 004D 
; 0001 004E     // -- Initialize Complete -- //
; 0001 004F     /*bongkot*/
; 0001 0050     //playBeep();
; 0001 0051     showLedInitComplete();
;PCODE: $00000087 VOL: 0
; 0001 0052     showDebugInitComplete();
;PCODE: $00000088 VOL: 0
; 0001 0053 
; 0001 0054     delay_ms(2000);
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0001 0055     send_uart(2,viTest);
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0001 0056     delay_ms(2000);
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0001 0057     return;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0001 0058 
; 0001 0059     if(SD_init() == 0)
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0001 005A     {
; 0001 005B //        if(LOG_init() < 0)
; 0001 005C //        {
; 0001 005D //            // -- log status = error -- //
; 0001 005E //            printDebug("<initial_system> LOG_init() failed\r\n");
; 0001 005F //        }
; 0001 0060 
; 0001 0061         // -- log status = ok -- //
; 0001 0062     }
; 0001 0063     else
;PCODE: $0000009B VOL: 0
; 0001 0064     {
; 0001 0065         // -- sd status = error -- //
; 0001 0066         printDebug("<initial_system> SD_init() failed\r\n");
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0001 0067     }
;PCODE: $000000A3 VOL: 0
; 0001 0068 
; 0001 0069     srand((unsigned int)raw_rtc + (unsigned int)(read_adc(8) * 13));        // set random seed
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0001 006A 
; 0001 006B     // -------- Configuration Initialize ----------- //
; 0001 006C //    readConfig();
; 0001 006D //    initAlarm();        //delay_ms(100);
; 0001 006E //
; 0001 006F //    if(init_logfile() < 0){
; 0001 0070 //        printDebug("init_logdata() failed\r\n");
; 0001 0071 //        return -1;
; 0001 0072 //    }
; 0001 0073 
; 0001 0074 
; 0001 0075     return res;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0001 0076 }
;PCODE: $000000B2 VOL: 0
;/*============================================================*/
;void init_i2c(void)
; 0001 0079 {
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0001 007A     // I2C Bus initialization
; 0001 007B     i2c_init();
;PCODE: $000000B5 VOL: 0
; 0001 007C }
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;/*============================================================*/
;void init_spi(void)
; 0001 007F {
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0001 0080     // SPI initialization
; 0001 0081     // SPI Type: Master
; 0001 0082     // SPI Clock Rate: 2000.000 kHz
; 0001 0083     // SPI Clock Phase: Cycle Start
; 0001 0084     // SPI Clock Polarity: Low
; 0001 0085     // SPI Data Order: MSB First
; 0001 0086     SPCR=0x50;
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0001 0087     SPSR=0x00;
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0001 0088 }
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;/*============================================================*/
;void init_common(void)
; 0001 008B {
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0001 008C     // External Interrupt(s) initialization
; 0001 008D     // INT0: Off, INT1: Off, INT2: Off, INT3: Off, INT4: Off, INT5: Off, INT6: Off, INT7: Off
; 0001 008E     EICRA=0x00;
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0001 008F     EICRB=0x00;
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0001 0090     EIMSK=0x00;
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0001 0091 
; 0001 0092     PCMSK0=0x00;
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0001 0093     PCMSK1=0x00;
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0001 0094     PCMSK2=0x00;
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0001 0095     PCICR=0x00;
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0001 0096 
; 0001 0097     // Analog Comparator initialization
; 0001 0098     // Analog Comparator: Off
; 0001 0099     // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0001 009A     ACSR=0x80;
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0001 009B     ADCSRB=0x00;
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0001 009C     DIDR1=0x00;
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0001 009D 
; 0001 009E     // TWI initialization
; 0001 009F     // TWI disabled
; 0001 00A0     TWCR=0x00;
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0001 00A1 }
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;/*============================================================*/
;void playBeep(void)
; 0001 00A4 {
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0001 00A5     BUZZER = 1;                                     // Buzzer ON Starting
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0001 00A6     delay_ms(200);
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0001 00A7     BUZZER = 0;
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0001 00A8 }
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;/*============================================================*/
;void showDebugInitComplete(void)
; 0001 00AB {
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0001 00AC //    struct rtc_structure time;
; 0001 00AD //    struct prop_cnfg_st properties_config;
; 0001 00AE //
; 0001 00AF //    printDebug("Initial Device Completed at - ");
; 0001 00B0 //    RTC_getDateTime(&time,properties_config.timeZone);
; 0001 00B1 //    printDebug("%04d-%02d-%02d %02d:%02d:%02d\r\n",
; 0001 00B2 //            time.year,time.month,time.date,time.hour,time.min,time.sec);
; 0001 00B3 }
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;/*============================================================*/
;void showLedInitComplete(void)
; 0001 00B6 {
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0001 00B7     LED_ON(BIT_LED_ALARM);
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0001 00B8     delay_ms(200);
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0001 00B9 
; 0001 00BA     LED_ON(BIT_LED_LINK);
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0001 00BB     delay_ms(200);
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0001 00BC 
; 0001 00BD     LED_ON(BIT_LED_TEMP);
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0001 00BE     delay_ms(200);
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0001 00BF 
; 0001 00C0     LED_ON(BIT_LED_PWR);
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0001 00C1     delay_ms(200);
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0001 00C2 
; 0001 00C3     LED_OFF(BIT_LED_PWR|BIT_LED_TEMP|BIT_LED_LINK|BIT_LED_ALARM);
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0001 00C4     delay_ms(200);
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0001 00C5 
; 0001 00C6     LED_ON(BIT_LED_PWR);
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0001 00C7     delay_ms(50);
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0001 00C8 }
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;/*============================================================*/
;
