;#include "queue.h"
;
;piQueueHandle_t iQueueCreate(const unsigned int iItemQuantity_p,const unsigned int iItemLength_p){
; 001B 0003 piQueueHandle_t iQueueCreate(const unsigned int iItemQuantity_p,const unsigned int iItemLength_p){

	.CSEG
;PCODE: $00000000 VOL: 0
;PCODE: $00000001 VOL: 0
; 001B 0004 	iQueue_t * pviQueue;
; 001B 0005 
; 001B 0006 	piQueueHandle_t ipvReturnQueueHandle = NULL;
; 001B 0007 	pviQueue = (iQueue_t *)malloc(sizeof(iQueue_t));
;PCODE: $00000002 VOL: 0
;PCODE: $00000003 VOL: 0
;	iItemQuantity_p -> Y+6
;	iItemLength_p -> Y+4
;	*pviQueue -> R16,R17
;	*ipvReturnQueueHandle -> R18,R19
;PCODE: $00000004 VOL: 0
;PCODE: $00000005 VOL: 0
;PCODE: $00000006 VOL: 0
;PCODE: $00000007 VOL: 0
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 0
; 001B 0008     if(pviQueue != NULL){
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
; 001B 0009         pviQueue->head = (void *)malloc((iItemQuantity_p*iItemLength_p));
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 001B 000A         if(pviQueue->head != NULL){
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 001B 000B             pviQueue->itemCount = 0;  //Empty
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 001B 000C             pviQueue->writeTo = pviQueue->head;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 001B 000D             pviQueue->readDataFrom = pviQueue->head;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 001B 000E             pviQueue->tail = pviQueue->head+((iItemQuantity_p*iItemLength_p)-iItemLength_p);
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 001B 000F             pviQueue->itemLength = iItemLength_p;  //size of type
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 001B 0010             pviQueue->itemQuantity = iItemQuantity_p; //Quantity of item
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 001B 0011             ipvReturnQueueHandle = pviQueue;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 001B 0012             printDebug("[iQueueCreate],itemCount(%d)\r\n",pviQueue->itemCount);
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 001B 0013             //printDebug("[iQueueCreate],itemCount2(%d)\r\n",((iQueue_t *)ipvReturnQueueHandle)->itemCount);
; 001B 0014         }else{
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 001B 0015             ipvReturnQueueHandle = (int *)(-1); //fail malloc
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 001B 0016             printDebug("[iQueueCreate],Queue(Elen size) is not created!.\r\n");
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 001B 0017         }
;PCODE: $00000052 VOL: 0
; 001B 0018     }else{
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 001B 0019        ipvReturnQueueHandle = (int *)(-1); //fail malloc
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 001B 001A        printDebug("[iQueueCreate],Queue is not created!.\r\n");
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 001B 001B     }
;PCODE: $0000005E VOL: 0
; 001B 001C     return ipvReturnQueueHandle;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 001B 001D }
;PCODE: $00000063 VOL: 0
;
;int iQueueSend(piQueueHandle_t const iQueue_p,const void* const piItem_p){
; 001B 001F int iQueueSend(piQueueHandle_t const iQueue_p,const void* const piItem_p){
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 001B 0020     int ivReturn;
; 001B 0021     //int buffTest;
; 001B 0022     //iSTData_t idata;
; 001B 0023     iQueue_t * const piQueue = (iQueue_t *)iQueue_p;
; 001B 0024     //printDebug("[iQueueSend],itemCount(%d)\r\n",((iQueue_t * const)iQueue_p)->itemCount);
; 001B 0025     if(piQueue != NULL){
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;	*iQueue_p -> Y+6
;	*piItem_p -> Y+4
;	ivReturn -> R16,R17
;	*piQueue -> R18,R19
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 001B 0026         if(piQueue->itemCount == 0){
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 001B 0027             printDebug("<iQueueSend>status(empty)\r\n");
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 001B 0028             piQueue->writeTo = piQueue->head;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 001B 0029             piQueue->readDataFrom = piQueue->head;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 001B 002A 
; 001B 002B             piQueue->itemCount++;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 001B 002C             memcpy((void*)piQueue->writeTo,piItem_p,piQueue->itemLength);
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 001B 002D 
; 001B 002E 
; 001B 002F             //test read
; 001B 0030 //            memcpy(&buffTest,(void*)piQueue->writeTo,piQueue->itemLength);
; 001B 0031 //            printf("<iQueueSend>data = %d\r\n",buffTest);
; 001B 0032 //            memcpy(&idata,(void*)piQueue->writeTo,piQueue->itemLength);
; 001B 0033 //            printf("<iQueueSend>data len(%d)\r\n",idata.length);
; 001B 0034 
; 001B 0035             piQueue->writeTo += piQueue->itemLength; //address will write data a next.
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 001B 0036             ivReturn = 1;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 001B 0037         }else if((piQueue->itemCount > 0) && (piQueue->itemCount < piQueue->itemQuantity) ){
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 001B 0038             piQueue->itemCount++;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 001B 0039             memcpy((void*)piQueue->writeTo,piItem_p,piQueue->itemLength);
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 001B 003A 
; 001B 003B             //test read
; 001B 003C //            memcpy(&buffTest,(void*)piQueue->writeTo,piQueue->itemLength);
; 001B 003D //            printf("<iQueueSend>data = %d\r\n",buffTest);
; 001B 003E //            memcpy(&idata,(void*)piQueue->writeTo,piQueue->itemLength);
; 001B 003F //            printf("<iQueueSend>data len(%d)\r\n",idata.length);
; 001B 0040 
; 001B 0041             piQueue->writeTo += piQueue->itemLength; //address will write data a next.
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 001B 0042             ivReturn = 1;
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 001B 0043         }else if((piQueue->itemCount) < 0 || (piQueue->itemCount > piQueue->itemQuantity)){
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 001B 0044             printDebug("<iQueueSend>status(item count is not range)\r\n)");
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 001B 0045             ivReturn = -1;
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 001B 0046             //while(1); //reset wdt
; 001B 0047         }else if(piQueue->itemCount == piQueue->itemQuantity){
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 001B 0048             piQueue->writeTo = piQueue->head;
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 001B 0049             printDebug("<iQueueSend>status(full and wait)\r\n");
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 001B 004A             ivReturn = -1;
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 001B 004B         }
; 001B 004C         //printf("<iQueueSend>item count(%d)\r\n",piQueue->itemCount);
; 001B 004D     }else{
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 001B 004E         ivReturn = -1; //fail malloc ref = NULL
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 001B 004F     }
;PCODE: $00000100 VOL: 0
; 001B 0050     //printf("<iQueueSend>count(%d)\r\n",piQueue->itemCount);
; 001B 0051     printDebug("<iQueueSend>count(%d)\r\n",piQueue->itemCount);
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 001B 0052     return ivReturn;
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 001B 0053 }
;PCODE: $00000111 VOL: 0
;
;int iQueueReceive(piQueueHandle_t iQueue_p,void* const piItem_p){
; 001B 0055 int iQueueReceive(piQueueHandle_t iQueue_p,void* const piItem_p){
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 001B 0056     int ivReturn;
; 001B 0057     //int buffTest;
; 001B 0058     iQueue_t * const piQueue = (iQueue_t *)iQueue_p;
; 001B 0059 
; 001B 005A     if(piQueue != NULL){
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;	*iQueue_p -> Y+6
;	*piItem_p -> Y+4
;	ivReturn -> R16,R17
;	*piQueue -> R18,R19
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 001B 005B         if(piQueue->itemCount == 0){
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 001B 005C             //printf("<iQueueReceive>QueueItem is empty it can not read.\r\n");
; 001B 005D             printDebug("<iQueueReceive>QueueItem is empty it can not read.\r\n");
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 001B 005E             ivReturn = -1;
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 001B 005F         }else if(piQueue->itemCount > 0){
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 001B 0060             //printf("<iQueueReceive>QueueItem is exist.\r\n");
; 001B 0061             printDebug("<iQueueReceive>QueueItem is exist.\r\n");
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 001B 0062             if(piQueue->readDataFrom < piQueue->tail){
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 001B 0063 
; 001B 0064                 piQueue->itemCount--;
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 001B 0065                 memcpy(piItem_p,(void*)piQueue->readDataFrom,piQueue->itemLength);
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 001B 0066                 //memcpy((void*)piQueue->writeTo,piItem_p,piQueue->itemLength);
; 001B 0067 
; 001B 0068 //                memcpy(&buffTest,(void*)piQueue->readDataFrom,piQueue->itemLength);
; 001B 0069 //                printf("<iQueueReceive>data = %d\r\n",buffTest);
; 001B 006A 
; 001B 006B                 piQueue->readDataFrom += piQueue->itemLength;
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 001B 006C                 ivReturn = 1;
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 001B 006D             }else if(piQueue->readDataFrom == piQueue->tail){
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 001B 006E                 piQueue->itemCount--;
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 001B 006F                 piQueue->readDataFrom = piQueue->head;
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 001B 0070             }
; 001B 0071         }
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 001B 0072     }else{
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 001B 0073         ivReturn = -1; //fail malloc ref = NULL
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 001B 0074     }
;PCODE: $00000176 VOL: 0
; 001B 0075     //printf("<iQueueReceive>count(%d)\r\n",piQueue->itemCount);
; 001B 0076     printDebug("<iQueueReceive>count(%d)\r\n",piQueue->itemCount);
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 001B 0077     return ivReturn;
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 001B 0078 }
;PCODE: $00000187 VOL: 0
