;/*****************************************************
;Project : SMA_AVR2560_V1 : 1
;Date    : 01/6/2015
;Author  : Next-Corp Team
;Company : Next-Corp Co.,Ltd.
;Comments:
;Version Format :
;
;
;Chip type               : ATmega2560
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;*****************************************************/
;#include <mega2560.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;//#include <stdlib.h>
;//#include <string.h>
;#include <delay.h>
;#include "main.h"
;#include "ims_eth_header.h"
;#include "debug.h"
;#include "uart.h"
;//#include "queue.h"
;#include "dataAndStatusTask.h"
;#include "managerTask.h"
;#include "debugTask.h"
;#include "communicateTask.h"
;#include "interruptTask.h"
;#include "deviceTask.h"
;#include "logTask.h"
;#include "eventTask.h"
;#include "lan.h"
;#include "smaProtocol.h"
;#include "sdManager.h"
;#include "database.h"
;
;#define MAX(a,b)                (((a) > (b)) ? (a) : (b))
;#define MIN(a,b)                (((a) < (b)) ? (a) : (b))
;//#define RANDOM(a,b)             ((rand() % (MAX(a,b) - MIN(a,b))) + MIN(a,b))
;
;#define PERIOD_CHECK_MEMORY     300
;
;// I2C Bus functions (for INT-AVXB-00-04)
;#asm
;PCODE: $0000000D VOL: 0
   .equ __i2c_port=0x0B ;PORTD
;PCODE: $0000000E VOL: 0
   .equ __sda_bit=1
;PCODE: $0000000F VOL: 0
   .equ __scl_bit=0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 002F #endasm
;
;//unsigned char FIRMWARE_VERSION[] = "COMM-ETH-0.01a";
;
;piQueueHandle_t pviQueueData1 = NULL;
;piQueueHandle_t pviQueueSensorToMang = NULL;
;piQueueHandle_t pviQueueMangToSensor = NULL;
;//piQueueHandle_t pviQueueMangToSDCard = NULL;
;
;piQueueHandle_t pviQueueMangToConfig = NULL;
;piQueueHandle_t pviQueueDeviceToMang = NULL;
;
;itaskHandel_t piDeviceTask = NULL;
;iData_t viBuffData;
;iData_t viRXData;
;iData_t viTXData;
;
;iDataMini_t viDataReport;
;iDataMini_t viStatusReport;
;iDataMini_t viEventReport;
;
;/*============================================================*/
;void main(void){
; 0000 0045 void main(void){

	.CSEG
;PCODE: $00000012 VOL: 0
; 0000 0046 
; 0000 0047 
; 0000 0048 
; 0000 0049     int err,i=0,k=0,res,last_status;
; 0000 004A     do{ err = initial_system();  }while(err);
;PCODE: $00000013 VOL: 0
;	err -> R16,R17
;	i -> R18,R19
;	k -> R20,R21
;	res -> Y+2
;	last_status -> Y+0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 004B 
; 0000 004C     printDebug("[main]Initial...\r\n");
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 004D 
; 0000 004E //    while(1){
; 0000 004F //        #asm("wdr")
; 0000 0050 //       delay_ms(1000);
; 0000 0051 //    }
; 0000 0052 
; 0000 0053 
; 0000 0054 //    pviQueueData1 = iQueueCreate(10,sizeof(int));
; 0000 0055 //	printDebug("<main>pviQueueData1 adr : %p\r\n",pviQueueData1);
; 0000 0056 //
; 0000 0057 //    if(iQueueSend(pviQueueData1,&a)==1){
; 0000 0058 //
; 0000 0059 //	}else{
; 0000 005A //		printDebug("<main>data can not sent a data(b) to pviQueueData1.\r\n");
; 0000 005B //	}
; 0000 005C //
; 0000 005D //    if(iQueueReceive(pviQueueData1,&b)==1){
; 0000 005E //        printDebug("<main>data : %d\r\n",b);
; 0000 005F //	}else{
; 0000 0060 //		printDebug("<main>data can not sent a data(b) to pviQueueData1.\r\n");
; 0000 0061 //	}
; 0000 0062     delay_ms(5000);
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0063     iWizReadConfig();
;PCODE: $00000029 VOL: 0
; 0000 0064 //    while(1){
; 0000 0065 //     #asm("wdr")
; 0000 0066 //     delay_ms(1000);
; 0000 0067 //    }
; 0000 0068 
; 0000 0069 //    ETH_switchMode((unsigned char) MODE_NORM);
; 0000 006A     if(iLanInit()){
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 006B         printDebug("[main]Lan Connected.\r\n");
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 006C     }else{
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 006D         printDebug("[main]Lan Fail.\r\n");
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 006E         iWizReadConfig();
;PCODE: $0000003D VOL: 0
; 0000 006F         iLanInit();
;PCODE: $0000003E VOL: 0
; 0000 0070     }
;PCODE: $0000003F VOL: 0
; 0000 0071 
; 0000 0072     iInitSDCard();
;PCODE: $00000040 VOL: 0
; 0000 0073 
; 0000 0074     ///////////////create queue////////////////
; 0000 0075     pviQueueSensorToMang = iQueueCreate(2,sizeof(iSensorData_t));
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0076     if(pviQueueSensorToMang == (int *)(-1)){
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0077        printDebug("[main],pviQueueSensorToMang can not create.\r\n");
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0078     }else{
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0079        printDebug("[main],pviQueueSensorToMang can create.\r\n");
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 007A //       printDebug("[main],Queue->Quantity(%d).\r\n",((iQueue_t *)pviQueueSensorToMang)->itemCount);
; 0000 007B     }
;PCODE: $0000005A VOL: 0
; 0000 007C 
; 0000 007D     pviQueueMangToConfig = iQueueCreate(2,sizeof(iConfigFormat_t));
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 007E     if(pviQueueMangToConfig == (int *)(-1)){
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 007F        printDebug("[main],pviQueueMangToConfig can not create.\r\n");
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0080     }else{
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0081        printDebug("[main],pviQueueMangToConfig can create.\r\n");
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0082     }
;PCODE: $00000074 VOL: 0
; 0000 0083 
; 0000 0084     pviQueueDeviceToMang = iQueueCreate(1,sizeof(unsigned char));
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0085     if(pviQueueDeviceToMang == (int *)(-1)){
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0086        printDebug("[main],pviQueueDeviceToMang can not create.\r\n");
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0087     }else{
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0088        printDebug("[main],pviQueueDeviceToMang can create.\r\n");
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 0089     }
;PCODE: $0000008E VOL: 0
; 0000 008A 
; 0000 008B //    pviQueueMangToSensor = iQueueCreate(10,sizeof(int));
; 0000 008C //    if(pviQueueMangToSensor == (int *)(-1)){
; 0000 008D //       printDebug("<main>pviQueueSensorToMang can not create.\r\n");
; 0000 008E //    }
; 0000 008F 
; 0000 0090     ///////////////create task////////////////
; 0000 0091     piDeviceTask = iTaskCreate(logTask,"logger",5);
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 0092     if(piDeviceTask){
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0093         printDebug("<main>logTask addr : %p\r\n",piDeviceTask);
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 0094     }
; 0000 0095 
; 0000 0096     piDeviceTask = iTaskCreate(dataAndStatusTask,"dataAndStatus",5);
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 0097     if(piDeviceTask){
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 0098         printDebug("<main>sensorTask addr : %p\r\n",piDeviceTask);
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 0099     }
; 0000 009A //    printDebug("[main],Queue->Quantity(%d).\r\n",((iQueue_t *)pviQueueSensorToMang)->itemCount);
; 0000 009B     piDeviceTask = iTaskCreate(managerTask,"mang",5);
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 009C     if(piDeviceTask){
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 009D         printDebug("<main>managerTask addr : %p\r\n",piDeviceTask);
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 009E     }
; 0000 009F 
; 0000 00A0 
; 0000 00A1 //
; 0000 00A2 //    piDeviceTask = iTaskCreate(debugTask,"debug",5);
; 0000 00A3 //    if(piDeviceTask){
; 0000 00A4 //        printDebug("<main>debugTask addr : %p\r\n",&piDeviceTask);
; 0000 00A5 //    }
; 0000 00A6 //
; 0000 00A7 //    piDeviceTask = iTaskCreate(communicateTask,"commu",5);
; 0000 00A8 //    if(piDeviceTask){
; 0000 00A9 //        printDebug("<main>communicateTask addr : %p\r\n",&piDeviceTask);
; 0000 00AA //    }
; 0000 00AB //
; 0000 00AC //    piDeviceTask = iTaskCreate(interruptTask,"intp",10);
; 0000 00AD //    if(piDeviceTask){
; 0000 00AE //        printDebug("<main>interruptTask addr : %p\r\n",&piDeviceTask);
; 0000 00AF //    }
; 0000 00B0 //
; 0000 00B1 //    piDeviceTask = iTaskCreate(deviceTask,"device",5);
; 0000 00B2 //    if(piDeviceTask){
; 0000 00B3 //        printDebug("<main>deviceTask addr : %p\r\n",&piDeviceTask);
; 0000 00B4 //    }
; 0000 00B5 
; 0000 00B6     piDeviceTask = iTaskCreate(eventTask,"event",5);
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 00B7     if(piDeviceTask){
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 00B8         printDebug("<main>eventTask addr : %p\r\n",piDeviceTask);
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 00B9     }
; 0000 00BA 
; 0000 00BB    startSchedulerTask();
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 00BC }
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0

	.DSEG
_0xE:
	.BYTE 0x20
