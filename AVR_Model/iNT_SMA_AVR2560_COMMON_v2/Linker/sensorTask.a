;#include <delay.h>
;#include "sensorTask.h"
;#include "sensorManager.h"
;#include "statusManager.h"
;#include "sensor.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include "dht11.h"
;
;unsigned int viSwitchContextSensor;
;
;extern piQueueHandle_t pviQueueTaskAToTaskB;
;
;extern piQueueHandle_t pviQueueSensorToMang;
;extern piQueueHandle_t pviQueueMangToSensor;
;
;extern iDataMini_t viDataReport;
;extern iDataMini_t viStatusReport;
;
;iSensorData_t pviSensorData;
;
;//void task_a(void *pviParameter){
;//    pTaskHandle pviReturn;
;//    char buffferQueue[10] = "bongkot";
;//    char buffferQueue2[10] = "chaiwaree";
;//    iData_t data;
;//
;//    memcpy(data.value,buffferQueue,sizeof(buffferQueue));
;//    data.length = sizeof(buffferQueue);
;//
;//    if(iQueueSend(pviQueueTaskAToTaskB,&data)==1){
;//        printDebug("<main>pviQueueTaskAToTaskB can sent a data.\r\n");
;//    }else{
;//        printDebug("<main>data can not sent a data(a) to pviQueueData1.\r\n");
;//    }
;//
;//    memcpy(data.value,buffferQueue2,sizeof(buffferQueue));
;//    data.length = sizeof(buffferQueue2);
;//
;//    if(iQueueSend(pviQueueTaskAToTaskB,&data)==1){
;//        iQueueReadMyself(pviQueueTaskAToTaskB);
;//        printDebug("<main>pviQueueTaskAToTaskB can sent a data.\r\n");
;//    }else{
;//        printDebug("<main>data can not sent a data(a) to pviQueueData1.\r\n");
;//    }
;//}
;void sensorTask(void *pviParameter){
; 001E 002D void sensorTask(void *pviParameter){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 001E 002E     printDebug("<sensorTask>Task Running...\r\n");
;PCODE: $0000000F VOL: 0
;	*pviParameter -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 001E 002F 
; 001E 0030 //    swContextSensor();
; 001E 0031 //    swContextSensor();
; 001E 0032 
; 001E 0033     //printDebug("[sensorTask],Queue->Quantity(%d).\r\n",((iQueue_t *)pviQueueSensorToMang)->itemCount);
; 001E 0034 //    if(iQueueSend(pviQueueSensorToMang,&pviSensorData)==1){
; 001E 0035 //        printDebug("<sensorTask>pviQueueSensorToMang can sent a data.\r\n");
; 001E 0036 //    }else{
; 001E 0037 //        printDebug("<sensorTask>data can not sent a data to pviQueueSensorToMang.\r\n");
; 001E 0038 //    }
; 001E 0039 
; 001E 003A     iSensorRead(&viDataReport);
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 001E 003B     iStatusRead(&viStatusReport);
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 001E 003C     #asm("wdr")
;PCODE: $0000001B VOL: 0
	wdr
;PCODE: $0000001C VOL: 0
; 001E 003D     delay_ms(1000);
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 001E 003E     #asm("wdr")
;PCODE: $0000001F VOL: 0
	wdr
;PCODE: $00000020 VOL: 0
; 001E 003F }
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;//
;//void swContextSensor(){
;//     unsigned int i;
;//     ST_DHT11 *dhtDevice;
;//     int viReturn;
;//     //pviSensorData_t  pviSensorData;
;//     #asm("wdr")
;//     if(viSwitchContextSensor == SENSER_MAX_TYPE){
;//          viSwitchContextSensor = 0;
;//     }
;//     switch(viSwitchContextSensor){
;//         case SENSOR_ADC:{
;//            for(i=0;i<SENSER_ADC_MAX_SIZE;i++){
;//                //printDebug("ACD[%d] : %d\r\n",(i+1),read_adc(8+i));
;//                pviSensorData.adc[i] =  read_adc(8+i);
;//            }
;//            break;
;//         }
;//         case SENSOR_DIGI:{
;//            delay_ms(300);
;//            viReturn =DHT11Read(dhtDevice);
;//            if(viReturn==DHT11_SUCCESS){
;//               //printDebug("DHT11 Temp-c(%f), Humidity(%f)\r\n",dhtDevice->temp,dhtDevice->humi);
;//               pviSensorData.dht11Temp = dhtDevice->temp;
;//               pviSensorData.dht11Humi = dhtDevice->humi;
;//            }else if(viReturn==DHT11_ERROR_CHECKSUM){
;//               printDebug("DHT11 errer(check sum).\r\n");
;//            }else if(viReturn==DHT11_ERROR_TIMEOUT){
;//               printDebug("DHT11 errer(time out).\r\n");
;//            }
;//            break;
;//         }
;//         default:{
;//            break;
;//         }
;//     }
;//     ++ viSwitchContextSensor;
;//}
