;#include "database.h"
;#include "sdManager.h"
;
;
;extern iChar_t viFolderDataName[];
;extern iChar_t viFolderDataLogName[];
;//extern iChar_t viFolderEventName[];
;//extern iChar_t viFolderStatusName[];
;//extern iChar_t viFolderErrorName[];
;//extern iChar_t viFolderConfigName[];
;
;extern iChar_t viDirRootPath[];
;extern iChar_t viDirDataPath[];
;//extern iChar_t viDirDataLogPath[];
;//extern iChar_t viDirEventPath[];
;//extern iChar_t viDirStatusPath[];
;//extern iChar_t viDirErrorPath[];
;extern iChar_t viDirConfigPath[];
;
;extern iChar_t viDataFName[];
;//extern iChar_t viDataLogFName[];
;//extern iChar_t viEventFName[];
;//extern iChar_t viStatusFName[];
;//extern iChar_t viErrorFName[];
;extern iChar_t viConfigFName[];
;
;piDataBaseHandle_t pviDataBaseHandle = NULL;
;eeprom unsigned int viLineID=0;
;
;
;
;iChar_t iDataUpdate(const iUInt_t viRecordID_arg,iUChar_t viStatus_arg,iChar_t const * const pviDataBuffer_arg,iUInt_t viLength_arg){    //update status         //'N' log and not send data , 'Y' sent data ,'S' settlemented
; 0026 0020 iChar_t iDataUpdate(const iUInt_t viRecordID_arg,iUChar_t viStatus_arg,iChar_t const * const pviDataBuffer_arg,iUInt_t viLength_arg){

	.CSEG
;PCODE: $00000000 VOL: 0
;PCODE: $00000001 VOL: 0
; 0026 0021     iDB_t *pviDBLogger;
; 0026 0022     //iInt_t viReturnID = -1;
; 0026 0023     iChar_t viReturn = 0;
; 0026 0024     iChar_t *pviDataBuffInsert;
; 0026 0025     //const iChar_t viStatusField = 'Y';
; 0026 0026     iChar_t viStatusField = (const char)viStatus_arg;
; 0026 0027     iChar_t viDataBuff[DB_BLOCK_BUFFER_def];
; 0026 0028     unsigned int viRecordID = 0;
; 0026 0029     unsigned long indexWrite = 0;
; 0026 002A     unsigned long indexWriteFile = 0;
; 0026 002B     unsigned long indexReadFile = 0;
; 0026 002C     unsigned long viFileSize = 0;
; 0026 002D     unsigned long viRecordIDBuff = 0;
; 0026 002E 
; 0026 002F     #asm("wdr")
;PCODE: $00000002 VOL: 0
;PCODE: $00000003 VOL: 0
;PCODE: $00000004 VOL: 0
;PCODE: $00000005 VOL: 0
;PCODE: $00000006 VOL: 0
;PCODE: $00000007 VOL: 0
;PCODE: $00000008 VOL: 0
;	viRecordID_arg -> Y+289
;	viStatus_arg -> Y+288
;	*pviDataBuffer_arg -> Y+286
;	viLength_arg -> Y+284
;	*pviDBLogger -> R16,R17
;	viReturn -> R19
;	*pviDataBuffInsert -> R20,R21
;	viStatusField -> R18
;	viDataBuff -> Y+28
;	viRecordID -> Y+26
;	indexWrite -> Y+22
;	indexWriteFile -> Y+18
;	indexReadFile -> Y+14
;	viFileSize -> Y+10
;	viRecordIDBuff -> Y+6
;PCODE: $00000009 VOL: 0
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
	wdr
;PCODE: $0000000E VOL: 0
; 0026 0030     if(viRecordID_arg <= 0){    //reserv a all select
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0026 0031         viReturn = 0;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0026 0032         return viReturn;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0026 0033     }else if(viRecordID_arg == 1){
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0026 0034         indexReadFile = 0;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0026 0035     }else if(viRecordID_arg > 1){
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0026 0036         indexReadFile = (DB_BLOCK_BUFFER_def*(viRecordID_arg-1));
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0026 0037     }
; 0026 0038     pviDBLogger = (iDB_t * const)malloc(sizeof(iDB_t));
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0026 0039     if(pviDBLogger!=NULL){
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0026 003A         memset(viDataBuff,0,sizeof(viDataBuff));
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0026 003B         printDebug("[iDataUpdate]Check file.\r\n");
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0026 003C         viReturn = iFSize((char const * const)viDirDataPath,(char const * const)viDataFName,&viFileSize);
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0026 003D         if(viReturn == 1){
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0026 003E            if(viFileSize == 0){
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0026 003F               printDebug("[iDataUpdate]File is empty.\r\n");
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0026 0040            }else{  //read last record id
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0026 0041               printDebug("[iDataUpdate]File size(%ld),Read RecordID(%ld),Index read(%ld).\r\n",viFileSize,viRecordID_arg,indexReadFile);
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0026 0042               iFRead(viDataBuff,(iUInt_t)DB_BLOCK_READ_def,(char const * const)viDirDataPath,(char const * const)viDataFName,&indexReadFile);
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0026 0043               printDebug("[iDataUpdate]Read data:[\r\n");
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0026 0044               print_payload(viDataBuff,DB_BLOCK_BUFFER_def);
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0026 0045               printDebug("]\r\n");
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0026 0046               memcpy(&viRecordIDBuff,viDataBuff,2);
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0026 0047               if(viRecordIDBuff!=viRecordID_arg){
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0026 0048                  printDebug("[iDataUpdate]mem diff allocate.\r\n");
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0026 0049               }else{
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0026 004A                  printDebug("[iDataUpdate]Record id(%ld),status send(%c).\r\n",viRecordID_arg,viDataBuff[2]);
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0026 004B               }
;PCODE: $000000A0 VOL: 0
; 0026 004C            }
;PCODE: $000000A1 VOL: 0
; 0026 004D 
; 0026 004E             if(viRecordID_arg <= 0){    //reserv a all select
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0026 004F                 viReturn = 0;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0026 0050                 return viReturn;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0026 0051             }else if(viRecordID_arg == 1){
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0026 0052                 indexWriteFile = 0;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0026 0053             }else if(viRecordID_arg > 1){
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0026 0054                 indexWriteFile = (DB_BLOCK_BUFFER_def*(viRecordID_arg-1));
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0026 0055             }
; 0026 0056 
; 0026 0057             indexWrite = 0;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0026 0058             memcpy(&viDataBuff[indexWrite],&viStatusField,1);
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0026 0059             indexWrite += 1;
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0026 005A 
; 0026 005B             if(viStatus_arg == 'L'){
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0026 005C                 memcpy(&viDataBuff[indexWrite],&viLength_arg,2);
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0026 005D                 indexWrite += 2;
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0026 005E                 memcpy(&viDataBuff[indexWrite],&pviDataBuffer_arg[0],viLength_arg);
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0026 005F                 indexWrite += viLength_arg;
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0026 0060             }
; 0026 0061 
; 0026 0062 
; 0026 0063             pviDBLogger->viTable.length = indexWrite;
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0026 0064             pviDBLogger->viTable.value = viDataBuff;
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0026 0065 
; 0026 0066             indexWriteFile += 2;             //go to status addr
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0026 0067             printDebug("[iDataUpdate]File size(%ld),Read RecordID(%ld),Index write(%ld).\r\n",viFileSize,viRecordID_arg,(indexWriteFile));
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0026 0068             iFRwite(pviDBLogger->viTable.value,indexWrite,(const char*)viDirDataPath,(const char*)viDataFName,&indexWriteFile);
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0026 0069 
; 0026 006A 
; 0026 006B             iFRead(viDataBuff,(iUInt_t)DB_BLOCK_READ_def,(char const * const)viDirDataPath,(char const * const)viDataFName,&indexReadFile);
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0026 006C             printDebug("[iDataUpdate]Read data:[\r\n");
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0026 006D             print_payload(viDataBuff,DB_BLOCK_BUFFER_def);
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0026 006E             printDebug("]\r\n");
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0026 006F             memcpy(&viRecordIDBuff,viDataBuff,2);
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0026 0070             if(viRecordIDBuff!=viRecordID_arg){
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0026 0071                printDebug("[iDataUpdate]mem diff allocate.\r\n");
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0026 0072             }else{
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0026 0073               printDebug("[iDataUpdate]Record id(%d),status send(%c).\r\n",viRecordID_arg,viDataBuff[2]);
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0026 0074             }
;PCODE: $0000014B VOL: 0
; 0026 0075 
; 0026 0076 
; 0026 0077 
; 0026 0078             printDebug("[iDataUpdate]Update is success.\r\n");
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0026 0079             viReturn = 1;
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0026 007A             //viReturnID = viRecordID;
; 0026 007B         }else{
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0026 007C             //viReturnID = -1;
; 0026 007D             viReturn = 0;
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0026 007E         }
;PCODE: $00000159 VOL: 0
; 0026 007F 
; 0026 0080 
; 0026 0081     }else{
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0026 0082         viReturn = 0;
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0026 0083         printDebug("[iDataUpdate]Databuff_arg can't allocate mem.\r\n");
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0026 0084     }
;PCODE: $00000165 VOL: 0
; 0026 0085 
; 0026 0086     free(pviDBLogger);
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0026 0087 
; 0026 0088     //return viReturnID;
; 0026 0089     return viReturn;
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0026 008A }
;PCODE: $0000016C VOL: 0
;
;iInt_t iDataInsert(iChar_t const * const pviDataBuffer_arg,iUInt_t viLength_arg){
; 0026 008C iInt_t iDataInsert(iChar_t const * const pviDataBuffer_arg,iUInt_t viLength_arg){
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0026 008D     iDB_t *pviDBLogger;
; 0026 008E     iInt_t viReturnID = 0;
; 0026 008F     iChar_t *pviDataBuffInsert;
; 0026 0090     iChar_t viReturn = 0;
; 0026 0091     const iChar_t viStatusField = 'N';
; 0026 0092     iChar_t viDataBuff[DB_BLOCK_BUFFER_def];
; 0026 0093     unsigned int viRecordID = 0;
; 0026 0094     unsigned long indexWrite = 0;
; 0026 0095     unsigned long indexWriteFile = 0;
; 0026 0096     unsigned long indexReadFile = 0;
; 0026 0097     unsigned long viFileSize = 0;
; 0026 0098 
; 0026 0099     #asm("wdr")
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;	*pviDataBuffer_arg -> Y+284
;	viLength_arg -> Y+282
;	*pviDBLogger -> R16,R17
;	viReturnID -> R18,R19
;	*pviDataBuffInsert -> R20,R21
;	viReturn -> Y+281
;	viStatusField -> Y+280
;	viDataBuff -> Y+24
;	viRecordID -> Y+22
;	indexWrite -> Y+18
;	indexWriteFile -> Y+14
;	indexReadFile -> Y+10
;	viFileSize -> Y+6
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
	wdr
;PCODE: $00000179 VOL: 0
; 0026 009A     pviDBLogger = (iDB_t * const)malloc(sizeof(iDB_t));
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0026 009B     if(pviDBLogger!=NULL){
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0026 009C         memset(viDataBuff,0,sizeof(viDataBuff));
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0026 009D         printDebug("[iDataInsert]Check file.\r\n");
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0026 009E         viReturn = iFSize((char const * const)viDirDataPath,(char const * const)viDataFName,&viFileSize);
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0026 009F         if(viReturn==1){
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0026 00A0            if(viFileSize == 0){
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0026 00A1               viLineID = 0;
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0026 00A2               indexWriteFile = 0;
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0026 00A3               printDebug("[iDataInsert]File is empty.\r\n");
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0026 00A4            }else{  //read last record id
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0026 00A5               if(viLineID <= 0){    //reserv a all select
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0026 00A6                   if((viFileSize/DB_BLOCK_BUFFER_def)>1){
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0026 00A7                      indexReadFile = (DB_BLOCK_BUFFER_def*((viFileSize/DB_BLOCK_BUFFER_def)-1));
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
; 0026 00A8                   }
; 0026 00A9               }else if(viLineID == 1){
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
; 0026 00AA                   indexReadFile = 0;
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
; 0026 00AB               }else if(viLineID > 1){
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
; 0026 00AC                   indexReadFile = (DB_BLOCK_BUFFER_def*(viLineID-1));
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
; 0026 00AD               }
; 0026 00AE 
; 0026 00AF //              if((viFileSize/DB_BLOCK_BUFFER_def)==1){
; 0026 00B0 //                 indexRead = 0;
; 0026 00B1 //              }else if((viFileSize/DB_BLOCK_BUFFER_def)>1){
; 0026 00B2 //                 indexRead = (DB_BLOCK_BUFFER_def*((viFileSize/DB_BLOCK_BUFFER_def)-1));
; 0026 00B3 //              }
; 0026 00B4               iFRead(viDataBuff,(iUInt_t)DB_BLOCK_READ_def,(char const * const)viDirDataPath,(char const * const)viDataFName,&indexReadFile);
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
; 0026 00B5               memcpy(&viRecordID,&viDataBuff[0],2);
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0026 00B6               printDebug("[iDataInsert]Last record id(%d).\r\n",viRecordID);
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
; 0026 00B7               viLineID = viRecordID;
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
; 0026 00B8            }
;PCODE: $000001EE VOL: 0
; 0026 00B9 
; 0026 00BA 
; 0026 00BB             viRecordID = ++viLineID;
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
; 0026 00BC             if(viRecordID <= 0){    //reserv a all select
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
; 0026 00BD                 viReturnID = 0;
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
; 0026 00BE                 return 0;
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
; 0026 00BF             }else if(viRecordID == 1){
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
; 0026 00C0                 indexWriteFile = 0;
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
; 0026 00C1             }else if(viRecordID > 1){
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
; 0026 00C2                 indexWriteFile = (unsigned long)(DB_BLOCK_BUFFER_def*(viRecordID-1));
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
; 0026 00C3             }
; 0026 00C4 
; 0026 00C5             indexWrite = 0;
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
; 0026 00C6             memcpy(&viDataBuff[indexWrite],&viRecordID,2);
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
; 0026 00C7             indexWrite += 2;
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
; 0026 00C8             memcpy(&viDataBuff[indexWrite],&viStatusField,1);
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
; 0026 00C9             indexWrite += 1;
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
; 0026 00CA             memcpy(&viDataBuff[indexWrite],&viLength_arg,2);
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
; 0026 00CB             indexWrite += 2;
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
; 0026 00CC             memcpy(&viDataBuff[indexWrite],&pviDataBuffer_arg[0],viLength_arg);
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
; 0026 00CD             indexWrite += viLength_arg;
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
; 0026 00CE 
; 0026 00CF             pviDBLogger->viTable.length = indexWrite;
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
; 0026 00D0             pviDBLogger->viTable.value = viDataBuff;
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
; 0026 00D1             iFRwite(pviDBLogger->viTable.value,sizeof(viDataBuff),(const char*)viDirDataPath,(const char*)viDataFName,&indexWriteFile);
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
; 0026 00D2 
; 0026 00D3 
; 0026 00D4 
; 0026 00D5             printDebug("[iDataInsert]Insert is success.\r\n");
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
; 0026 00D6             viReturnID = viRecordID;
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
; 0026 00D7         }else{
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
; 0026 00D8             viReturnID = 0;
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
; 0026 00D9         }
;PCODE: $00000261 VOL: 0
; 0026 00DA 
; 0026 00DB 
; 0026 00DC     }else{
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
; 0026 00DD         printDebug("[iDataInsert]Databuff_arg can't allocate mem.\r\n");
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
; 0026 00DE     }
;PCODE: $0000026B VOL: 0
; 0026 00DF 
; 0026 00E0     free(pviDBLogger);
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
; 0026 00E1 
; 0026 00E2     return viReturnID;
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
; 0026 00E3 }
;PCODE: $00000272 VOL: 0
;
;iChar_t iDataSelect(const iUInt_t viRecordID_arg,iData_t * pviOutDataBuff_arg){             //'N' log and not send data , 'Y' sent data ,'S' settlemented
; 0026 00E5 iChar_t iDataSelect(const iUInt_t viRecordID_arg,iData_t * pviOutDataBuff_arg){
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
; 0026 00E6     iDB_t *pviDBLogger;
; 0026 00E7     iChar_t viReturn = 0;
; 0026 00E8     iChar_t *pviDataBuffInsert;
; 0026 00E9     iChar_t viDataBuff[DB_BLOCK_BUFFER_def];
; 0026 00EA     unsigned int viRecordID = 0;
; 0026 00EB     unsigned long indexReadFile = 0;
; 0026 00EC     unsigned int viLenOfData = 0;
; 0026 00ED     unsigned long viFileSize = 0;
; 0026 00EE     unsigned int viRecordIDBuff = 0;
; 0026 00EF 
; 0026 00F0     #asm("wdr")
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;	viRecordID_arg -> Y+278
;	*pviOutDataBuff_arg -> Y+276
;	*pviDBLogger -> R16,R17
;	viReturn -> R19
;	*pviDataBuffInsert -> R20,R21
;	viDataBuff -> Y+20
;	viRecordID -> Y+18
;	indexReadFile -> Y+14
;	viLenOfData -> Y+12
;	viFileSize -> Y+8
;	viRecordIDBuff -> Y+6
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
	wdr
;PCODE: $0000027F VOL: 0
; 0026 00F1     if(viRecordID_arg <= 0){    //reserv a all select
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
; 0026 00F2         printDebug("[iDataSelect]RecordID(%d) fail.\r\n",viRecordID_arg);
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
; 0026 00F3         return -1;
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
; 0026 00F4         //indexReadFile = 0;
; 0026 00F5     }else if(viRecordID_arg == 1){
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
; 0026 00F6         indexReadFile = 0;
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
; 0026 00F7     }else if(viRecordID_arg > 1){
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
; 0026 00F8         indexReadFile = (DB_BLOCK_BUFFER_def*(viRecordID_arg-1));
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
; 0026 00F9     }
; 0026 00FA     pviDBLogger = (iDB_t * const)malloc(sizeof(iDB_t));
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
; 0026 00FB     if(pviDBLogger!=NULL){
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
; 0026 00FC         memset(viDataBuff,0,sizeof(viDataBuff));
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
; 0026 00FD         printDebug("[iDataSelect]Check file.\r\n");
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
; 0026 00FE         viReturn = iFSize((char const * const)viDirDataPath,(char const * const)viDataFName,&viFileSize);
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
; 0026 00FF         if(viReturn==1){
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
; 0026 0100            if(viFileSize == 0){
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
; 0026 0101               printDebug("[iDataSelect]File is empty.\r\n");
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
; 0026 0102            }else{
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
; 0026 0103               printDebug("[iDataSelect]File size(%ld),Read RecordID(%d),Index read(%ld).\r\n",viFileSize,viRecordID_arg,indexReadFile);
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
; 0026 0104               iFRead(viDataBuff,(iUInt_t)DB_BLOCK_READ_def,(char const * const)viDirDataPath,(char const * const)viDataFName,&indexReadFile);
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
; 0026 0105 
; 0026 0106               memcpy(&viLenOfData,&viDataBuff[3],2);
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
; 0026 0107               memcpy(&pviOutDataBuff_arg->value[0],&viDataBuff[5],viLenOfData);
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
; 0026 0108               pviOutDataBuff_arg->length = viLenOfData;
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
; 0026 0109               //print_payload(viDataBuff,DB_BLOCK_BUFFER_def);
; 0026 010A               memcpy(&viRecordIDBuff,(unsigned int *)&viDataBuff[0],2);
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
; 0026 010B               if(viRecordIDBuff!=viRecordID_arg){
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
; 0026 010C                  printDebug("[iDataSelect]mem diff allocate.\r\n");
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
; 0026 010D               }else{
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
; 0026 010E                  printDebug("[iDataSelect]Record id(%d),status send(%c).\r\n",viRecordID_arg,viDataBuff[2]);
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
; 0026 010F               }
;PCODE: $00000317 VOL: 0
; 0026 0110            }
;PCODE: $00000318 VOL: 0
; 0026 0111 
; 0026 0112            printDebug("[iDataSelect]iDataSelect is success.\r\n");
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
; 0026 0113            viReturn = 1;
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
; 0026 0114 
; 0026 0115         }else{
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
; 0026 0116             viReturn = 0;
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
; 0026 0117         }
;PCODE: $00000326 VOL: 0
; 0026 0118 
; 0026 0119 
; 0026 011A     }else{
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
; 0026 011B         printDebug("[iDataSelect]Databuff_arg can't allocate mem.\r\n");
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
; 0026 011C     }
;PCODE: $00000330 VOL: 0
; 0026 011D 
; 0026 011E     free(pviDBLogger);
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
; 0026 011F 
; 0026 0120     return viReturn;
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
; 0026 0121 }
;PCODE: $00000337 VOL: 0
;
;iChar_t iDataSelectToSettlement(iUInt_t *pviOutData_arg,iUInt_t *pviOutLength_arg,iUChar_t viLimitRecord_arg){             //'N' log and not send data , 'Y' sent data ,'S' settlemented
; 0026 0123 iChar_t iDataSelectToSettlement(iUInt_t *pviOutData_arg,iUInt_t *pviOutLength_arg,iUChar_t viLimitRecord_arg){
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
; 0026 0124     iDB_t *pviDBLogger;
; 0026 0125     iChar_t viReturn = 0;
; 0026 0126     iChar_t *pviDataBuffInsert;
; 0026 0127     //iChar_t viDataBuff[DB_BLOCK_BUFFER_def];
; 0026 0128     iChar_t viDataBuff[6];
; 0026 0129     unsigned int viRecordID = 0;
; 0026 012A     unsigned long indexReadFile = 0;
; 0026 012B     unsigned int viLenOfData = 0;
; 0026 012C     unsigned long viFileSize = 0;
; 0026 012D     unsigned int viRecordIDBuff = 0;
; 0026 012E     iUInt_t i = 0,j=0;
; 0026 012F     unsigned int viRIDBuff[30];
; 0026 0130     iUInt_t viRIDLength = 0;
; 0026 0131     iUInt_t viIndexWrite = 0;
; 0026 0132 
; 0026 0133     #asm("wdr")
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
;	*pviOutData_arg -> Y+97
;	*pviOutLength_arg -> Y+95
;	viLimitRecord_arg -> Y+94
;	*pviDBLogger -> R16,R17
;	viReturn -> R19
;	*pviDataBuffInsert -> R20,R21
;	viDataBuff -> Y+88
;	viRecordID -> Y+86
;	indexReadFile -> Y+82
;	viLenOfData -> Y+80
;	viFileSize -> Y+76
;	viRecordIDBuff -> Y+74
;	i -> Y+72
;	j -> Y+70
;	viRIDBuff -> Y+10
;	viRIDLength -> Y+8
;	viIndexWrite -> Y+6
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
	wdr
;PCODE: $00000344 VOL: 0
; 0026 0134     memset(viDataBuff,0,sizeof(viDataBuff));
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
; 0026 0135     viReturn = iFSize((char const * const)viDirDataPath,(char const * const)viDataFName,&viFileSize);
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
; 0026 0136     if(viReturn==1){
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
; 0026 0137        if(viFileSize == 0){
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
; 0026 0138           printDebug("[iDataSelectToSettlement]File is empty.\r\n");
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
; 0026 0139           viReturn = 0;
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
; 0026 013A        }else{
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
; 0026 013B           if(viLimitRecord_arg<viLineID && (viLineID>0)){
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
; 0026 013C               i=0;
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
; 0026 013D               j=0;
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
; 0026 013E               do{
;PCODE: $00000375 VOL: 0
; 0026 013F                   #asm("wdr")
;PCODE: $00000376 VOL: 0
	wdr
;PCODE: $00000377 VOL: 0
; 0026 0140                   delay_us(4);
;PCODE: $00000378 VOL: 0
; 0026 0141                   iFRead(viDataBuff,(iUInt_t)4,(char const * const)viDirDataPath,(char const * const)viDataFName,&indexReadFile);
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
; 0026 0142                   //print_payload(viDataBuff,4);
; 0026 0143                   memcpy(&viRecordIDBuff,&viDataBuff[0],2);
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
; 0026 0144                   if(viRecordIDBuff==NULL){
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
;PCODE: $0000038C VOL: 0
; 0026 0145                      break;
;PCODE: $0000038D VOL: 0
; 0026 0146                   }
; 0026 0147 
; 0026 0148                   indexReadFile = (unsigned long)(DB_BLOCK_BUFFER_def*(++j));
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
; 0026 0149                   if(indexReadFile>((unsigned long)(DB_BLOCK_BUFFER_def*DB_ID_MAX_RECORD_def))){
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
; 0026 014A                        break;
;PCODE: $00000399 VOL: 0
; 0026 014B                   }
; 0026 014C 
; 0026 014D                   if((viDataBuff[2] == 'N') || (viDataBuff[2] == 'Y') || (viDataBuff[2] == 'L')){
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
; 0026 014E                        printDebug("[iDataSelectToSettlement]RID (%d),Status (%c).\r\n",viRecordIDBuff,viDataBuff[2]);
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
;PCODE: $000003A8 VOL: 0
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
; 0026 014F                        viRIDBuff[i++] = viRecordIDBuff;
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
;PCODE: $000003B7 VOL: 0
;PCODE: $000003B8 VOL: 0
;PCODE: $000003B9 VOL: 0
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
;PCODE: $000003BC VOL: 0
; 0026 0150                        viRIDLength = i;
;PCODE: $000003BD VOL: 0
;PCODE: $000003BE VOL: 0
; 0026 0151                        if(viRIDLength==viLimitRecord_arg){
;PCODE: $000003BF VOL: 0
;PCODE: $000003C0 VOL: 0
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
; 0026 0152                           break;
;PCODE: $000003C4 VOL: 0
; 0026 0153                        }
; 0026 0154                   }else if(viDataBuff[2] == 'S'){
;PCODE: $000003C5 VOL: 0
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
;PCODE: $000003C9 VOL: 0
;PCODE: $000003CA VOL: 0
; 0026 0155                        continue;
;PCODE: $000003CB VOL: 0
; 0026 0156                   }else{
;PCODE: $000003CC VOL: 0
;PCODE: $000003CD VOL: 0
; 0026 0157                        printDebug("[iDataSelectToSettlement]Status unknow(%c).\r\n",viDataBuff[2]);
;PCODE: $000003CE VOL: 0
;PCODE: $000003CF VOL: 0
;PCODE: $000003D0 VOL: 0
;PCODE: $000003D1 VOL: 0
;PCODE: $000003D2 VOL: 0
;PCODE: $000003D3 VOL: 0
;PCODE: $000003D4 VOL: 0
;PCODE: $000003D5 VOL: 0
;PCODE: $000003D6 VOL: 0
;PCODE: $000003D7 VOL: 0
; 0026 0158                   }
;PCODE: $000003D8 VOL: 0
;PCODE: $000003D9 VOL: 0
; 0026 0159 
; 0026 015A               }while(viRecordIDBuff<viLineID);
;PCODE: $000003DA VOL: 0
;PCODE: $000003DB VOL: 0
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
;PCODE: $000003DE VOL: 0
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
;PCODE: $000003E1 VOL: 0
; 0026 015B 
; 0026 015C               if(viRIDLength==viLimitRecord_arg){
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
;PCODE: $000003E4 VOL: 0
;PCODE: $000003E5 VOL: 0
;PCODE: $000003E6 VOL: 0
; 0026 015D                   printDebug("[iDataSelectToSettlement]RID count(%ld).\r\n",viRIDLength);
;PCODE: $000003E7 VOL: 0
;PCODE: $000003E8 VOL: 0
;PCODE: $000003E9 VOL: 0
;PCODE: $000003EA VOL: 0
;PCODE: $000003EB VOL: 0
;PCODE: $000003EC VOL: 0
;PCODE: $000003ED VOL: 0
;PCODE: $000003EE VOL: 0
;PCODE: $000003EF VOL: 0
;PCODE: $000003F0 VOL: 0
; 0026 015E                   printDebug("[iDataSelectToSettlement]Data:[\r\n");
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
;PCODE: $000003F3 VOL: 0
;PCODE: $000003F4 VOL: 0
;PCODE: $000003F5 VOL: 0
;PCODE: $000003F6 VOL: 0
;PCODE: $000003F7 VOL: 0
; 0026 015F                   for(i=0;i<viRIDLength;i++){
;PCODE: $000003F8 VOL: 0
;PCODE: $000003F9 VOL: 0
;PCODE: $000003FA VOL: 0
;PCODE: $000003FB VOL: 0
;PCODE: $000003FC VOL: 0
;PCODE: $000003FD VOL: 0
;PCODE: $000003FE VOL: 0
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
;PCODE: $00000401 VOL: 0
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
; 0026 0160                      if(i==(viRIDLength-1)){
;PCODE: $00000404 VOL: 0
;PCODE: $00000405 VOL: 0
;PCODE: $00000406 VOL: 0
;PCODE: $00000407 VOL: 0
;PCODE: $00000408 VOL: 0
; 0026 0161                         printDebug("%d",viRIDBuff[i]);
;PCODE: $00000409 VOL: 0
;PCODE: $0000040A VOL: 0
;PCODE: $0000040B VOL: 0
;PCODE: $0000040C VOL: 0
;PCODE: $0000040D VOL: 0
;PCODE: $0000040E VOL: 0
;PCODE: $0000040F VOL: 0
;PCODE: $00000410 VOL: 0
;PCODE: $00000411 VOL: 0
;PCODE: $00000412 VOL: 0
;PCODE: $00000413 VOL: 0
;PCODE: $00000414 VOL: 0
;PCODE: $00000415 VOL: 0
;PCODE: $00000416 VOL: 0
; 0026 0162                      }else{
;PCODE: $00000417 VOL: 0
;PCODE: $00000418 VOL: 0
; 0026 0163                         printDebug("%d,",viRIDBuff[i]);
;PCODE: $00000419 VOL: 0
;PCODE: $0000041A VOL: 0
;PCODE: $0000041B VOL: 0
;PCODE: $0000041C VOL: 0
;PCODE: $0000041D VOL: 0
;PCODE: $0000041E VOL: 0
;PCODE: $0000041F VOL: 0
;PCODE: $00000420 VOL: 0
;PCODE: $00000421 VOL: 0
;PCODE: $00000422 VOL: 0
;PCODE: $00000423 VOL: 0
;PCODE: $00000424 VOL: 0
;PCODE: $00000425 VOL: 0
;PCODE: $00000426 VOL: 0
; 0026 0164                      }
;PCODE: $00000427 VOL: 0
; 0026 0165                   }
;PCODE: $00000428 VOL: 0
;PCODE: $00000429 VOL: 0
;PCODE: $0000042A VOL: 0
;PCODE: $0000042B VOL: 0
;PCODE: $0000042C VOL: 0
;PCODE: $0000042D VOL: 0
;PCODE: $0000042E VOL: 0
; 0026 0166                   memcpy(&pviOutData_arg[0],&viRIDBuff[0],(viRIDLength*2));
;PCODE: $0000042F VOL: 0
;PCODE: $00000430 VOL: 0
;PCODE: $00000431 VOL: 0
;PCODE: $00000432 VOL: 0
;PCODE: $00000433 VOL: 0
;PCODE: $00000434 VOL: 0
;PCODE: $00000435 VOL: 0
;PCODE: $00000436 VOL: 0
;PCODE: $00000437 VOL: 0
; 0026 0167                   *pviOutLength_arg = viRIDLength;
;PCODE: $00000438 VOL: 0
;PCODE: $00000439 VOL: 0
;PCODE: $0000043A VOL: 0
; 0026 0168                   printDebug("]\r\n");
;PCODE: $0000043B VOL: 0
;PCODE: $0000043C VOL: 0
;PCODE: $0000043D VOL: 0
;PCODE: $0000043E VOL: 0
;PCODE: $0000043F VOL: 0
;PCODE: $00000440 VOL: 0
;PCODE: $00000441 VOL: 0
; 0026 0169                   viReturn = 1;
;PCODE: $00000442 VOL: 0
;PCODE: $00000443 VOL: 0
; 0026 016A               }
; 0026 016B           }else{
;PCODE: $00000444 VOL: 0
;PCODE: $00000445 VOL: 0
;PCODE: $00000446 VOL: 0
; 0026 016C             viReturn = 0;
;PCODE: $00000447 VOL: 0
;PCODE: $00000448 VOL: 0
; 0026 016D           }
;PCODE: $00000449 VOL: 0
; 0026 016E        }
;PCODE: $0000044A VOL: 0
; 0026 016F     }else{
;PCODE: $0000044B VOL: 0
;PCODE: $0000044C VOL: 0
; 0026 0170         viReturn = 0;
;PCODE: $0000044D VOL: 0
;PCODE: $0000044E VOL: 0
; 0026 0171     }
;PCODE: $0000044F VOL: 0
; 0026 0172 
; 0026 0173 
; 0026 0174     return viReturn;
;PCODE: $00000450 VOL: 0
;PCODE: $00000451 VOL: 0
;PCODE: $00000452 VOL: 0
;PCODE: $00000453 VOL: 0
; 0026 0175 }
;PCODE: $00000454 VOL: 0
;
;iUInt_t iDeviceConfigWrite(iChar_t const * const pviDataBuffer_arg,iUInt_t viLength_arg){
; 0026 0177 iUInt_t iDeviceConfigWrite(iChar_t const * const pviDataBuffer_arg,iUInt_t viLength_arg){
;PCODE: $00000455 VOL: 0
;PCODE: $00000456 VOL: 0
; 0026 0178     iUInt_t viReturn = 0;
; 0026 0179     iChar_t *pviDataBuffInsert;
; 0026 017A     iChar_t viDataBuff[DB_BLOCK_BUFFER_def];
; 0026 017B     unsigned long indexWriteFile = 0;
; 0026 017C     unsigned long viFileSize = 0;
; 0026 017D 
; 0026 017E     #asm("wdr")
;PCODE: $00000457 VOL: 0
;PCODE: $00000458 VOL: 0
;PCODE: $00000459 VOL: 0
;PCODE: $0000045A VOL: 0
;PCODE: $0000045B VOL: 0
;PCODE: $0000045C VOL: 0
;PCODE: $0000045D VOL: 0
;PCODE: $0000045E VOL: 0
;PCODE: $0000045F VOL: 0
;PCODE: $00000460 VOL: 0
;PCODE: $00000461 VOL: 0
;PCODE: $00000462 VOL: 0
;PCODE: $00000463 VOL: 0
;PCODE: $00000464 VOL: 0
;PCODE: $00000465 VOL: 0
;PCODE: $00000466 VOL: 0
;PCODE: $00000467 VOL: 0
;PCODE: $00000468 VOL: 0
;PCODE: $00000469 VOL: 0
;	*pviDataBuffer_arg -> Y+270
;	viLength_arg -> Y+268
;	viReturn -> R16,R17
;	*pviDataBuffInsert -> R18,R19
;	viDataBuff -> Y+12
;	indexWriteFile -> Y+8
;	viFileSize -> Y+4
;PCODE: $0000046A VOL: 0
;PCODE: $0000046B VOL: 0
;PCODE: $0000046C VOL: 0
	wdr
;PCODE: $0000046D VOL: 0
; 0026 017F     indexWriteFile = 0;
;PCODE: $0000046E VOL: 0
;PCODE: $0000046F VOL: 0
; 0026 0180     memset(viDataBuff,0,sizeof(viDataBuff));
;PCODE: $00000470 VOL: 0
;PCODE: $00000471 VOL: 0
;PCODE: $00000472 VOL: 0
;PCODE: $00000473 VOL: 0
;PCODE: $00000474 VOL: 0
;PCODE: $00000475 VOL: 0
; 0026 0181     printDebug("[iDeviceConfigWrite]Check file.\r\n");
;PCODE: $00000476 VOL: 0
;PCODE: $00000477 VOL: 0
;PCODE: $00000478 VOL: 0
;PCODE: $00000479 VOL: 0
;PCODE: $0000047A VOL: 0
;PCODE: $0000047B VOL: 0
;PCODE: $0000047C VOL: 0
; 0026 0182     if(iFSize((char const * const)viDirConfigPath,(char const * const)viConfigFName,&viFileSize)){
;PCODE: $0000047D VOL: 0
;PCODE: $0000047E VOL: 0
;PCODE: $0000047F VOL: 0
;PCODE: $00000480 VOL: 0
;PCODE: $00000481 VOL: 0
;PCODE: $00000482 VOL: 0
;PCODE: $00000483 VOL: 0
;PCODE: $00000484 VOL: 0
; 0026 0183        if(viFileSize == 0){
;PCODE: $00000485 VOL: 0
;PCODE: $00000486 VOL: 0
;PCODE: $00000487 VOL: 0
; 0026 0184           printDebug("[iDeviceConfigWrite]File is empty.\r\n");
;PCODE: $00000488 VOL: 0
;PCODE: $00000489 VOL: 0
;PCODE: $0000048A VOL: 0
;PCODE: $0000048B VOL: 0
;PCODE: $0000048C VOL: 0
;PCODE: $0000048D VOL: 0
;PCODE: $0000048E VOL: 0
; 0026 0185        }
; 0026 0186     }
;PCODE: $0000048F VOL: 0
; 0026 0187 
; 0026 0188     memcpy(&viDataBuff[0],&pviDataBuffer_arg[0],viLength_arg);
;PCODE: $00000490 VOL: 0
;PCODE: $00000491 VOL: 0
;PCODE: $00000492 VOL: 0
;PCODE: $00000493 VOL: 0
;PCODE: $00000494 VOL: 0
;PCODE: $00000495 VOL: 0
;PCODE: $00000496 VOL: 0
; 0026 0189     iFRwite(viDataBuff,viLength_arg,(const char*)viDirConfigPath,(const char*)viConfigFName,&indexWriteFile);
;PCODE: $00000497 VOL: 0
;PCODE: $00000498 VOL: 0
;PCODE: $00000499 VOL: 0
;PCODE: $0000049A VOL: 0
;PCODE: $0000049B VOL: 0
;PCODE: $0000049C VOL: 0
;PCODE: $0000049D VOL: 0
;PCODE: $0000049E VOL: 0
;PCODE: $0000049F VOL: 0
;PCODE: $000004A0 VOL: 0
; 0026 018A     printDebug("[iDeviceConfigWrite]Write is success.\r\n");
;PCODE: $000004A1 VOL: 0
;PCODE: $000004A2 VOL: 0
;PCODE: $000004A3 VOL: 0
;PCODE: $000004A4 VOL: 0
;PCODE: $000004A5 VOL: 0
;PCODE: $000004A6 VOL: 0
;PCODE: $000004A7 VOL: 0
; 0026 018B 
; 0026 018C     viReturn = 1;
;PCODE: $000004A8 VOL: 0
;PCODE: $000004A9 VOL: 0
; 0026 018D 
; 0026 018E     return viReturn;
;PCODE: $000004AA VOL: 0
;PCODE: $000004AB VOL: 0
;PCODE: $000004AC VOL: 0
;PCODE: $000004AD VOL: 0
; 0026 018F }
;PCODE: $000004AE VOL: 0
;
;iUInt_t iDeviceConfigRead(iChar_t const * const pviDataBuffer_arg,iUInt_t viLength_arg){
; 0026 0191 iUInt_t iDeviceConfigRead(iChar_t const * const pviDataBuffer_arg,iUInt_t viLength_arg){
;PCODE: $000004AF VOL: 0
;PCODE: $000004B0 VOL: 0
; 0026 0192     iUInt_t viReturn = 0;
; 0026 0193     iChar_t *pviDataBuffInsert;
; 0026 0194     iChar_t viDataBuff[DB_BLOCK_BUFFER_def];
; 0026 0195     unsigned long indexReadFile = 0;
; 0026 0196     unsigned long viFileSize = 0;
; 0026 0197 
; 0026 0198     #asm("wdr")
;PCODE: $000004B1 VOL: 0
;PCODE: $000004B2 VOL: 0
;PCODE: $000004B3 VOL: 0
;PCODE: $000004B4 VOL: 0
;PCODE: $000004B5 VOL: 0
;PCODE: $000004B6 VOL: 0
;PCODE: $000004B7 VOL: 0
;PCODE: $000004B8 VOL: 0
;PCODE: $000004B9 VOL: 0
;PCODE: $000004BA VOL: 0
;PCODE: $000004BB VOL: 0
;PCODE: $000004BC VOL: 0
;PCODE: $000004BD VOL: 0
;PCODE: $000004BE VOL: 0
;PCODE: $000004BF VOL: 0
;PCODE: $000004C0 VOL: 0
;PCODE: $000004C1 VOL: 0
;PCODE: $000004C2 VOL: 0
;PCODE: $000004C3 VOL: 0
;	*pviDataBuffer_arg -> Y+270
;	viLength_arg -> Y+268
;	viReturn -> R16,R17
;	*pviDataBuffInsert -> R18,R19
;	viDataBuff -> Y+12
;	indexReadFile -> Y+8
;	viFileSize -> Y+4
;PCODE: $000004C4 VOL: 0
;PCODE: $000004C5 VOL: 0
;PCODE: $000004C6 VOL: 0
	wdr
;PCODE: $000004C7 VOL: 0
; 0026 0199     indexReadFile = 0;
;PCODE: $000004C8 VOL: 0
;PCODE: $000004C9 VOL: 0
; 0026 019A     memset(viDataBuff,0,sizeof(viDataBuff));
;PCODE: $000004CA VOL: 0
;PCODE: $000004CB VOL: 0
;PCODE: $000004CC VOL: 0
;PCODE: $000004CD VOL: 0
;PCODE: $000004CE VOL: 0
;PCODE: $000004CF VOL: 0
; 0026 019B     printDebug("[iDeviceConfigRead]Check file.\r\n");
;PCODE: $000004D0 VOL: 0
;PCODE: $000004D1 VOL: 0
;PCODE: $000004D2 VOL: 0
;PCODE: $000004D3 VOL: 0
;PCODE: $000004D4 VOL: 0
;PCODE: $000004D5 VOL: 0
;PCODE: $000004D6 VOL: 0
; 0026 019C     if(iFSize((char const * const)viDirConfigPath,(char const * const)viConfigFName,&viFileSize)){
;PCODE: $000004D7 VOL: 0
;PCODE: $000004D8 VOL: 0
;PCODE: $000004D9 VOL: 0
;PCODE: $000004DA VOL: 0
;PCODE: $000004DB VOL: 0
;PCODE: $000004DC VOL: 0
;PCODE: $000004DD VOL: 0
;PCODE: $000004DE VOL: 0
; 0026 019D        if(viFileSize == 0){
;PCODE: $000004DF VOL: 0
;PCODE: $000004E0 VOL: 0
;PCODE: $000004E1 VOL: 0
; 0026 019E           printDebug("[iDeviceConfigRead]File is empty.\r\n");
;PCODE: $000004E2 VOL: 0
;PCODE: $000004E3 VOL: 0
;PCODE: $000004E4 VOL: 0
;PCODE: $000004E5 VOL: 0
;PCODE: $000004E6 VOL: 0
;PCODE: $000004E7 VOL: 0
;PCODE: $000004E8 VOL: 0
; 0026 019F           viReturn = 0;
;PCODE: $000004E9 VOL: 0
;PCODE: $000004EA VOL: 0
; 0026 01A0        }else{
;PCODE: $000004EB VOL: 0
;PCODE: $000004EC VOL: 0
; 0026 01A1           iFRead(viDataBuff,viLength_arg,(char const * const)viDirConfigPath,(char const * const)viConfigFName,&indexReadFile);
;PCODE: $000004ED VOL: 0
;PCODE: $000004EE VOL: 0
;PCODE: $000004EF VOL: 0
;PCODE: $000004F0 VOL: 0
;PCODE: $000004F1 VOL: 0
;PCODE: $000004F2 VOL: 0
;PCODE: $000004F3 VOL: 0
;PCODE: $000004F4 VOL: 0
;PCODE: $000004F5 VOL: 0
;PCODE: $000004F6 VOL: 0
; 0026 01A2           printDebug("[iDeviceConfigRead]Read is success.\r\n");
;PCODE: $000004F7 VOL: 0
;PCODE: $000004F8 VOL: 0
;PCODE: $000004F9 VOL: 0
;PCODE: $000004FA VOL: 0
;PCODE: $000004FB VOL: 0
;PCODE: $000004FC VOL: 0
;PCODE: $000004FD VOL: 0
; 0026 01A3           viReturn = 1;
;PCODE: $000004FE VOL: 0
;PCODE: $000004FF VOL: 0
; 0026 01A4        }
;PCODE: $00000500 VOL: 0
; 0026 01A5     }
; 0026 01A6 
; 0026 01A7     return viReturn;
;PCODE: $00000501 VOL: 0
;PCODE: $00000502 VOL: 0
;PCODE: $00000503 VOL: 0
;PCODE: $00000504 VOL: 0
;PCODE: $00000505 VOL: 0
; 0026 01A8 }
;PCODE: $00000506 VOL: 0
