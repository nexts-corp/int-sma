;#include <mega2560.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <string.h>
;#include <ctype.h>
;#include <delay.h>
;#include "uart.h"
;#include "io.h"
;#include "ethcomm.h"
;#include "wiz100rs.h"
;#include "interruptTask.h"
;
;/*============================================================*/
;char flag_PackageTerminate3 = 0;
;
;flash unsigned char charHeader = '$';
;flash unsigned char charTerminate = '#';
;
;bit                 flag_oled_ack      = 0;
;
;unsigned char       rxPackageIndex3;
;unsigned char       rxPackage3[64];
;unsigned char       rxPackageIndexCount3;
;/*============================================================*/
;// USART0 Receiver buffer
;//char rx_buffer0[RX_BUFFER_SIZE0];
;char rx_buffer0[2];
;
;unsigned int rx_wr_index0,rx_rd_index0,rx_counter0;
;
;// This flag is set on USART0 Receiver buffer overflow
;bit rx_buffer_overflow0;
;
;unsigned char       configRd[CONF_READ_BUFFER];      // for reading config
;int                 configLen=0;
;
;char                config_start    = 0;
;char                config_ready    = 0;    // 1 = failed, 2 = success
;char                config_end      = 0;
;char                config_response = 0;
;
;unsigned int    rxBeginCount     = 0;
;char            rxComplete  = 0;
;
;char rx0Buffer[400];
;unsigned int index0Buffer = 0;
;int flagDataUart0 = 0;
;int flagCountStart0 = 0;
;//char rx0ConnectBuff[50];
;unsigned int rx0IndexWriteConn = 0;
;//int flagConnected0 = 0;
;
;char uart0LockAccess = 0;
;
;// USART2 Receiver buffer
;#define RX_BUFFER_SIZE2 8
;char rx_buffer2[RX_BUFFER_SIZE2];
;
;#if RX_BUFFER_SIZE2 <= 256
;unsigned char rx_wr_index2,rx_rd_index2,rx_counter2;
;#else
;unsigned int rx_wr_index2,rx_rd_index2,rx_counter2;
;#endif
;
;// This flag is set on USART2 Receiver buffer overflow
;bit rx_buffer_overflow2;
;
;
;extern piInterrupt_t pviUart0TimeOut;
;extern int (*piWizCallBack)(char *,unsigned int);
;//extern iHTTP_t iHTTPStatus;
;//iUartQueue_t iUartQueue = {0,0,0,511};
;
;// USART0 Receiver interrupt service routine
;//Wiznet
;interrupt [USART0_RXC] void usart0_rx_isr(void)
; 0002 004C {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0002 004D 
; 0002 004E     char status,data;
; 0002 004F     int iRetuen = 0;
; 0002 0050 
; 0002 0051 //    if((iUartQueue.ToWrite >= iUartQueue.ToRead) || iUartQueue.){
; 0002 0052 //
; 0002 0053 //    }
; 0002 0054     status=UCSR0A;
;PCODE: $0000000F VOL: 0
;	status -> R17
;	data -> R16
;	iRetuen -> R18,R19
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0002 0055     data=UDR0;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0002 0056 
; 0002 0057     if((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0){
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0002 0058 //        if(data == '>'){
; 0002 0059 //            rx0IndexWriteConn = 0;
; 0002 005A //            rx0ConnectBuff[rx0IndexWriteConn++] = data;
; 0002 005B //        }else if(rx0IndexWriteConn > 0){
; 0002 005C //            rx0ConnectBuff[rx0IndexWriteConn++] = data;
; 0002 005D //            if(rx0IndexWriteConn >=50){
; 0002 005E //               //function callback
; 0002 005F //
; 0002 0060 //               piWizCallBack = &iWizStatusConnected;
; 0002 0061 //               piWizCallBack(rx0ConnectBuff,rx0IndexWriteConn);
; 0002 0062 //               rx0IndexWriteConn = 0;
; 0002 0063 //            }
; 0002 0064 //        }
; 0002 0065 
; 0002 0066         //iWizRXMode = 5;
; 0002 0067         //putchar3(data);
; 0002 0068         if(iWizRXMode == WIZ_RX_STAT_MODE){
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0002 0069             if(index0Buffer == 0){
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0002 006A                  flagCountStart0 = 0;
;PCODE: $0000001F VOL: 0
; 0002 006B             }
; 0002 006C 
; 0002 006D             if(data == '>'){
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0002 006E                 flagCountStart0 = 1;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0002 006F             }
; 0002 0070 
; 0002 0071             if(flagCountStart0 == 1){
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0002 0072                 putchar3(data);
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0002 0073                 rx0Buffer[index0Buffer++] = data;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0002 0074                 putchar3(data);
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0002 0075                 if(index0Buffer >= 400){
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0002 0076                     //if full will disable interrupt
; 0002 0077                     //UCSR0B &= 0x7F;          // -- disable uart0 interrupt -- //
; 0002 0078                     send_uart(3,"\r\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n" );
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0002 0079                     send_uart(3,    "!!!!!!! Eth Buffer Overflow !!!!!!!!!"     );
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0002 007A                     send_uart(3,"\r\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n" );
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0002 007B                     index0Buffer = 0;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0002 007C                 }
; 0002 007D             }
;PCODE: $00000049 VOL: 0
; 0002 007E 
; 0002 007F         }else if(iWizRXMode == WIZ_RX_DATA_MODE){
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0002 0080             rx0Buffer[index0Buffer++] = data;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0002 0081             putchar3(data);
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0002 0082             if(index0Buffer >= 400){
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0002 0083                 //if full will disable interrupt
; 0002 0084                 //UCSR0B &= 0x7F;          // -- disable uart0 interrupt -- //
; 0002 0085                 send_uart(3,"\r\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n" );
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0002 0086                 send_uart(3,    "!!!!!!! Eth Buffer Overflow !!!!!!!!!"     );
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0002 0087                 send_uart(3,"\r\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n" );
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0002 0088                 index0Buffer = 0;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0002 0089             }
; 0002 008A 
; 0002 008B         }else if(iWizRXMode == WIZ_CONFIG_READ_MODE){
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0002 008C            rx0Buffer[index0Buffer++] = data;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0002 008D            if(index0Buffer >= 400){
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0002 008E                 //if full will disable interrupt
; 0002 008F                 //UCSR0B &= 0x7F;          // -- disable uart0 interrupt -- //
; 0002 0090                 send_uart(3,"\r\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n" );
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0002 0091                 send_uart(3,    "!!!!!!! Eth Buffer Overflow !!!!!!!!!"     );
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0002 0092                 send_uart(3,"\r\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n" );
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0002 0093                 index0Buffer = 0;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0002 0094             }
; 0002 0095         }
;PCODE: $0000008E VOL: 0
; 0002 0096 
; 0002 0097 
; 0002 0098         //putchar3(data);
; 0002 0099     }
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0002 009A 
; 0002 009B      //putchar3(data);
; 0002 009C 
; 0002 009D //    if(iWizRXMode == WIZ_RX_STAT_MODE){
; 0002 009E //        if(data == '>'){
; 0002 009F //           //flagDataUart0 = 1;
; 0002 00A0 //           iWizStatus = WIZ_STAT_UPDATE;
; 0002 00A1 //        }else if(data != '>' && iWizStatus != WIZ_STAT_UPDATE){
; 0002 00A2 //           putchar3(data);
; 0002 00A3 //        }
; 0002 00A4 //
; 0002 00A5 //
; 0002 00A6 //
; 0002 00A7 //        if(iWizStatus == WIZ_STAT_UPDATE){
; 0002 00A8 //           rx0Buffer[index0Buffer++] = data;
; 0002 00A9 //           if(index0Buffer == 512){
; 0002 00AA //              index0Buffer = 0;
; 0002 00AB //           }
; 0002 00AC //           if(data == 0x0D){
; 0002 00AD //                //callback check status
; 0002 00AE //               //callBackChekStat();
; 0002 00AF //               piWizCallBack = &iWizCBChekStat;
; 0002 00B0 //               piWizCallBack((char * const )rx0Buffer,index0Buffer);
; 0002 00B1 //               iWizStatus = WIZ_STAT_READ_SUCCESS;
; 0002 00B2 //               index0Buffer = 0;
; 0002 00B3 //           }
; 0002 00B4 //        }
; 0002 00B5 //    }else if(iWizRXMode == WIZ_RX_DATA_MODE){
; 0002 00B6 //        rx0Buffer[index0Buffer++] = data;
; 0002 00B7 //        if(index0Buffer == 512){
; 0002 00B8 //           index0Buffer = 0;
; 0002 00B9 //        }
; 0002 00BA //        if(data == 0x0A){
; 0002 00BB //           //check http -> response code
; 0002 00BC //           if(iHTTPStatus.responseCode != WIZ_HTTP_RES_CODE_OK){
; 0002 00BD //               piWizCallBack = &iWizCBCheckHTTPResCode;
; 0002 00BE //               iRetuen = piWizCallBack((char * const )rx0Buffer,index0Buffer);
; 0002 00BF //               if(iRetuen == WIZ_HTTP_RES_CODE_OK){
; 0002 00C0 //                   iHTTPStatus.responseCode = WIZ_HTTP_RES_CODE_OK;
; 0002 00C1 //                   //index0Buffer = 0;
; 0002 00C2 //               }else{
; 0002 00C3 //                   iHTTPStatus.responseCode = WIZ_HTTP_RES_CODE_UNKNOW;
; 0002 00C4 //                   index0Buffer = 0;
; 0002 00C5 //               }
; 0002 00C6 //           }
; 0002 00C7 ////           else if(iHTTPStatus.responseCode == WIZ_HTTP_RES_CODE_OK && iHTTPStatus.contentLength == 0){
; 0002 00C8 ////                  //iHTTPStatus.contentLength
; 0002 00C9 ////                  piWizCallBack = &iWizCBCheckHTTPContextLen;
; 0002 00CA ////                  iRetuen = piWizCallBack((char * const )rx0Buffer,index0Buffer);
; 0002 00CB ////                  if(iRetuen != 1){
; 0002 00CC ////                     index0Buffer = 0;
; 0002 00CD ////                  }
; 0002 00CE //////                  if(iRetuen == WIZ_HTTP_CONTEXT_LEN_NOTFOUND){
; 0002 00CF //////                     index0Buffer = 0;
; 0002 00D0 //////                  }
; 0002 00D1 //////                  else if((iRetuen != WIZ_HTTP_CONTEXT_LEN_LESS) && (iRetuen != WIZ_HTTP_CONTEXT_LEN_OVER)){
; 0002 00D2 //////                      iHTTPStatus.contentLength = iRetuen;
; 0002 00D3 //////                      //index0Buffer = 0;
; 0002 00D4 //////                  }else{
; 0002 00D5 //////                      //index0Buffer = 0;
; 0002 00D6 //////                  }
; 0002 00D7 ////           }
; 0002 00D8 //        }
; 0002 00D9 //    }
; 0002 00DA //
; 0002 00DB 
; 0002 00DC 
; 0002 00DD 
; 0002 00DE //    if(uart0LockAccess != UART0_LOCK_ACCESS){
; 0002 00DF //        //putchar3(data);
; 0002 00E0 //
; 0002 00E1 //        if(data=='<'){   //'<' = start config delimeter
; 0002 00E2 //          //call function pointer noti that end of data
; 0002 00E3 //          //copy data from buffer
; 0002 00E4 ////           if(rx0Buffer[(rxBeginCount-1)] == 0x0A){
; 0002 00E5 ////                  //model wiz100rs and version display
; 0002 00E6 ////                  pfiWiz100rs = &iWizRXdata;
; 0002 00E7 ////                  pfiWiz100rs();
; 0002 00E8 ////                  //rxBeginCount = 0;
; 0002 00E9 ////           }else if(rx0Buffer[(rxBeginCount-1)] == 0x0D){
; 0002 00EA ////                  //model wiz100rs config data display
; 0002 00EB ////                  //rxBeginCount = 0;
; 0002 00EC ////           }
; 0002 00ED //
; 0002 00EE ////            putchar3('k');
; 0002 00EF //            //timeout start
; 0002 00F0 //
; 0002 00F1 //
; 0002 00F2 //            rxBeginCount = 0;
; 0002 00F3 //            rx0Buffer[rxBeginCount] = data;
; 0002 00F4 //            //putchar3(data);
; 0002 00F5 //            rxBeginCount++;
; 0002 00F6 //        }
; 0002 00F7 //
; 0002 00F8 //        if(rxBeginCount > 0){
; 0002 00F9 //            if(data==0x0A){
; 0002 00FA //                rx0Buffer[rxBeginCount] = data;
; 0002 00FB //               // putchar3(data);
; 0002 00FC //                pfiWiz100rs = &iWizRXdata;
; 0002 00FD //                pfiWiz100rs();
; 0002 00FE //                rxBeginCount = 0;
; 0002 00FF //                //pviUart0TimeOut = rxBeginCount;
; 0002 0100 //                pviUart0TimeOut = 1;
; 0002 0101 //            }else{
; 0002 0102 //                rx0Buffer[rxBeginCount] = data;
; 0002 0103 //              //  putchar3(data);
; 0002 0104 //                rxBeginCount++;
; 0002 0105 //                //pviUart0TimeOut = rxBeginCount;
; 0002 0106 //                pviUart0TimeOut = 1;
; 0002 0107 //            }
; 0002 0108 //        }
; 0002 0109 //
; 0002 010A //
; 0002 010B //        if(rxBeginCount==RX_BUFFER_SIZE0){
; 0002 010C //           rxBeginCount = 0;
; 0002 010D //           //call function pointer noti that buffer over flow
; 0002 010E //        }
; 0002 010F //    }
; 0002 0110 
; 0002 0111 
; 0002 0112 
; 0002 0113 
; 0002 0114 
; 0002 0115 //    if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
; 0002 0116 //    {   ETH_current_mode  == MODE_CONF;
; 0002 0117 //        if(ETH_current_mode != MODE_CONF)
; 0002 0118 //        {
; 0002 0119 //        //bongkot edit;
; 0002 011A //            //putchar3(data);
; 0002 011B //
; 0002 011C //
; 0002 011D //            rx_buffer0[rx_wr_index0++]  =   data;
; 0002 011E //
; 0002 011F //            if (rx_wr_index0 == RX_BUFFER_SIZE0)
; 0002 0120 //            {
; 0002 0121 //                rx_wr_index0=0;
; 0002 0122 //            }
; 0002 0123 //            if (++rx_counter0 == RX_BUFFER_SIZE0)
; 0002 0124 //            {
; 0002 0125 //                rx_counter0=0;
; 0002 0126 //                rx_buffer_overflow0=1;
; 0002 0127 //                send_uart(3,"\r\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n" );
; 0002 0128 //                send_uart(3,    "!!!!!!! Eth Buffer Overflow !!!!!!!!!"     );
; 0002 0129 //                send_uart(3,"\r\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n" );
; 0002 012A //            }
; 0002 012B //        }
; 0002 012C //        else{
; 0002 012D //            putchar3(data);
; 0002 012E //
; 0002 012F //            if (configLen == CONF_READ_BUFFER)
; 0002 0130 //            {
; 0002 0131 //                configLen=0;
; 0002 0132 //            }
; 0002 0133 //
; 0002 0134 //            if((data == '<') && (config_start == 0)){
; 0002 0135 //                config_start            = 1;
; 0002 0136 //                config_response         = 0;
; 0002 0137 //                config_ready            = 0;
; 0002 0138 //            }
; 0002 0139 //            else if((data == 0x0D) && (config_end == 0) && (config_start == 1) && (config_response != 0)){
; 0002 013A //                config_end  = 0x0D;
; 0002 013B //            }
; 0002 013C //            else if((data == 0x0A) && (config_end == 0x0D) && (config_start == 1) && (config_response != 0)){
; 0002 013D //                config_end              = 0x0A;
; 0002 013E //                config_ready            = 1;
; 0002 013F //            }
; 0002 0140 //            else if((data == 'E') && (config_start == 1) && (config_response == 0)){
; 0002 0141 //                config_response         = 'E';
; 0002 0142 //            }
; 0002 0143 //            else if((data == 'S') && (config_start == 1) && (config_response == 0)){
; 0002 0144 //                config_response         = 'S';
; 0002 0145 //            }
; 0002 0146 //            else if((config_start == 1) && (config_response != 0)){
; 0002 0147 //                configRd[configLen++]   =   data;
; 0002 0148 //            }
; 0002 0149 //        }
; 0002 014A //    }
; 0002 014B }
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0

	.DSEG
_0x40009:
	.BYTE 0x174
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART0 Receiver buffer
;#define _ALTERNATE_GETCHAR_
;
;#pragma used+
;char getchar(void)
; 0002 0153 {

	.CSEG
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0002 0154     char data;
; 0002 0155     while (rx_counter0==0);
;PCODE: $0000009A VOL: 0
;	data -> R17
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0002 0156     data=rx_buffer0[rx_rd_index0++];
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0002 0157  //   #if RX_BUFFER_SIZE0 != 256
; 0002 0158     if (rx_rd_index0 == RX_BUFFER_SIZE0)
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0002 0159         rx_rd_index0=0;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0002 015A //    #endif
; 0002 015B     #asm("cli")
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
	cli
;PCODE: $000000AF VOL: 0
; 0002 015C     --rx_counter0;
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0002 015D     #asm("sei")
;PCODE: $000000B4 VOL: 0
	sei
;PCODE: $000000B5 VOL: 0
; 0002 015E     return data;
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0002 015F }
;PCODE: $000000B9 VOL: 0
;#pragma used-
;// Write a character to the USART0 Transmitter
;#pragma used+
;void putchar0(char c)
; 0002 0164 {
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0002 0165     while ((UCSR0A & DATA_REGISTER_EMPTY)==0);
;PCODE: $000000BC VOL: 0
;	c -> Y+0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0002 0166     UDR0=c;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0002 0167 }
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;#pragma used-
;#endif
;
;int read_uart0(char *readbuf, int maxread,int interchar)
; 0002 016C {
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0002 016D     char data;
; 0002 016E     int len=0;
; 0002 016F 
; 0002 0170     while (rx_counter0 > 0)
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;	*readbuf -> Y+8
;	maxread -> Y+6
;	interchar -> Y+4
;	data -> R17
;	len -> R18,R19
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0002 0171     {
; 0002 0172         data=rx_buffer0[rx_rd_index0++];
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0002 0173         if (rx_rd_index0 == RX_BUFFER_SIZE0){
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0002 0174             rx_rd_index0=0;
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0002 0175         }
; 0002 0176         UCSR0B &= 0x7F;          // -- disable uart0 interrupt -- //
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0002 0177 
; 0002 0178         --rx_counter0;
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0002 0179 
; 0002 017A         UCSR0B |= 0x80;          // -- enable uart0 interrupt -- //
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0002 017B 
; 0002 017C         memcpy(readbuf++,&data,1);
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0002 017D         len++;
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0002 017E 
; 0002 017F         if(len == maxread){
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0002 0180             break;
;PCODE: $000000FA VOL: 0
; 0002 0181         }
; 0002 0182         delay_ms(interchar);
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0002 0183     }
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0002 0184     return len;
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0002 0185 }
;PCODE: $00000104 VOL: 0
;
;int write_uart0(char writebuf[], int len)
; 0002 0188 {
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0002 0189     int i;
; 0002 018A     for(i=0;i<len;i++){
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;	writebuf -> Y+4
;	len -> Y+2
;	i -> R16,R17
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0002 018B         putchar0(writebuf[i]);
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0002 018C     }
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0002 018D     return i;
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0002 018E }
;PCODE: $00000124 VOL: 0
;/*============================================================*/
;// USART1 Receiver interrupt service routine
;interrupt [USART1_RXC] void usart1_rx_isr(void)
; 0002 0192 {
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0002 0193     char status,data;
; 0002 0194     status=UCSR1A;
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0002 0195     data=UDR1;
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0002 0196 
; 0002 0197     if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0002 0198     {
; 0002 0199         if(data);
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0002 019A     }
;PCODE: $00000132 VOL: 0
; 0002 019B }
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;
;///*============================================================*/
;//// USART2 Receiver interrupt service routine
;//interrupt [USART2_RXC] void usart2_rx_isr(void)
;//{
;//    char status,data;
;//    status=UCSR2A;
;//    data=UDR2;
;//    putchar3(data);
;//    if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;//    {
;//        rx_buffer2[rx_wr_index2++]=data;
;//        #if RX_BUFFER_SIZE2 == 256
;//           // special case for receiver buffer size=256
;//           if (++rx_counter2 == 0) rx_buffer_overflow2=1;
;//        #else
;//           if (rx_wr_index2 == RX_BUFFER_SIZE2) rx_wr_index2=0;
;//           if (++rx_counter2 == RX_BUFFER_SIZE2)
;//              {
;//              rx_counter2=0;
;//              rx_buffer_overflow2=1;
;//              }
;//    #endif
;//    }
;//}
;
;/*============================================================*/
;// USART2 Receiver interrupt service routine
;interrupt [USART2_RXC] void usart2_rx_isr(void)
; 0002 01B9 {
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0002 01BA     char status,data;
; 0002 01BB     status=UCSR2A;
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0002 01BC     data=UDR2;
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0002 01BD     putchar3(data);
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0002 01BE     if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0002 01BF     {
; 0002 01C0         rx_buffer2[rx_wr_index2++]=data;
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0002 01C1         #if RX_BUFFER_SIZE2 == 256
; 0002 01C2            // special case for receiver buffer size=256
; 0002 01C3            if (++rx_counter2 == 0) rx_buffer_overflow2=1;
; 0002 01C4         #else
; 0002 01C5            if (rx_wr_index2 == RX_BUFFER_SIZE2) rx_wr_index2=0;
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0002 01C6            if (++rx_counter2 == RX_BUFFER_SIZE2)
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0002 01C7               {
; 0002 01C8               rx_counter2=0;
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0002 01C9               rx_buffer_overflow2=1;
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0002 01CA               }
; 0002 01CB     #endif
; 0002 01CC     }
;PCODE: $0000015B VOL: 0
; 0002 01CD }
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;
;// Get a character from the USART2 Receiver buffer
;#pragma used+
;char getchar2(void)
; 0002 01D2 {
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0002 01D3     char data;
; 0002 01D4     while (rx_counter2==0);
;PCODE: $00000163 VOL: 0
;	data -> R17
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0002 01D5     data=rx_buffer2[rx_rd_index2++];
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0002 01D6     #if RX_BUFFER_SIZE2 != 256
; 0002 01D7     if (rx_rd_index2 == RX_BUFFER_SIZE2) rx_rd_index2=0;
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0002 01D8     #endif
; 0002 01D9     #asm("cli")
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
	cli
;PCODE: $00000178 VOL: 0
; 0002 01DA     --rx_counter2;
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0002 01DB     #asm("sei")
;PCODE: $0000017C VOL: 0
	sei
;PCODE: $0000017D VOL: 0
; 0002 01DC     return data;
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0002 01DD }
;PCODE: $00000181 VOL: 0
;#pragma used-
;
;// Write a character to the USART2 Transmitter
;#pragma used+
;void putchar2(char c)
; 0002 01E3 {
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0002 01E4     while ((UCSR2A & DATA_REGISTER_EMPTY)==0);
;PCODE: $00000184 VOL: 0
;	c -> Y+0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0002 01E5     UDR2=c;
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0002 01E6 }
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;#pragma used-
;
;
;iChar_t iReadUart2(char * viBuffer, char (*callback) (void)){
; 0002 01EA iChar_t iReadUart2(char * viBuffer, char (*callback) (void)){
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0002 01EB     iChar_t viCh = '';
; 0002 01EC //    char buffer[200];
; 0002 01ED     *viBuffer = callback();
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;	*viBuffer -> Y+5
;	*callback -> Y+1
;	viCh -> R17
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0002 01EE     viBuffer++;
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0002 01EF     return  viCh;
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
; 0002 01F0 }
;PCODE: $000001A2 VOL: 0
;
;/*============================================================*/
;// USART3 Receiver interrupt service routine
;interrupt [USART3_RXC] void usart3_rx_isr(void)
; 0002 01F5 {
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
; 0002 01F6     char status,data;
; 0002 01F7     status=UCSR3A;
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0002 01F8     data=UDR3;
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0002 01F9 
; 0002 01FA 
; 0002 01FB     //putchar3(data);
; 0002 01FC     putchar0(data);
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0002 01FD     if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
; 0002 01FE     {
; 0002 01FF         putchar3(data);
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
; 0002 0200 //        putchar0(data);
; 0002 0201         // Detect Package Header
; 0002 0202         if(data == charHeader)
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0002 0203         {
; 0002 0204             rxPackageIndex3 = 0;
;PCODE: $000001B5 VOL: 0
; 0002 0205         }
; 0002 0206 
; 0002 0207         rxPackage3[rxPackageIndex3++] = data;
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0002 0208 
; 0002 0209         if(rxPackageIndex3 >= 64) rxPackageIndex3 = 0;
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0002 020A 
; 0002 020B         if(data == charTerminate)
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
; 0002 020C         {
; 0002 020D             rxPackageIndexCount3 = rxPackageIndex3-1;
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
; 0002 020E             rxPackageIndex3 = 0;
;PCODE: $000001C7 VOL: 0
; 0002 020F             flag_PackageTerminate3 = 1;
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
; 0002 0210         }
; 0002 0211     }
;PCODE: $000001CA VOL: 0
; 0002 0212 }
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;
;/*============================================================*/
;// Write a character to the USART3 Transmitter
;#pragma used+
;void putchar3(char c)
; 0002 0218 {
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
; 0002 0219     while ((UCSR3A & DATA_REGISTER_EMPTY)==0);
;PCODE: $000001D2 VOL: 0
;	c -> Y+0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0002 021A     UDR3=c;
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0002 021B }
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;#pragma used-
;
;/*============================================================*/
;void send_uart(char port,char *buffer)
; 0002 0220 {
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
; 0002 0221     char i = 0;
; 0002 0222 
; 0002 0223     switch (port)
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;	port -> Y+3
;	*buffer -> Y+1
;	i -> R17
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
; 0002 0224     {
; 0002 0225         case 0: puts(buffer);
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0002 0226                 break;
;PCODE: $000001EA VOL: 0
; 0002 0227 
; 0002 0228         case 1: while(buffer[i] != 0)
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
; 0002 0229                 {
; 0002 022A                     //putchar1(buffer[i]);
; 0002 022B                     i++;
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
; 0002 022C                 }
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
; 0002 022D                 break;
;PCODE: $000001F8 VOL: 0
; 0002 022E 
; 0002 022F         case 2: while(buffer[i] != 0)
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
; 0002 0230                 {
; 0002 0231                     putchar2(buffer[i]);
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
; 0002 0232                     i++;
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
; 0002 0233                 }
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
; 0002 0234                 break;
;PCODE: $0000020A VOL: 0
; 0002 0235 
; 0002 0236         case 3: while(buffer[i] != 0)
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
; 0002 0237                 {
; 0002 0238                     putchar3(buffer[i]);
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
; 0002 0239                     i++;
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
; 0002 023A                 }
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
; 0002 023B                 break;
;PCODE: $0000021C VOL: 0
; 0002 023C     }
;PCODE: $0000021D VOL: 0
; 0002 023D }
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;
;/*============================================================*/
;void init_uart(void)
; 0002 0241 {
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
; 0002 0242 //    // USART0 initialization
; 0002 0243 //    // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0002 0244 //    // USART0 Receiver: On
; 0002 0245 //    // USART0 Transmitter: On
; 0002 0246 //    // USART0 Mode: Asynchronous
; 0002 0247 //    // USART0 Baud Rate: 38400
; 0002 0248 //    UCSR0A=0x00;
; 0002 0249 //    UCSR0B=0x98;
; 0002 024A //    UCSR0C=0x06;
; 0002 024B //    UBRR0H=0x00;
; 0002 024C //    UBRR0L=0x0C;
; 0002 024D 
; 0002 024E     // USART0 initialization
; 0002 024F     // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0002 0250     // USART0 Receiver: On
; 0002 0251     // USART0 Transmitter: On
; 0002 0252     // USART0 Mode: Asynchronous
; 0002 0253     // USART0 Baud Rate: 9600
; 0002 0254 
; 0002 0255     /*bongkot comment*/
; 0002 0256     UCSR0A=0x00;
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
; 0002 0257     UCSR0B=0x98;
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
; 0002 0258     UCSR0C=0x06;
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
; 0002 0259     UBRR0H=0x00;
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
; 0002 025A     UBRR0L=0x33;
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
; 0002 025B 
; 0002 025C     // USART0 initialization
; 0002 025D     // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0002 025E     // USART0 Receiver: On
; 0002 025F     // USART0 Transmitter: On
; 0002 0260     // USART0 Mode: Asynchronous
; 0002 0261     // USART0 Baud Rate: 57600
; 0002 0262 //    UCSR0A=0x00;
; 0002 0263 //    UCSR0B=0x98;
; 0002 0264 //    UCSR0C=0x06;
; 0002 0265 //    UBRR0H=0x00;
; 0002 0266 //    UBRR0L=0x08;
; 0002 0267 
; 0002 0268 
; 0002 0269 
; 0002 026A 
; 0002 026B 
; 0002 026C     // USART1 initialization
; 0002 026D     // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0002 026E     // USART1 Receiver: On
; 0002 026F     // USART1 Transmitter: On
; 0002 0270     // USART1 Mode: Asynchronous
; 0002 0271     // USART1 Baud Rate: 38400
; 0002 0272     UCSR1A=0x00;
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
; 0002 0273     UCSR1B=0x98;
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
; 0002 0274     UCSR1C=0x06;
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
; 0002 0275     UBRR1H=0x00;
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
; 0002 0276     UBRR1L=0x0C;
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
; 0002 0277 
; 0002 0278 //    // USART2 initialization
; 0002 0279 //    // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0002 027A //    // USART2 Receiver: On
; 0002 027B //    // USART2 Transmitter: On
; 0002 027C //    // USART2 Mode: Asynchronous
; 0002 027D //    // USART2 Baud Rate: 115200 (Double Speed Mode)
; 0002 027E //    UCSR2A=0x02;
; 0002 027F //    UCSR2B=0x98;
; 0002 0280 //    UCSR2C=0x06;
; 0002 0281 //    UBRR2H=0x00;
; 0002 0282 //    UBRR2L=0x08;
; 0002 0283 
; 0002 0284     // USART2 initialization
; 0002 0285     // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0002 0286     // USART2 Receiver: On
; 0002 0287     // USART2 Transmitter: On
; 0002 0288     // USART2 Mode: Asynchronous
; 0002 0289     // USART2 Baud Rate: 38400
; 0002 028A //    UCSR2A=0x00;
; 0002 028B //    UCSR2B=0x98;
; 0002 028C //    UCSR2C=0x06;
; 0002 028D //    UBRR2H=0x00;
; 0002 028E //    UBRR2L=0x0C;
; 0002 028F 
; 0002 0290     // USART3 initialization
; 0002 0291     // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0002 0292     // USART3 Receiver: On
; 0002 0293     // USART3 Transmitter: On
; 0002 0294     // USART3 Mode: Asynchronous
; 0002 0295     // USART3 Baud Rate: 38400
; 0002 0296     UCSR3A=0x00;
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
; 0002 0297     UCSR3B=0x98;
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
; 0002 0298     UCSR3C=0x06;
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
; 0002 0299     UBRR3H=0x00;
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
; 0002 029A     UBRR3L=0x0C;
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
; 0002 029B }
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;
;void iUartSetBaudRate(char viChannel_arg,char viBaudRate){
; 0002 029D void iUartSetBaudRate(char viChannel_arg,char viBaudRate){
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
; 0002 029E       if(viChannel_arg==0){
;PCODE: $00000247 VOL: 0
;	viChannel_arg -> Y+1
;	viBaudRate -> Y+0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
; 0002 029F         UCSR0A=0x00;
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
; 0002 02A0         UCSR0B=0x98;
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
; 0002 02A1         UCSR0C=0x06;
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
; 0002 02A2         UBRR0H=0x00;
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
; 0002 02A3         switch(viBaudRate){
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
; 0002 02A4              case BAUD_RATE_115K_def:{
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
; 0002 02A5                 UBRR0L=0x03;
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
; 0002 02A6                 break;
;PCODE: $00000259 VOL: 0
; 0002 02A7              }
; 0002 02A8              case BAUD_RATE_57K6_def:{
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
; 0002 02A9                 UBRR0L=0x08;
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
; 0002 02AA                 break;
;PCODE: $0000025F VOL: 0
; 0002 02AB              }
; 0002 02AC              case BAUD_RATE_38K4_def:{
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
; 0002 02AD                 UBRR0L=0x0C;
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
; 0002 02AE                 break;
;PCODE: $00000265 VOL: 0
; 0002 02AF              }
; 0002 02B0              case BAUD_RATE_9K6_def:{
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
; 0002 02B1                 UBRR0L=0x33;
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
; 0002 02B2                 break;
;PCODE: $0000026B VOL: 0
; 0002 02B3              }
; 0002 02B4         }
;PCODE: $0000026C VOL: 0
; 0002 02B5       }
; 0002 02B6       else if(viChannel_arg==1){
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
; 0002 02B7         UCSR1A=0x00;
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
; 0002 02B8         UCSR1B=0x98;
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
; 0002 02B9         UCSR1C=0x06;
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
; 0002 02BA         UBRR1H=0x00;
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
; 0002 02BB         switch(viBaudRate){
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
; 0002 02BC              case BAUD_RATE_115K_def:{
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
; 0002 02BD                 UBRR1L=0x03;
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
; 0002 02BE                 break;
;PCODE: $00000280 VOL: 0
; 0002 02BF              }
; 0002 02C0              case BAUD_RATE_57K6_def:{
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
; 0002 02C1                 UBRR1L=0x08;
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
; 0002 02C2                 break;
;PCODE: $00000286 VOL: 0
; 0002 02C3              }
; 0002 02C4              case BAUD_RATE_38K4_def:{
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
; 0002 02C5                 UBRR1L=0x0C;
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
; 0002 02C6                 break;
;PCODE: $0000028C VOL: 0
; 0002 02C7              }
; 0002 02C8              case BAUD_RATE_9K6_def:{
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
; 0002 02C9                 UBRR1L=0x33;
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
; 0002 02CA                 break;
;PCODE: $00000292 VOL: 0
; 0002 02CB              }
; 0002 02CC         }
;PCODE: $00000293 VOL: 0
; 0002 02CD       }
; 0002 02CE       else if(viChannel_arg==2){                      //GSM
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
; 0002 02CF 
; 0002 02D0         UCSR2A=0x00;
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
; 0002 02D1         UCSR2B=0x98;
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
; 0002 02D2         UCSR2C=0x06;
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
; 0002 02D3         UBRR2H=0x00;
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
; 0002 02D4         switch(viBaudRate){
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
; 0002 02D5              case BAUD_RATE_115K_def:{
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
; 0002 02D6                 // USART2 Baud Rate: 115200 (Double Speed Mode)
; 0002 02D7                 UCSR2A=0x02;
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
; 0002 02D8                 UBRR2L=0x08;
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
; 0002 02D9                 //UBRR2L=0x03;
; 0002 02DA                 break;
;PCODE: $000002A9 VOL: 0
; 0002 02DB              }
; 0002 02DC              case BAUD_RATE_57K6_def:{
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
; 0002 02DD                 UBRR2L=0x08;
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
; 0002 02DE                 break;
;PCODE: $000002AF VOL: 0
; 0002 02DF              }
; 0002 02E0              case BAUD_RATE_38K4_def:{
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
; 0002 02E1                 UBRR2L=0x0C;
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
; 0002 02E2                 break;
;PCODE: $000002B5 VOL: 0
; 0002 02E3              }
; 0002 02E4              case BAUD_RATE_9K6_def:{
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
; 0002 02E5                 UBRR2L=0x33;
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
; 0002 02E6                 break;
;PCODE: $000002BB VOL: 0
; 0002 02E7              }
; 0002 02E8         }
;PCODE: $000002BC VOL: 0
; 0002 02E9       }
; 0002 02EA       else if(viChannel_arg==3){
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
; 0002 02EB         UCSR3A=0x00;
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
; 0002 02EC         UCSR3B=0x98;
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
; 0002 02ED         UCSR3C=0x06;
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
; 0002 02EE         UBRR3H=0x00;
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
; 0002 02EF         switch(viBaudRate){
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
; 0002 02F0              case BAUD_RATE_115K_def:{
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
; 0002 02F1                 UBRR3L=0x03;
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
; 0002 02F2                 break;
;PCODE: $000002D0 VOL: 0
; 0002 02F3              }
; 0002 02F4              case BAUD_RATE_57K6_def:{
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
; 0002 02F5                 UBRR3L=0x08;
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
; 0002 02F6                 break;
;PCODE: $000002D6 VOL: 0
; 0002 02F7              }
; 0002 02F8              case BAUD_RATE_38K4_def:{
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
; 0002 02F9                 UBRR3L=0x0C;
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
; 0002 02FA                 break;
;PCODE: $000002DC VOL: 0
; 0002 02FB              }
; 0002 02FC              case BAUD_RATE_9K6_def:{
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
; 0002 02FD                 UBRR3L=0x33;
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
; 0002 02FE                 break;
;PCODE: $000002E2 VOL: 0
; 0002 02FF              }
; 0002 0300         }
;PCODE: $000002E3 VOL: 0
; 0002 0301       }
; 0002 0302 }
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
;
;/*============================================================*/
;
