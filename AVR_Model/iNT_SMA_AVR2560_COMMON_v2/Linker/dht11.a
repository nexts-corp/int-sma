;#include <mega2560.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <stdio.h>
;#include <stdlib.h>
;#include <string.h>
;#include "dht11.h"
;#include "timer.h"
;#include "debug.h"
;
;/**
;*
;//Brif use timer5
;**/
;void MCUSignalOut(int status){
; 0017 000E void MCUSignalOut(int status){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0017 000F //    DDRL.0  = 1;   //set output
; 0017 0010     char tempRegister = 0;
; 0017 0011     DDRJ |= 0x04;    //oboooo o10o
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> Y+1
;	tempRegister -> R17
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0017 0012     if(status==1){
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0017 0013        PORTJ |= 0x04; //0b0000 0100
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0017 0014     }else{
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0017 0015         PORTJ &= 0xFB;//0b1111 1011
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0017 0016     }
;PCODE: $00000021 VOL: 0
; 0017 0017 }
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;int DHT11SignalIn(){
; 0017 0018 int DHT11SignalIn(){
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0017 0019 //    DDRL.0   = 0;   //set input
; 0017 001A //    return DHT11_TO_MCU_PIN;
; 0017 001B     DDRJ &= 0xFB;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0017 001C     if((PINJ & 0x04)==0x04){
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0017 001D        return 0x01;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0017 001E     }else{
;PCODE: $00000032 VOL: 0
; 0017 001F        return 0x00;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0017 0020     }
;PCODE: $00000035 VOL: 0
; 0017 0021 
; 0017 0022 }
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;int DHT11Read(ST_DHT11 *dhtDevice){
; 0017 0023 int DHT11Read(ST_DHT11 *dhtDevice){
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0017 0024     int i, j, temp;
; 0017 0025     int buffer = 0;
; 0017 0026     int count = 0;
; 0017 0027 	int data[5] = {0x00, 0x00, 0x00, 0x00, 0x00};
; 0017 0028 
; 0017 0029     /*start condition*/
; 0017 002A     dhtDevice->status = DHT11_ERROR_TIMEOUT;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;	*dhtDevice -> Y+20
;	i -> R16,R17
;	j -> R18,R19
;	temp -> R20,R21
;	buffer -> Y+18
;	count -> Y+16
;	data -> Y+6
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0017 002B //    MCUSignalOut(MCU_SIGNAL_LOW);
; 0017 002C //    delay_ms(10);
; 0017 002D     MCUSignalOut(MCU_SIGNAL_HIGH);
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0017 002E     delay_ms(4);
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0017 002F 
; 0017 0030 //    TCCR5A=0x00;
; 0017 0031 //    TCCR5B=0x05;     //count = 128 microsec , 128 * 7812 = about 1sec
; 0017 0032 //
; 0017 0033 //    TCNT5H=0x00;     //timer count clearing
; 0017 0034 //    TCNT5L=0x00;
; 0017 0035 
; 0017 0036     MCUSignalOut(MCU_SIGNAL_LOW);
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0017 0037     //while((TCNT5H <<8 | TCNT5L)<160);           //about 20 ms
; 0017 0038     delay_ms(20);
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0017 0039 
; 0017 003A     /*set clk/8
; 0017 003B     *clk@8Mhz/prescaling 8
; 0017 003C     *get count every 1 us
; 0017 003D     */
; 0017 003E //    TCCR5A=0x00;
; 0017 003F //    TCCR5B=0x02;     //count = 1 microsec
; 0017 0040 //
; 0017 0041 //    TCNT5H=0x00;     //timer count clearing
; 0017 0042 //    TCNT5L=0x00;
; 0017 0043 
; 0017 0044     MCUSignalOut(MCU_SIGNAL_HIGH);
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0017 0045     delay_us(40);
;PCODE: $00000054 VOL: 0
; 0017 0046     /*end start condition*/
; 0017 0047    // printDebug("DHT11: end Condition \r\n");
; 0017 0048 
; 0017 0049     TCCR5A=0x00;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0017 004A     TCCR5B=0x02;     //count = 1 microsec
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0017 004B     TCNT5H=0x00;     //timer count clearing
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0017 004C     TCNT5L=0x00;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0017 004D     while(DHT11SignalIn()==0){
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0017 004E         if((TCNT5H <<8 | TCNT5L)>100){       //about 80 us      //if((TCNT5H <<8 | TCNT5L)>100){       //about 80 us
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0017 004F             dhtDevice->status = DHT11_ERROR_TIMEOUT;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0017 0050            return DHT11_ERROR_TIMEOUT;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0017 0051         }
; 0017 0052     }
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0017 0053 
; 0017 0054     TCNT5H=0x00;     //timer count clearing
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0017 0055     TCNT5L=0x00;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0017 0056     while(DHT11SignalIn()==1){
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0017 0057         if((TCNT5H <<8 | TCNT5L)>100){       //about 80 us        //if((TCNT5H <<8 | TCNT5L)>100){       //about 80 us
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0017 0058             dhtDevice->status = DHT11_ERROR_TIMEOUT;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0017 0059            return DHT11_ERROR_TIMEOUT;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0017 005A         }
; 0017 005B     }
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0017 005C 
; 0017 005D     //Read 40 bits (8*5)
; 0017 005E 	for(j = 0; j < 5; ++j) {
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0017 005F 		for(i = 0; i < 8; ++i) {
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0017 0060 
; 0017 0061 			//LOW for 50us
; 0017 0062 			TCNT5H=0x00;     //timer count clearing
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0017 0063             TCNT5L=0x00;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0017 0064             while(DHT11SignalIn()==0){
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0017 0065                 if((TCNT5H <<8 | TCNT5L)>70){       //about 50 us            //if((TCNT5H <<8 | TCNT5L)>70){
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0017 0066                     dhtDevice->status = DHT11_ERROR_TIMEOUT;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0017 0067                    return DHT11_ERROR_TIMEOUT;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0017 0068                 }
; 0017 0069             }
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0017 006A 
; 0017 006B 			//Start counter
; 0017 006C 			//buffer = 0;
; 0017 006D 			//HIGH for 26-28us = 0 / 70us = 1
; 0017 006E 
; 0017 006F 			TCNT5H=0x00;     //timer count clearing
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0017 0070             TCNT5L=0x00;
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0017 0071             while(DHT11SignalIn()==1){
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0017 0072                 count = (TCNT5H <<8 | TCNT5L);
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0017 0073                 if(count>90){       //about 70 us                //if(count>90){
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0017 0074                     dhtDevice->status = DHT11_ERROR_TIMEOUT;
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0017 0075                    return DHT11_ERROR_TIMEOUT;
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0017 0076                 }
; 0017 0077 
; 0017 0078             }
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0017 0079 
; 0017 007A //            if(count > 40){
; 0017 007B //               buffer = 1;
; 0017 007C //            }
; 0017 007D 			//Calc amount of time passed
; 0017 007E 			temp = count;
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0017 007F 
; 0017 0080 			//shift 0
; 0017 0081 			data[j] = data[j] << 1;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0017 0082 
; 0017 0083 			//if > 30us it's 1
; 0017 0084 			if(temp > 40)
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0017 0085 				data[j] = data[j]+1;
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0017 0086 		}
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0017 0087 	}
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0017 0088 
; 0017 0089     //MCUSignalOut(MCU_SIGNAL_HIGH);
; 0017 008A 
; 0017 008B     //verify the Checksum
; 0017 008C 	if(data[4] != (data[0] + data[2])){
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0017 008D         dhtDevice->status = DHT11_ERROR_CHECKSUM;
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0017 008E         return DHT11_ERROR_CHECKSUM;
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0017 008F     }
; 0017 0090 
; 0017 0091 
; 0017 0092 
; 0017 0093     dhtDevice->temp = (float)data[2];
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0017 0094     dhtDevice->humi = (float)data[0];
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0017 0095     dhtDevice->status = DHT11_SUCCESS;
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0017 0096     return DHT11_SUCCESS;
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0017 0097 }
;PCODE: $00000122 VOL: 0
