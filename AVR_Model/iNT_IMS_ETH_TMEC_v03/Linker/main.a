;/*****************************************************
;Project : COMM-ETH : 0.01a
;Date    : 17/7/2012
;Author  : Tawan Srisang
;Company : Intelenics Co.,Ltd.
;Comments:
;Version Format : 1Major.2Minor.1Edition
;
;
;Chip type               : ATmega2560
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;*****************************************************/
;#include <mega2560.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdlib.h>
;#include <string.h>
;#include <delay.h>
;#include "ims_eth_header.h"
;#include "config.h"
;#include "timer.h"
;#include "ds1672.h"
;#include "sensor.h"
;#include "status.h"
;#include "alarm.h"
;#include "dataqueue.h"
;#include "eventqueue.h"
;#include "log.h"
;#include "logqueue.h"
;#include "oled.h"
;#include "menu.h"
;#include "io.h"
;#include "debug.h"
;#include "gaussian.h"
;
;#include "uart.h"
;#include <stdio.h>
;
;#define MAX(a,b)                (((a) > (b)) ? (a) : (b))
;#define MIN(a,b)                (((a) < (b)) ? (a) : (b))
;//#define RANDOM(a,b)             ((rand() % (MAX(a,b) - MIN(a,b))) + MIN(a,b))
;
;#define PERIOD_CHECK_MEMORY     300
;
;// I2C Bus functions (for INT-AVXB-00-04)
;#asm
;PCODE: $0000000D VOL: 0
   .equ __i2c_port=0x0B ;PORTD
;PCODE: $0000000E VOL: 0
   .equ __sda_bit=1
;PCODE: $0000000F VOL: 0
   .equ __scl_bit=0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0031 #endasm
;
;//unsigned char FIRMWARE_VERSION[] = "COMM-ETH-0.01a";
;
;int updateStatus(void);
;int eventCapture(void);
;int statusReport(void);
;int sensorDataReport(void);
;int eventReport(void);
;int sensorDataSave(void);
;int eventSave(void);
;int logReport(void);
;extern void updateSensorADC(int ch);
;
;/*============================================================*/
;void main(void)
; 0000 0041 {

	.CSEG
;PCODE: $00000012 VOL: 0
; 0000 0042     int                     err,i=0,k=0,res,last_status;
; 0000 0043 
; 0000 0044     TIMER                   sensor_report_timer[5];
; 0000 0045     TIMER                   status_report_timer;
; 0000 0046     TIMER                   check_reset_timer;
; 0000 0047     TIMER                   check_memory_timer;
; 0000 0048     TIMER                   clear_duplicate_timer = 0;
; 0000 0049     TIMER                   readSensorTimer = 0;
; 0000 004A     unsigned long int       timestamp_rd;
; 0000 004B 
; 0000 004C     char                    key_press = 0;
; 0000 004D 
; 0000 004E     float tmpA = 0.0;
; 0000 004F     float tmpB = 0.0;
; 0000 0050     float tmpC = 0.0;
; 0000 0051 
; 0000 0052     struct rtc_structure st_rtc;
; 0000 0053 
; 0000 0054     // -------- System Initialize ----------- //
; 0000 0055     do{ err = initial_system();  }while(err);
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;	err -> R16,R17
;	i -> R18,R19
;	k -> R20,R21
;	res -> Y+85
;	last_status -> Y+83
;	sensor_report_timer -> Y+63
;	status_report_timer -> Y+59
;	check_reset_timer -> Y+55
;	check_memory_timer -> Y+51
;	clear_duplicate_timer -> Y+47
;	readSensorTimer -> Y+43
;	timestamp_rd -> Y+39
;	key_press -> Y+38
;	tmpA -> Y+34
;	tmpB -> Y+30
;	tmpC -> Y+26
;	st_rtc -> Y+0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0056 
; 0000 0057     //ETH_CONF;
; 0000 0058 
; 0000 0059     ETH_switchMode((unsigned char) MODE_NORM);
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 005A     //ETH_NORM;
; 0000 005B    // ETH_reset();
; 0000 005C    // ETH_OFF;
; 0000 005D    // delay_ms(2000);
; 0000 005E    // ETH_ON;
; 0000 005F 
; 0000 0060     // -- alarm indicator initialize -- //
; 0000 0061     buzzer_on = 0;          // -- buzzer off -- //
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0062     for(k=0;k<2;k++)        // -- MAX_DO_CHANNEL
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0063     {
; 0000 0064         IO_dout(k,!dout_config[k].stateOnEvent);     // -- Digital Output X OFF -- //
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0065     }
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0066 
; 0000 0067     initDataLogQueue();
;PCODE: $0000003F VOL: 0
; 0000 0068     initEventLogQueue();
;PCODE: $00000040 VOL: 0
; 0000 0069     ETH_initWaitQueue();
;PCODE: $00000041 VOL: 0
; 0000 006A 
; 0000 006B     printDebug("\r\n------ Initial Complete ------\r\n");
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 006C     printDebug("Contact : contact.tawan@gmail.com\r\n");
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 006D 
; 0000 006E 
; 0000 006F     //while(1){ printDebug("<main> TEMP_SEL = 0x%02X\r",TEMP_SEL);    delay_ms(100);   #asm("wdr")}
; 0000 0070 
; 0000 0071     for(i=0;i<MAX_SENS_CHANNEL;i++){
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0072         if(operating_config.sensorEnable[i]){
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0073             TIMER_setTimer(&sensor_report_timer[i], 5);
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0074         }
; 0000 0075     }
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0076 
; 0000 0077 //    gaussian(271.8683, 392.0240, 489.2156,
; 0000 0078 //                 -90, -20, 50,
; 0000 0079 //                 &tmpA, &tmpB, &tmpC);
; 0000 007A //
; 0000 007B //    printDebug("<main> --A--> %f\r\n", tmpA);
; 0000 007C //    printDebug("<main> --B--> %f\r\n", tmpB);
; 0000 007D //    printDebug("<main> --C--> %f\r\n", tmpC);
; 0000 007E 
; 0000 007F     TIMER_setTimer(&status_report_timer, 7);
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0080     TIMER_setTimer(&check_reset_timer, 60);
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0081     TIMER_setTimer(&check_memory_timer, PERIOD_CHECK_MEMORY);
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0082 
; 0000 0083     while(1){
;PCODE: $00000078 VOL: 0
; 0000 0084 
; 0000 0085         #asm("wdr")
;PCODE: $00000079 VOL: 0
	wdr
;PCODE: $0000007A VOL: 0
; 0000 0086 
; 0000 0087         // Reset at 05.00 in every day
; 0000 0088         if(TIMER_checkTimerExceed(check_reset_timer))
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0089         {
; 0000 008A             TIMER_setTimer(&check_reset_timer, 60);
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 008B             RTC_getDateTime(&st_rtc, 7);
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 008C //            printRTC(st_rtc);
; 0000 008D             if(st_rtc.hour == 5) {
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 008E                 if(st_rtc.min == 0) {
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 008F                     while(1);
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0090                 }
; 0000 0091             }
;PCODE: $00000091 VOL: 0
; 0000 0092         }
;PCODE: $00000092 VOL: 0
; 0000 0093 
; 0000 0094         // ----------- Received Debug Request ---------- //
; 0000 0095         if(flag_PackageTerminate3){    debug_req();     }
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 0096 
; 0000 0097         // ----------- On Device Key Press ------------- //
; 0000 0098         key_press = IO_keyCheck();
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 0099         if(key_press){
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 009A             MENU_processKey(key_press);
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 009B         }
; 0000 009C 
; 0000 009D         // ----------- Ethernet Communication ---------- //
; 0000 009E         ETH_receive();
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 009F         ETH_retransmit();
;PCODE: $000000A2 VOL: 0
; 0000 00A0 
; 0000 00A1         // ----- check if configuration(s) has been updated ----- //
; 0000 00A2         if(is_properties_config_update){
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 00A3             getPropertiesConfig(&properties_config);
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 00A4             is_properties_config_update = 0;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 00A5         }
; 0000 00A6 
; 0000 00A7         if(is_operating_config_update){
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 00A8             getOperatingConfig(&operating_config);
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 00A9             is_operating_config_update = 0;
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 00AA         }
; 0000 00AB 
; 0000 00AC         for(i=0;i<MAX_SENS_CHANNEL;i++){
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 00AD             if(is_sensor_config_update[i]){
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 00AE                 err = getSensorConfig(i,&sensor_config[i]);
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 00AF                 if(err < 0){
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 00B0                     printDebug("<main> getSensorConfig(%d) error\r\n",i);
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 00B1                     continue;
;PCODE: $000000D4 VOL: 0
; 0000 00B2                 }
; 0000 00B3                 is_sensor_config_update[i] = 0;
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 00B4                 TIMER_setTimer(&sensor_report_timer[i], 5);
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 00B5             }
; 0000 00B6         }
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 00B7 
; 0000 00B8         if(is_buzzer_config_update){            // -- update buzzer configuration if needed -- //
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 00B9             getBuzzerConfig(&buzz_config);
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 00BA             is_buzzer_config_update = 0;
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 00BB         }
; 0000 00BC 
; 0000 00BD         for(i=0;i<USE_DIN;i++){
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 00BE             if(is_din_config_update[i]){        // -- update digital input configuration if needed -- //
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 00BF                 getAuxDinConfig(i,&din_config[i]);
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 00C0                 is_din_config_update[i] = 0;
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 00C1             }
; 0000 00C2         }
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 00C3 
; 0000 00C4         for(i=0;i<USE_DOUT;i++){
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 00C5             if(is_dout_config_update[i]){       // -- update digital output configuration if needed -- //
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 00C6                 getAuxDoutConfig(i,&dout_config[i]);
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 00C7                 is_dout_config_update[i] = 0;
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 00C8             }
; 0000 00C9         }
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 00CA 
; 0000 00CB         if(is_status_config_update){
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 00CC             getStatusReportConfig(&status_config);
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 00CD             is_status_config_update = 0;
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 00CE 
; 0000 00CF             TIMER_setTimer(&status_report_timer, 7);
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 00D0         }
; 0000 00D1 
; 0000 00D2         if(is_env_config_update){
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 00D3             getEnvAlarmConfig(&env_config);
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 00D4             is_env_config_update = 0;
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 00D5         }
; 0000 00D6 
; 0000 00D7         if(operating_config.deviceEnable)                       // ----- device enable ------ //
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 00D8         {
; 0000 00D9             // -------------- Sensor Association -------------- //
; 0000 00DA             for(i=0;i<MAX_SENS_CHANNEL;i++)
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 00DB             {
; 0000 00DC                 if(operating_config.sensorEnable[i])            // .. sensor enable .. //
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 00DD                 {
; 0000 00DE                     //** test **//
; 0000 00DF //                    if(TIMER_checkTimerExceed(readSensorTimer))
; 0000 00E0 //                    {
; 0000 00E1 //                        TIMER_setTimer(&readSensorTimer, 5);
; 0000 00E2 //                        updateSensorADC(i);                    // -- update adcData[ch] -- //
; 0000 00E3 //                        printDebug("[%d]ADC: %f, Volt: %f \r\n", i, adcData[i], (adcData[i]/1023)*2.56);
; 0000 00E4 //                    }
; 0000 00E5                     //-- test --//
; 0000 00E6 
; 0000 00E7 //                    printDebug("<main> sensorRead\r\n");
; 0000 00E8                     err = sensorRead(i,&sensor[i]);
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 00E9                     if(err < 0)                                 // . sensor value error . //
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 00EA                     {
; 0000 00EB                         continue;
;PCODE: $0000015B VOL: 0
; 0000 00EC                     }
; 0000 00ED                     else                                        // . sensor value valid . //
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 00EE                     {
; 0000 00EF                         // --==== More detail in config (Re-Occurrance) ====-- //
; 0000 00F0                         if(TIMER_checkTimerExceed(sensor_report_timer[i]))
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 00F1                         {
; 0000 00F2                             TIMER_setTimer(&sensor_report_timer[i], sensor_config[i].samplingRate);
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 00F3 
; 0000 00F4                             timestamp_rd = DS1672_read();
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 00F5                             err = addDataQueue(timestamp_rd, i, sensor[i].value);
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 00F6                             if(err<0){
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0000 00F7                                 printDebug("<main> addSensorDataQueue(%d,%.1f) failed\r\n",i,sensor[i].value);
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0000 00F8                                 continue;   // -- continue other sensor
;PCODE: $00000193 VOL: 0
; 0000 00F9                             }
; 0000 00FA                         }
;PCODE: $00000194 VOL: 0
; 0000 00FB                         else{
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0000 00FC                             //printDebug("<main> [%d] %ld:%ld\r\n",i,baseCounter,sensor_report_timer[i]);
; 0000 00FD                         }
;PCODE: $00000197 VOL: 0
; 0000 00FE                     }
;PCODE: $00000198 VOL: 0
; 0000 00FF 
; 0000 0100                 }
; 0000 0101                 else                                            // .. sensor disable .. //
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0000 0102                 {
; 0000 0103                 }
;PCODE: $0000019B VOL: 0
; 0000 0104             } // -- iterate each probe -- //
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0000 0105 
; 0000 0106             #asm("wdr")
;PCODE: $000001A1 VOL: 0
	wdr
;PCODE: $000001A2 VOL: 0
; 0000 0107             // --------------- Status Management --------------- //
; 0000 0108            // printDebug("<main> updateStatus()\r\n");
; 0000 0109             last_status = updateStatus();
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
; 0000 010A 
; 0000 010B             // --------------- Alarm Management --------------- //
; 0000 010C             if(operating_config.alarmEnable)                    // .. alarm enable .. //
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 010D             {
; 0000 010E                 // -- check alarm all -- //
; 0000 010F                 if(last_status < 0)                             // .. status update falied .. //
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0000 0110                 {
; 0000 0111                     printDebug("<main> updateStatus() failed\r\n");
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 0112                 }
; 0000 0113                 else if((last_status > 0) && !muteMode)         // .. found some status error and alarm not muted .. //
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
; 0000 0114                 {
; 0000 0115                     // -- Buzzer Alarm -- //
; 0000 0116                     if(buzz_config.enable == 0x01 )             // -- buzzer enabled -- //
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
; 0000 0117                     {
; 0000 0118                         // -- check alarm source binded to Buzzer -- //
; 0000 0119                         res = checkAlarm(buzz_config.eventSource, buzz_config.eventSourceNumber);       // -- alarm.h -- //
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
; 0000 011A                         if(res){
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
; 0000 011B                             buzzer_on = 1;          // -- buzzer on -- //
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
; 0000 011C                         }
; 0000 011D                         else{
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0000 011E                             buzzer_on = 0;          // -- buzzer off -- //
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0000 011F                         }
;PCODE: $000001D3 VOL: 0
; 0000 0120                     }
; 0000 0121                     else                                        // -- buzzer disabled -- //
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
; 0000 0122                     {
; 0000 0123                         buzzer_on = 0;                  // -- buzzer off -- //
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
; 0000 0124                     }
;PCODE: $000001D8 VOL: 0
; 0000 0125 
; 0000 0126                     // -- Digital Output Alarm (iterate each channel) -- //
; 0000 0127                     for(k=0;k<USE_DOUT;k++)
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0000 0128                     {
; 0000 0129                         if(dout_config[k].channelEnable == 0x01)            // -- digital output enabled -- //
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
; 0000 012A                         {
; 0000 012B                             // -- check alarm Digital Output -- //
; 0000 012C //                            printDebug("<main> dout[%d] alarm check -- \r\n",k);
; 0000 012D                             res = checkAlarm(dout_config[k].eventSource, dout_config[k].eventSourceNumber);       // -- alarm.h -- //
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
; 0000 012E                             if(res){
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
; 0000 012F                                 IO_dout(k,dout_config[k].stateOnEvent);     // -- Digital Output X ON -- //
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 0000 0130                             }
; 0000 0131                             else{
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
; 0000 0132                                 IO_dout(k,!dout_config[k].stateOnEvent);    // -- Digital Output X OFF -- //
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
; 0000 0133                             }
;PCODE: $0000020A VOL: 0
; 0000 0134                         }
; 0000 0135                         else                                                // -- digital output disabled -- //
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
; 0000 0136                         {
; 0000 0137                             IO_dout(k,!dout_config[k].stateOnEvent);        // -- Digital Output X OFF -- //
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
; 0000 0138                         }
;PCODE: $00000216 VOL: 0
; 0000 0139                     }
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
; 0000 013A                 }
; 0000 013B                 else                                            // .. no event .. //
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
; 0000 013C                 {
; 0000 013D                     // -- no alarm -- // ^_^
; 0000 013E                     buzzer_on = 0;                  // -- buzzer off -- //
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
; 0000 013F                     for(k=0;k<USE_DOUT;k++)         // -- MAX_DO_CHANNEL
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
; 0000 0140                     {
; 0000 0141                         IO_dout(k,!dout_config[k].stateOnEvent);     // -- Digital Output X OFF -- //
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0000 0142                     }
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
; 0000 0143                 }
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
; 0000 0144 
; 0000 0145                 res = eventCapture();                           // -- send event packet if needed -- //
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
; 0000 0146             }
; 0000 0147             else                                                // .. alarm disable .. //
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
; 0000 0148             {
; 0000 0149             //    printDebug("<main> alarmDisable()\r\n");
; 0000 014A                 // -- no alarm -- // ;-P
; 0000 014B                 buzzer_on = 0;                      // -- buzzer off -- //
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
; 0000 014C                 for(k=0;k<USE_DOUT;k++)             // -- MAX_DO_CHANNEL
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
; 0000 014D                 {
; 0000 014E                     IO_dout(k,!dout_config[k].stateOnEvent);    // -- Digital Output X OFF -- //
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
; 0000 014F                 }
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
; 0000 0150             }
;PCODE: $00000256 VOL: 0
; 0000 0151 
; 0000 0152             // -- check mute expired -- //
; 0000 0153             if(muteMode){
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
; 0000 0154                // printDebug("<main> ALARM_checkMuteExpired()\r\n");
; 0000 0155                 if(ALARM_checkMuteExpired()){
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
; 0000 0156                     muteAlarmExpired = 0xFFFFFFFF;
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
; 0000 0157                     muteMode = 0;
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
; 0000 0158                 }
; 0000 0159             }
;PCODE: $00000261 VOL: 0
; 0000 015A 
; 0000 015B             // ---------------- Operating Mode ---------------- //
; 0000 015C //            operating_config.mode = MODE_REALTIME;      //test
; 0000 015D             if(operating_config.mode == MODE_REALTIME)          // .. realtime mode .. //
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
; 0000 015E             {
; 0000 015F                 if(!duplicateListClear)
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
; 0000 0160                 {
; 0000 0161                     res = TIMER_checkTimerExceed(clear_duplicate_timer);
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
; 0000 0162                     if(res != 0){
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
; 0000 0163                         TIMER_setTimer(&clear_duplicate_timer, 10);
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
; 0000 0164                         ETH_clearDuplicateRequestCmd();
;PCODE: $00000273 VOL: 0
; 0000 0165                     }
; 0000 0166 
; 0000 0167                     sensorDataSave();
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
; 0000 0168                     eventSave();
;PCODE: $00000276 VOL: 0
; 0000 0169                 }
; 0000 016A                 else
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
; 0000 016B                 {
; 0000 016C                     if(TIMER_checkTimerExceed(status_report_timer))
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
; 0000 016D                     {
; 0000 016E                         TIMER_setTimer(&status_report_timer, status_config.intv);
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
; 0000 016F 
; 0000 0170                         statusReport();
;PCODE: $00000283 VOL: 0
; 0000 0171                     }
; 0000 0172 
; 0000 0173                     // -- report log only when no realtime data not ready -- //
; 0000 0174                     if( (sensorDataReport() == 0) && (eventReport() == 0) && (sdFreeSpace > 0) )
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
; 0000 0175                     {
; 0000 0176                         logReport();
;PCODE: $00000292 VOL: 0
; 0000 0177                     }
; 0000 0178                 }
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
; 0000 0179             }
; 0000 017A             else if(operating_config.mode == MODE_DATALOGGER)   // .. datalogger mode .. //
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
; 0000 017B             {
; 0000 017C                // printDebug("<main> sensorDataSave()\r\n");
; 0000 017D                 sensorDataSave();
;PCODE: $0000029A VOL: 0
; 0000 017E               //  printDebug("<main> eventSave()\r\n");
; 0000 017F                 eventSave();
;PCODE: $0000029B VOL: 0
; 0000 0180             }
; 0000 0181             else                                                // .. unknown mode .. //
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
; 0000 0182             {
; 0000 0183                 printDebug("<main> operating mode error!! [0x%02X]\r\n",operating_config.mode);
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
; 0000 0184             }
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
; 0000 0185 
; 0000 0186             #asm("wdr")
;PCODE: $000002AA VOL: 0
	wdr
;PCODE: $000002AB VOL: 0
; 0000 0187             if(timer_1sec_flag)
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
; 0000 0188             {
; 0000 0189               //  printDebug("<main> timer_1sec_flag\r\n");
; 0000 018A                 if(TIMER_checkTimerExceed(check_memory_timer) && (memoryStatus != ERROR))
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
; 0000 018B                 {
; 0000 018C               //      printDebug("<main> Check Memory \r\n");
; 0000 018D                     TIMER_setTimer(&check_memory_timer, PERIOD_CHECK_MEMORY);
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
; 0000 018E 
; 0000 018F                     res = SD_readMemoryRemain(&sdFreeSpace);
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
; 0000 0190                     if(res < 0){
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
; 0000 0191                         printDebug("<main> SD_readMemoryRemain() failed\r\n");
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
; 0000 0192                     }
; 0000 0193                 }
;PCODE: $000002CB VOL: 0
; 0000 0194 
; 0000 0195                 if(currentPage == P_MONITOR)
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
; 0000 0196                 {
; 0000 0197               //      printDebug("<main> OLED_showSensorValue\r\n");
; 0000 0198                     OLED_showSensorValue();
;PCODE: $000002D0 VOL: 0
; 0000 0199 
; 0000 019A                     for(i=0;i<2;i++){
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
; 0000 019B                         OLED_showInputStatus(i,dinStatus[i]);
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
; 0000 019C                     }
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
; 0000 019D 
; 0000 019E                     for(i=0;i<2;i++){
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
; 0000 019F                         OLED_showOutputStatus(i,doutStatus[i]);
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
; 0000 01A0                     }
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
; 0000 01A1 
; 0000 01A2                //     printDebug("<main> OLED_showDateTime\r\n");
; 0000 01A3                     OLED_showDateTime(properties_config.timeZone);
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
; 0000 01A4 
; 0000 01A5               //      printDebug("<main> OLED_showAlarmStatus\r\n");
; 0000 01A6                     OLED_showAlarmStatus();
;PCODE: $000002FB VOL: 0
; 0000 01A7                 }
; 0000 01A8 
; 0000 01A9               //  printDebug("<main> powerSrcStatus\r\n");
; 0000 01AA                 switch(powerSrcStatus){
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
; 0000 01AB                     case PWR_NORMAL     :   OLED_showPowerStatus(PWR_NORMAL,0);                     break;
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
; 0000 01AC                     case PWR_DOWN       :   OLED_showPowerStatus(PWR_DOWN,batteryVolt);             break;
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
; 0000 01AD                     default             :   break;
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
; 0000 01AE                 }
;PCODE: $00000310 VOL: 0
; 0000 01AF 
; 0000 01B0             //    printDebug("<main> serverCommStatus\r\n");
; 0000 01B1                 switch(serverCommStatus){
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
; 0000 01B2                     case COMM_NORMAL    :   OLED_showServerCommStatus(OLED_SERVER_CONNECT);         break;
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
; 0000 01B3                     case COMM_LOST      :   OLED_showServerCommStatus(OLED_SERVER_DISCONNECT);      break;
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
; 0000 01B4                     default             :   OLED_showServerCommStatus(OLED_SERVER_UNKNOWN);         break;
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
; 0000 01B5                 }
;PCODE: $00000322 VOL: 0
; 0000 01B6 
; 0000 01B7             //    printDebug("<main> lanStatus\r\n");
; 0000 01B8                 switch(lanStatus){
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
; 0000 01B9                     case COMM_LAN_CONNECT       :   OLED_showLanStatus(OLED_LAN_CONNECT);           break;
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
; 0000 01BA                     case COMM_LAN_DISCONNECT    :   OLED_showLanStatus(OLED_LAN_DISCONNECT);        break;
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
; 0000 01BB                     default                     :   break;
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
; 0000 01BC                 }
;PCODE: $00000332 VOL: 0
; 0000 01BD 
; 0000 01BE             //    printDebug("<main> OLED_showBuzzerStatus\r\n");
; 0000 01BF                 if(muteMode){
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
; 0000 01C0                     OLED_showBuzzerStatus(OLED_BUZZER_MUTE);
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
; 0000 01C1                 }
; 0000 01C2                 else if(buzz_config.enable == 0x01){
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
; 0000 01C3                     OLED_showBuzzerStatus(OLED_BUZZER_ENABLE);
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
; 0000 01C4                 }
; 0000 01C5                 else{
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
; 0000 01C6                     OLED_showBuzzerStatus(OLED_BUZZER_DISABLE);
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
; 0000 01C7                 }
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
; 0000 01C8 
; 0000 01C9            //     printDebug("<main> memoryStatus\r\n");
; 0000 01CA                 switch(memoryStatus){
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
; 0000 01CB                     case MEM_NORMAL         :   OLED_showMemoryStatus(OLED_MEMORY_NORMAL);          break;
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
; 0000 01CC                     case MEM_LOW            :   OLED_showMemoryStatus(OLED_MEMORY_LOW);             break;
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
; 0000 01CD                     case MEM_ERROR          :   OLED_showMemoryStatus(OLED_MEMORY_ERROR);           break;
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
; 0000 01CE                     default                 :   break;
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
; 0000 01CF                 }
;PCODE: $0000035A VOL: 0
; 0000 01D0 
; 0000 01D1                 timer_1sec_flag = 0;
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
; 0000 01D2             }
; 0000 01D3         } // -- device enable -- //
;PCODE: $0000035D VOL: 0
; 0000 01D4         else                                                    // ----- device disable ----- //
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
; 0000 01D5         {
; 0000 01D6             // -- no alarm -- // ;-P
; 0000 01D7             buzzer_on = 0;                      // -- buzzer off -- //
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
; 0000 01D8             for(k=0;k<USE_DOUT;k++)             // -- MAX_DO_CHANNEL
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
; 0000 01D9             {
; 0000 01DA                 IO_dout(k,!dout_config[k].stateOnEvent);    // -- Digital Output X OFF -- //
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
; 0000 01DB             }
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
;PCODE: $00000378 VOL: 0
; 0000 01DC 
; 0000 01DD 
; 0000 01DE             if(TEMP_SEL == TEMP_TYPE_K){
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
; 0000 01DF                 if(hwCalId == 9){
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
; 0000 01E0                     printDebug("<main> [Device disable] [TYPE-K] $CMDSNS N : X.XX                    \r");
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
; 0000 01E1                 }
; 0000 01E2                 else if(SENSOR_CONNECT){
;PCODE: $0000038B VOL: 0
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
; 0000 01E3                     printDebug("<main> [Device disable] [TYPE-K] $CMDSNS %d : %f                     \r",hwCalId,(adcData[hwCalId]*ADC_CONV_FAC*100));
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
;PCODE: $000003A8 VOL: 0
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
;PCODE: $000003AC VOL: 0
; 0000 01E4                 }
; 0000 01E5                 else{
;PCODE: $000003AD VOL: 0
;PCODE: $000003AE VOL: 0
; 0000 01E6                     printDebug("<main> [Device disable] [TYPE-K] $CMDSNS %d : disconnected           \r",hwCalId);
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
;PCODE: $000003B7 VOL: 0
;PCODE: $000003B8 VOL: 0
; 0000 01E7                 }
;PCODE: $000003B9 VOL: 0
;PCODE: $000003BA VOL: 0
; 0000 01E8                 delay_ms(200);
;PCODE: $000003BB VOL: 0
;PCODE: $000003BC VOL: 0
;PCODE: $000003BD VOL: 0
; 0000 01E9             }
; 0000 01EA             else if(TEMP_SEL == TEMP_TMEC){
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
;PCODE: $000003C0 VOL: 0
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
;PCODE: $000003C4 VOL: 0
;PCODE: $000003C5 VOL: 0
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
; 0000 01EB                     printDebug("<main> [Device disable] [TMEC]                                       \r");
;PCODE: $000003C9 VOL: 0
;PCODE: $000003CA VOL: 0
;PCODE: $000003CB VOL: 0
;PCODE: $000003CC VOL: 0
;PCODE: $000003CD VOL: 0
;PCODE: $000003CE VOL: 0
;PCODE: $000003CF VOL: 0
; 0000 01EC             }
; 0000 01ED             else if(TEMP_SEL == TEMP_PT100){
;PCODE: $000003D0 VOL: 0
;PCODE: $000003D1 VOL: 0
;PCODE: $000003D2 VOL: 0
;PCODE: $000003D3 VOL: 0
;PCODE: $000003D4 VOL: 0
;PCODE: $000003D5 VOL: 0
;PCODE: $000003D6 VOL: 0
;PCODE: $000003D7 VOL: 0
;PCODE: $000003D8 VOL: 0
;PCODE: $000003D9 VOL: 0
;PCODE: $000003DA VOL: 0
; 0000 01EE                     printDebug("<main> [Device disable] [PT100]                                      \r");
;PCODE: $000003DB VOL: 0
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
;PCODE: $000003DE VOL: 0
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
;PCODE: $000003E1 VOL: 0
; 0000 01EF             }
; 0000 01F0             else if(TEMP_SEL == TEMP_RESERVED){
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
;PCODE: $000003E4 VOL: 0
;PCODE: $000003E5 VOL: 0
;PCODE: $000003E6 VOL: 0
;PCODE: $000003E7 VOL: 0
;PCODE: $000003E8 VOL: 0
;PCODE: $000003E9 VOL: 0
;PCODE: $000003EA VOL: 0
;PCODE: $000003EB VOL: 0
;PCODE: $000003EC VOL: 0
; 0000 01F1                     printDebug("<main> [Device disable] [RESERVED]                                   \r");
;PCODE: $000003ED VOL: 0
;PCODE: $000003EE VOL: 0
;PCODE: $000003EF VOL: 0
;PCODE: $000003F0 VOL: 0
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
;PCODE: $000003F3 VOL: 0
; 0000 01F2             }
; 0000 01F3         }
;PCODE: $000003F4 VOL: 0
;PCODE: $000003F5 VOL: 0
;PCODE: $000003F6 VOL: 0
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
; 0000 01F4 
; 0000 01F5         #asm("wdr")
;PCODE: $000003F9 VOL: 0
	wdr
;PCODE: $000003FA VOL: 0
; 0000 01F6     }
;PCODE: $000003FB VOL: 0
;PCODE: $000003FC VOL: 0
; 0000 01F7 
; 0000 01F8 }
;PCODE: $000003FD VOL: 0
;PCODE: $000003FE VOL: 0
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
;/*============================================================*/
;
;/**************************************************************/
;/****************** Status & Event Management *****************/
;/**************************************************************/
;/*============================================================*/
;int updateStatus(void)   // -- manipulate function in status.c -- //
; 0000 0200 {
;PCODE: $00000401 VOL: 0
;PCODE: $00000402 VOL: 0
; 0000 0201     int                 res=0, i=0, err=0;
; 0000 0202     static TIMER        ETH_rst_timer=0xFFFFFFFF;

	.DSEG

	.CSEG
; 0000 0203 
; 0000 0204     // --------------- Update Sensor's Event --------------- //
; 0000 0205     for(i=0;i<MAX_SENS_CHANNEL;i++)
;PCODE: $00000403 VOL: 0
;	res -> R16,R17
;	i -> R18,R19
;	err -> R20,R21
;PCODE: $00000404 VOL: 0
;PCODE: $00000405 VOL: 0
;PCODE: $00000406 VOL: 0
;PCODE: $00000407 VOL: 0
;PCODE: $00000408 VOL: 0
;PCODE: $00000409 VOL: 0
;PCODE: $0000040A VOL: 0
;PCODE: $0000040B VOL: 0
;PCODE: $0000040C VOL: 0
;PCODE: $0000040D VOL: 0
;PCODE: $0000040E VOL: 0
;PCODE: $0000040F VOL: 0
;PCODE: $00000410 VOL: 0
;PCODE: $00000411 VOL: 0
;PCODE: $00000412 VOL: 0
; 0000 0206     {
; 0000 0207         if(operating_config.sensorEnable[i])        // .. sensor enable .. //
;PCODE: $00000413 VOL: 0
;PCODE: $00000414 VOL: 0
;PCODE: $00000415 VOL: 0
;PCODE: $00000416 VOL: 0
;PCODE: $00000417 VOL: 0
;PCODE: $00000418 VOL: 0
; 0000 0208         {
; 0000 0209             // ----------- Update Probe Status ------------------------- //
; 0000 020A             err =   updateSensorStatus(i);
;PCODE: $00000419 VOL: 0
;PCODE: $0000041A VOL: 0
;PCODE: $0000041B VOL: 0
; 0000 020B             if(err >= 0){
;PCODE: $0000041C VOL: 0
;PCODE: $0000041D VOL: 0
; 0000 020C                 res |=  err;
;PCODE: $0000041E VOL: 0
;PCODE: $0000041F VOL: 0
; 0000 020D                 if(sensor_config[i].alarmEnable && !err)        // . sensor alarm enable . //
;PCODE: $00000420 VOL: 0
;PCODE: $00000421 VOL: 0
;PCODE: $00000422 VOL: 0
;PCODE: $00000423 VOL: 0
;PCODE: $00000424 VOL: 0
;PCODE: $00000425 VOL: 0
;PCODE: $00000426 VOL: 0
;PCODE: $00000427 VOL: 0
;PCODE: $00000428 VOL: 0
;PCODE: $00000429 VOL: 0
;PCODE: $0000042A VOL: 0
;PCODE: $0000042B VOL: 0
;PCODE: $0000042C VOL: 0
; 0000 020E                 {
; 0000 020F                     // ----------- Update Temperature Status ------------------- //
; 0000 0210                     err =   updateDataStatus(i);
;PCODE: $0000042D VOL: 0
;PCODE: $0000042E VOL: 0
;PCODE: $0000042F VOL: 0
; 0000 0211                     res |=  err;
;PCODE: $00000430 VOL: 0
;PCODE: $00000431 VOL: 0
; 0000 0212                 }
; 0000 0213             }
;PCODE: $00000432 VOL: 0
; 0000 0214         }
;PCODE: $00000433 VOL: 0
; 0000 0215     }
;PCODE: $00000434 VOL: 0
;PCODE: $00000435 VOL: 0
;PCODE: $00000436 VOL: 0
;PCODE: $00000437 VOL: 0
;PCODE: $00000438 VOL: 0
;PCODE: $00000439 VOL: 0
; 0000 0216 
; 0000 0217     // --- Update Battery Status --- //
; 0000 0218     err =   updateBatteryStatus();
;PCODE: $0000043A VOL: 0
;PCODE: $0000043B VOL: 0
; 0000 0219     res |=  err;
;PCODE: $0000043C VOL: 0
;PCODE: $0000043D VOL: 0
; 0000 021A     // --- Update Digital Input Status --- //
; 0000 021B     err =   updateDinStatus();
;PCODE: $0000043E VOL: 0
;PCODE: $0000043F VOL: 0
; 0000 021C     res |=  err;
;PCODE: $00000440 VOL: 0
;PCODE: $00000441 VOL: 0
; 0000 021D     // --- Update Digital Output Status --- //
; 0000 021E     err =   updateDoutStatus();
;PCODE: $00000442 VOL: 0
;PCODE: $00000443 VOL: 0
; 0000 021F     res |=  err;
;PCODE: $00000444 VOL: 0
;PCODE: $00000445 VOL: 0
; 0000 0220     // --- Update Analog Input Status --- //
; 0000 0221     // --- Update Communication Status --- //
; 0000 0222     err =   updateCommStatus();
;PCODE: $00000446 VOL: 0
;PCODE: $00000447 VOL: 0
; 0000 0223     if(err){
;PCODE: $00000448 VOL: 0
;PCODE: $00000449 VOL: 0
; 0000 0224 
; 0000 0225         if((ETH_rst_timer == 0xFFFFFFFF) || (ETH_rst_timer == 0)){
;PCODE: $0000044A VOL: 0
;PCODE: $0000044B VOL: 0
;PCODE: $0000044C VOL: 0
;PCODE: $0000044D VOL: 0
;PCODE: $0000044E VOL: 0
;PCODE: $0000044F VOL: 0
;PCODE: $00000450 VOL: 0
;PCODE: $00000451 VOL: 0
; 0000 0226             TIMER_setTimer(&ETH_rst_timer,15);
;PCODE: $00000452 VOL: 0
;PCODE: $00000453 VOL: 0
;PCODE: $00000454 VOL: 0
;PCODE: $00000455 VOL: 0
; 0000 0227             printDebug("<updateStatus> ETH_rst_timer time left = %ld(%lX)\r\n",(ETH_rst_timer-baseCounter),(ETH_rst_timer-baseCounter));
;PCODE: $00000456 VOL: 0
;PCODE: $00000457 VOL: 0
;PCODE: $00000458 VOL: 0
;PCODE: $00000459 VOL: 0
;PCODE: $0000045A VOL: 0
;PCODE: $0000045B VOL: 0
;PCODE: $0000045C VOL: 0
;PCODE: $0000045D VOL: 0
;PCODE: $0000045E VOL: 0
;PCODE: $0000045F VOL: 0
;PCODE: $00000460 VOL: 0
;PCODE: $00000461 VOL: 0
;PCODE: $00000462 VOL: 0
;PCODE: $00000463 VOL: 0
;PCODE: $00000464 VOL: 0
; 0000 0228         }
; 0000 0229 
; 0000 022A         if(TIMER_checkTimerExceed(ETH_rst_timer) == 1){
;PCODE: $00000465 VOL: 0
;PCODE: $00000466 VOL: 0
;PCODE: $00000467 VOL: 0
;PCODE: $00000468 VOL: 0
;PCODE: $00000469 VOL: 0
; 0000 022B             ETH_NORM;
;PCODE: $0000046A VOL: 0
;PCODE: $0000046B VOL: 0
;PCODE: $0000046C VOL: 0
; 0000 022C             ETH_reset();
;PCODE: $0000046D VOL: 0
; 0000 022D             ETH_rst_timer = 0xFFFFFFFF;
;PCODE: $0000046E VOL: 0
;PCODE: $0000046F VOL: 0
; 0000 022E         }
; 0000 022F     }
;PCODE: $00000470 VOL: 0
; 0000 0230     res |=  err;
;PCODE: $00000471 VOL: 0
;PCODE: $00000472 VOL: 0
;PCODE: $00000473 VOL: 0
; 0000 0231     // --- Update Memory Card Status --- //
; 0000 0232     err =   updateMemoryStatus();
;PCODE: $00000474 VOL: 0
;PCODE: $00000475 VOL: 0
; 0000 0233     res |=  err;
;PCODE: $00000476 VOL: 0
;PCODE: $00000477 VOL: 0
; 0000 0234 
; 0000 0235     return res;
;PCODE: $00000478 VOL: 0
;PCODE: $00000479 VOL: 0
;PCODE: $0000047A VOL: 0
;PCODE: $0000047B VOL: 0
; 0000 0236 }
;PCODE: $0000047C VOL: 0
;/*============================================================*/
;int eventCapture(void)
; 0000 0239 {
;PCODE: $0000047D VOL: 0
;PCODE: $0000047E VOL: 0
; 0000 023A     int                 res=0, i=0, err=0;
; 0000 023B     unsigned long int   timestamp_rd;
; 0000 023C     unsigned char       statusCode;
; 0000 023D 
; 0000 023E     // --------------- Check for Maintenance Event --------------- //
; 0000 023F     err =   checkSendMIPAlarm(&statusCode);
;PCODE: $0000047F VOL: 0
;PCODE: $00000480 VOL: 0
;	res -> R16,R17
;	i -> R18,R19
;	err -> R20,R21
;	timestamp_rd -> Y+7
;	statusCode -> Y+6
;PCODE: $00000481 VOL: 0
;PCODE: $00000482 VOL: 0
;PCODE: $00000483 VOL: 0
;PCODE: $00000484 VOL: 0
;PCODE: $00000485 VOL: 0
;PCODE: $00000486 VOL: 0
;PCODE: $00000487 VOL: 0
;PCODE: $00000488 VOL: 0
;PCODE: $00000489 VOL: 0
; 0000 0240     res |=  err;
;PCODE: $0000048A VOL: 0
;PCODE: $0000048B VOL: 0
; 0000 0241     if(err){
;PCODE: $0000048C VOL: 0
;PCODE: $0000048D VOL: 0
; 0000 0242         timestamp_rd    = DS1672_read();
;PCODE: $0000048E VOL: 0
;PCODE: $0000048F VOL: 0
; 0000 0243         if(statusCode)
;PCODE: $00000490 VOL: 0
;PCODE: $00000491 VOL: 0
;PCODE: $00000492 VOL: 0
; 0000 0244         {
; 0000 0245             printDebug("\r\n<eventCapture> !!!!!!!!!!! Monitor Mode !!!!!\r\n");
;PCODE: $00000493 VOL: 0
;PCODE: $00000494 VOL: 0
;PCODE: $00000495 VOL: 0
;PCODE: $00000496 VOL: 0
;PCODE: $00000497 VOL: 0
;PCODE: $00000498 VOL: 0
;PCODE: $00000499 VOL: 0
; 0000 0246             //printOLED("AL12%1d",i+1);
; 0000 0247         }
; 0000 0248         else
;PCODE: $0000049A VOL: 0
;PCODE: $0000049B VOL: 0
; 0000 0249         {
; 0000 024A             printDebug("\r\n<eventCapture> !!!!!!!!!!! Maintenance In Progress !!!!!\r\n");
;PCODE: $0000049C VOL: 0
;PCODE: $0000049D VOL: 0
;PCODE: $0000049E VOL: 0
;PCODE: $0000049F VOL: 0
;PCODE: $000004A0 VOL: 0
;PCODE: $000004A1 VOL: 0
;PCODE: $000004A2 VOL: 0
; 0000 024B             //printOLED("AL02%1d",i+1);
; 0000 024C         }
;PCODE: $000004A3 VOL: 0
; 0000 024D         err = addEventQueue(timestamp_rd,EVENT_MTNC,statusCode);
;PCODE: $000004A4 VOL: 0
;PCODE: $000004A5 VOL: 0
;PCODE: $000004A6 VOL: 0
;PCODE: $000004A7 VOL: 0
;PCODE: $000004A8 VOL: 0
;PCODE: $000004A9 VOL: 0
;PCODE: $000004AA VOL: 0
; 0000 024E         if(err < 0){
;PCODE: $000004AB VOL: 0
;PCODE: $000004AC VOL: 0
; 0000 024F             printDebug("<eventCapture> addEventQueue() failed\r\n");
;PCODE: $000004AD VOL: 0
;PCODE: $000004AE VOL: 0
;PCODE: $000004AF VOL: 0
;PCODE: $000004B0 VOL: 0
;PCODE: $000004B1 VOL: 0
;PCODE: $000004B2 VOL: 0
;PCODE: $000004B3 VOL: 0
; 0000 0250         }
; 0000 0251     }
;PCODE: $000004B4 VOL: 0
; 0000 0252 
; 0000 0253     /*
; 0000 0254     // -- Analog Input Event -- //
; 0000 0255     // -- reserved -- //
; 0000 0256     */
; 0000 0257     // --------------- Check for Power Down Event --------------- //
; 0000 0258     err =   checkSendPowerAlarm(&statusCode);
;PCODE: $000004B5 VOL: 0
;PCODE: $000004B6 VOL: 0
;PCODE: $000004B7 VOL: 0
;PCODE: $000004B8 VOL: 0
; 0000 0259     res |=  err;
;PCODE: $000004B9 VOL: 0
;PCODE: $000004BA VOL: 0
; 0000 025A     if(err){
;PCODE: $000004BB VOL: 0
;PCODE: $000004BC VOL: 0
; 0000 025B         timestamp_rd    = DS1672_read();
;PCODE: $000004BD VOL: 0
;PCODE: $000004BE VOL: 0
; 0000 025C         if(statusCode)
;PCODE: $000004BF VOL: 0
;PCODE: $000004C0 VOL: 0
;PCODE: $000004C1 VOL: 0
; 0000 025D         {
; 0000 025E             printDebug("\r\n<eventCapture> !!!!!!!!!!! Main Power Down !!!!!\r\n");
;PCODE: $000004C2 VOL: 0
;PCODE: $000004C3 VOL: 0
;PCODE: $000004C4 VOL: 0
;PCODE: $000004C5 VOL: 0
;PCODE: $000004C6 VOL: 0
;PCODE: $000004C7 VOL: 0
;PCODE: $000004C8 VOL: 0
; 0000 025F             //printOLED("AL12%1d",i+1);
; 0000 0260         }
; 0000 0261         else
;PCODE: $000004C9 VOL: 0
;PCODE: $000004CA VOL: 0
; 0000 0262         {
; 0000 0263             printDebug("\r\n<eventCapture> !!!!!!!!!!! Main Power Up !!!!!\r\n");
;PCODE: $000004CB VOL: 0
;PCODE: $000004CC VOL: 0
;PCODE: $000004CD VOL: 0
;PCODE: $000004CE VOL: 0
;PCODE: $000004CF VOL: 0
;PCODE: $000004D0 VOL: 0
;PCODE: $000004D1 VOL: 0
; 0000 0264             //printOLED("AL02%1d",i+1);
; 0000 0265         }
;PCODE: $000004D2 VOL: 0
; 0000 0266         err = addEventQueue(timestamp_rd,EVENT_PWR,statusCode);
;PCODE: $000004D3 VOL: 0
;PCODE: $000004D4 VOL: 0
;PCODE: $000004D5 VOL: 0
;PCODE: $000004D6 VOL: 0
;PCODE: $000004D7 VOL: 0
;PCODE: $000004D8 VOL: 0
;PCODE: $000004D9 VOL: 0
; 0000 0267         if(err < 0){
;PCODE: $000004DA VOL: 0
;PCODE: $000004DB VOL: 0
; 0000 0268             printDebug("<eventCapture> addEventQueue() failed\r\n");
;PCODE: $000004DC VOL: 0
;PCODE: $000004DD VOL: 0
;PCODE: $000004DE VOL: 0
;PCODE: $000004DF VOL: 0
;PCODE: $000004E0 VOL: 0
;PCODE: $000004E1 VOL: 0
;PCODE: $000004E2 VOL: 0
; 0000 0269         }
; 0000 026A     }
;PCODE: $000004E3 VOL: 0
; 0000 026B 
; 0000 026C     // --------------- Check for Battery Event --------------- //
; 0000 026D     err =   checkSendBatteryAlarm(&statusCode);
;PCODE: $000004E4 VOL: 0
;PCODE: $000004E5 VOL: 0
;PCODE: $000004E6 VOL: 0
;PCODE: $000004E7 VOL: 0
; 0000 026E     res |=  err;
;PCODE: $000004E8 VOL: 0
;PCODE: $000004E9 VOL: 0
; 0000 026F     if(err){
;PCODE: $000004EA VOL: 0
;PCODE: $000004EB VOL: 0
; 0000 0270         timestamp_rd    = DS1672_read();
;PCODE: $000004EC VOL: 0
;PCODE: $000004ED VOL: 0
; 0000 0271         if(statusCode)
;PCODE: $000004EE VOL: 0
;PCODE: $000004EF VOL: 0
;PCODE: $000004F0 VOL: 0
; 0000 0272         {
; 0000 0273             printDebug("\r\n<eventCapture> !!!!!!!!!!! Battery Low !!!!!\r\n");
;PCODE: $000004F1 VOL: 0
;PCODE: $000004F2 VOL: 0
;PCODE: $000004F3 VOL: 0
;PCODE: $000004F4 VOL: 0
;PCODE: $000004F5 VOL: 0
;PCODE: $000004F6 VOL: 0
;PCODE: $000004F7 VOL: 0
; 0000 0274             //printOLED("AL12%1d",i+1);
; 0000 0275         }
; 0000 0276         else
;PCODE: $000004F8 VOL: 0
;PCODE: $000004F9 VOL: 0
; 0000 0277         {
; 0000 0278             printDebug("\r\n<eventCapture> !!!!!!!!!!! Battery OK !!!!!\r\n");
;PCODE: $000004FA VOL: 0
;PCODE: $000004FB VOL: 0
;PCODE: $000004FC VOL: 0
;PCODE: $000004FD VOL: 0
;PCODE: $000004FE VOL: 0
;PCODE: $000004FF VOL: 0
;PCODE: $00000500 VOL: 0
; 0000 0279             //printOLED("AL02%1d",i+1);
; 0000 027A         }
;PCODE: $00000501 VOL: 0
; 0000 027B         err = addEventQueue(timestamp_rd,EVENT_BAT,statusCode);
;PCODE: $00000502 VOL: 0
;PCODE: $00000503 VOL: 0
;PCODE: $00000504 VOL: 0
;PCODE: $00000505 VOL: 0
;PCODE: $00000506 VOL: 0
;PCODE: $00000507 VOL: 0
;PCODE: $00000508 VOL: 0
; 0000 027C         if(err < 0){
;PCODE: $00000509 VOL: 0
;PCODE: $0000050A VOL: 0
; 0000 027D             printDebug("<eventCapture> addEventQueue() failed\r\n");
;PCODE: $0000050B VOL: 0
;PCODE: $0000050C VOL: 0
;PCODE: $0000050D VOL: 0
;PCODE: $0000050E VOL: 0
;PCODE: $0000050F VOL: 0
;PCODE: $00000510 VOL: 0
;PCODE: $00000511 VOL: 0
; 0000 027E         }
; 0000 027F     }
;PCODE: $00000512 VOL: 0
; 0000 0280 
; 0000 0281     // --------------- Check for Memory Event --------------- //
; 0000 0282     err =   checkSendMemoryAlarm(&statusCode);
;PCODE: $00000513 VOL: 0
;PCODE: $00000514 VOL: 0
;PCODE: $00000515 VOL: 0
;PCODE: $00000516 VOL: 0
; 0000 0283     res |=  err;
;PCODE: $00000517 VOL: 0
;PCODE: $00000518 VOL: 0
; 0000 0284     if(err){
;PCODE: $00000519 VOL: 0
;PCODE: $0000051A VOL: 0
; 0000 0285         timestamp_rd    = DS1672_read();
;PCODE: $0000051B VOL: 0
;PCODE: $0000051C VOL: 0
; 0000 0286         if(statusCode == ES_LOWMEMORY)
;PCODE: $0000051D VOL: 0
;PCODE: $0000051E VOL: 0
;PCODE: $0000051F VOL: 0
; 0000 0287         {
; 0000 0288             printDebug("\r\n<eventCapture> !!!!!!!!!!! Memory Low !!!!!\r\n");
;PCODE: $00000520 VOL: 0
;PCODE: $00000521 VOL: 0
;PCODE: $00000522 VOL: 0
;PCODE: $00000523 VOL: 0
;PCODE: $00000524 VOL: 0
;PCODE: $00000525 VOL: 0
;PCODE: $00000526 VOL: 0
; 0000 0289             //printOLED("AL12%1d",i+1);
; 0000 028A         }
; 0000 028B         else if(statusCode == ES_MEMORYERROR)
;PCODE: $00000527 VOL: 0
;PCODE: $00000528 VOL: 0
;PCODE: $00000529 VOL: 0
;PCODE: $0000052A VOL: 0
;PCODE: $0000052B VOL: 0
; 0000 028C         {
; 0000 028D             printDebug("\r\n<eventCapture> !!!!!!!!!!! Memory Error !!!!!\r\n");
;PCODE: $0000052C VOL: 0
;PCODE: $0000052D VOL: 0
;PCODE: $0000052E VOL: 0
;PCODE: $0000052F VOL: 0
;PCODE: $00000530 VOL: 0
;PCODE: $00000531 VOL: 0
;PCODE: $00000532 VOL: 0
; 0000 028E             //printOLED("AL12%1d",i+1);
; 0000 028F         }
; 0000 0290         else
;PCODE: $00000533 VOL: 0
;PCODE: $00000534 VOL: 0
; 0000 0291         {
; 0000 0292             printDebug("\r\n<eventCapture> !!!!!!!!!!! Memory OK !!!!!\r\n");
;PCODE: $00000535 VOL: 0
;PCODE: $00000536 VOL: 0
;PCODE: $00000537 VOL: 0
;PCODE: $00000538 VOL: 0
;PCODE: $00000539 VOL: 0
;PCODE: $0000053A VOL: 0
;PCODE: $0000053B VOL: 0
; 0000 0293             //printOLED("AL02%1d",i+1);
; 0000 0294         }
;PCODE: $0000053C VOL: 0
;PCODE: $0000053D VOL: 0
; 0000 0295         err = addEventQueue(timestamp_rd,EVENT_MEM,statusCode);
;PCODE: $0000053E VOL: 0
;PCODE: $0000053F VOL: 0
;PCODE: $00000540 VOL: 0
;PCODE: $00000541 VOL: 0
;PCODE: $00000542 VOL: 0
;PCODE: $00000543 VOL: 0
;PCODE: $00000544 VOL: 0
; 0000 0296         if(err < 0){
;PCODE: $00000545 VOL: 0
;PCODE: $00000546 VOL: 0
; 0000 0297             printDebug("<eventCapture> addEventQueue() failed\r\n");
;PCODE: $00000547 VOL: 0
;PCODE: $00000548 VOL: 0
;PCODE: $00000549 VOL: 0
;PCODE: $0000054A VOL: 0
;PCODE: $0000054B VOL: 0
;PCODE: $0000054C VOL: 0
;PCODE: $0000054D VOL: 0
; 0000 0298         }
; 0000 0299     }
;PCODE: $0000054E VOL: 0
; 0000 029A 
; 0000 029B     // --------------- Check for Digital Input Event --------------- //
; 0000 029C     for(i=0;i<USE_DIN;i++)
;PCODE: $0000054F VOL: 0
;PCODE: $00000550 VOL: 0
;PCODE: $00000551 VOL: 0
;PCODE: $00000552 VOL: 0
;PCODE: $00000553 VOL: 0
;PCODE: $00000554 VOL: 0
;PCODE: $00000555 VOL: 0
;PCODE: $00000556 VOL: 0
;PCODE: $00000557 VOL: 0
;PCODE: $00000558 VOL: 0
; 0000 029D     {
; 0000 029E         if(din_config[i].channelEnable)
;PCODE: $00000559 VOL: 0
;PCODE: $0000055A VOL: 0
;PCODE: $0000055B VOL: 0
;PCODE: $0000055C VOL: 0
;PCODE: $0000055D VOL: 0
;PCODE: $0000055E VOL: 0
; 0000 029F         {
; 0000 02A0             err =   checkSendDinAlarm(i,&statusCode);
;PCODE: $0000055F VOL: 0
;PCODE: $00000560 VOL: 0
;PCODE: $00000561 VOL: 0
;PCODE: $00000562 VOL: 0
; 0000 02A1             res |=  err;
;PCODE: $00000563 VOL: 0
;PCODE: $00000564 VOL: 0
; 0000 02A2             if(err){
;PCODE: $00000565 VOL: 0
;PCODE: $00000566 VOL: 0
; 0000 02A3                 timestamp_rd    = DS1672_read();
;PCODE: $00000567 VOL: 0
;PCODE: $00000568 VOL: 0
; 0000 02A4                 if(statusCode)
;PCODE: $00000569 VOL: 0
;PCODE: $0000056A VOL: 0
;PCODE: $0000056B VOL: 0
; 0000 02A5                 {
; 0000 02A6                     printDebug("\r\n<eventCapture> !!!!!!!!!!! Din %d Rising !!!!!\r\n", i+1);
;PCODE: $0000056C VOL: 0
;PCODE: $0000056D VOL: 0
;PCODE: $0000056E VOL: 0
;PCODE: $0000056F VOL: 0
;PCODE: $00000570 VOL: 0
;PCODE: $00000571 VOL: 0
;PCODE: $00000572 VOL: 0
;PCODE: $00000573 VOL: 0
;PCODE: $00000574 VOL: 0
;PCODE: $00000575 VOL: 0
;PCODE: $00000576 VOL: 0
; 0000 02A7                     //printOLED("AL12%1d",i+1);
; 0000 02A8                 }
; 0000 02A9                 else
;PCODE: $00000577 VOL: 0
;PCODE: $00000578 VOL: 0
; 0000 02AA                 {
; 0000 02AB                     printDebug("\r\n<eventCapture> !!!!!!!!!!! Din %d Falling !!!!!\r\n", i+1);
;PCODE: $00000579 VOL: 0
;PCODE: $0000057A VOL: 0
;PCODE: $0000057B VOL: 0
;PCODE: $0000057C VOL: 0
;PCODE: $0000057D VOL: 0
;PCODE: $0000057E VOL: 0
;PCODE: $0000057F VOL: 0
;PCODE: $00000580 VOL: 0
;PCODE: $00000581 VOL: 0
;PCODE: $00000582 VOL: 0
;PCODE: $00000583 VOL: 0
; 0000 02AC                     //printOLED("AL02%1d",i+1);
; 0000 02AD                 }
;PCODE: $00000584 VOL: 0
; 0000 02AE                 err = addEventQueue(timestamp_rd,EVENT_DIN(i),statusCode);
;PCODE: $00000585 VOL: 0
;PCODE: $00000586 VOL: 0
;PCODE: $00000587 VOL: 0
;PCODE: $00000588 VOL: 0
;PCODE: $00000589 VOL: 0
;PCODE: $0000058A VOL: 0
;PCODE: $0000058B VOL: 0
;PCODE: $0000058C VOL: 0
; 0000 02AF                 if(err < 0){
;PCODE: $0000058D VOL: 0
;PCODE: $0000058E VOL: 0
; 0000 02B0                     printDebug("<eventCapture> addEventQueue() failed\r\n");
;PCODE: $0000058F VOL: 0
;PCODE: $00000590 VOL: 0
;PCODE: $00000591 VOL: 0
;PCODE: $00000592 VOL: 0
;PCODE: $00000593 VOL: 0
;PCODE: $00000594 VOL: 0
;PCODE: $00000595 VOL: 0
; 0000 02B1                 }
; 0000 02B2             }
;PCODE: $00000596 VOL: 0
; 0000 02B3         }// -- din channel Enable -- //
;PCODE: $00000597 VOL: 0
; 0000 02B4     }// -- for loop -- //
;PCODE: $00000598 VOL: 0
;PCODE: $00000599 VOL: 0
;PCODE: $0000059A VOL: 0
;PCODE: $0000059B VOL: 0
;PCODE: $0000059C VOL: 0
;PCODE: $0000059D VOL: 0
; 0000 02B5 
; 0000 02B6     // --------------- Check for Sensor's Event --------------- //
; 0000 02B7     for(i=0;i<MAX_SENS_CHANNEL;i++)
;PCODE: $0000059E VOL: 0
;PCODE: $0000059F VOL: 0
;PCODE: $000005A0 VOL: 0
;PCODE: $000005A1 VOL: 0
;PCODE: $000005A2 VOL: 0
;PCODE: $000005A3 VOL: 0
;PCODE: $000005A4 VOL: 0
;PCODE: $000005A5 VOL: 0
;PCODE: $000005A6 VOL: 0
; 0000 02B8     {
; 0000 02B9         if(operating_config.sensorEnable[i])        // .. sensor enable .. //
;PCODE: $000005A7 VOL: 0
;PCODE: $000005A8 VOL: 0
;PCODE: $000005A9 VOL: 0
;PCODE: $000005AA VOL: 0
;PCODE: $000005AB VOL: 0
;PCODE: $000005AC VOL: 0
; 0000 02BA         {
; 0000 02BB             // ----------- Check Probe Alarm ------------------------- //
; 0000 02BC             err =   checkSendSensorAlarm(i,&statusCode);
;PCODE: $000005AD VOL: 0
;PCODE: $000005AE VOL: 0
;PCODE: $000005AF VOL: 0
;PCODE: $000005B0 VOL: 0
; 0000 02BD             res |=  err;
;PCODE: $000005B1 VOL: 0
;PCODE: $000005B2 VOL: 0
; 0000 02BE             if(err){
;PCODE: $000005B3 VOL: 0
;PCODE: $000005B4 VOL: 0
; 0000 02BF                 timestamp_rd    = DS1672_read();
;PCODE: $000005B5 VOL: 0
;PCODE: $000005B6 VOL: 0
; 0000 02C0                 if(statusCode)
;PCODE: $000005B7 VOL: 0
;PCODE: $000005B8 VOL: 0
;PCODE: $000005B9 VOL: 0
; 0000 02C1                 {
; 0000 02C2                     printDebug("\r\n<eventCapture> !!!!!!!!!!! PROBE %d DISCONNECT !!!!!\r\n", i+1);
;PCODE: $000005BA VOL: 0
;PCODE: $000005BB VOL: 0
;PCODE: $000005BC VOL: 0
;PCODE: $000005BD VOL: 0
;PCODE: $000005BE VOL: 0
;PCODE: $000005BF VOL: 0
;PCODE: $000005C0 VOL: 0
;PCODE: $000005C1 VOL: 0
;PCODE: $000005C2 VOL: 0
;PCODE: $000005C3 VOL: 0
;PCODE: $000005C4 VOL: 0
; 0000 02C3                     printOLED("AL12%1d",i+1);
;PCODE: $000005C5 VOL: 0
;PCODE: $000005C6 VOL: 0
;PCODE: $000005C7 VOL: 0
;PCODE: $000005C8 VOL: 0
;PCODE: $000005C9 VOL: 0
;PCODE: $000005CA VOL: 0
;PCODE: $000005CB VOL: 0
;PCODE: $000005CC VOL: 0
;PCODE: $000005CD VOL: 0
;PCODE: $000005CE VOL: 0
;PCODE: $000005CF VOL: 0
; 0000 02C4                 }
; 0000 02C5                 else
;PCODE: $000005D0 VOL: 0
;PCODE: $000005D1 VOL: 0
; 0000 02C6                 {
; 0000 02C7                     printDebug("\r\n<eventCapture> !!!!!!!!!!! PROBE %d CONNECT !!!!!\r\n", i+1);
;PCODE: $000005D2 VOL: 0
;PCODE: $000005D3 VOL: 0
;PCODE: $000005D4 VOL: 0
;PCODE: $000005D5 VOL: 0
;PCODE: $000005D6 VOL: 0
;PCODE: $000005D7 VOL: 0
;PCODE: $000005D8 VOL: 0
;PCODE: $000005D9 VOL: 0
;PCODE: $000005DA VOL: 0
;PCODE: $000005DB VOL: 0
;PCODE: $000005DC VOL: 0
; 0000 02C8                     printOLED("AL02%1d",i+1);
;PCODE: $000005DD VOL: 0
;PCODE: $000005DE VOL: 0
;PCODE: $000005DF VOL: 0
;PCODE: $000005E0 VOL: 0
;PCODE: $000005E1 VOL: 0
;PCODE: $000005E2 VOL: 0
;PCODE: $000005E3 VOL: 0
;PCODE: $000005E4 VOL: 0
;PCODE: $000005E5 VOL: 0
;PCODE: $000005E6 VOL: 0
;PCODE: $000005E7 VOL: 0
; 0000 02C9                 }
;PCODE: $000005E8 VOL: 0
; 0000 02CA 
; 0000 02CB                 err = addEventQueue(timestamp_rd,EVENT_SEN(i),statusCode);
;PCODE: $000005E9 VOL: 0
;PCODE: $000005EA VOL: 0
;PCODE: $000005EB VOL: 0
;PCODE: $000005EC VOL: 0
;PCODE: $000005ED VOL: 0
;PCODE: $000005EE VOL: 0
;PCODE: $000005EF VOL: 0
;PCODE: $000005F0 VOL: 0
; 0000 02CC                 if(err < 0){
;PCODE: $000005F1 VOL: 0
;PCODE: $000005F2 VOL: 0
; 0000 02CD                     printDebug("<eventCapture> addEventQueue() failed\r\n");
;PCODE: $000005F3 VOL: 0
;PCODE: $000005F4 VOL: 0
;PCODE: $000005F5 VOL: 0
;PCODE: $000005F6 VOL: 0
;PCODE: $000005F7 VOL: 0
;PCODE: $000005F8 VOL: 0
;PCODE: $000005F9 VOL: 0
; 0000 02CE                 }
; 0000 02CF             }// -- check sensor alarm -- //
;PCODE: $000005FA VOL: 0
; 0000 02D0             else
;PCODE: $000005FB VOL: 0
;PCODE: $000005FC VOL: 0
; 0000 02D1             {
; 0000 02D2                 if(sensor_config[i].alarmEnable)        // . sensor alarm enable . //
;PCODE: $000005FD VOL: 0
;PCODE: $000005FE VOL: 0
;PCODE: $000005FF VOL: 0
;PCODE: $00000600 VOL: 0
;PCODE: $00000601 VOL: 0
;PCODE: $00000602 VOL: 0
;PCODE: $00000603 VOL: 0
; 0000 02D3                 {
; 0000 02D4                     // ----------- Check Temperature Alarm ------------------- //
; 0000 02D5                     err =   checkSendDataAlarm(i,&statusCode);
;PCODE: $00000604 VOL: 0
;PCODE: $00000605 VOL: 0
;PCODE: $00000606 VOL: 0
;PCODE: $00000607 VOL: 0
; 0000 02D6                     res |=  err;
;PCODE: $00000608 VOL: 0
;PCODE: $00000609 VOL: 0
; 0000 02D7                     if(err){
;PCODE: $0000060A VOL: 0
;PCODE: $0000060B VOL: 0
; 0000 02D8                         timestamp_rd    = DS1672_read();
;PCODE: $0000060C VOL: 0
;PCODE: $0000060D VOL: 0
; 0000 02D9                         if(statusCode)
;PCODE: $0000060E VOL: 0
;PCODE: $0000060F VOL: 0
;PCODE: $00000610 VOL: 0
; 0000 02DA                         {
; 0000 02DB                             printDebug("\r\n<eventCapture> !!!!!!!!!!! PROBE %d Temperature ERROR !!!!!\r\n", i+1);
;PCODE: $00000611 VOL: 0
;PCODE: $00000612 VOL: 0
;PCODE: $00000613 VOL: 0
;PCODE: $00000614 VOL: 0
;PCODE: $00000615 VOL: 0
;PCODE: $00000616 VOL: 0
;PCODE: $00000617 VOL: 0
;PCODE: $00000618 VOL: 0
;PCODE: $00000619 VOL: 0
;PCODE: $0000061A VOL: 0
;PCODE: $0000061B VOL: 0
; 0000 02DC                             printOLED("AL12%1d",i+1);
;PCODE: $0000061C VOL: 0
;PCODE: $0000061D VOL: 0
;PCODE: $0000061E VOL: 0
;PCODE: $0000061F VOL: 0
;PCODE: $00000620 VOL: 0
;PCODE: $00000621 VOL: 0
;PCODE: $00000622 VOL: 0
;PCODE: $00000623 VOL: 0
;PCODE: $00000624 VOL: 0
;PCODE: $00000625 VOL: 0
;PCODE: $00000626 VOL: 0
; 0000 02DD                         }
; 0000 02DE                         else
;PCODE: $00000627 VOL: 0
;PCODE: $00000628 VOL: 0
; 0000 02DF                         {
; 0000 02E0                             printDebug("\r\n<eventCapture> !!!!!!!!!!! PROBE %d Temperature OK !!!!!\r\n", i+1);
;PCODE: $00000629 VOL: 0
;PCODE: $0000062A VOL: 0
;PCODE: $0000062B VOL: 0
;PCODE: $0000062C VOL: 0
;PCODE: $0000062D VOL: 0
;PCODE: $0000062E VOL: 0
;PCODE: $0000062F VOL: 0
;PCODE: $00000630 VOL: 0
;PCODE: $00000631 VOL: 0
;PCODE: $00000632 VOL: 0
;PCODE: $00000633 VOL: 0
; 0000 02E1                             printOLED("AL02%1d",i+1);
;PCODE: $00000634 VOL: 0
;PCODE: $00000635 VOL: 0
;PCODE: $00000636 VOL: 0
;PCODE: $00000637 VOL: 0
;PCODE: $00000638 VOL: 0
;PCODE: $00000639 VOL: 0
;PCODE: $0000063A VOL: 0
;PCODE: $0000063B VOL: 0
;PCODE: $0000063C VOL: 0
;PCODE: $0000063D VOL: 0
;PCODE: $0000063E VOL: 0
; 0000 02E2                         }
;PCODE: $0000063F VOL: 0
; 0000 02E3                         err = addEventQueue(timestamp_rd,EVENT_DAT(i),statusCode);
;PCODE: $00000640 VOL: 0
;PCODE: $00000641 VOL: 0
;PCODE: $00000642 VOL: 0
;PCODE: $00000643 VOL: 0
;PCODE: $00000644 VOL: 0
;PCODE: $00000645 VOL: 0
;PCODE: $00000646 VOL: 0
;PCODE: $00000647 VOL: 0
; 0000 02E4                         if(err < 0){
;PCODE: $00000648 VOL: 0
;PCODE: $00000649 VOL: 0
; 0000 02E5                             printDebug("<eventCapture> addEventQueue() failed\r\n");
;PCODE: $0000064A VOL: 0
;PCODE: $0000064B VOL: 0
;PCODE: $0000064C VOL: 0
;PCODE: $0000064D VOL: 0
;PCODE: $0000064E VOL: 0
;PCODE: $0000064F VOL: 0
;PCODE: $00000650 VOL: 0
; 0000 02E6                         }
; 0000 02E7                     }
;PCODE: $00000651 VOL: 0
; 0000 02E8                 }// -- sensor.alarmEnable -- //
;PCODE: $00000652 VOL: 0
; 0000 02E9             }// -- check data alarm -- //
;PCODE: $00000653 VOL: 0
;PCODE: $00000654 VOL: 0
; 0000 02EA         }// -- sensor Enable -- //
; 0000 02EB     }// -- for loop -- //
;PCODE: $00000655 VOL: 0
;PCODE: $00000656 VOL: 0
;PCODE: $00000657 VOL: 0
;PCODE: $00000658 VOL: 0
;PCODE: $00000659 VOL: 0
;PCODE: $0000065A VOL: 0
; 0000 02EC 
; 0000 02ED 
; 0000 02EE     return res;
;PCODE: $0000065B VOL: 0
;PCODE: $0000065C VOL: 0
;PCODE: $0000065D VOL: 0
;PCODE: $0000065E VOL: 0
; 0000 02EF }
;PCODE: $0000065F VOL: 0
;/*============================================================*/
;
;/**************************************************************/
;/***************** Realtime Report Management *****************/
;/**************************************************************/
;/*============================================================*/
;int statusReport(void)
; 0000 02F7 {
;PCODE: $00000660 VOL: 0
;PCODE: $00000661 VOL: 0
; 0000 02F8     int                     res = 0;
; 0000 02F9     unsigned long int       timestamp_rd;
; 0000 02FA     unsigned char           *param;
; 0000 02FB     int                     paramLen = 0;
; 0000 02FC 
; 0000 02FD     unsigned short          deviceState;
; 0000 02FE 
; 0000 02FF     switch (status_config.accm)
;PCODE: $00000662 VOL: 0
;PCODE: $00000663 VOL: 0
;	res -> R16,R17
;	timestamp_rd -> Y+8
;	*param -> R18,R19
;	paramLen -> R20,R21
;	deviceState -> Y+6
;PCODE: $00000664 VOL: 0
;PCODE: $00000665 VOL: 0
;PCODE: $00000666 VOL: 0
;PCODE: $00000667 VOL: 0
;PCODE: $00000668 VOL: 0
;PCODE: $00000669 VOL: 0
; 0000 0300     {
; 0000 0301         case REPORT_SINGLE      :   printDebug("<statusReport> REPORT_SINGLE mode not supported yet\r\n");
;PCODE: $0000066A VOL: 0
;PCODE: $0000066B VOL: 0
;PCODE: $0000066C VOL: 0
;PCODE: $0000066D VOL: 0
;PCODE: $0000066E VOL: 0
;PCODE: $0000066F VOL: 0
;PCODE: $00000670 VOL: 0
;PCODE: $00000671 VOL: 0
;PCODE: $00000672 VOL: 0
; 0000 0302                                     return -1;
;PCODE: $00000673 VOL: 0
;PCODE: $00000674 VOL: 0
;PCODE: $00000675 VOL: 0
;PCODE: $00000676 VOL: 0
; 0000 0303         case REPORT_MULTIPLE    :   printDebug("<statusReport> REPORT_MULTIPLE mode not supported yet\r\n");
;PCODE: $00000677 VOL: 0
;PCODE: $00000678 VOL: 0
;PCODE: $00000679 VOL: 0
;PCODE: $0000067A VOL: 0
;PCODE: $0000067B VOL: 0
;PCODE: $0000067C VOL: 0
;PCODE: $0000067D VOL: 0
;PCODE: $0000067E VOL: 0
;PCODE: $0000067F VOL: 0
;PCODE: $00000680 VOL: 0
; 0000 0304                                     return -1;
;PCODE: $00000681 VOL: 0
;PCODE: $00000682 VOL: 0
;PCODE: $00000683 VOL: 0
;PCODE: $00000684 VOL: 0
; 0000 0305         case REPORT_ALL         :   param = (unsigned char *) malloc(sizeof(char) * 11);
;PCODE: $00000685 VOL: 0
;PCODE: $00000686 VOL: 0
;PCODE: $00000687 VOL: 0
;PCODE: $00000688 VOL: 0
;PCODE: $00000689 VOL: 0
;PCODE: $0000068A VOL: 0
;PCODE: $0000068B VOL: 0
; 0000 0306                                     if(param == NULL){
;PCODE: $0000068C VOL: 0
;PCODE: $0000068D VOL: 0
; 0000 0307                                         printDebug("<statusReport> malloc failed (%d bytes)\r\n",paramLen);
;PCODE: $0000068E VOL: 0
;PCODE: $0000068F VOL: 0
;PCODE: $00000690 VOL: 0
;PCODE: $00000691 VOL: 0
;PCODE: $00000692 VOL: 0
;PCODE: $00000693 VOL: 0
;PCODE: $00000694 VOL: 0
;PCODE: $00000695 VOL: 0
;PCODE: $00000696 VOL: 0
;PCODE: $00000697 VOL: 0
; 0000 0308                                         return -1;
;PCODE: $00000698 VOL: 0
;PCODE: $00000699 VOL: 0
;PCODE: $0000069A VOL: 0
;PCODE: $0000069B VOL: 0
; 0000 0309                                     }
; 0000 030A 
; 0000 030B                                     res = getDeviceState(&deviceState);
;PCODE: $0000069C VOL: 0
;PCODE: $0000069D VOL: 0
;PCODE: $0000069E VOL: 0
;PCODE: $0000069F VOL: 0
; 0000 030C                                     if(res<0){
;PCODE: $000006A0 VOL: 0
;PCODE: $000006A1 VOL: 0
; 0000 030D                                         printDebug("<statusReport> getDeviceState() failed\r\n");
;PCODE: $000006A2 VOL: 0
;PCODE: $000006A3 VOL: 0
;PCODE: $000006A4 VOL: 0
;PCODE: $000006A5 VOL: 0
;PCODE: $000006A6 VOL: 0
;PCODE: $000006A7 VOL: 0
;PCODE: $000006A8 VOL: 0
; 0000 030E                                         free ( param );
;PCODE: $000006A9 VOL: 0
;PCODE: $000006AA VOL: 0
; 0000 030F                                         return -1;
;PCODE: $000006AB VOL: 0
;PCODE: $000006AC VOL: 0
;PCODE: $000006AD VOL: 0
;PCODE: $000006AE VOL: 0
; 0000 0310                                     }
; 0000 0311 
; 0000 0312                                     param[paramLen++] = (deviceState >> 8) & 0x00FF;
;PCODE: $000006AF VOL: 0
;PCODE: $000006B0 VOL: 0
;PCODE: $000006B1 VOL: 0
;PCODE: $000006B2 VOL: 0
;PCODE: $000006B3 VOL: 0
;PCODE: $000006B4 VOL: 0
;PCODE: $000006B5 VOL: 0
;PCODE: $000006B6 VOL: 0
;PCODE: $000006B7 VOL: 0
;PCODE: $000006B8 VOL: 0
; 0000 0313                                     param[paramLen++] = (deviceState & 0x00FF);
;PCODE: $000006B9 VOL: 0
;PCODE: $000006BA VOL: 0
;PCODE: $000006BB VOL: 0
;PCODE: $000006BC VOL: 0
;PCODE: $000006BD VOL: 0
;PCODE: $000006BE VOL: 0
;PCODE: $000006BF VOL: 0
;PCODE: $000006C0 VOL: 0
; 0000 0314                                     param[paramLen++] = powerSrcStatus;
;PCODE: $000006C1 VOL: 0
;PCODE: $000006C2 VOL: 0
;PCODE: $000006C3 VOL: 0
;PCODE: $000006C4 VOL: 0
;PCODE: $000006C5 VOL: 0
;PCODE: $000006C6 VOL: 0
; 0000 0315 
; 0000 0316 
; 0000 0317                                     memcpy(&param[paramLen],&batteryVolt,sizeof(batteryVolt));
;PCODE: $000006C7 VOL: 0
;PCODE: $000006C8 VOL: 0
;PCODE: $000006C9 VOL: 0
;PCODE: $000006CA VOL: 0
;PCODE: $000006CB VOL: 0
;PCODE: $000006CC VOL: 0
;PCODE: $000006CD VOL: 0
;PCODE: $000006CE VOL: 0
; 0000 0318                                     paramLen         += sizeof(batteryVolt);
;PCODE: $000006CF VOL: 0
;PCODE: $000006D0 VOL: 0
; 0000 0319 
; 0000 031A                                     param[paramLen++] = dinStatus[0];
;PCODE: $000006D1 VOL: 0
;PCODE: $000006D2 VOL: 0
;PCODE: $000006D3 VOL: 0
;PCODE: $000006D4 VOL: 0
;PCODE: $000006D5 VOL: 0
;PCODE: $000006D6 VOL: 0
; 0000 031B                                     param[paramLen++] = dinStatus[1];
;PCODE: $000006D7 VOL: 0
;PCODE: $000006D8 VOL: 0
;PCODE: $000006D9 VOL: 0
;PCODE: $000006DA VOL: 0
;PCODE: $000006DB VOL: 0
;PCODE: $000006DC VOL: 0
;PCODE: $000006DD VOL: 0
; 0000 031C                                     param[paramLen++] = doutStatus[0];
;PCODE: $000006DE VOL: 0
;PCODE: $000006DF VOL: 0
;PCODE: $000006E0 VOL: 0
;PCODE: $000006E1 VOL: 0
;PCODE: $000006E2 VOL: 0
;PCODE: $000006E3 VOL: 0
; 0000 031D                                     param[paramLen++] = doutStatus[1];
;PCODE: $000006E4 VOL: 0
;PCODE: $000006E5 VOL: 0
;PCODE: $000006E6 VOL: 0
;PCODE: $000006E7 VOL: 0
;PCODE: $000006E8 VOL: 0
;PCODE: $000006E9 VOL: 0
;PCODE: $000006EA VOL: 0
; 0000 031E 
; 0000 031F                                     break;
;PCODE: $000006EB VOL: 0
; 0000 0320         default                 :   printDebug("<statusReport> status report accm unknown [0x%02X]\r\n",status_config.accm);
;PCODE: $000006EC VOL: 0
;PCODE: $000006ED VOL: 0
;PCODE: $000006EE VOL: 0
;PCODE: $000006EF VOL: 0
;PCODE: $000006F0 VOL: 0
;PCODE: $000006F1 VOL: 0
;PCODE: $000006F2 VOL: 0
;PCODE: $000006F3 VOL: 0
;PCODE: $000006F4 VOL: 0
;PCODE: $000006F5 VOL: 0
;PCODE: $000006F6 VOL: 0
; 0000 0321                                     return -1;
;PCODE: $000006F7 VOL: 0
;PCODE: $000006F8 VOL: 0
;PCODE: $000006F9 VOL: 0
;PCODE: $000006FA VOL: 0
; 0000 0322     }
;PCODE: $000006FB VOL: 0
; 0000 0323 
; 0000 0324     timestamp_rd = DS1672_read();
;PCODE: $000006FC VOL: 0
;PCODE: $000006FD VOL: 0
; 0000 0325 
; 0000 0326     res = ETH_sendStatusReportCmd(timestamp_rd,status_config.accm,param,paramLen);
;PCODE: $000006FE VOL: 0
;PCODE: $000006FF VOL: 0
;PCODE: $00000700 VOL: 0
;PCODE: $00000701 VOL: 0
;PCODE: $00000702 VOL: 0
;PCODE: $00000703 VOL: 0
;PCODE: $00000704 VOL: 0
;PCODE: $00000705 VOL: 0
; 0000 0327     if(res < 0)
;PCODE: $00000706 VOL: 0
;PCODE: $00000707 VOL: 0
; 0000 0328     {
; 0000 0329         printDebug("<statusReport> ETH_sendStatusReportCmd() failed\r\n");
;PCODE: $00000708 VOL: 0
;PCODE: $00000709 VOL: 0
;PCODE: $0000070A VOL: 0
;PCODE: $0000070B VOL: 0
;PCODE: $0000070C VOL: 0
;PCODE: $0000070D VOL: 0
;PCODE: $0000070E VOL: 0
; 0000 032A     }
; 0000 032B 
; 0000 032C     free ( param );
;PCODE: $0000070F VOL: 0
;PCODE: $00000710 VOL: 0
;PCODE: $00000711 VOL: 0
; 0000 032D }
;PCODE: $00000712 VOL: 0
;PCODE: $00000713 VOL: 0
;PCODE: $00000714 VOL: 0
;PCODE: $00000715 VOL: 0
;/*============================================================*/
;int sensorDataReport(void)
; 0000 0330 {
;PCODE: $00000716 VOL: 0
;PCODE: $00000717 VOL: 0
; 0000 0331     int                     count = 0;
; 0000 0332     int                     res;
; 0000 0333     unsigned long int       timestamp;
; 0000 0334     unsigned int            channel;
; 0000 0335     float                   value;
; 0000 0336 
; 0000 0337     // -- for debug -- //
; 0000 0338     //struct rtc_structure    dt;
; 0000 0339     // --------------- //
; 0000 033A     //printDebug("<sensorDataReport> ------------------------- \r\n");
; 0000 033B 
; 0000 033C     while (count < MAX_DATA_QUEUE)
;PCODE: $00000718 VOL: 0
;PCODE: $00000719 VOL: 0
;	count -> R16,R17
;	res -> R18,R19
;	timestamp -> Y+10
;	channel -> R20,R21
;	value -> Y+6
;PCODE: $0000071A VOL: 0
;PCODE: $0000071B VOL: 0
;PCODE: $0000071C VOL: 0
;PCODE: $0000071D VOL: 0
;PCODE: $0000071E VOL: 0
;PCODE: $0000071F VOL: 0
; 0000 033D     {
; 0000 033E         res = fetchDataQueue(&timestamp, &channel, &value);
;PCODE: $00000720 VOL: 0
;PCODE: $00000721 VOL: 0
;PCODE: $00000722 VOL: 0
;PCODE: $00000723 VOL: 0
;PCODE: $00000724 VOL: 0
;PCODE: $00000725 VOL: 0
;PCODE: $00000726 VOL: 0
;PCODE: $00000727 VOL: 0
;PCODE: $00000728 VOL: 0
;PCODE: $00000729 VOL: 0
;PCODE: $0000072A VOL: 0
;PCODE: $0000072B VOL: 0
; 0000 033F         if(res < 0)
;PCODE: $0000072C VOL: 0
;PCODE: $0000072D VOL: 0
; 0000 0340         {
; 0000 0341             break;
;PCODE: $0000072E VOL: 0
; 0000 0342         }
; 0000 0343         else
;PCODE: $0000072F VOL: 0
;PCODE: $00000730 VOL: 0
; 0000 0344         {
; 0000 0345             printDebug("<sensorDataReport> [%ld][%d][%.2f]\r\n",timestamp,channel,value);
;PCODE: $00000731 VOL: 0
;PCODE: $00000732 VOL: 0
;PCODE: $00000733 VOL: 0
;PCODE: $00000734 VOL: 0
;PCODE: $00000735 VOL: 0
;PCODE: $00000736 VOL: 0
;PCODE: $00000737 VOL: 0
;PCODE: $00000738 VOL: 0
;PCODE: $00000739 VOL: 0
;PCODE: $0000073A VOL: 0
;PCODE: $0000073B VOL: 0
;PCODE: $0000073C VOL: 0
;PCODE: $0000073D VOL: 0
;PCODE: $0000073E VOL: 0
; 0000 0346             /*
; 0000 0347             binary_to_date(timestamp, &dt);
; 0000 0348             printRTC(dt);
; 0000 0349             printDebug("timestamp [%ld]\r\n",   timestamp);
; 0000 034A             printDebug("channel   [%d]\r\n",    channel);
; 0000 034B             printDebug("value     [%.2f]\r\n",  value);
; 0000 034C             */
; 0000 034D 
; 0000 034E             if( (timestamp == 0) || (timestamp == 0xFFFFFFFF) || (channel > (MAX_SENS_CHANNEL-1)) )
;PCODE: $0000073F VOL: 0
;PCODE: $00000740 VOL: 0
;PCODE: $00000741 VOL: 0
;PCODE: $00000742 VOL: 0
;PCODE: $00000743 VOL: 0
;PCODE: $00000744 VOL: 0
;PCODE: $00000745 VOL: 0
;PCODE: $00000746 VOL: 0
;PCODE: $00000747 VOL: 0
;PCODE: $00000748 VOL: 0
;PCODE: $00000749 VOL: 0
; 0000 034F             {
; 0000 0350                 printDebug("\r\n<sensorDataReport> === ERROR INFOMATION IN TEMP QUEUE ===\r\n");
;PCODE: $0000074A VOL: 0
;PCODE: $0000074B VOL: 0
;PCODE: $0000074C VOL: 0
;PCODE: $0000074D VOL: 0
;PCODE: $0000074E VOL: 0
;PCODE: $0000074F VOL: 0
;PCODE: $00000750 VOL: 0
; 0000 0351                 continue;
;PCODE: $00000751 VOL: 0
; 0000 0352             }
; 0000 0353 
; 0000 0354 
; 0000 0355             res = ETH_sendDataReportCmd(TYP_RLT,timestamp,channel,value);
;PCODE: $00000752 VOL: 0
;PCODE: $00000753 VOL: 0
;PCODE: $00000754 VOL: 0
;PCODE: $00000755 VOL: 0
;PCODE: $00000756 VOL: 0
;PCODE: $00000757 VOL: 0
;PCODE: $00000758 VOL: 0
;PCODE: $00000759 VOL: 0
;PCODE: $0000075A VOL: 0
; 0000 0356             if(res < 0)
;PCODE: $0000075B VOL: 0
;PCODE: $0000075C VOL: 0
; 0000 0357             {
; 0000 0358                 printDebug("<sensorDataReport> ETH_sendDataReportCmd() failed\r\n");
;PCODE: $0000075D VOL: 0
;PCODE: $0000075E VOL: 0
;PCODE: $0000075F VOL: 0
;PCODE: $00000760 VOL: 0
;PCODE: $00000761 VOL: 0
;PCODE: $00000762 VOL: 0
;PCODE: $00000763 VOL: 0
; 0000 0359                 // --- Keep in Log --- //
; 0000 035A                 continue;
;PCODE: $00000764 VOL: 0
; 0000 035B             }
; 0000 035C             count++;
;PCODE: $00000765 VOL: 0
;PCODE: $00000766 VOL: 0
;PCODE: $00000767 VOL: 0
; 0000 035D         }
;PCODE: $00000768 VOL: 0
; 0000 035E 
; 0000 035F     }
;PCODE: $00000769 VOL: 0
;PCODE: $0000076A VOL: 0
; 0000 0360 
; 0000 0361     return count;
;PCODE: $0000076B VOL: 0
;PCODE: $0000076C VOL: 0
;PCODE: $0000076D VOL: 0
;PCODE: $0000076E VOL: 0
; 0000 0362 }
;PCODE: $0000076F VOL: 0
;/*============================================================*/
;int eventReport(void)
; 0000 0365 {
;PCODE: $00000770 VOL: 0
;PCODE: $00000771 VOL: 0
; 0000 0366     int                     count = 0;
; 0000 0367     int                     res;
; 0000 0368     unsigned long int       timestamp;
; 0000 0369     unsigned char           eventID;
; 0000 036A     unsigned char           eventStatus;
; 0000 036B 
; 0000 036C     // -- for debug -- //
; 0000 036D     //struct rtc_structure    dt;
; 0000 036E     // --------------- //
; 0000 036F     //printDebug("<eventReport> ------------------------- \r\n");
; 0000 0370 
; 0000 0371     while (count < MAX_EVENT_QUEUE)
;PCODE: $00000772 VOL: 0
;PCODE: $00000773 VOL: 0
;	count -> R16,R17
;	res -> R18,R19
;	timestamp -> Y+6
;	eventID -> R21
;	eventStatus -> R20
;PCODE: $00000774 VOL: 0
;PCODE: $00000775 VOL: 0
;PCODE: $00000776 VOL: 0
;PCODE: $00000777 VOL: 0
;PCODE: $00000778 VOL: 0
;PCODE: $00000779 VOL: 0
; 0000 0372     {
; 0000 0373         res = fetchEventQueue(&timestamp, &eventID, &eventStatus);
;PCODE: $0000077A VOL: 0
;PCODE: $0000077B VOL: 0
;PCODE: $0000077C VOL: 0
;PCODE: $0000077D VOL: 0
;PCODE: $0000077E VOL: 0
;PCODE: $0000077F VOL: 0
;PCODE: $00000780 VOL: 0
;PCODE: $00000781 VOL: 0
;PCODE: $00000782 VOL: 0
;PCODE: $00000783 VOL: 0
;PCODE: $00000784 VOL: 0
; 0000 0374         if(res < 0)
;PCODE: $00000785 VOL: 0
;PCODE: $00000786 VOL: 0
; 0000 0375         {
; 0000 0376             break;
;PCODE: $00000787 VOL: 0
; 0000 0377         }
; 0000 0378         else
;PCODE: $00000788 VOL: 0
;PCODE: $00000789 VOL: 0
; 0000 0379         {
; 0000 037A 
; 0000 037B             printDebug("<eventReport> [%ld][0x%02X][0x%02X]\r\n",timestamp,eventID,eventStatus);
;PCODE: $0000078A VOL: 0
;PCODE: $0000078B VOL: 0
;PCODE: $0000078C VOL: 0
;PCODE: $0000078D VOL: 0
;PCODE: $0000078E VOL: 0
;PCODE: $0000078F VOL: 0
;PCODE: $00000790 VOL: 0
;PCODE: $00000791 VOL: 0
;PCODE: $00000792 VOL: 0
;PCODE: $00000793 VOL: 0
;PCODE: $00000794 VOL: 0
;PCODE: $00000795 VOL: 0
;PCODE: $00000796 VOL: 0
;PCODE: $00000797 VOL: 0
;PCODE: $00000798 VOL: 0
; 0000 037C             /*
; 0000 037D             binary_to_date(timestamp, &dt);
; 0000 037E             printRTC(dt);
; 0000 037F             */
; 0000 0380 
; 0000 0381             if( (timestamp == 0) || (timestamp == 0xFFFFFFFF) )
;PCODE: $00000799 VOL: 0
;PCODE: $0000079A VOL: 0
;PCODE: $0000079B VOL: 0
;PCODE: $0000079C VOL: 0
;PCODE: $0000079D VOL: 0
;PCODE: $0000079E VOL: 0
;PCODE: $0000079F VOL: 0
;PCODE: $000007A0 VOL: 0
; 0000 0382             {
; 0000 0383                 printDebug("\r\n<eventReport> === ERROR INFOMATION IN TEMP QUEUE ===\r\n");
;PCODE: $000007A1 VOL: 0
;PCODE: $000007A2 VOL: 0
;PCODE: $000007A3 VOL: 0
;PCODE: $000007A4 VOL: 0
;PCODE: $000007A5 VOL: 0
;PCODE: $000007A6 VOL: 0
;PCODE: $000007A7 VOL: 0
; 0000 0384                 continue;
;PCODE: $000007A8 VOL: 0
; 0000 0385             }
; 0000 0386 
; 0000 0387 
; 0000 0388             res = ETH_sendEventReportCmd(TYP_RLT,timestamp,eventID,eventStatus);
;PCODE: $000007A9 VOL: 0
;PCODE: $000007AA VOL: 0
;PCODE: $000007AB VOL: 0
;PCODE: $000007AC VOL: 0
;PCODE: $000007AD VOL: 0
;PCODE: $000007AE VOL: 0
;PCODE: $000007AF VOL: 0
;PCODE: $000007B0 VOL: 0
;PCODE: $000007B1 VOL: 0
; 0000 0389             if(res < 0)
;PCODE: $000007B2 VOL: 0
;PCODE: $000007B3 VOL: 0
; 0000 038A             {
; 0000 038B                 printDebug("<eventReport> ETH_sendEventReportCmd() failed\r\n");
;PCODE: $000007B4 VOL: 0
;PCODE: $000007B5 VOL: 0
;PCODE: $000007B6 VOL: 0
;PCODE: $000007B7 VOL: 0
;PCODE: $000007B8 VOL: 0
;PCODE: $000007B9 VOL: 0
;PCODE: $000007BA VOL: 0
; 0000 038C                 // --- Keep in Log --- //
; 0000 038D                 continue;
;PCODE: $000007BB VOL: 0
; 0000 038E             }
; 0000 038F             count++;
;PCODE: $000007BC VOL: 0
;PCODE: $000007BD VOL: 0
;PCODE: $000007BE VOL: 0
; 0000 0390         }
;PCODE: $000007BF VOL: 0
; 0000 0391     }
;PCODE: $000007C0 VOL: 0
;PCODE: $000007C1 VOL: 0
; 0000 0392 
; 0000 0393     return count;
;PCODE: $000007C2 VOL: 0
;PCODE: $000007C3 VOL: 0
;PCODE: $000007C4 VOL: 0
;PCODE: $000007C5 VOL: 0
; 0000 0394 }
;PCODE: $000007C6 VOL: 0
;/*============================================================*/
;
;/**************************************************************/
;/*********************** Log Management ***********************/
;/**************************************************************/
;/*============================================================*/
;int sensorDataSave(void)
; 0000 039C {
;PCODE: $000007C7 VOL: 0
;PCODE: $000007C8 VOL: 0
; 0000 039D     FIL                     file;
; 0000 039E     char                    isFileOpen = 0;
; 0000 039F     int                     count = 0;
; 0000 03A0     int                     res;
; 0000 03A1     unsigned long int       timestamp;
; 0000 03A2     unsigned int            channel;
; 0000 03A3     float                   value;
; 0000 03A4 
; 0000 03A5 
; 0000 03A6     // -- for debug -- //
; 0000 03A7     //struct rtc_structure    dt;
; 0000 03A8     // --------------- //
; 0000 03A9 
; 0000 03AA     while (count < MAX_DATA_QUEUE)
;PCODE: $000007C9 VOL: 0
;PCODE: $000007CA VOL: 0
;	file -> Y+16
;	isFileOpen -> R17
;	count -> R18,R19
;	res -> R20,R21
;	timestamp -> Y+12
;	channel -> Y+10
;	value -> Y+6
;PCODE: $000007CB VOL: 0
;PCODE: $000007CC VOL: 0
;PCODE: $000007CD VOL: 0
;PCODE: $000007CE VOL: 0
;PCODE: $000007CF VOL: 0
;PCODE: $000007D0 VOL: 0
;PCODE: $000007D1 VOL: 0
;PCODE: $000007D2 VOL: 0
; 0000 03AB     {
; 0000 03AC         res = fetchDataQueue(&timestamp, &channel, &value);
;PCODE: $000007D3 VOL: 0
;PCODE: $000007D4 VOL: 0
;PCODE: $000007D5 VOL: 0
;PCODE: $000007D6 VOL: 0
;PCODE: $000007D7 VOL: 0
;PCODE: $000007D8 VOL: 0
;PCODE: $000007D9 VOL: 0
; 0000 03AD         if(res < 0)
;PCODE: $000007DA VOL: 0
;PCODE: $000007DB VOL: 0
; 0000 03AE         {
; 0000 03AF             break;
;PCODE: $000007DC VOL: 0
; 0000 03B0         }
; 0000 03B1         else
;PCODE: $000007DD VOL: 0
;PCODE: $000007DE VOL: 0
; 0000 03B2         {
; 0000 03B3             printDebug("<sensorDataSave> time[%ld],ch[%d],val[%.2f]\r\n",timestamp,channel,value);
;PCODE: $000007DF VOL: 0
;PCODE: $000007E0 VOL: 0
;PCODE: $000007E1 VOL: 0
;PCODE: $000007E2 VOL: 0
;PCODE: $000007E3 VOL: 0
;PCODE: $000007E4 VOL: 0
;PCODE: $000007E5 VOL: 0
;PCODE: $000007E6 VOL: 0
;PCODE: $000007E7 VOL: 0
;PCODE: $000007E8 VOL: 0
;PCODE: $000007E9 VOL: 0
;PCODE: $000007EA VOL: 0
;PCODE: $000007EB VOL: 0
;PCODE: $000007EC VOL: 0
; 0000 03B4             /*
; 0000 03B5             binary_to_date(timestamp, &dt);
; 0000 03B6             printRTC(dt);
; 0000 03B7             */
; 0000 03B8 
; 0000 03B9             if( (timestamp == 0) || (timestamp == 0xFFFFFFFF) || (channel > (MAX_SENS_CHANNEL-1)) )
;PCODE: $000007ED VOL: 0
;PCODE: $000007EE VOL: 0
;PCODE: $000007EF VOL: 0
;PCODE: $000007F0 VOL: 0
;PCODE: $000007F1 VOL: 0
;PCODE: $000007F2 VOL: 0
;PCODE: $000007F3 VOL: 0
;PCODE: $000007F4 VOL: 0
;PCODE: $000007F5 VOL: 0
;PCODE: $000007F6 VOL: 0
;PCODE: $000007F7 VOL: 0
; 0000 03BA             {
; 0000 03BB                 printDebug("\r\n<sensorDataSave> === ERROR INFOMATION IN TEMP QUEUE ===\r\n");
;PCODE: $000007F8 VOL: 0
;PCODE: $000007F9 VOL: 0
;PCODE: $000007FA VOL: 0
;PCODE: $000007FB VOL: 0
;PCODE: $000007FC VOL: 0
;PCODE: $000007FD VOL: 0
;PCODE: $000007FE VOL: 0
; 0000 03BC                 continue;
;PCODE: $000007FF VOL: 0
; 0000 03BD             }
; 0000 03BE 
; 0000 03BF             //if(sdStatus == OK && logStatus == OK)
; 0000 03C0             if(!isFileOpen)
;PCODE: $00000800 VOL: 0
;PCODE: $00000801 VOL: 0
;PCODE: $00000802 VOL: 0
; 0000 03C1             {
; 0000 03C2                 res = LOG_openFile(&file,LOGFILE_DATA);
;PCODE: $00000803 VOL: 0
;PCODE: $00000804 VOL: 0
;PCODE: $00000805 VOL: 0
;PCODE: $00000806 VOL: 0
;PCODE: $00000807 VOL: 0
;PCODE: $00000808 VOL: 0
; 0000 03C3                 if(res < 0)
;PCODE: $00000809 VOL: 0
;PCODE: $0000080A VOL: 0
; 0000 03C4                 {
; 0000 03C5                     printDebug("<sensorDataSave> LOG_openFile(%s) failed, couldn't save log\r\n",LOGFILE_DATA);
;PCODE: $0000080B VOL: 0
;PCODE: $0000080C VOL: 0
;PCODE: $0000080D VOL: 0
;PCODE: $0000080E VOL: 0
;PCODE: $0000080F VOL: 0
;PCODE: $00000810 VOL: 0
;PCODE: $00000811 VOL: 0
;PCODE: $00000812 VOL: 0
;PCODE: $00000813 VOL: 0
;PCODE: $00000814 VOL: 0
; 0000 03C6                     continue;
;PCODE: $00000815 VOL: 0
; 0000 03C7                 }
; 0000 03C8                 isFileOpen = 1;
;PCODE: $00000816 VOL: 0
;PCODE: $00000817 VOL: 0
;PCODE: $00000818 VOL: 0
; 0000 03C9             }
; 0000 03CA 
; 0000 03CB             res = LOG_insertData(&file,timestamp,channel,value);
;PCODE: $00000819 VOL: 0
;PCODE: $0000081A VOL: 0
;PCODE: $0000081B VOL: 0
;PCODE: $0000081C VOL: 0
;PCODE: $0000081D VOL: 0
;PCODE: $0000081E VOL: 0
;PCODE: $0000081F VOL: 0
;PCODE: $00000820 VOL: 0
;PCODE: $00000821 VOL: 0
;PCODE: $00000822 VOL: 0
; 0000 03CC             if(res < 0)
;PCODE: $00000823 VOL: 0
;PCODE: $00000824 VOL: 0
; 0000 03CD             {
; 0000 03CE                 printDebug("<sensorDataSave> LOG_insertData() failed\r\n");
;PCODE: $00000825 VOL: 0
;PCODE: $00000826 VOL: 0
;PCODE: $00000827 VOL: 0
;PCODE: $00000828 VOL: 0
;PCODE: $00000829 VOL: 0
;PCODE: $0000082A VOL: 0
;PCODE: $0000082B VOL: 0
; 0000 03CF                 continue;
;PCODE: $0000082C VOL: 0
; 0000 03D0             }
; 0000 03D1             count++;
;PCODE: $0000082D VOL: 0
;PCODE: $0000082E VOL: 0
;PCODE: $0000082F VOL: 0
; 0000 03D2         }
;PCODE: $00000830 VOL: 0
; 0000 03D3     }
;PCODE: $00000831 VOL: 0
;PCODE: $00000832 VOL: 0
; 0000 03D4 
; 0000 03D5     if(isFileOpen)
;PCODE: $00000833 VOL: 0
;PCODE: $00000834 VOL: 0
; 0000 03D6     {
; 0000 03D7         res = LOG_closeFile(&file);
;PCODE: $00000835 VOL: 0
;PCODE: $00000836 VOL: 0
;PCODE: $00000837 VOL: 0
;PCODE: $00000838 VOL: 0
; 0000 03D8         if(res < 0)
;PCODE: $00000839 VOL: 0
;PCODE: $0000083A VOL: 0
; 0000 03D9         {
; 0000 03DA             printDebug("<sensorDataSave> LOG_closeFile() failed\r\n");
;PCODE: $0000083B VOL: 0
;PCODE: $0000083C VOL: 0
;PCODE: $0000083D VOL: 0
;PCODE: $0000083E VOL: 0
;PCODE: $0000083F VOL: 0
;PCODE: $00000840 VOL: 0
;PCODE: $00000841 VOL: 0
; 0000 03DB             return -1;
;PCODE: $00000842 VOL: 0
;PCODE: $00000843 VOL: 0
;PCODE: $00000844 VOL: 0
;PCODE: $00000845 VOL: 0
; 0000 03DC         }
; 0000 03DD     }
;PCODE: $00000846 VOL: 0
; 0000 03DE 
; 0000 03DF     if(count > 0){
;PCODE: $00000847 VOL: 0
;PCODE: $00000848 VOL: 0
;PCODE: $00000849 VOL: 0
; 0000 03E0         //isDataLogEmpty  = 0;
; 0000 03E1         printDebug("<sensorDataSave> Data Log is not empty\r\n");
;PCODE: $0000084A VOL: 0
;PCODE: $0000084B VOL: 0
;PCODE: $0000084C VOL: 0
;PCODE: $0000084D VOL: 0
;PCODE: $0000084E VOL: 0
;PCODE: $0000084F VOL: 0
;PCODE: $00000850 VOL: 0
; 0000 03E2     }
; 0000 03E3 
; 0000 03E4     return count;
;PCODE: $00000851 VOL: 0
;PCODE: $00000852 VOL: 0
;PCODE: $00000853 VOL: 0
;PCODE: $00000854 VOL: 0
;PCODE: $00000855 VOL: 0
; 0000 03E5 }
;PCODE: $00000856 VOL: 0
;/*============================================================*/
;int eventSave(void)
; 0000 03E8 {
;PCODE: $00000857 VOL: 0
;PCODE: $00000858 VOL: 0
; 0000 03E9     FIL                     file;
; 0000 03EA     char                    isFileOpen = 0;
; 0000 03EB     int                     count = 0;
; 0000 03EC     int                     res;
; 0000 03ED     unsigned long int       timestamp;
; 0000 03EE     unsigned char           eventID;
; 0000 03EF     unsigned char           eventStatus;
; 0000 03F0 
; 0000 03F1     // -- for debug -- //
; 0000 03F2     //struct rtc_structure    dt;
; 0000 03F3     // --------------- //
; 0000 03F4 
; 0000 03F5     while (count < MAX_EVENT_QUEUE)
;PCODE: $00000859 VOL: 0
;PCODE: $0000085A VOL: 0
;	file -> Y+11
;	isFileOpen -> R17
;	count -> R18,R19
;	res -> R20,R21
;	timestamp -> Y+7
;	eventID -> R16
;	eventStatus -> Y+6
;PCODE: $0000085B VOL: 0
;PCODE: $0000085C VOL: 0
;PCODE: $0000085D VOL: 0
;PCODE: $0000085E VOL: 0
;PCODE: $0000085F VOL: 0
;PCODE: $00000860 VOL: 0
;PCODE: $00000861 VOL: 0
;PCODE: $00000862 VOL: 0
; 0000 03F6     {
; 0000 03F7         res = fetchEventQueue(&timestamp, &eventID, &eventStatus);
;PCODE: $00000863 VOL: 0
;PCODE: $00000864 VOL: 0
;PCODE: $00000865 VOL: 0
;PCODE: $00000866 VOL: 0
;PCODE: $00000867 VOL: 0
;PCODE: $00000868 VOL: 0
;PCODE: $00000869 VOL: 0
;PCODE: $0000086A VOL: 0
;PCODE: $0000086B VOL: 0
; 0000 03F8         if(res < 0)
;PCODE: $0000086C VOL: 0
;PCODE: $0000086D VOL: 0
; 0000 03F9         {
; 0000 03FA             break;
;PCODE: $0000086E VOL: 0
; 0000 03FB         }
; 0000 03FC         else
;PCODE: $0000086F VOL: 0
;PCODE: $00000870 VOL: 0
; 0000 03FD         {
; 0000 03FE             printDebug("<eventSave> time[%ld],id[0x%02X],stat[0x%02X]\r\n",timestamp,eventID,eventStatus);
;PCODE: $00000871 VOL: 0
;PCODE: $00000872 VOL: 0
;PCODE: $00000873 VOL: 0
;PCODE: $00000874 VOL: 0
;PCODE: $00000875 VOL: 0
;PCODE: $00000876 VOL: 0
;PCODE: $00000877 VOL: 0
;PCODE: $00000878 VOL: 0
;PCODE: $00000879 VOL: 0
;PCODE: $0000087A VOL: 0
;PCODE: $0000087B VOL: 0
;PCODE: $0000087C VOL: 0
;PCODE: $0000087D VOL: 0
;PCODE: $0000087E VOL: 0
;PCODE: $0000087F VOL: 0
; 0000 03FF             /*
; 0000 0400             binary_to_date(timestamp, &dt);
; 0000 0401             printRTC(dt);
; 0000 0402             */
; 0000 0403 
; 0000 0404             if( (timestamp == 0) || (timestamp == 0xFFFFFFFF) )
;PCODE: $00000880 VOL: 0
;PCODE: $00000881 VOL: 0
;PCODE: $00000882 VOL: 0
;PCODE: $00000883 VOL: 0
;PCODE: $00000884 VOL: 0
;PCODE: $00000885 VOL: 0
;PCODE: $00000886 VOL: 0
;PCODE: $00000887 VOL: 0
; 0000 0405             {
; 0000 0406                 printDebug("\r\n<eventSave> === ERROR INFOMATION IN TEMP QUEUE ===\r\n");
;PCODE: $00000888 VOL: 0
;PCODE: $00000889 VOL: 0
;PCODE: $0000088A VOL: 0
;PCODE: $0000088B VOL: 0
;PCODE: $0000088C VOL: 0
;PCODE: $0000088D VOL: 0
;PCODE: $0000088E VOL: 0
; 0000 0407                 continue;
;PCODE: $0000088F VOL: 0
; 0000 0408             }
; 0000 0409 
; 0000 040A             //if(sdStatus == OK && logStatus == OK)
; 0000 040B             if(!isFileOpen)
;PCODE: $00000890 VOL: 0
;PCODE: $00000891 VOL: 0
;PCODE: $00000892 VOL: 0
; 0000 040C             {
; 0000 040D                 res = LOG_openFile(&file,LOGFILE_EVENT);
;PCODE: $00000893 VOL: 0
;PCODE: $00000894 VOL: 0
;PCODE: $00000895 VOL: 0
;PCODE: $00000896 VOL: 0
;PCODE: $00000897 VOL: 0
;PCODE: $00000898 VOL: 0
; 0000 040E                 if(res < 0)
;PCODE: $00000899 VOL: 0
;PCODE: $0000089A VOL: 0
; 0000 040F                 {
; 0000 0410                     printDebug("<eventSave> LOG_openFile(%s) failed, couldn't save log\r\n",LOGFILE_EVENT);
;PCODE: $0000089B VOL: 0
;PCODE: $0000089C VOL: 0
;PCODE: $0000089D VOL: 0
;PCODE: $0000089E VOL: 0
;PCODE: $0000089F VOL: 0
;PCODE: $000008A0 VOL: 0
;PCODE: $000008A1 VOL: 0
;PCODE: $000008A2 VOL: 0
;PCODE: $000008A3 VOL: 0
;PCODE: $000008A4 VOL: 0
; 0000 0411                     continue;
;PCODE: $000008A5 VOL: 0
; 0000 0412                 }
; 0000 0413                 isFileOpen = 1;
;PCODE: $000008A6 VOL: 0
;PCODE: $000008A7 VOL: 0
;PCODE: $000008A8 VOL: 0
; 0000 0414             }
; 0000 0415 
; 0000 0416             res = LOG_insertEvent(&file,timestamp,eventID,eventStatus);
;PCODE: $000008A9 VOL: 0
;PCODE: $000008AA VOL: 0
;PCODE: $000008AB VOL: 0
;PCODE: $000008AC VOL: 0
;PCODE: $000008AD VOL: 0
;PCODE: $000008AE VOL: 0
;PCODE: $000008AF VOL: 0
;PCODE: $000008B0 VOL: 0
;PCODE: $000008B1 VOL: 0
; 0000 0417             if(res < 0)
;PCODE: $000008B2 VOL: 0
;PCODE: $000008B3 VOL: 0
; 0000 0418             {
; 0000 0419                 printDebug("<eventSave> LOG_insertEvent() failed\r\n");
;PCODE: $000008B4 VOL: 0
;PCODE: $000008B5 VOL: 0
;PCODE: $000008B6 VOL: 0
;PCODE: $000008B7 VOL: 0
;PCODE: $000008B8 VOL: 0
;PCODE: $000008B9 VOL: 0
;PCODE: $000008BA VOL: 0
; 0000 041A                 continue;
;PCODE: $000008BB VOL: 0
; 0000 041B             }
; 0000 041C             count++;
;PCODE: $000008BC VOL: 0
;PCODE: $000008BD VOL: 0
;PCODE: $000008BE VOL: 0
; 0000 041D         }
;PCODE: $000008BF VOL: 0
; 0000 041E     }
;PCODE: $000008C0 VOL: 0
;PCODE: $000008C1 VOL: 0
; 0000 041F 
; 0000 0420     if(isFileOpen)
;PCODE: $000008C2 VOL: 0
;PCODE: $000008C3 VOL: 0
; 0000 0421     {
; 0000 0422         res = LOG_closeFile(&file);
;PCODE: $000008C4 VOL: 0
;PCODE: $000008C5 VOL: 0
;PCODE: $000008C6 VOL: 0
;PCODE: $000008C7 VOL: 0
; 0000 0423         if(res < 0)
;PCODE: $000008C8 VOL: 0
;PCODE: $000008C9 VOL: 0
; 0000 0424         {
; 0000 0425             printDebug("<eventSave> LOG_closeFile() failed\r\n");
;PCODE: $000008CA VOL: 0
;PCODE: $000008CB VOL: 0
;PCODE: $000008CC VOL: 0
;PCODE: $000008CD VOL: 0
;PCODE: $000008CE VOL: 0
;PCODE: $000008CF VOL: 0
;PCODE: $000008D0 VOL: 0
; 0000 0426             return -1;
;PCODE: $000008D1 VOL: 0
;PCODE: $000008D2 VOL: 0
;PCODE: $000008D3 VOL: 0
;PCODE: $000008D4 VOL: 0
; 0000 0427         }
; 0000 0428     }
;PCODE: $000008D5 VOL: 0
; 0000 0429 
; 0000 042A     if(count > 0){
;PCODE: $000008D6 VOL: 0
;PCODE: $000008D7 VOL: 0
;PCODE: $000008D8 VOL: 0
; 0000 042B         //isEventLogEmpty    = 0;
; 0000 042C         printDebug("<eventSave> Event Log is not empty\r\n");
;PCODE: $000008D9 VOL: 0
;PCODE: $000008DA VOL: 0
;PCODE: $000008DB VOL: 0
;PCODE: $000008DC VOL: 0
;PCODE: $000008DD VOL: 0
;PCODE: $000008DE VOL: 0
;PCODE: $000008DF VOL: 0
; 0000 042D     }
; 0000 042E 
; 0000 042F     return count;
;PCODE: $000008E0 VOL: 0
;PCODE: $000008E1 VOL: 0
;PCODE: $000008E2 VOL: 0
;PCODE: $000008E3 VOL: 0
;PCODE: $000008E4 VOL: 0
; 0000 0430 }
;PCODE: $000008E5 VOL: 0
;/*============================================================*/
;int logReport(void)
; 0000 0433 {
;PCODE: $000008E6 VOL: 0
;PCODE: $000008E7 VOL: 0
; 0000 0434     FIL                     file;
; 0000 0435     int                     res;
; 0000 0436     unsigned long int       index;
; 0000 0437     unsigned long int       timestamp;
; 0000 0438     unsigned int            channel;
; 0000 0439     float                   value;
; 0000 043A     unsigned char           id;
; 0000 043B     unsigned char           status;
; 0000 043C 
; 0000 043D     // -- send data log if any exist -- //
; 0000 043E     if((!isDataLogEmpty) && (logDataWait.frameID == 0x00))   // -- if no logDataWaitFrameID, look for some data log to send -- //
;PCODE: $000008E8 VOL: 0
;PCODE: $000008E9 VOL: 0
;	file -> Y+18
;	res -> R16,R17
;	index -> Y+14
;	timestamp -> Y+10
;	channel -> R18,R19
;	value -> Y+6
;	id -> R21
;	status -> R20
;PCODE: $000008EA VOL: 0
;PCODE: $000008EB VOL: 0
;PCODE: $000008EC VOL: 0
;PCODE: $000008ED VOL: 0
;PCODE: $000008EE VOL: 0
;PCODE: $000008EF VOL: 0
;PCODE: $000008F0 VOL: 0
;PCODE: $000008F1 VOL: 0
;PCODE: $000008F2 VOL: 0
;PCODE: $000008F3 VOL: 0
; 0000 043F     {
; 0000 0440         printDebug("<logReport> Check Data Log Exist\r\n");
;PCODE: $000008F4 VOL: 0
;PCODE: $000008F5 VOL: 0
;PCODE: $000008F6 VOL: 0
;PCODE: $000008F7 VOL: 0
;PCODE: $000008F8 VOL: 0
;PCODE: $000008F9 VOL: 0
;PCODE: $000008FA VOL: 0
; 0000 0441         res = LOG_openFile(&file,LOGFILE_DATA);
;PCODE: $000008FB VOL: 0
;PCODE: $000008FC VOL: 0
;PCODE: $000008FD VOL: 0
;PCODE: $000008FE VOL: 0
;PCODE: $000008FF VOL: 0
;PCODE: $00000900 VOL: 0
; 0000 0442         if(res < 0)
;PCODE: $00000901 VOL: 0
;PCODE: $00000902 VOL: 0
; 0000 0443         {
; 0000 0444             printDebug("<logReport> LOG_openFile(%s) failed\r\n",LOGFILE_DATA);
;PCODE: $00000903 VOL: 0
;PCODE: $00000904 VOL: 0
;PCODE: $00000905 VOL: 0
;PCODE: $00000906 VOL: 0
;PCODE: $00000907 VOL: 0
;PCODE: $00000908 VOL: 0
;PCODE: $00000909 VOL: 0
;PCODE: $0000090A VOL: 0
;PCODE: $0000090B VOL: 0
;PCODE: $0000090C VOL: 0
; 0000 0445         }
; 0000 0446         else
;PCODE: $0000090D VOL: 0
;PCODE: $0000090E VOL: 0
; 0000 0447         {
; 0000 0448             res = LOG_readData(&file,&timestamp,&channel,&value,&index);
;PCODE: $0000090F VOL: 0
;PCODE: $00000910 VOL: 0
;PCODE: $00000911 VOL: 0
;PCODE: $00000912 VOL: 0
;PCODE: $00000913 VOL: 0
;PCODE: $00000914 VOL: 0
;PCODE: $00000915 VOL: 0
;PCODE: $00000916 VOL: 0
;PCODE: $00000917 VOL: 0
;PCODE: $00000918 VOL: 0
;PCODE: $00000919 VOL: 0
;PCODE: $0000091A VOL: 0
;PCODE: $0000091B VOL: 0
;PCODE: $0000091C VOL: 0
;PCODE: $0000091D VOL: 0
;PCODE: $0000091E VOL: 0
; 0000 0449             if(res < 0)
;PCODE: $0000091F VOL: 0
;PCODE: $00000920 VOL: 0
; 0000 044A             {
; 0000 044B                 printDebug("<logReport> LOG_readData(%s) failed\r\n",LOGFILE_DATA);
;PCODE: $00000921 VOL: 0
;PCODE: $00000922 VOL: 0
;PCODE: $00000923 VOL: 0
;PCODE: $00000924 VOL: 0
;PCODE: $00000925 VOL: 0
;PCODE: $00000926 VOL: 0
;PCODE: $00000927 VOL: 0
;PCODE: $00000928 VOL: 0
;PCODE: $00000929 VOL: 0
;PCODE: $0000092A VOL: 0
; 0000 044C             }
; 0000 044D             else if(res == 0)
;PCODE: $0000092B VOL: 0
;PCODE: $0000092C VOL: 0
;PCODE: $0000092D VOL: 0
;PCODE: $0000092E VOL: 0
; 0000 044E             {
; 0000 044F                 //isDataLogEmpty      = 1;
; 0000 0450                 printDebug("<logReport> LOG_readData() Log empty\r\n");
;PCODE: $0000092F VOL: 0
;PCODE: $00000930 VOL: 0
;PCODE: $00000931 VOL: 0
;PCODE: $00000932 VOL: 0
;PCODE: $00000933 VOL: 0
;PCODE: $00000934 VOL: 0
;PCODE: $00000935 VOL: 0
; 0000 0451             }
; 0000 0452             else
;PCODE: $00000936 VOL: 0
;PCODE: $00000937 VOL: 0
; 0000 0453             {
; 0000 0454                 if( (timestamp == 0) || (timestamp == 0xFFFFFFFF) || (channel > (MAX_SENS_CHANNEL-1)) )
;PCODE: $00000938 VOL: 0
;PCODE: $00000939 VOL: 0
;PCODE: $0000093A VOL: 0
;PCODE: $0000093B VOL: 0
;PCODE: $0000093C VOL: 0
;PCODE: $0000093D VOL: 0
;PCODE: $0000093E VOL: 0
;PCODE: $0000093F VOL: 0
;PCODE: $00000940 VOL: 0
;PCODE: $00000941 VOL: 0
;PCODE: $00000942 VOL: 0
; 0000 0455                 {
; 0000 0456                     printDebug("\r\n<logReport> === ERROR INFOMATION IN %s ===\r\n",LOGFILE_DATA);
;PCODE: $00000943 VOL: 0
;PCODE: $00000944 VOL: 0
;PCODE: $00000945 VOL: 0
;PCODE: $00000946 VOL: 0
;PCODE: $00000947 VOL: 0
;PCODE: $00000948 VOL: 0
;PCODE: $00000949 VOL: 0
;PCODE: $0000094A VOL: 0
;PCODE: $0000094B VOL: 0
;PCODE: $0000094C VOL: 0
; 0000 0457                 }
; 0000 0458                 else
;PCODE: $0000094D VOL: 0
;PCODE: $0000094E VOL: 0
; 0000 0459                 {
; 0000 045A                     printDebug("<logReport> DataLog found time[%ld],ch[%d],val[%.2f]\r\n",timestamp,channel,value);
;PCODE: $0000094F VOL: 0
;PCODE: $00000950 VOL: 0
;PCODE: $00000951 VOL: 0
;PCODE: $00000952 VOL: 0
;PCODE: $00000953 VOL: 0
;PCODE: $00000954 VOL: 0
;PCODE: $00000955 VOL: 0
;PCODE: $00000956 VOL: 0
;PCODE: $00000957 VOL: 0
;PCODE: $00000958 VOL: 0
;PCODE: $00000959 VOL: 0
;PCODE: $0000095A VOL: 0
;PCODE: $0000095B VOL: 0
;PCODE: $0000095C VOL: 0
; 0000 045B                     res = ETH_sendDataReportCmd(TYP_LOG,timestamp,channel,value);
;PCODE: $0000095D VOL: 0
;PCODE: $0000095E VOL: 0
;PCODE: $0000095F VOL: 0
;PCODE: $00000960 VOL: 0
;PCODE: $00000961 VOL: 0
;PCODE: $00000962 VOL: 0
;PCODE: $00000963 VOL: 0
;PCODE: $00000964 VOL: 0
; 0000 045C                     if(res < 0)
;PCODE: $00000965 VOL: 0
;PCODE: $00000966 VOL: 0
; 0000 045D                     {
; 0000 045E                         logDataWait.frameID    = 0;
;PCODE: $00000967 VOL: 0
;PCODE: $00000968 VOL: 0
; 0000 045F                         logDataWait.logID      = 0;
;PCODE: $00000969 VOL: 0
;PCODE: $0000096A VOL: 0
;PCODE: $0000096B VOL: 0
; 0000 0460                         printDebug("<logReport> ETH_sendDataReportCmd() failed\r\n");
;PCODE: $0000096C VOL: 0
;PCODE: $0000096D VOL: 0
;PCODE: $0000096E VOL: 0
;PCODE: $0000096F VOL: 0
;PCODE: $00000970 VOL: 0
;PCODE: $00000971 VOL: 0
;PCODE: $00000972 VOL: 0
; 0000 0461                     }
; 0000 0462                     else
;PCODE: $00000973 VOL: 0
;PCODE: $00000974 VOL: 0
; 0000 0463                     {
; 0000 0464                         logDataWait.logID       = index;
;PCODE: $00000975 VOL: 0
;PCODE: $00000976 VOL: 0
;PCODE: $00000977 VOL: 0
; 0000 0465                         printDebug("<logReport> DataLog sent frameID[0x%02X] logID[0x%02X]\r\n",logDataWait.frameID,logDataWait.logID);
;PCODE: $00000978 VOL: 0
;PCODE: $00000979 VOL: 0
;PCODE: $0000097A VOL: 0
;PCODE: $0000097B VOL: 0
;PCODE: $0000097C VOL: 0
;PCODE: $0000097D VOL: 0
;PCODE: $0000097E VOL: 0
;PCODE: $0000097F VOL: 0
;PCODE: $00000980 VOL: 0
;PCODE: $00000981 VOL: 0
;PCODE: $00000982 VOL: 0
;PCODE: $00000983 VOL: 0
;PCODE: $00000984 VOL: 0
; 0000 0466                     }
;PCODE: $00000985 VOL: 0
; 0000 0467                 }
;PCODE: $00000986 VOL: 0
; 0000 0468             }
;PCODE: $00000987 VOL: 0
;PCODE: $00000988 VOL: 0
; 0000 0469 
; 0000 046A             res = LOG_closeFile(&file);
;PCODE: $00000989 VOL: 0
;PCODE: $0000098A VOL: 0
;PCODE: $0000098B VOL: 0
;PCODE: $0000098C VOL: 0
; 0000 046B             if(res < 0)
;PCODE: $0000098D VOL: 0
;PCODE: $0000098E VOL: 0
; 0000 046C             {
; 0000 046D                 printDebug("<logReport> LOG_closeFile() failed\r\n");
;PCODE: $0000098F VOL: 0
;PCODE: $00000990 VOL: 0
;PCODE: $00000991 VOL: 0
;PCODE: $00000992 VOL: 0
;PCODE: $00000993 VOL: 0
;PCODE: $00000994 VOL: 0
;PCODE: $00000995 VOL: 0
; 0000 046E             }
; 0000 046F         }
;PCODE: $00000996 VOL: 0
;PCODE: $00000997 VOL: 0
; 0000 0470     }
; 0000 0471 
; 0000 0472     // -- send event log if any exist -- //
; 0000 0473     if((!isEventLogEmpty) && (logEventWait.frameID == 0x00))  // -- if no logEventWaitFrameID, look for some event log to send -- //
;PCODE: $00000998 VOL: 0
;PCODE: $00000999 VOL: 0
;PCODE: $0000099A VOL: 0
;PCODE: $0000099B VOL: 0
;PCODE: $0000099C VOL: 0
;PCODE: $0000099D VOL: 0
;PCODE: $0000099E VOL: 0
;PCODE: $0000099F VOL: 0
;PCODE: $000009A0 VOL: 0
;PCODE: $000009A1 VOL: 0
;PCODE: $000009A2 VOL: 0
; 0000 0474     {
; 0000 0475         printDebug("<logReport> Check Event Log Exist\r\n");
;PCODE: $000009A3 VOL: 0
;PCODE: $000009A4 VOL: 0
;PCODE: $000009A5 VOL: 0
;PCODE: $000009A6 VOL: 0
;PCODE: $000009A7 VOL: 0
;PCODE: $000009A8 VOL: 0
;PCODE: $000009A9 VOL: 0
; 0000 0476         res = LOG_openFile(&file,LOGFILE_EVENT);
;PCODE: $000009AA VOL: 0
;PCODE: $000009AB VOL: 0
;PCODE: $000009AC VOL: 0
;PCODE: $000009AD VOL: 0
;PCODE: $000009AE VOL: 0
;PCODE: $000009AF VOL: 0
; 0000 0477         if(res < 0)
;PCODE: $000009B0 VOL: 0
;PCODE: $000009B1 VOL: 0
; 0000 0478         {
; 0000 0479             printDebug("<logReport> LOG_openFile(%s) failed\r\n",LOGFILE_EVENT);
;PCODE: $000009B2 VOL: 0
;PCODE: $000009B3 VOL: 0
;PCODE: $000009B4 VOL: 0
;PCODE: $000009B5 VOL: 0
;PCODE: $000009B6 VOL: 0
;PCODE: $000009B7 VOL: 0
;PCODE: $000009B8 VOL: 0
;PCODE: $000009B9 VOL: 0
;PCODE: $000009BA VOL: 0
;PCODE: $000009BB VOL: 0
; 0000 047A         }
; 0000 047B         else
;PCODE: $000009BC VOL: 0
;PCODE: $000009BD VOL: 0
; 0000 047C         {
; 0000 047D             res = LOG_readEvent(&file,&timestamp,&id,&status,&index);
;PCODE: $000009BE VOL: 0
;PCODE: $000009BF VOL: 0
;PCODE: $000009C0 VOL: 0
;PCODE: $000009C1 VOL: 0
;PCODE: $000009C2 VOL: 0
;PCODE: $000009C3 VOL: 0
;PCODE: $000009C4 VOL: 0
;PCODE: $000009C5 VOL: 0
;PCODE: $000009C6 VOL: 0
;PCODE: $000009C7 VOL: 0
;PCODE: $000009C8 VOL: 0
;PCODE: $000009C9 VOL: 0
;PCODE: $000009CA VOL: 0
;PCODE: $000009CB VOL: 0
;PCODE: $000009CC VOL: 0
; 0000 047E             if(res < 0)
;PCODE: $000009CD VOL: 0
;PCODE: $000009CE VOL: 0
; 0000 047F             {
; 0000 0480                 printDebug("<logReport> LOG_readEvent() failed\r\n");
;PCODE: $000009CF VOL: 0
;PCODE: $000009D0 VOL: 0
;PCODE: $000009D1 VOL: 0
;PCODE: $000009D2 VOL: 0
;PCODE: $000009D3 VOL: 0
;PCODE: $000009D4 VOL: 0
;PCODE: $000009D5 VOL: 0
; 0000 0481             }
; 0000 0482             else if(res == 0)
;PCODE: $000009D6 VOL: 0
;PCODE: $000009D7 VOL: 0
;PCODE: $000009D8 VOL: 0
;PCODE: $000009D9 VOL: 0
; 0000 0483             {
; 0000 0484                 //isEventLogEmpty     = 1;
; 0000 0485                 printDebug("<logReport> LOG_readEvent() Log empty\r\n");
;PCODE: $000009DA VOL: 0
;PCODE: $000009DB VOL: 0
;PCODE: $000009DC VOL: 0
;PCODE: $000009DD VOL: 0
;PCODE: $000009DE VOL: 0
;PCODE: $000009DF VOL: 0
;PCODE: $000009E0 VOL: 0
; 0000 0486             }
; 0000 0487             else
;PCODE: $000009E1 VOL: 0
;PCODE: $000009E2 VOL: 0
; 0000 0488             {
; 0000 0489                 if( (timestamp == 0) || (timestamp == 0xFFFFFFFF) )
;PCODE: $000009E3 VOL: 0
;PCODE: $000009E4 VOL: 0
;PCODE: $000009E5 VOL: 0
;PCODE: $000009E6 VOL: 0
;PCODE: $000009E7 VOL: 0
;PCODE: $000009E8 VOL: 0
;PCODE: $000009E9 VOL: 0
;PCODE: $000009EA VOL: 0
; 0000 048A                 {
; 0000 048B                     printDebug("\r\n<logReport> === ERROR INFOMATION IN %s ===\r\n",LOGFILE_EVENT);
;PCODE: $000009EB VOL: 0
;PCODE: $000009EC VOL: 0
;PCODE: $000009ED VOL: 0
;PCODE: $000009EE VOL: 0
;PCODE: $000009EF VOL: 0
;PCODE: $000009F0 VOL: 0
;PCODE: $000009F1 VOL: 0
;PCODE: $000009F2 VOL: 0
;PCODE: $000009F3 VOL: 0
;PCODE: $000009F4 VOL: 0
; 0000 048C                 }
; 0000 048D                 else
;PCODE: $000009F5 VOL: 0
;PCODE: $000009F6 VOL: 0
; 0000 048E                 {
; 0000 048F                     printDebug("<logReport> EventLog found time[%ld],id[0x%02X],stat[0x%02X]\r\n",timestamp,id,status);
;PCODE: $000009F7 VOL: 0
;PCODE: $000009F8 VOL: 0
;PCODE: $000009F9 VOL: 0
;PCODE: $000009FA VOL: 0
;PCODE: $000009FB VOL: 0
;PCODE: $000009FC VOL: 0
;PCODE: $000009FD VOL: 0
;PCODE: $000009FE VOL: 0
;PCODE: $000009FF VOL: 0
;PCODE: $00000A00 VOL: 0
;PCODE: $00000A01 VOL: 0
;PCODE: $00000A02 VOL: 0
;PCODE: $00000A03 VOL: 0
;PCODE: $00000A04 VOL: 0
;PCODE: $00000A05 VOL: 0
; 0000 0490                     res = ETH_sendEventReportCmd(TYP_LOG,timestamp,id,status);
;PCODE: $00000A06 VOL: 0
;PCODE: $00000A07 VOL: 0
;PCODE: $00000A08 VOL: 0
;PCODE: $00000A09 VOL: 0
;PCODE: $00000A0A VOL: 0
;PCODE: $00000A0B VOL: 0
;PCODE: $00000A0C VOL: 0
;PCODE: $00000A0D VOL: 0
; 0000 0491                     if(res < 0)
;PCODE: $00000A0E VOL: 0
;PCODE: $00000A0F VOL: 0
; 0000 0492                     {
; 0000 0493                         logEventWait.frameID    = 0;
;PCODE: $00000A10 VOL: 0
;PCODE: $00000A11 VOL: 0
; 0000 0494                         logEventWait.logID      = 0;
;PCODE: $00000A12 VOL: 0
;PCODE: $00000A13 VOL: 0
;PCODE: $00000A14 VOL: 0
; 0000 0495                         printDebug("<logReport> ETH_sendEventReportCmd() failed\r\n");
;PCODE: $00000A15 VOL: 0
;PCODE: $00000A16 VOL: 0
;PCODE: $00000A17 VOL: 0
;PCODE: $00000A18 VOL: 0
;PCODE: $00000A19 VOL: 0
;PCODE: $00000A1A VOL: 0
;PCODE: $00000A1B VOL: 0
; 0000 0496                     }
; 0000 0497                     else
;PCODE: $00000A1C VOL: 0
;PCODE: $00000A1D VOL: 0
; 0000 0498                     {
; 0000 0499                         logEventWait.logID      = index;
;PCODE: $00000A1E VOL: 0
;PCODE: $00000A1F VOL: 0
;PCODE: $00000A20 VOL: 0
; 0000 049A                         printDebug("<logReport> EventLog sent frameID[0x%02X] logID[0x%02X]\r\n",logEventWait.frameID,logEventWait.logID);
;PCODE: $00000A21 VOL: 0
;PCODE: $00000A22 VOL: 0
;PCODE: $00000A23 VOL: 0
;PCODE: $00000A24 VOL: 0
;PCODE: $00000A25 VOL: 0
;PCODE: $00000A26 VOL: 0
;PCODE: $00000A27 VOL: 0
;PCODE: $00000A28 VOL: 0
;PCODE: $00000A29 VOL: 0
;PCODE: $00000A2A VOL: 0
;PCODE: $00000A2B VOL: 0
;PCODE: $00000A2C VOL: 0
;PCODE: $00000A2D VOL: 0
; 0000 049B                     }
;PCODE: $00000A2E VOL: 0
; 0000 049C                 }
;PCODE: $00000A2F VOL: 0
; 0000 049D             }
;PCODE: $00000A30 VOL: 0
;PCODE: $00000A31 VOL: 0
; 0000 049E 
; 0000 049F             res = LOG_closeFile(&file);
;PCODE: $00000A32 VOL: 0
;PCODE: $00000A33 VOL: 0
;PCODE: $00000A34 VOL: 0
;PCODE: $00000A35 VOL: 0
; 0000 04A0             if(res < 0)
;PCODE: $00000A36 VOL: 0
;PCODE: $00000A37 VOL: 0
; 0000 04A1             {
; 0000 04A2                 printDebug("<logReport> LOG_closeFile(%s) failed\r\n",LOGFILE_EVENT);
;PCODE: $00000A38 VOL: 0
;PCODE: $00000A39 VOL: 0
;PCODE: $00000A3A VOL: 0
;PCODE: $00000A3B VOL: 0
;PCODE: $00000A3C VOL: 0
;PCODE: $00000A3D VOL: 0
;PCODE: $00000A3E VOL: 0
;PCODE: $00000A3F VOL: 0
;PCODE: $00000A40 VOL: 0
;PCODE: $00000A41 VOL: 0
; 0000 04A3             }
; 0000 04A4         }
;PCODE: $00000A42 VOL: 0
;PCODE: $00000A43 VOL: 0
; 0000 04A5     }
; 0000 04A6 
; 0000 04A7     return 0;
;PCODE: $00000A44 VOL: 0
;PCODE: $00000A45 VOL: 0
;PCODE: $00000A46 VOL: 0
;PCODE: $00000A47 VOL: 0
;PCODE: $00000A48 VOL: 0
; 0000 04A8 }
;PCODE: $00000A49 VOL: 0
;/*============================================================*/
