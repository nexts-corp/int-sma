;#include "timer.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include "ds1672.h"
;#include "adc.h"
;#include "io.h"
;#include "debug.h"
;#include "memcard.h"
;
;TIMER       baseCounter         = 0;    // -- increase continually by 1 second timer. use for timer comparison -- //
;bit         timer_1sec_flag     = 0;    // -- 1 second trigger flag for main loop -- //
;
;bit         buzzer_on           = 0;    // -- buzzer control [0:1] => [on:off] -- //
;
;/**************************************************************/
;/******************* Software Timer Support *******************/
;/**************************************************************/
;/*============================================================*/
;TIMER TIMER_checkTimeLeft(TIMER time)
; 0003 0012 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0003 0013     if(baseCounter < time){
;PCODE: $0000000F VOL: 0
;	time -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0003 0014         return ( time - baseCounter );
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0003 0015     }
; 0003 0016     else{
;PCODE: $00000019 VOL: 0
; 0003 0017         return 0;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0003 0018     }
;PCODE: $0000001D VOL: 0
; 0003 0019 }
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;/*============================================================*/
;int TIMER_checkTimerExceed(TIMER keeper)
; 0003 001C {
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0003 001D     if(keeper == 0){
;PCODE: $00000023 VOL: 0
;	keeper -> Y+0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0003 001E         return -1;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0003 001F     }
; 0003 0020 
; 0003 0021     if((unsigned long int)baseCounter < (unsigned long int)keeper){
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0003 0022         return 0;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0003 0023     }
; 0003 0024     else{                             // -- time exceed -- //
;PCODE: $00000032 VOL: 0
; 0003 0025         return 1;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0003 0026     }
;PCODE: $00000036 VOL: 0
; 0003 0027 }
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;/*============================================================*/
;int TIMER_setTimer(TIMER *keeper, unsigned long int period)
; 0003 002A {
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0003 002B     unsigned long int t;
; 0003 002C 
; 0003 002D     if(period == 0){
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;	*keeper -> Y+8
;	period -> Y+4
;	t -> Y+0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0003 002E         printDebug("<TIMER_setTimer> ERR: period = 0\r\n");
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0003 002F         *keeper = 0xFFFFFFFF;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0003 0030         return -1;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0003 0031     }
; 0003 0032 
; 0003 0033     t = baseCounter + period;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0003 0034 
; 0003 0035     *keeper = t;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0003 0036 
; 0003 0037     if(t <= baseCounter){
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0003 0038         printDebug("<TIMER_setTimer> baseCounter[%ld] + period[%ld] = %ld OVERFLOW!!\r\n",baseCounter,period,t);
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0003 0039         *keeper = 0;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0003 003A         return -1;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0003 003B     }
; 0003 003C     else{
;PCODE: $0000006D VOL: 0
; 0003 003D         return 0;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0003 003E     }
;PCODE: $00000071 VOL: 0
; 0003 003F }
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;/*============================================================*/
;
;/**************************************************************/
;/********************** Hardware Support **********************/
;/**************************************************************/
;/*============================================================*/
;// Watchdog timeout interrupt service routine
;interrupt [WDT] void wdt_timeout_isr(void)
; 0003 0048 {
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0003 0049     // Place your code here
; 0003 004A     printDebug("<WDT> WatchDog Timer Reset!!\r\n");
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0003 004B     return;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0003 004C }
;PCODE: $00000080 VOL: 0
;/*============================================================*/
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0003 0050 {
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0003 0051     // Reinitialize Timer 0 value
; 0003 0052     TCNT0=0x64;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0003 0053     // Place your code here
; 0003 0054 
; 0003 0055 }
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;/*============================================================*/
;// Timer1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0003 0059 {
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0003 005A     // Reinitialize Timer1 value
; 0003 005B //    TCNT1H=0xFF64 >> 8;
; 0003 005C //    TCNT1L=0xFF64 & 0xff;
; 0003 005D     TCNT1H=0xFE79 >> 8;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0003 005E     TCNT1L=0xFE79 & 0xff;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0003 005F 
; 0003 0060     //adc_sampling();
; 0003 0061 }
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;/*============================================================*/
;// Timer2 overflow interrupt service routine    (100Hz)
;interrupt [TIM2_OVF] void timer2_ovf_isr(void)
; 0003 0065 {
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0003 0066     // Reinitialize Timer2 value
; 0003 0067     TCNT2=0xb2;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0003 0068 
; 0003 0069     /* card access low level timing function */
; 0003 006A     disk_timerproc();
;PCODE: $00000095 VOL: 0
; 0003 006B 
; 0003 006C }
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;/*============================================================*/
;// Timer1 overflow interrupt service routine  (1 second)
;interrupt [TIM3_OVF] void timer3_ovf_isr(void)
; 0003 0070 {
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0003 0071     // Reinitialize Timer1 value
; 0003 0072     TCNT3H=0x85ED >> 8;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0003 0073     TCNT3L=0x85ED & 0xff;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0003 0074 
; 0003 0075     // Place your code here
; 0003 0076     timer_1sec_flag = 1;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0003 0077 
; 0003 0078     baseCounter++;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0003 0079 
; 0003 007A     raw_rtc++;                          // -- update backup RTC
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0003 007B 
; 0003 007C     //printDebug("<%d>\r\n",baseCounter);
; 0003 007D }
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;/*============================================================*/
;// Timer4 overflow interrupt service routine (0.5 sec)
;interrupt [TIM4_OVF] void timer4_ovf_isr(void)
; 0003 0081 {
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0003 0082     static bit toggle = 0;
; 0003 0083     // Reinitialize Timer4 value
; 0003 0084     TCNT4H=0x85ED >> 8;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0003 0085     TCNT4L=0x85ED & 0xff;
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0003 0086 
; 0003 0087     // Place your code here
; 0003 0088     toggle = !toggle;
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0003 0089 
; 0003 008A     if(buzzer_on){
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0003 008B         if(toggle)  {   BUZZER = 1; }
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0003 008C         else        {   BUZZER = 0; }
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0003 008D     }
; 0003 008E     else{
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0003 008F         BUZZER = 0;
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0003 0090     }
;PCODE: $000000CD VOL: 0
; 0003 0091 
; 0003 0092 }
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;/*============================================================*/
;void init_timer(void)
; 0003 0095 {
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0003 0096 
; 0003 0097     // Timer/Counter 0 initialization
; 0003 0098     // Clock source: System Clock
; 0003 0099     // Clock value: 7.813 kHz
; 0003 009A     // Mode: Normal top=0xFF
; 0003 009B     // OC0A output: Disconnected
; 0003 009C     // OC0B output: Disconnected
; 0003 009D     TCCR0A=0x00;
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0003 009E     TCCR0B=0x05;
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0003 009F     TCNT0=0x64;
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0003 00A0     OCR0A=0x00;
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0003 00A1     OCR0B=0x00;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0003 00A2 
; 0003 00A3     // Timer/Counter 1 initialization
; 0003 00A4     // Clock source: System Clock
; 0003 00A5     // Clock value: 7.813 kHz
; 0003 00A6     // Mode: Normal top=0xFFFF
; 0003 00A7     // OC1A output: Discon.
; 0003 00A8     // OC1B output: Discon.
; 0003 00A9     // OC1C output: Discon.
; 0003 00AA     // Noise Canceler: Off
; 0003 00AB     // Input Capture on Falling Edge
; 0003 00AC     // Timer1 Overflow Interrupt: On
; 0003 00AD     // Input Capture Interrupt: Off
; 0003 00AE     // Compare A Match Interrupt: Off
; 0003 00AF     // Compare B Match Interrupt: Off
; 0003 00B0     // Compare C Match Interrupt: Off
; 0003 00B1     TCCR1A=0x00;
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0003 00B2     TCCR1B=0x05;
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0003 00B3     //TCNT1H=0xFF;
; 0003 00B4     //TCNT1L=0x64;
; 0003 00B5     TCNT1H=0xFE;
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0003 00B6     TCNT1L=0x79;
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0003 00B7     ICR1H=0x00;
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0003 00B8     ICR1L=0x00;
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0003 00B9     OCR1AH=0x00;
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0003 00BA     OCR1AL=0x00;
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0003 00BB     OCR1BH=0x00;
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0003 00BC     OCR1BL=0x00;
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0003 00BD     OCR1CH=0x00;
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0003 00BE     OCR1CL=0x00;
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0003 00BF 
; 0003 00C0     // Timer/Counter 2 initialization
; 0003 00C1     // Clock source: System Clock
; 0003 00C2     // Clock value: 7.813 kHz
; 0003 00C3     // Mode: Normal top=0xFF
; 0003 00C4     // OC2A output: Disconnected
; 0003 00C5     // OC2B output: Disconnected
; 0003 00C6     ASSR=0x00;
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0003 00C7     TCCR2A=0x00;
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0003 00C8     TCCR2B=0x07;
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0003 00C9     TCNT2=0xb2;
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0003 00CA     OCR2A=0x00;
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0003 00CB     OCR2B=0x00;
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0003 00CC 
; 0003 00CD     // Timer/Counter 3 initialization
; 0003 00CE     // Clock source: System Clock
; 0003 00CF     // Clock value: 31.250 kHz
; 0003 00D0     // Mode: Normal top=0xFFFF
; 0003 00D1     // OC3A output: Discon.
; 0003 00D2     // OC3B output: Discon.
; 0003 00D3     // OC3C output: Discon.
; 0003 00D4     // Noise Canceler: Off
; 0003 00D5     // Input Capture on Falling Edge
; 0003 00D6     // Timer3 Overflow Interrupt: On
; 0003 00D7     // Input Capture Interrupt: Off
; 0003 00D8     // Compare A Match Interrupt: Off
; 0003 00D9     // Compare B Match Interrupt: Off
; 0003 00DA     // Compare C Match Interrupt: Off
; 0003 00DB     TCCR3A=0x00;
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0003 00DC     TCCR3B=0x04;
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0003 00DD     TCNT3H=0x85;
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0003 00DE     TCNT3L=0xED;
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0003 00DF     ICR3H=0x00;
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0003 00E0     ICR3L=0x00;
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0003 00E1     OCR3AH=0x00;
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0003 00E2     OCR3AL=0x00;
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0003 00E3     OCR3BH=0x00;
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0003 00E4     OCR3BL=0x00;
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0003 00E5     OCR3CH=0x00;
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0003 00E6     OCR3CL=0x00;
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0003 00E7 
; 0003 00E8     // Timer/Counter 4 initialization
; 0003 00E9     // Clock source: System Clock
; 0003 00EA     // Clock value: 125.000 kHz
; 0003 00EB     // Mode: Normal top=0xFFFF
; 0003 00EC     // OC4A output: Discon.
; 0003 00ED     // OC4B output: Discon.
; 0003 00EE     // OC4C output: Discon.
; 0003 00EF     // Noise Canceler: Off
; 0003 00F0     // Input Capture on Falling Edge
; 0003 00F1     // Timer4 Overflow Interrupt: On
; 0003 00F2     // Input Capture Interrupt: Off
; 0003 00F3     // Compare A Match Interrupt: Off
; 0003 00F4     // Compare B Match Interrupt: Off
; 0003 00F5     // Compare C Match Interrupt: Off
; 0003 00F6     TCCR4A=0x00;
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0003 00F7     TCCR4B=0x03;
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0003 00F8     TCNT4H=0x85;
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0003 00F9     TCNT4L=0xED;
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0003 00FA     ICR4H=0x00;
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0003 00FB     ICR4L=0x00;
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0003 00FC     OCR4AH=0x00;
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0003 00FD     OCR4AL=0x00;
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0003 00FE     OCR4BH=0x00;
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0003 00FF     OCR4BL=0x00;
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0003 0100     OCR4CH=0x00;
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0003 0101     OCR4CL=0x00;
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0003 0102 
; 0003 0103     // Timer/Counter 5 initialization
; 0003 0104     // Clock source: System Clock
; 0003 0105     // Clock value: Timer5 Stopped
; 0003 0106     // Mode: Normal top=0xFFFF
; 0003 0107     // OC5A output: Discon.
; 0003 0108     // OC5B output: Discon.
; 0003 0109     // OC5C output: Discon.
; 0003 010A     // Noise Canceler: Off
; 0003 010B     // Input Capture on Falling Edge
; 0003 010C     // Timer5 Overflow Interrupt: Off
; 0003 010D     // Input Capture Interrupt: Off
; 0003 010E     // Compare A Match Interrupt: Off
; 0003 010F     // Compare B Match Interrupt: Off
; 0003 0110     // Compare C Match Interrupt: Off
; 0003 0111     TCCR5A=0x00;
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0003 0112     TCCR5B=0x00;
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0003 0113     TCNT5H=0x00;
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0003 0114     TCNT5L=0x00;
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0003 0115     ICR5H=0x00;
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0003 0116     ICR5L=0x00;
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0003 0117     OCR5AH=0x00;
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0003 0118     OCR5AL=0x00;
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0003 0119     OCR5BH=0x00;
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0003 011A     OCR5BL=0x00;
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0003 011B     OCR5CH=0x00;
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0003 011C     OCR5CL=0x00;
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0003 011D 
; 0003 011E     // Watchdog Timer initialization
; 0003 011F     // Watchdog Timer Prescaler: OSC/1024k
; 0003 0120     // Watchdog Timer interrupt: On
; 0003 0121     #pragma optsize-
; 0003 0122     #asm("wdr")
;PCODE: $00000149 VOL: 0
	wdr
;PCODE: $0000014A VOL: 0
; 0003 0123     WDTCSR=0x79;
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0003 0124     WDTCSR=0x69;
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0003 0125 
; 0003 0126     #ifdef _OPTIMIZE_SIZE_
; 0003 0127     #pragma optsize+
; 0003 0128     #endif
; 0003 0129 
; 0003 012A 
; 0003 012B     // Timer/Counter 0 Interrupt(s) initialization
; 0003 012C     TIMSK0=0x00;
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0003 012D 
; 0003 012E     // Timer/Counter 1 Interrupt(s) initialization
; 0003 012F     TIMSK1=0x00;
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0003 0130 
; 0003 0131     // Timer/Counter 2 Interrupt(s) initialization
; 0003 0132     TIMSK2=0x00;
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0003 0133 
; 0003 0134     // Timer/Counter 3 Interrupt(s) initialization
; 0003 0135     TIMSK3=0x00;
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0003 0136 
; 0003 0137     // Timer/Counter 4 Interrupt(s) initialization
; 0003 0138     TIMSK4=0x00;
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0003 0139 
; 0003 013A     // Timer/Counter 5 Interrupt(s) initialization
; 0003 013B     TIMSK5=0x00;
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0003 013C }
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;/*============================================================*/
;void enable_interrupt(int ch)
; 0003 013F {
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0003 0140 
; 0003 0141     // -------------- enable timer ---------------  //
; 0003 0142 
; 0003 0143     switch(ch){
;PCODE: $0000015F VOL: 0
;	ch -> Y+0
;PCODE: $00000160 VOL: 0
; 0003 0144         case 0: // Timer/Counter 0 Interrupt(s) initialization
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0003 0145                 //TIMSK0=0x01;
; 0003 0146                 break;
;PCODE: $00000163 VOL: 0
; 0003 0147         case 1: // Timer/Counter 1 Interrupt(s) initialization
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0003 0148                 TIMSK1=0x01;
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0003 0149                 break;
;PCODE: $00000169 VOL: 0
; 0003 014A         case 2: // Timer/Counter 2 Interrupt(s) initialization
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0003 014B                 TIMSK2=0x01;
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0003 014C                 break;
;PCODE: $0000016F VOL: 0
; 0003 014D         case 3: // Timer/Counter 3 Interrupt(s) initialization
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0003 014E                 TIMSK3=0x01;
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0003 014F                 break;
;PCODE: $00000175 VOL: 0
; 0003 0150         case 4: // Timer/Counter 4 Interrupt(s) initialization
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0003 0151                 TIMSK4=0x01;
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0003 0152                 break;
;PCODE: $0000017B VOL: 0
; 0003 0153     }
;PCODE: $0000017C VOL: 0
; 0003 0154     // Global enable interrupts
; 0003 0155     #asm("sei")
;PCODE: $0000017D VOL: 0
	sei
;PCODE: $0000017E VOL: 0
; 0003 0156 }
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;/*============================================================*/
;void disable_interrupt(int ch)
; 0003 0159 {
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0003 015A 
; 0003 015B     // -------------- enable timer ---------------  //
; 0003 015C 
; 0003 015D     switch(ch){
;PCODE: $00000184 VOL: 0
;	ch -> Y+0
;PCODE: $00000185 VOL: 0
; 0003 015E         case 0: // Timer/Counter 0 Interrupt(s) initialization
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0003 015F                 //TIMSK0=0x00;
; 0003 0160                 break;
;PCODE: $00000188 VOL: 0
; 0003 0161         case 1: // Timer/Counter 1 Interrupt(s) initialization
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0003 0162                 TIMSK1=0x00;
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0003 0163                 break;
;PCODE: $0000018E VOL: 0
; 0003 0164         case 2: // Timer/Counter 2 Interrupt(s) initialization
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0003 0165                 TIMSK2=0x00;
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0003 0166                 break;
;PCODE: $00000194 VOL: 0
; 0003 0167         case 3: // Timer/Counter 3 Interrupt(s) initialization
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0003 0168                 TIMSK3=0x00;
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0003 0169                 break;
;PCODE: $0000019A VOL: 0
; 0003 016A         case 4: // Timer/Counter 4 Interrupt(s) initialization
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0003 016B                 TIMSK4=0x00;
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0003 016C                 break;
;PCODE: $000001A0 VOL: 0
; 0003 016D     }
;PCODE: $000001A1 VOL: 0
; 0003 016E     // Global enable interrupts
; 0003 016F     #asm("sei")
;PCODE: $000001A2 VOL: 0
	sei
;PCODE: $000001A3 VOL: 0
; 0003 0170 }
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;/*============================================================*/
