;#include "lan.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include "timer.h"
;#include "io.h"
;#include "debug.h"
;
;extern iData_t viRXData;
;extern iData_t viTXData;
;
;
;char AckHostData[20] = {
;    0x7E,
;    0x00,0x10,
;    0x08,0x00,
;    0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
;    0x64,0x75,0xC9,0x55,
;    0x00,0x00,
;    0xD8
;};

	.DSEG
;
;iUChar_t iLanReadData(iData_t * pviData_agr){
; 0021 0014 iUChar_t iLanReadData(iData_t * pviData_agr){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0021 0015     iUChar_t viReturn;
; 0021 0016     TIMER   timeout;
; 0021 0017     iUChar_t viModeConnect = 0;     //0= no check connect  ,1 == check connect
; 0021 0018 
; 0021 0019    viReturn = LEN_DATA_EMPTY;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;	*pviData_agr -> Y+6
;	viReturn -> R17
;	timeout -> Y+2
;	viModeConnect -> R16
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0021 001A    TIMER_setTimer(&timeout, 7);
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0021 001B 
; 0021 001C    iWizRXMode = WIZ_RX_DATA_MODE;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0021 001D   // delay_ms(1000);
; 0021 001E    while(!TIMER_checkTimerExceed(timeout)){
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0021 001F       delay_ms(50);
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0021 0020       #asm("wdr")
;PCODE: $00000025 VOL: 0
	wdr
;PCODE: $00000026 VOL: 0
; 0021 0021       if(iWizRead()){
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0021 0022         printDebug("[iLanReadData]iWizRead:OK.\r\n");
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0021 0023         viReturn = LEN_DATA_AVAILABLE;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0021 0024         if(viRXData.length>0){
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0021 0025             pviData_agr->length = viRXData.length;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0021 0026             memcpy(&pviData_agr->value[0],&viRXData.value[0],viRXData.length);
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0021 0027             printDebug("[iLanReadData]Data:OK[\r\n");
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0021 0028             print_payload(&viRXData.value[0], viRXData.length);
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0021 0029             printDebug("]\r\n");
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0021 002A         }else{
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0021 002B 
; 0021 002C         }
;PCODE: $00000056 VOL: 0
; 0021 002D         break;
;PCODE: $00000057 VOL: 0
; 0021 002E       }else{
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0021 002F         printDebug("[iLanReadData]iWizRead:empty.\r\n");
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0021 0030         viReturn = LEN_DATA_EMPTY;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0021 0031       }
;PCODE: $00000063 VOL: 0
; 0021 0032    }
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0021 0033     return viReturn;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0021 0034 }
;PCODE: $0000006D VOL: 0
;
;//iUChar_t iLanWriteData(){
;//    iUChar_t viReturn;
;//    TIMER   timeout;
;//
;//    iWizRXMode = WIZ_RX_STAT_MODE;
;//    viReturn = LEN_DATA_WRITE_FAIL;
;//    TIMER_setTimer(&timeout, 20);
;//
;//    while(!TIMER_checkTimerExceed(timeout)){
;//       delay_ms(50);
;//       #asm("wdr")
;//       if(iWizConnected()){
;//            printDebug("[iLanWriteData]Status:Connected.\r\n");
;//            iWizRXMode = WIZ_RX_DATA_MODE;
;//            iWizSend(viGenDataElem,sizeof(viGenDataElem));
;//            viReturn = LEN_DATA_WRITE_SUCCESS;
;//            break;
;//       } else{
;//            viReturn = LEN_DATA_WRITE_FAIL;
;//            printDebug("[iLanWriteData]Status:Close.\r\n");
;//       }
;//    }
;//    return viReturn;
;//}
;
;iUChar_t iLanWriteData(iData_t * pviData_agr){
; 0021 004F iUChar_t iLanWriteData(iData_t * pviData_agr){
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0021 0050     iUChar_t viReturn;
; 0021 0051     TIMER   timeout;
; 0021 0052     iUChar_t viModeConnect = 0;     //0= no check connect  ,1 == check connect
; 0021 0053 
; 0021 0054     iWizRXMode = WIZ_RX_STAT_MODE;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;	*pviData_agr -> Y+6
;	viReturn -> R17
;	timeout -> Y+2
;	viModeConnect -> R16
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0021 0055     viReturn = LEN_DATA_WRITE_FAIL;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0021 0056     //TIMER_setTimer(&timeout, 20);
; 0021 0057 
; 0021 0058 //       if(iWizConnected()){
; 0021 0059 //            printDebug("[iLanWriteData]Status:Connected.\r\n");
; 0021 005A //            iWizRXMode = WIZ_RX_DATA_MODE;
; 0021 005B //            iWizSend(pviData_agr->value,pviData_agr->length);
; 0021 005C //            iWizRXMode = WIZ_RX_DATA_MODE;
; 0021 005D //            viReturn = LEN_DATA_WRITE_SUCCESS;
; 0021 005E //       } else{
; 0021 005F //            viReturn = LEN_DATA_WRITE_FAIL;
; 0021 0060 //            printDebug("[iLanWriteData]Status:Close.\r\n");
; 0021 0061 //       }
; 0021 0062 
; 0021 0063        if(viModeConnect==0){
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0021 0064            iWizRXMode = WIZ_RX_DATA_MODE;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0021 0065            iWizSend(pviData_agr->value,pviData_agr->length);
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0021 0066            viReturn = LEN_DATA_WRITE_SUCCESS;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0021 0067        }
; 0021 0068 
; 0021 0069 
; 0021 006A     return viReturn;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0021 006B }
;PCODE: $0000008F VOL: 0
;
;iChar_t iLanInit(){
; 0021 006D iChar_t iLanInit(){
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0021 006E        iChar_t viReturn;
; 0021 006F 
; 0021 0070        iWizRXMode = WIZ_RX_STAT_MODE;
;PCODE: $00000092 VOL: 0
;	viReturn -> R17
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0021 0071        if(iWizConnected()){
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0021 0072             printDebug("[iLanInit]Status:Connected.\r\n");
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0021 0073             iWizRXMode = WIZ_RX_DATA_MODE;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0021 0074             viReturn = LEN_DATA_WRITE_SUCCESS;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0021 0075        } else{
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0021 0076             viReturn = LEN_DATA_WRITE_FAIL;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0021 0077             printDebug("[iLanInit]Status:Close.\r\n");
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0021 0078        }
;PCODE: $000000AE VOL: 0
; 0021 0079        return viReturn;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0021 007A }
;PCODE: $000000B2 VOL: 0
