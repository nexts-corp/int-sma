;#include "schedulerTask.h"
;
;int task_count_g = 0;
;
;iTask_t *pviTaskList[MAX_TASK];
;
;itaskHandel_t iTaskCreate(piTaskFunction piTaskCode_p,const char * const name_p,uint_t priority_p){
; 001D 0007 itaskHandel_t iTaskCreate(piTaskFunction piTaskCode_p,const char * const name_p,uint_t priority_p){

	.CSEG
;PCODE: $00000000 VOL: 0
;PCODE: $00000001 VOL: 0
; 001D 0008     itaskHandel_t pvTaskHandleReturn;
; 001D 0009     iTask_t *pviTaskNew;
; 001D 000A     void * vp;
; 001D 000B     int i = 0;
; 001D 000C     vp = &i;
;PCODE: $00000002 VOL: 0
;PCODE: $00000003 VOL: 0
;PCODE: $00000004 VOL: 0
;PCODE: $00000005 VOL: 0
;PCODE: $00000006 VOL: 0
;PCODE: $00000007 VOL: 0
;PCODE: $00000008 VOL: 0
;	*piTaskCode_p -> Y+12
;	*name_p -> Y+10
;	priority_p -> Y+8
;	*pvTaskHandleReturn -> R16,R17
;	*pviTaskNew -> R18,R19
;	*vp -> R20,R21
;	i -> Y+6
;PCODE: $00000009 VOL: 0
;PCODE: $0000000A VOL: 0
; 001D 000D 
; 001D 000E     if(task_count_g < MAX_TASK){
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
; 001D 000F         pviTaskNew = (iTask_t *)malloc(sizeof(iTask_t));
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 001D 0010         if(pviTaskNew != NULL){
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 001D 0011             printDebug("<iTaskCreate>Task can create.\r\n");
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 001D 0012             pviTaskNew->id = 0;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 001D 0013             pviTaskNew->hookFunction = piTaskCode_p;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 001D 0014             memcpy(pviTaskNew->name,name_p,MAX_TASK_NAME);
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 001D 0015             pviTaskNew->priority = priority_p;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 001D 0016 
; 001D 0017             pviTaskList[task_count_g] = pviTaskNew;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 001D 0018             task_count_g++;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 001D 0019 
; 001D 001A         }else{
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 001D 001B             printDebug("<iTaskCreate>Task can not create.\r\n");
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 001D 001C             pvTaskHandleReturn = (int *)(-1);
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 001D 001D         }
;PCODE: $00000040 VOL: 0
; 001D 001E     }else if(task_count_g == MAX_TASK){
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 001D 001F         pvTaskHandleReturn = (void *)(-1);
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 001D 0020     }
; 001D 0021 
; 001D 0022 
; 001D 0023 //    if(task_count_g == 0){
; 001D 0024 //        piTaskList_p->taskValue = pviTaskNew;
; 001D 0025 //        piTaskList_p->next = NULL;
; 001D 0026 //        task_count_g ++;
; 001D 0027 //        piTaskList_p->taskValue->hookFunction(vp);
; 001D 0028 //    }else if(task_count_g > 0){
; 001D 0029 ////        piTaskList_p->taskValue = pviTaskNew;
; 001D 002A ////        piTaskList_p->next = NULL;
; 001D 002B ////        task_count_g ++;
; 001D 002C //    }
; 001D 002D     //pviTaskNew->hookFunction(vp);
; 001D 002E     //piTaskCode_p(vp);
; 001D 002F     //free(pviTaskNew);
; 001D 0030     return pvTaskHandleReturn;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 001D 0031 }
;PCODE: $0000004E VOL: 0
;
;void startSchedulerTask(){
; 001D 0033 void startSchedulerTask(){
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 001D 0034     itaskHandel_t pvTaskRunHandle;
; 001D 0035     void * vp;       //parameter
; 001D 0036     int i=0;
; 001D 0037     int j=0;
; 001D 0038     //pvTaskRunHandle = iTaskCreate(task_a_print,"TaskAP",5);
; 001D 0039     for(;;){
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;	*pvTaskRunHandle -> R16,R17
;	*vp -> R18,R19
;	i -> R20,R21
;	j -> Y+6
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 001D 003A         #asm("wdr")
;PCODE: $0000005B VOL: 0
	wdr
;PCODE: $0000005C VOL: 0
; 001D 003B         for(i=0;i<task_count_g;i++){
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 001D 003C             for(j=0;j<task_count_g;j++){
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 001D 003D                 if(pviTaskList[j]->priority == 10){
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 001D 003E                     pviTaskList[j]->hookFunction(vp);
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 001D 003F                 }
; 001D 0040             }
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 001D 0041             pviTaskList[i]->hookFunction(vp);
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 001D 0042         }
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 001D 0043     }
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 001D 0044 //    for(i=0;i<task_count_g;i++){
; 001D 0045 //        pviTaskList[i]->hookFunction(vp);
; 001D 0046 //    }
; 001D 0047 }
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
