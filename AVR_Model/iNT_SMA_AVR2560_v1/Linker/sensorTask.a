;#include <delay.h>
;#include "sensorTask.h"
;#include "sensorManager.h"
;#include "statusManager.h"
;#include "sensor.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include "dht11.h"
;
;unsigned int viSwitchContextSensor;
;
;extern piQueueHandle_t pviQueueTaskAToTaskB;
;
;extern piQueueHandle_t pviQueueSensorToMang;
;extern piQueueHandle_t pviQueueMangToSensor;
;
;extern iDataMini_t viDataReport;
;extern iDataMini_t viStatusReport;
;
;iSensorData_t pviSensorData;
;
;//void task_a(void *pviParameter){
;//    pTaskHandle pviReturn;
;//    char buffferQueue[10] = "bongkot";
;//    char buffferQueue2[10] = "chaiwaree";
;//    iData_t data;
;//
;//    memcpy(data.value,buffferQueue,sizeof(buffferQueue));
;//    data.length = sizeof(buffferQueue);
;//
;//    if(iQueueSend(pviQueueTaskAToTaskB,&data)==1){
;//        printDebug("<main>pviQueueTaskAToTaskB can sent a data.\r\n");
;//    }else{
;//        printDebug("<main>data can not sent a data(a) to pviQueueData1.\r\n");
;//    }
;//
;//    memcpy(data.value,buffferQueue2,sizeof(buffferQueue));
;//    data.length = sizeof(buffferQueue2);
;//
;//    if(iQueueSend(pviQueueTaskAToTaskB,&data)==1){
;//        iQueueReadMyself(pviQueueTaskAToTaskB);
;//        printDebug("<main>pviQueueTaskAToTaskB can sent a data.\r\n");
;//    }else{
;//        printDebug("<main>data can not sent a data(a) to pviQueueData1.\r\n");
;//    }
;//}
;void sensorTask(void *pviParameter){
; 001E 002D void sensorTask(void *pviParameter){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 001E 002E     printDebug("<sensorTask>Task Running...\r\n");
;PCODE: $0000000F VOL: 0
;	*pviParameter -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 001E 002F 
; 001E 0030 //    swContextSensor();
; 001E 0031 //    swContextSensor();
; 001E 0032 
; 001E 0033     //printDebug("[sensorTask],Queue->Quantity(%d).\r\n",((iQueue_t *)pviQueueSensorToMang)->itemCount);
; 001E 0034 //    if(iQueueSend(pviQueueSensorToMang,&pviSensorData)==1){
; 001E 0035 //        printDebug("<sensorTask>pviQueueSensorToMang can sent a data.\r\n");
; 001E 0036 //    }else{
; 001E 0037 //        printDebug("<sensorTask>data can not sent a data to pviQueueSensorToMang.\r\n");
; 001E 0038 //    }
; 001E 0039 
; 001E 003A     iSensorRead(&viDataReport);
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 001E 003B     iStatusRead(&viStatusReport);
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 001E 003C     delay_ms(1000);
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 001E 003D }
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;
;void swContextSensor(){
; 001E 003F void swContextSensor(){
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 001E 0040      unsigned int i;
; 001E 0041      ST_DHT11 *dhtDevice;
; 001E 0042      int viReturn;
; 001E 0043      //pviSensorData_t  pviSensorData;
; 001E 0044      #asm("wdr")
;PCODE: $00000022 VOL: 0
;	i -> R16,R17
;	*dhtDevice -> R18,R19
;	viReturn -> R20,R21
;PCODE: $00000023 VOL: 0
	wdr
;PCODE: $00000024 VOL: 0
; 001E 0045      if(viSwitchContextSensor == SENSER_MAX_TYPE){
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 001E 0046           viSwitchContextSensor = 0;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 001E 0047      }
; 001E 0048      switch(viSwitchContextSensor){
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 001E 0049          case SENSOR_ADC:{
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 001E 004A             for(i=0;i<SENSER_ADC_MAX_SIZE;i++){
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 001E 004B                 //printDebug("ACD[%d] : %d\r\n",(i+1),read_adc(8+i));
; 001E 004C                 pviSensorData.adc[i] =  read_adc(8+i);
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 001E 004D             }
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 001E 004E             break;
;PCODE: $00000046 VOL: 0
; 001E 004F          }
; 001E 0050          case SENSOR_DIGI:{
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 001E 0051             delay_ms(300);
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 001E 0052             viReturn =DHT11Read(dhtDevice);
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 001E 0053             if(viReturn==DHT11_SUCCESS){
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 001E 0054                //printDebug("DHT11 Temp-c(%f), Humidity(%f)\r\n",dhtDevice->temp,dhtDevice->humi);
; 001E 0055                pviSensorData.dht11Temp = dhtDevice->temp;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 001E 0056                pviSensorData.dht11Humi = dhtDevice->humi;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 001E 0057             }else if(viReturn==DHT11_ERROR_CHECKSUM){
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 001E 0058                printDebug("DHT11 errer(check sum).\r\n");
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 001E 0059             }else if(viReturn==DHT11_ERROR_TIMEOUT){
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 001E 005A                printDebug("DHT11 errer(time out).\r\n");
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 001E 005B             }
; 001E 005C             break;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 001E 005D          }
; 001E 005E          default:{
;PCODE: $00000077 VOL: 0
; 001E 005F             break;
;PCODE: $00000078 VOL: 0
; 001E 0060          }
; 001E 0061      }
;PCODE: $00000079 VOL: 0
; 001E 0062      ++ viSwitchContextSensor;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 001E 0063 }
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
