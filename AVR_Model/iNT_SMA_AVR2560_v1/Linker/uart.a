;#include <mega2560.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <string.h>
;#include <ctype.h>
;#include <delay.h>
;#include "uart.h"
;#include "io.h"
;#include "ethcomm.h"
;#include "wiz100rs.h"
;#include "interruptTask.h"
;
;/*============================================================*/
;char flag_PackageTerminate3 = 0;
;
;flash unsigned char charHeader = '$';
;flash unsigned char charTerminate = '#';
;
;bit                 flag_oled_ack      = 0;
;
;unsigned char       rxPackageIndex3;
;unsigned char       rxPackage3[64];
;unsigned char       rxPackageIndexCount3;
;/*============================================================*/
;// USART0 Receiver buffer
;//char rx_buffer0[RX_BUFFER_SIZE0];
;char rx_buffer0[2];
;
;unsigned int rx_wr_index0,rx_rd_index0,rx_counter0;
;
;// This flag is set on USART0 Receiver buffer overflow
;bit rx_buffer_overflow0;
;
;unsigned char       configRd[CONF_READ_BUFFER];      // for reading config
;int                 configLen=0;
;
;char                config_start    = 0;
;char                config_ready    = 0;    // 1 = failed, 2 = success
;char                config_end      = 0;
;char                config_response = 0;
;
;unsigned int    rxBeginCount     = 0;
;char            rxComplete  = 0;
;
;char rx0Buffer[400];
;unsigned int index0Buffer = 0;
;int flagDataUart0 = 0;
;int flagCountStart0 = 0;
;//char rx0ConnectBuff[50];
;unsigned int rx0IndexWriteConn = 0;
;//int flagConnected0 = 0;
;
;char uart0LockAccess = 0;
;
;extern piInterrupt_t pviUart0TimeOut;
;extern int (*piWizCallBack)(char *,unsigned int);
;//extern iHTTP_t iHTTPStatus;
;//iUartQueue_t iUartQueue = {0,0,0,511};
;
;// USART0 Receiver interrupt service routine
;interrupt [USART0_RXC] void usart0_rx_isr(void)
; 0002 003D {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0002 003E 
; 0002 003F     char status,data;
; 0002 0040     int iRetuen = 0;
; 0002 0041 
; 0002 0042 //    if((iUartQueue.ToWrite >= iUartQueue.ToRead) || iUartQueue.){
; 0002 0043 //
; 0002 0044 //    }
; 0002 0045     status=UCSR0A;
;PCODE: $0000000F VOL: 0
;	status -> R17
;	data -> R16
;	iRetuen -> R18,R19
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0002 0046     data=UDR0;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0002 0047 
; 0002 0048     if((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0){
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0002 0049 //        if(data == '>'){
; 0002 004A //            rx0IndexWriteConn = 0;
; 0002 004B //            rx0ConnectBuff[rx0IndexWriteConn++] = data;
; 0002 004C //        }else if(rx0IndexWriteConn > 0){
; 0002 004D //            rx0ConnectBuff[rx0IndexWriteConn++] = data;
; 0002 004E //            if(rx0IndexWriteConn >=50){
; 0002 004F //               //function callback
; 0002 0050 //
; 0002 0051 //               piWizCallBack = &iWizStatusConnected;
; 0002 0052 //               piWizCallBack(rx0ConnectBuff,rx0IndexWriteConn);
; 0002 0053 //               rx0IndexWriteConn = 0;
; 0002 0054 //            }
; 0002 0055 //        }
; 0002 0056 
; 0002 0057         //iWizRXMode = 5;
; 0002 0058         //putchar3(data);
; 0002 0059         if(iWizRXMode == WIZ_RX_STAT_MODE){
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0002 005A             if(index0Buffer == 0){
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0002 005B                  flagCountStart0 = 0;
;PCODE: $0000001F VOL: 0
; 0002 005C             }
; 0002 005D 
; 0002 005E             if(data == '>'){
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0002 005F                 flagCountStart0 = 1;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0002 0060             }
; 0002 0061 
; 0002 0062             if(flagCountStart0 == 1){
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0002 0063                 putchar3(data);
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0002 0064                 rx0Buffer[index0Buffer++] = data;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0002 0065                 putchar3(data);
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0002 0066                 if(index0Buffer >= 400){
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0002 0067                     //if full will disable interrupt
; 0002 0068                     //UCSR0B &= 0x7F;          // -- disable uart0 interrupt -- //
; 0002 0069                     send_uart(3,"\r\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n" );
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0002 006A                     send_uart(3,    "!!!!!!! Eth Buffer Overflow !!!!!!!!!"     );
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0002 006B                     send_uart(3,"\r\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n" );
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0002 006C                     index0Buffer = 0;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0002 006D                 }
; 0002 006E             }
;PCODE: $00000049 VOL: 0
; 0002 006F 
; 0002 0070         }else if(iWizRXMode == WIZ_RX_DATA_MODE){
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0002 0071             rx0Buffer[index0Buffer++] = data;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0002 0072             putchar3(data);
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0002 0073             if(index0Buffer >= 400){
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0002 0074                 //if full will disable interrupt
; 0002 0075                 //UCSR0B &= 0x7F;          // -- disable uart0 interrupt -- //
; 0002 0076                 send_uart(3,"\r\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n" );
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0002 0077                 send_uart(3,    "!!!!!!! Eth Buffer Overflow !!!!!!!!!"     );
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0002 0078                 send_uart(3,"\r\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n" );
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0002 0079                 index0Buffer = 0;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0002 007A             }
; 0002 007B 
; 0002 007C         }else if(iWizRXMode == WIZ_CONFIG_READ_MODE){
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0002 007D            rx0Buffer[index0Buffer++] = data;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0002 007E            if(index0Buffer >= 400){
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0002 007F                 //if full will disable interrupt
; 0002 0080                 //UCSR0B &= 0x7F;          // -- disable uart0 interrupt -- //
; 0002 0081                 send_uart(3,"\r\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n" );
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0002 0082                 send_uart(3,    "!!!!!!! Eth Buffer Overflow !!!!!!!!!"     );
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0002 0083                 send_uart(3,"\r\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n" );
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0002 0084                 index0Buffer = 0;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0002 0085             }
; 0002 0086         }
;PCODE: $0000008E VOL: 0
; 0002 0087 
; 0002 0088 
; 0002 0089         //putchar3(data);
; 0002 008A     }
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0002 008B 
; 0002 008C      //putchar3(data);
; 0002 008D 
; 0002 008E //    if(iWizRXMode == WIZ_RX_STAT_MODE){
; 0002 008F //        if(data == '>'){
; 0002 0090 //           //flagDataUart0 = 1;
; 0002 0091 //           iWizStatus = WIZ_STAT_UPDATE;
; 0002 0092 //        }else if(data != '>' && iWizStatus != WIZ_STAT_UPDATE){
; 0002 0093 //           putchar3(data);
; 0002 0094 //        }
; 0002 0095 //
; 0002 0096 //
; 0002 0097 //
; 0002 0098 //        if(iWizStatus == WIZ_STAT_UPDATE){
; 0002 0099 //           rx0Buffer[index0Buffer++] = data;
; 0002 009A //           if(index0Buffer == 512){
; 0002 009B //              index0Buffer = 0;
; 0002 009C //           }
; 0002 009D //           if(data == 0x0D){
; 0002 009E //                //callback check status
; 0002 009F //               //callBackChekStat();
; 0002 00A0 //               piWizCallBack = &iWizCBChekStat;
; 0002 00A1 //               piWizCallBack((char * const )rx0Buffer,index0Buffer);
; 0002 00A2 //               iWizStatus = WIZ_STAT_READ_SUCCESS;
; 0002 00A3 //               index0Buffer = 0;
; 0002 00A4 //           }
; 0002 00A5 //        }
; 0002 00A6 //    }else if(iWizRXMode == WIZ_RX_DATA_MODE){
; 0002 00A7 //        rx0Buffer[index0Buffer++] = data;
; 0002 00A8 //        if(index0Buffer == 512){
; 0002 00A9 //           index0Buffer = 0;
; 0002 00AA //        }
; 0002 00AB //        if(data == 0x0A){
; 0002 00AC //           //check http -> response code
; 0002 00AD //           if(iHTTPStatus.responseCode != WIZ_HTTP_RES_CODE_OK){
; 0002 00AE //               piWizCallBack = &iWizCBCheckHTTPResCode;
; 0002 00AF //               iRetuen = piWizCallBack((char * const )rx0Buffer,index0Buffer);
; 0002 00B0 //               if(iRetuen == WIZ_HTTP_RES_CODE_OK){
; 0002 00B1 //                   iHTTPStatus.responseCode = WIZ_HTTP_RES_CODE_OK;
; 0002 00B2 //                   //index0Buffer = 0;
; 0002 00B3 //               }else{
; 0002 00B4 //                   iHTTPStatus.responseCode = WIZ_HTTP_RES_CODE_UNKNOW;
; 0002 00B5 //                   index0Buffer = 0;
; 0002 00B6 //               }
; 0002 00B7 //           }
; 0002 00B8 ////           else if(iHTTPStatus.responseCode == WIZ_HTTP_RES_CODE_OK && iHTTPStatus.contentLength == 0){
; 0002 00B9 ////                  //iHTTPStatus.contentLength
; 0002 00BA ////                  piWizCallBack = &iWizCBCheckHTTPContextLen;
; 0002 00BB ////                  iRetuen = piWizCallBack((char * const )rx0Buffer,index0Buffer);
; 0002 00BC ////                  if(iRetuen != 1){
; 0002 00BD ////                     index0Buffer = 0;
; 0002 00BE ////                  }
; 0002 00BF //////                  if(iRetuen == WIZ_HTTP_CONTEXT_LEN_NOTFOUND){
; 0002 00C0 //////                     index0Buffer = 0;
; 0002 00C1 //////                  }
; 0002 00C2 //////                  else if((iRetuen != WIZ_HTTP_CONTEXT_LEN_LESS) && (iRetuen != WIZ_HTTP_CONTEXT_LEN_OVER)){
; 0002 00C3 //////                      iHTTPStatus.contentLength = iRetuen;
; 0002 00C4 //////                      //index0Buffer = 0;
; 0002 00C5 //////                  }else{
; 0002 00C6 //////                      //index0Buffer = 0;
; 0002 00C7 //////                  }
; 0002 00C8 ////           }
; 0002 00C9 //        }
; 0002 00CA //    }
; 0002 00CB //
; 0002 00CC 
; 0002 00CD 
; 0002 00CE 
; 0002 00CF //    if(uart0LockAccess != UART0_LOCK_ACCESS){
; 0002 00D0 //        //putchar3(data);
; 0002 00D1 //
; 0002 00D2 //        if(data=='<'){   //'<' = start config delimeter
; 0002 00D3 //          //call function pointer noti that end of data
; 0002 00D4 //          //copy data from buffer
; 0002 00D5 ////           if(rx0Buffer[(rxBeginCount-1)] == 0x0A){
; 0002 00D6 ////                  //model wiz100rs and version display
; 0002 00D7 ////                  pfiWiz100rs = &iWizRXdata;
; 0002 00D8 ////                  pfiWiz100rs();
; 0002 00D9 ////                  //rxBeginCount = 0;
; 0002 00DA ////           }else if(rx0Buffer[(rxBeginCount-1)] == 0x0D){
; 0002 00DB ////                  //model wiz100rs config data display
; 0002 00DC ////                  //rxBeginCount = 0;
; 0002 00DD ////           }
; 0002 00DE //
; 0002 00DF ////            putchar3('k');
; 0002 00E0 //            //timeout start
; 0002 00E1 //
; 0002 00E2 //
; 0002 00E3 //            rxBeginCount = 0;
; 0002 00E4 //            rx0Buffer[rxBeginCount] = data;
; 0002 00E5 //            //putchar3(data);
; 0002 00E6 //            rxBeginCount++;
; 0002 00E7 //        }
; 0002 00E8 //
; 0002 00E9 //        if(rxBeginCount > 0){
; 0002 00EA //            if(data==0x0A){
; 0002 00EB //                rx0Buffer[rxBeginCount] = data;
; 0002 00EC //               // putchar3(data);
; 0002 00ED //                pfiWiz100rs = &iWizRXdata;
; 0002 00EE //                pfiWiz100rs();
; 0002 00EF //                rxBeginCount = 0;
; 0002 00F0 //                //pviUart0TimeOut = rxBeginCount;
; 0002 00F1 //                pviUart0TimeOut = 1;
; 0002 00F2 //            }else{
; 0002 00F3 //                rx0Buffer[rxBeginCount] = data;
; 0002 00F4 //              //  putchar3(data);
; 0002 00F5 //                rxBeginCount++;
; 0002 00F6 //                //pviUart0TimeOut = rxBeginCount;
; 0002 00F7 //                pviUart0TimeOut = 1;
; 0002 00F8 //            }
; 0002 00F9 //        }
; 0002 00FA //
; 0002 00FB //
; 0002 00FC //        if(rxBeginCount==RX_BUFFER_SIZE0){
; 0002 00FD //           rxBeginCount = 0;
; 0002 00FE //           //call function pointer noti that buffer over flow
; 0002 00FF //        }
; 0002 0100 //    }
; 0002 0101 
; 0002 0102 
; 0002 0103 
; 0002 0104 
; 0002 0105 
; 0002 0106 //    if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
; 0002 0107 //    {   ETH_current_mode  == MODE_CONF;
; 0002 0108 //        if(ETH_current_mode != MODE_CONF)
; 0002 0109 //        {
; 0002 010A //        //bongkot edit;
; 0002 010B //            //putchar3(data);
; 0002 010C //
; 0002 010D //
; 0002 010E //            rx_buffer0[rx_wr_index0++]  =   data;
; 0002 010F //
; 0002 0110 //            if (rx_wr_index0 == RX_BUFFER_SIZE0)
; 0002 0111 //            {
; 0002 0112 //                rx_wr_index0=0;
; 0002 0113 //            }
; 0002 0114 //            if (++rx_counter0 == RX_BUFFER_SIZE0)
; 0002 0115 //            {
; 0002 0116 //                rx_counter0=0;
; 0002 0117 //                rx_buffer_overflow0=1;
; 0002 0118 //                send_uart(3,"\r\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n" );
; 0002 0119 //                send_uart(3,    "!!!!!!! Eth Buffer Overflow !!!!!!!!!"     );
; 0002 011A //                send_uart(3,"\r\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n" );
; 0002 011B //            }
; 0002 011C //        }
; 0002 011D //        else{
; 0002 011E //            putchar3(data);
; 0002 011F //
; 0002 0120 //            if (configLen == CONF_READ_BUFFER)
; 0002 0121 //            {
; 0002 0122 //                configLen=0;
; 0002 0123 //            }
; 0002 0124 //
; 0002 0125 //            if((data == '<') && (config_start == 0)){
; 0002 0126 //                config_start            = 1;
; 0002 0127 //                config_response         = 0;
; 0002 0128 //                config_ready            = 0;
; 0002 0129 //            }
; 0002 012A //            else if((data == 0x0D) && (config_end == 0) && (config_start == 1) && (config_response != 0)){
; 0002 012B //                config_end  = 0x0D;
; 0002 012C //            }
; 0002 012D //            else if((data == 0x0A) && (config_end == 0x0D) && (config_start == 1) && (config_response != 0)){
; 0002 012E //                config_end              = 0x0A;
; 0002 012F //                config_ready            = 1;
; 0002 0130 //            }
; 0002 0131 //            else if((data == 'E') && (config_start == 1) && (config_response == 0)){
; 0002 0132 //                config_response         = 'E';
; 0002 0133 //            }
; 0002 0134 //            else if((data == 'S') && (config_start == 1) && (config_response == 0)){
; 0002 0135 //                config_response         = 'S';
; 0002 0136 //            }
; 0002 0137 //            else if((config_start == 1) && (config_response != 0)){
; 0002 0138 //                configRd[configLen++]   =   data;
; 0002 0139 //            }
; 0002 013A //        }
; 0002 013B //    }
; 0002 013C }
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0

	.DSEG
_0x40009:
	.BYTE 0x174
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART0 Receiver buffer
;#define _ALTERNATE_GETCHAR_
;
;#pragma used+
;char getchar(void)
; 0002 0144 {

	.CSEG
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0002 0145     char data;
; 0002 0146     while (rx_counter0==0);
;PCODE: $0000009A VOL: 0
;	data -> R17
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0002 0147     data=rx_buffer0[rx_rd_index0++];
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0002 0148  //   #if RX_BUFFER_SIZE0 != 256
; 0002 0149     if (rx_rd_index0 == RX_BUFFER_SIZE0)
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0002 014A         rx_rd_index0=0;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0002 014B //    #endif
; 0002 014C     #asm("cli")
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
	cli
;PCODE: $000000AF VOL: 0
; 0002 014D     --rx_counter0;
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0002 014E     #asm("sei")
;PCODE: $000000B4 VOL: 0
	sei
;PCODE: $000000B5 VOL: 0
; 0002 014F     return data;
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0002 0150 }
;PCODE: $000000B9 VOL: 0
;#pragma used-
;// Write a character to the USART0 Transmitter
;#pragma used+
;void putchar0(char c)
; 0002 0155 {
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0002 0156     while ((UCSR0A & DATA_REGISTER_EMPTY)==0);
;PCODE: $000000BC VOL: 0
;	c -> Y+0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0002 0157     UDR0=c;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0002 0158 }
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;#pragma used-
;#endif
;
;int read_uart0(char *readbuf, int maxread,int interchar)
; 0002 015D {
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0002 015E     char data;
; 0002 015F     int len=0;
; 0002 0160 
; 0002 0161     while (rx_counter0 > 0)
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;	*readbuf -> Y+8
;	maxread -> Y+6
;	interchar -> Y+4
;	data -> R17
;	len -> R18,R19
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0002 0162     {
; 0002 0163         data=rx_buffer0[rx_rd_index0++];
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0002 0164         if (rx_rd_index0 == RX_BUFFER_SIZE0){
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0002 0165             rx_rd_index0=0;
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0002 0166         }
; 0002 0167         UCSR0B &= 0x7F;          // -- disable uart0 interrupt -- //
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0002 0168 
; 0002 0169         --rx_counter0;
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0002 016A 
; 0002 016B         UCSR0B |= 0x80;          // -- enable uart0 interrupt -- //
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0002 016C 
; 0002 016D         memcpy(readbuf++,&data,1);
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0002 016E         len++;
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0002 016F 
; 0002 0170         if(len == maxread){
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0002 0171             break;
;PCODE: $000000FA VOL: 0
; 0002 0172         }
; 0002 0173         delay_ms(interchar);
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0002 0174     }
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0002 0175     return len;
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0002 0176 }
;PCODE: $00000104 VOL: 0
;
;int write_uart0(char writebuf[], int len)
; 0002 0179 {
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0002 017A     int i;
; 0002 017B     for(i=0;i<len;i++){
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;	writebuf -> Y+4
;	len -> Y+2
;	i -> R16,R17
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0002 017C         putchar0(writebuf[i]);
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0002 017D     }
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0002 017E     return i;
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0002 017F }
;PCODE: $00000124 VOL: 0
;/*============================================================*/
;// USART1 Receiver interrupt service routine
;interrupt [USART1_RXC] void usart1_rx_isr(void)
; 0002 0183 {
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0002 0184     char status,data;
; 0002 0185     status=UCSR1A;
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0002 0186     data=UDR1;
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0002 0187 
; 0002 0188     if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0002 0189     {
; 0002 018A         if(data);
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0002 018B     }
;PCODE: $00000132 VOL: 0
; 0002 018C }
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;
;/*============================================================*/
;// USART2 Receiver interrupt service routine
;interrupt [USART2_RXC] void usart2_rx_isr(void)
; 0002 0191 {
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0002 0192     char status,data;
; 0002 0193     status=UCSR2A;
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0002 0194     data=UDR2;
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0002 0195     if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0002 0196     {
; 0002 0197         if(data=='K'){
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0002 0198             flag_oled_ack = 1;
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0002 0199         }
; 0002 019A         else{
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0002 019B             //putchar3(data);
; 0002 019C         }
;PCODE: $0000014A VOL: 0
; 0002 019D     }
; 0002 019E }
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;
;// Write a character to the USART2 Transmitter
;#pragma used+
;void putchar2(char c)
; 0002 01A3 {
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0002 01A4     while ((UCSR2A & DATA_REGISTER_EMPTY)==0);
;PCODE: $00000152 VOL: 0
;	c -> Y+0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0002 01A5     UDR2=c;
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0002 01A6 }
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;#pragma used-
;
;
;/*============================================================*/
;// USART3 Receiver interrupt service routine
;interrupt [USART3_RXC] void usart3_rx_isr(void)
; 0002 01AD {
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0002 01AE     char status,data;
; 0002 01AF     status=UCSR3A;
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0002 01B0     data=UDR3;
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0002 01B1 
; 0002 01B2 
; 0002 01B3     //putchar3(data);
; 0002 01B4     putchar0(data);
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0002 01B5     if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0002 01B6     {
; 0002 01B7         putchar3(data);
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0002 01B8 //        putchar0(data);
; 0002 01B9         // Detect Package Header
; 0002 01BA         if(data == charHeader)
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0002 01BB         {
; 0002 01BC             rxPackageIndex3 = 0;
;PCODE: $00000170 VOL: 0
; 0002 01BD         }
; 0002 01BE 
; 0002 01BF         rxPackage3[rxPackageIndex3++] = data;
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0002 01C0 
; 0002 01C1         if(rxPackageIndex3 >= 64) rxPackageIndex3 = 0;
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0002 01C2 
; 0002 01C3         if(data == charTerminate)
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0002 01C4         {
; 0002 01C5             rxPackageIndexCount3 = rxPackageIndex3-1;
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0002 01C6             rxPackageIndex3 = 0;
;PCODE: $00000182 VOL: 0
; 0002 01C7             flag_PackageTerminate3 = 1;
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0002 01C8         }
; 0002 01C9     }
;PCODE: $00000185 VOL: 0
; 0002 01CA }
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;
;/*============================================================*/
;// Write a character to the USART3 Transmitter
;#pragma used+
;void putchar3(char c)
; 0002 01D0 {
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0002 01D1     while ((UCSR3A & DATA_REGISTER_EMPTY)==0);
;PCODE: $0000018D VOL: 0
;	c -> Y+0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0002 01D2     UDR3=c;
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0002 01D3 }
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;#pragma used-
;
;/*============================================================*/
;void send_uart(char port,char *buffer)
; 0002 01D8 {
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0002 01D9     char i = 0;
; 0002 01DA 
; 0002 01DB     switch (port)
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;	port -> Y+3
;	*buffer -> Y+1
;	i -> R17
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0002 01DC     {
; 0002 01DD         case 0: puts(buffer);
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
; 0002 01DE                 break;
;PCODE: $000001A5 VOL: 0
; 0002 01DF 
; 0002 01E0         case 1: while(buffer[i] != 0)
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
; 0002 01E1                 {
; 0002 01E2                     //putchar1(buffer[i]);
; 0002 01E3                     i++;
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0002 01E4                 }
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0002 01E5                 break;
;PCODE: $000001B3 VOL: 0
; 0002 01E6 
; 0002 01E7         case 2: while(buffer[i] != 0)
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
; 0002 01E8                 {
; 0002 01E9                     putchar2(buffer[i]);
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
; 0002 01EA                     i++;
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
; 0002 01EB                 }
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0002 01EC                 break;
;PCODE: $000001C5 VOL: 0
; 0002 01ED 
; 0002 01EE         case 3: while(buffer[i] != 0)
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
; 0002 01EF                 {
; 0002 01F0                     putchar3(buffer[i]);
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0002 01F1                     i++;
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
; 0002 01F2                 }
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0002 01F3                 break;
;PCODE: $000001D7 VOL: 0
; 0002 01F4     }
;PCODE: $000001D8 VOL: 0
; 0002 01F5 }
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;
;/*============================================================*/
;void init_uart(void)
; 0002 01F9 {
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
; 0002 01FA //    // USART0 initialization
; 0002 01FB //    // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0002 01FC //    // USART0 Receiver: On
; 0002 01FD //    // USART0 Transmitter: On
; 0002 01FE //    // USART0 Mode: Asynchronous
; 0002 01FF //    // USART0 Baud Rate: 38400
; 0002 0200 //    UCSR0A=0x00;
; 0002 0201 //    UCSR0B=0x98;
; 0002 0202 //    UCSR0C=0x06;
; 0002 0203 //    UBRR0H=0x00;
; 0002 0204 //    UBRR0L=0x0C;
; 0002 0205 
; 0002 0206     // USART0 initialization
; 0002 0207     // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0002 0208     // USART0 Receiver: On
; 0002 0209     // USART0 Transmitter: On
; 0002 020A     // USART0 Mode: Asynchronous
; 0002 020B     // USART0 Baud Rate: 9600
; 0002 020C 
; 0002 020D     /*bongkot comment*/
; 0002 020E     UCSR0A=0x00;
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0002 020F     UCSR0B=0x98;
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
; 0002 0210     UCSR0C=0x06;
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
; 0002 0211     UBRR0H=0x00;
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
; 0002 0212     UBRR0L=0x33;
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0002 0213 
; 0002 0214     // USART0 initialization
; 0002 0215     // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0002 0216     // USART0 Receiver: On
; 0002 0217     // USART0 Transmitter: On
; 0002 0218     // USART0 Mode: Asynchronous
; 0002 0219     // USART0 Baud Rate: 57600
; 0002 021A //    UCSR0A=0x00;
; 0002 021B //    UCSR0B=0x98;
; 0002 021C //    UCSR0C=0x06;
; 0002 021D //    UBRR0H=0x00;
; 0002 021E //    UBRR0L=0x08;
; 0002 021F 
; 0002 0220 
; 0002 0221 
; 0002 0222 
; 0002 0223 
; 0002 0224     // USART1 initialization
; 0002 0225     // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0002 0226     // USART1 Receiver: On
; 0002 0227     // USART1 Transmitter: On
; 0002 0228     // USART1 Mode: Asynchronous
; 0002 0229     // USART1 Baud Rate: 38400
; 0002 022A     UCSR1A=0x00;
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
; 0002 022B     UCSR1B=0x98;
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
; 0002 022C     UCSR1C=0x06;
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
; 0002 022D     UBRR1H=0x00;
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
; 0002 022E     UBRR1L=0x0C;
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
; 0002 022F 
; 0002 0230 //    // USART2 initialization
; 0002 0231 //    // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0002 0232 //    // USART2 Receiver: On
; 0002 0233 //    // USART2 Transmitter: On
; 0002 0234 //    // USART2 Mode: Asynchronous
; 0002 0235 //    // USART2 Baud Rate: 115200 (Double Speed Mode)
; 0002 0236 //    UCSR2A=0x02;
; 0002 0237 //    UCSR2B=0x98;
; 0002 0238 //    UCSR2C=0x06;
; 0002 0239 //    UBRR2H=0x00;
; 0002 023A //    UBRR2L=0x08;
; 0002 023B 
; 0002 023C     // USART2 initialization
; 0002 023D     // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0002 023E     // USART2 Receiver: On
; 0002 023F     // USART2 Transmitter: On
; 0002 0240     // USART2 Mode: Asynchronous
; 0002 0241     // USART2 Baud Rate: 38400
; 0002 0242     UCSR2A=0x00;
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
; 0002 0243     UCSR2B=0x98;
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
; 0002 0244     UCSR2C=0x06;
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
; 0002 0245     UBRR2H=0x00;
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
; 0002 0246     UBRR2L=0x0C;
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
; 0002 0247 
; 0002 0248     // USART3 initialization
; 0002 0249     // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0002 024A     // USART3 Receiver: On
; 0002 024B     // USART3 Transmitter: On
; 0002 024C     // USART3 Mode: Asynchronous
; 0002 024D     // USART3 Baud Rate: 38400
; 0002 024E     UCSR3A=0x00;
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
; 0002 024F     UCSR3B=0x98;
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
; 0002 0250     UCSR3C=0x06;
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
; 0002 0251     UBRR3H=0x00;
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
; 0002 0252     UBRR3L=0x0C;
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
; 0002 0253 }
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;
;/*============================================================*/
;
