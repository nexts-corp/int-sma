;#include "database.h"
;#include "sdManager.h"
;
;
;extern iChar_t viFolderDataName[];
;extern iChar_t viFolderDataLogName[];
;//extern iChar_t viFolderEventName[];
;//extern iChar_t viFolderStatusName[];
;//extern iChar_t viFolderErrorName[];
;//extern iChar_t viFolderConfigName[];
;
;extern iChar_t viDirRootPath[];
;extern iChar_t viDirDataPath[];
;//extern iChar_t viDirDataLogPath[];
;//extern iChar_t viDirEventPath[];
;//extern iChar_t viDirStatusPath[];
;//extern iChar_t viDirErrorPath[];
;//extern iChar_t viDirConfigPath[];
;
;extern iChar_t viDataFName[];
;//extern iChar_t viDataLogFName[];
;//extern iChar_t viEventFName[];
;//extern iChar_t viStatusFName[];
;//extern iChar_t viErrorFName[];
;//extern iChar_t viConfigFName[];
;
;piDataBaseHandle_t pviDataBaseHandle = NULL;
;eeprom unsigned int viLineID=0;
;
;
;
;iChar_t iDataUpdate(iUInt_t viRecordID_arg,iUChar_t viStatus_arg){             //'N' log and not send data , 'Y' sent data ,'S' settlemented
; 0027 0020 iChar_t iDataUpdate(iUInt_t viRecordID_arg,iUChar_t viStatus_arg){

	.CSEG
;PCODE: $00000000 VOL: 0
;PCODE: $00000001 VOL: 0
; 0027 0021     iDB_t *pviDBLogger;
; 0027 0022     iUInt_t viReturnID = 0;
; 0027 0023     iChar_t *pviDataBuffInsert;
; 0027 0024     const iChar_t viStatusField = 'Y';
; 0027 0025     iChar_t viDataBuff[255];
; 0027 0026     unsigned int viRecordID = 0;
; 0027 0027     unsigned long indexWriteArr = 0;
; 0027 0028     unsigned long indexWrite = 0;
; 0027 0029     unsigned long viFileSize = 0;
; 0027 002A     unsigned long indexRead = 0;
; 0027 002B     unsigned long viRecordIDBuff = 0;
; 0027 002C 
; 0027 002D     if(viRecordID_arg <= 0){    //reserv a all select
;PCODE: $00000002 VOL: 0
;PCODE: $00000003 VOL: 0
;PCODE: $00000004 VOL: 0
;PCODE: $00000005 VOL: 0
;PCODE: $00000006 VOL: 0
;PCODE: $00000007 VOL: 0
;PCODE: $00000008 VOL: 0
;	viRecordID_arg -> Y+285
;	viStatus_arg -> Y+284
;	*pviDBLogger -> R16,R17
;	viReturnID -> R18,R19
;	*pviDataBuffInsert -> R20,R21
;	viStatusField -> Y+283
;	viDataBuff -> Y+28
;	viRecordID -> Y+26
;	indexWriteArr -> Y+22
;	indexWrite -> Y+18
;	viFileSize -> Y+14
;	indexRead -> Y+10
;	viRecordIDBuff -> Y+6
;PCODE: $00000009 VOL: 0
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
; 0027 002E         return -1;
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0027 002F     }else if(viRecordID_arg == 1){
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0027 0030         indexRead = 0;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0027 0031     }else if(viRecordID_arg > 1){
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0027 0032         indexRead = (255*(viRecordID_arg-1));
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0027 0033     }
; 0027 0034     pviDBLogger = (iDB_t * const)malloc(sizeof(iDB_t));
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0027 0035     if(pviDBLogger!=NULL){
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0027 0036         memset(viDataBuff,0,sizeof(viDataBuff));
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0027 0037         if(iFSize((char const * const)viDirDataPath,(char const * const)viDataFName,&viFileSize)){
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0027 0038            if(viFileSize == 0){
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0027 0039               viLineID = 0;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0027 003A            }else{  //read last record id
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0027 003B               printDebug("[iDataUpdate]File size(%ld),Read RecordID(%ld),Index read(%ld).\r\n",viFileSize,viRecordID_arg,indexRead);
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0027 003C               iFRead(viDataBuff,(iUInt_t)DB_BLOCK_READ_def,(char const * const)viDirDataPath,(char const * const)viDataFName,&indexRead);
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0027 003D               print_payload(viDataBuff,255);
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0027 003E               memcpy(&viRecordIDBuff,viDataBuff,2);
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0027 003F               if(viRecordIDBuff!=viRecordID_arg){
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0027 0040                  printDebug("[iDataUpdate]mem diff allocate.\r\n");
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0027 0041               }else{
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0027 0042                  printDebug("[iDataUpdate]Record id(%ld),status send(%c).\r\n",viRecordID_arg,viDataBuff[2]);
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0027 0043               }
;PCODE: $00000082 VOL: 0
; 0027 0044            }
;PCODE: $00000083 VOL: 0
; 0027 0045         }
; 0027 0046 
; 0027 0047         if(viRecordID_arg <= 0){    //reserv a all select
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0027 0048             return -1;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0027 0049         }else if(viRecordID_arg == 1){
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0027 004A             indexWrite = 0;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0027 004B         }else if(viRecordID_arg > 1){
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0027 004C             indexWrite = (255*(viRecordID_arg-1));
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0027 004D         }
; 0027 004E 
; 0027 004F         indexWriteArr = 0;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0027 0050         memcpy(&viDataBuff[indexWriteArr],&viStatusField,1);
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0027 0051         indexWriteArr += 1;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0027 0052 //        memcpy(&viDataBuff[indexWrite],&viStatusField,1);
; 0027 0053 //        indexWrite += 1;
; 0027 0054 //        memcpy(&viDataBuff[indexWrite],&viLength_arg,2);
; 0027 0055 //        indexWrite += 2;
; 0027 0056 //        memcpy(&viDataBuff[indexWrite],&pviDataBuffer_arg[0],viLength_arg);
; 0027 0057 //        indexWrite += viLength_arg;
; 0027 0058 
; 0027 0059         pviDBLogger->viTable.length = indexWriteArr;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0027 005A         pviDBLogger->viTable.value = viDataBuff;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0027 005B         indexWrite += 2;
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0027 005C         iFRwite(pviDBLogger->viTable.value,sizeof(viDataBuff),(const char*)viDirDataPath,(const char*)viDataFName,&indexWrite);
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0027 005D 
; 0027 005E         printDebug("[iDataUpdate]File size(%ld),Read RecordID(%ld),Index write(%ld).\r\n",viFileSize,viRecordID_arg,(indexWrite));
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0027 005F         iFRead(viDataBuff,(iUInt_t)DB_BLOCK_READ_def,(char const * const)viDirDataPath,(char const * const)viDataFName,&indexRead);
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0027 0060         print_payload(viDataBuff,255);
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0027 0061         memcpy(&viRecordIDBuff,viDataBuff,2);
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0027 0062         if(viRecordIDBuff!=viRecordID_arg){
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0027 0063            printDebug("[iDataUpdate]mem diff allocate.\r\n");
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0027 0064         }else{
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0027 0065           printDebug("[iDataUpdate]Record id(%ld),status send(%c).\r\n",viRecordID_arg,viDataBuff[2]);
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0027 0066         }
;PCODE: $00000101 VOL: 0
; 0027 0067 
; 0027 0068         free(pviDBLogger);
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0027 0069 
; 0027 006A         printDebug("[iDataUpdate]Insert is success.\r\n");
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0027 006B         viReturnID = viRecordID;
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0027 006C     }else{
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0027 006D         printDebug("[iDataUpdate]Databuff_arg can't allocate mem.\r\n");
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0027 006E     }
;PCODE: $00000116 VOL: 0
; 0027 006F     return viReturnID;
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0027 0070 }
;PCODE: $0000011B VOL: 0
;
;iUInt_t iDataInsert(iChar_t const * const pviDataBuffer_arg,iUInt_t viLength_arg){
; 0027 0072 iUInt_t iDataInsert(iChar_t const * const pviDataBuffer_arg,iUInt_t viLength_arg){
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0027 0073     iDB_t *pviDBLogger;
; 0027 0074     iUInt_t viReturnID = 0;
; 0027 0075     iChar_t *pviDataBuffInsert;
; 0027 0076     const iChar_t viStatusField = 'N';
; 0027 0077     iChar_t viDataBuff[255];
; 0027 0078     unsigned int viRecordID = 0;
; 0027 0079     unsigned long indexWrite = 0;
; 0027 007A     unsigned long viFileSize = 0;
; 0027 007B     unsigned long indexRead = 0;
; 0027 007C 
; 0027 007D     pviDBLogger = (iDB_t * const)malloc(sizeof(iDB_t));
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;	*pviDataBuffer_arg -> Y+278
;	viLength_arg -> Y+276
;	*pviDBLogger -> R16,R17
;	viReturnID -> R18,R19
;	*pviDataBuffInsert -> R20,R21
;	viStatusField -> Y+275
;	viDataBuff -> Y+20
;	viRecordID -> Y+18
;	indexWrite -> Y+14
;	viFileSize -> Y+10
;	indexRead -> Y+6
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0027 007E     if(pviDBLogger!=NULL){
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0027 007F         memset(viDataBuff,0,sizeof(viDataBuff));
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0027 0080         if(iFSize((char const * const)viDirDataPath,(char const * const)viDataFName,&viFileSize)){
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0027 0081            if(viFileSize == 0){
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0027 0082               viLineID = 0;
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0027 0083               indexWrite = 0;
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0027 0084            }else{  //read last record id
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0027 0085               if((viFileSize/255)==1){
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0027 0086                  indexRead = 0;
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0027 0087               }else if((viFileSize/255)>1){
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0027 0088                  indexRead = (255*((viFileSize/255)-1));
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0027 0089               }
; 0027 008A               iFRead(viDataBuff,(iUInt_t)DB_BLOCK_READ_def,(char const * const)viDirDataPath,(char const * const)viDataFName,&indexRead);
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0027 008B               memcpy(&viRecordID,&viDataBuff[0],2);
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0027 008C               printDebug("[iDataInsert]Last record id(%ld).\r\n",viRecordID);
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0027 008D               viLineID = viRecordID;
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0027 008E            }
;PCODE: $0000017B VOL: 0
; 0027 008F         }
; 0027 0090 
; 0027 0091         viRecordID = ++viLineID;
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0027 0092         if(viRecordID <= 0){    //reserv a all select
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0027 0093             return -1;
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0027 0094         }else if(viRecordID == 1){
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0027 0095             indexWrite = 0;
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0027 0096         }else if(viRecordID > 1){
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0027 0097             indexWrite = (255*(viRecordID-1));
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0027 0098         }
; 0027 0099 
; 0027 009A         indexWrite = 0;
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0027 009B         memcpy(&viDataBuff[indexWrite],&viRecordID,2);
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0027 009C         indexWrite += 2;
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0027 009D         memcpy(&viDataBuff[indexWrite],&viStatusField,1);
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
; 0027 009E         indexWrite += 1;
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
; 0027 009F         memcpy(&viDataBuff[indexWrite],&viLength_arg,2);
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0027 00A0         indexWrite += 2;
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
; 0027 00A1         memcpy(&viDataBuff[indexWrite],&pviDataBuffer_arg[0],viLength_arg);
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
; 0027 00A2         indexWrite += viLength_arg;
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
; 0027 00A3 
; 0027 00A4         pviDBLogger->viTable.length = indexWrite;
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0027 00A5         pviDBLogger->viTable.value = viDataBuff;
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
; 0027 00A6         iFRwite(pviDBLogger->viTable.value,sizeof(viDataBuff),(const char*)viDirDataPath,(const char*)viDataFName,&indexWrite);
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0027 00A7 
; 0027 00A8         free(pviDBLogger);
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
; 0027 00A9 
; 0027 00AA         printDebug("[iDataInsert]Insert is success.\r\n");
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0027 00AB         viReturnID = viRecordID;
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
; 0027 00AC     }else{
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
; 0027 00AD         printDebug("[iDataInsert]Databuff_arg can't allocate mem.\r\n");
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
; 0027 00AE     }
;PCODE: $000001F5 VOL: 0
; 0027 00AF     return viReturnID;
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
; 0027 00B0 }
;PCODE: $000001FA VOL: 0
;
;iChar_t iDataSelect(iUInt_t viRecordID_arg,iUChar_t viStatus_arg){             //'N' log and not send data , 'Y' sent data ,'S' settlemented
; 0027 00B2 iChar_t iDataSelect(iUInt_t viRecordID_arg,iUChar_t viStatus_arg){
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
; 0027 00B3     iDB_t *pviDBLogger;
; 0027 00B4     iChar_t viReturn = 0;
; 0027 00B5     iChar_t *pviDataBuffInsert;
; 0027 00B6     iChar_t viDataBuff[255];
; 0027 00B7     unsigned int viRecordID = 0;
; 0027 00B8     unsigned long indexRead = 0;
; 0027 00B9     unsigned int viLenOfData = 0;
; 0027 00BA     unsigned long viFileSize = 0;
; 0027 00BB     unsigned long viRecordIDBuff = 0;
; 0027 00BC 
; 0027 00BD     if(viRecordID_arg <= 0){    //reserv a all select
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;	viRecordID_arg -> Y+278
;	viStatus_arg -> Y+277
;	*pviDBLogger -> R16,R17
;	viReturn -> R19
;	*pviDataBuffInsert -> R20,R21
;	viDataBuff -> Y+22
;	viRecordID -> Y+20
;	indexRead -> Y+16
;	viLenOfData -> Y+14
;	viFileSize -> Y+10
;	viRecordIDBuff -> Y+6
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
; 0027 00BE         return -1;
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
; 0027 00BF     }else if(viRecordID_arg == 1){
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
; 0027 00C0         indexRead = 0;
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
; 0027 00C1     }else if(viRecordID_arg > 1){
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
; 0027 00C2         indexRead = (255*(viRecordID_arg-1));
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
; 0027 00C3     }
; 0027 00C4     pviDBLogger = (iDB_t * const)malloc(sizeof(iDB_t));
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
; 0027 00C5     if(pviDBLogger!=NULL){
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
; 0027 00C6         memset(viDataBuff,0,sizeof(viDataBuff));
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
; 0027 00C7         if(iFSize((char const * const)viDirDataPath,(char const * const)viDataFName,&viFileSize)==1){
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
; 0027 00C8            if(viFileSize == 0){
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
; 0027 00C9               printDebug("[iDataSelect]File is empty.\r\n");
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
; 0027 00CA            }else{
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
; 0027 00CB               printDebug("[iDataSelect]File size(%ld),Read RecordID(%ld),Index read(%ld).\r\n",viFileSize,viRecordID_arg,indexRead);
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
; 0027 00CC               iFRead(viDataBuff,(iUInt_t)DB_BLOCK_READ_def,(char const * const)viDirDataPath,(char const * const)viDataFName,&indexRead);
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
; 0027 00CD               print_payload(viDataBuff,255);
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
; 0027 00CE               memcpy(&viRecordIDBuff,viDataBuff,2);
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
; 0027 00CF               if(viRecordIDBuff!=viRecordID_arg){
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
; 0027 00D0                  printDebug("[iDataSelect]mem diff allocate.\r\n");
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
; 0027 00D1               }else{
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
; 0027 00D2                  printDebug("[iDataSelect]Record id(%ld),status send(%c).\r\n",viRecordID_arg,viDataBuff[2]);
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
; 0027 00D3               }
;PCODE: $00000281 VOL: 0
; 0027 00D4            }
;PCODE: $00000282 VOL: 0
; 0027 00D5         }
; 0027 00D6         free(pviDBLogger);
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
; 0027 00D7         printDebug("[iDataSelect]iDataSelect is success.\r\n");
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
; 0027 00D8         viReturn = 1;
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
; 0027 00D9     }else{
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
; 0027 00DA         printDebug("[iDataSelect]Databuff_arg can't allocate mem.\r\n");
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
; 0027 00DB     }
;PCODE: $00000298 VOL: 0
; 0027 00DC     return viReturn;
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
; 0027 00DD }
;PCODE: $0000029D VOL: 0
