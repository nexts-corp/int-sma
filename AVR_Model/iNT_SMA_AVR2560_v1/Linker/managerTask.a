;#include "io.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include "timer.h"
;#include "managerTask.h"
;#include "sensorTask.h"
;#include "smaProtocol.h"
;#include "lan.h"
;#include "database.h"
;
;extern piQueueHandle_t pviQueueTaskAToTaskB;
;extern piQueueHandle_t pviQueueSensorToMang;
;extern piQueueHandle_t pviQueueDeviceToMang;
;
;extern iUChar_t viFlagTerInit;           //Terminal initial frist
;
;iMangQueue_t viMangQueue[MANG_QUEUE_MAX];
;
;iSensorData_t pviRXReceiveSensor;
;//iUChar_t de
;
;//iData_t viTXDataBuff;
;//iData_t viRXDataBuff;
;
;void managerTask(void *pviParameter){
; 001A 0017 void managerTask(void *pviParameter){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 001A 0018      int i;
; 001A 0019      iData_t viTXDataBuff;
; 001A 001A      iData_t viRXDataBuff;
; 001A 001B      iUChar_t viHostRetransmit = 3;
; 001A 001C 
; 001A 001D //     char viGenDataElem[80] = {
; 001A 001E //         0x7e,
; 001A 001F //         0x00,0x4c,
; 001A 0020 //         0x02,0x00,
; 001A 0021 //         0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
; 001A 0022 //         0x50,0x72,0xC9,0x55,
; 001A 0023 //         0x00,0x01,
; 001A 0024 //         0x2A,0x06,0x11,0x04,0xCD,0xCC,0xC7,0x42,
; 001A 0025 //         0x2A,0x06,0x12,0x04,0x00,0x00,0x00,0x00,
; 001A 0026 //         0x2A,0x06,0x13,0x04,0x00,0x00,0xE0,0x41,
; 001A 0027 //         0x5A,0x07,0x31,0x0c,0x0d,0x00,0x00,0x00,0x00,
; 001A 0028 //         0x5A,0x07,0x32,0x0d,0x0d,0x01,0x0f,0xf0,0x3b,
; 001A 0029 //         0x5A,0x07,0x41,0x0a,0x09,0x00,0x0f,0xe0,0x41,
; 001A 002A //         0x5A,0x07,0x42,0x0a,0x0b,0x00,0x0f,0x08,0x42,
; 001A 002B //         0x70
; 001A 002C //    } ;
; 001A 002D 
; 001A 002E     char viGenDataElem[60] = {
; 001A 002F          0x2A,0x06,0x11,0x04,0xCD,0xCC,0xC7,0x42,
; 001A 0030          0x2A,0x06,0x12,0x04,0x00,0x00,0x00,0x00,
; 001A 0031          0x2A,0x06,0x13,0x04,0x00,0x00,0xE0,0x41,
; 001A 0032          0x5A,0x07,0x31,0x0c,0x0d,0x00,0x00,0x00,0x00,
; 001A 0033          0x5A,0x07,0x32,0x0d,0x0d,0x01,0x0f,0xf0,0x3b,
; 001A 0034          0x5A,0x07,0x41,0x0a,0x09,0x00,0x0f,0xe0,0x41,
; 001A 0035          0x5A,0x07,0x42,0x0a,0x0b,0x00,0x0f,0x08,0x42
; 001A 0036     } ;
; 001A 0037      char mti[2] = {0x02,0x00};
; 001A 0038      char tid[8] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
; 001A 0039      TIMER   viDelay_s;
; 001A 003A      iUChar_t viCommuInterface = 0;
; 001A 003B      iUChar_t modeOperate = REALTIME_MODE;
; 001A 003C      iUChar_t deviceStatus = DEVICE_ENABLE;
; 001A 003D 
; 001A 003E     #asm("wdr")
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;	*pviParameter -> Y+684
;	i -> R16,R17
;	viTXDataBuff -> Y+382
;	viRXDataBuff -> Y+80
;	viHostRetransmit -> R19
;	viGenDataElem -> Y+20
;	mti -> Y+18
;	tid -> Y+10
;	viDelay_s -> Y+6
;	viCommuInterface -> R18
;	modeOperate -> R21
;	deviceStatus -> R20
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
	wdr
;PCODE: $0000001F VOL: 0
; 001A 003F 
; 001A 0040      printDebug("<managerTask>Task Running...\r\n");
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 001A 0041 
; 001A 0042 
; 001A 0043 //    if(iQueueReceive(pviQueueSensorToMang,&pviRXReceiveSensor)==1){
; 001A 0044 //        printDebug("<managerTask>ACD");
; 001A 0045 //        for(i=0;i<SENSER_ADC_MAX_SIZE;i++){
; 001A 0046 //            printDebug("[%d]:%d | ",(i+1),pviRXReceiveSensor.adc[i]);
; 001A 0047 //        }
; 001A 0048 //        printDebug("\r\n");
; 001A 0049 //        printDebug("<managerTask>DHT11 Temp-c(%f), Humidity(%f)\r\n",pviRXReceiveSensor.dht11Temp,pviRXReceiveSensor.dht11Humi);
; 001A 004A //	}else{
; 001A 004B //		printDebug("<managerTask>data can not sent a data to pviQueueSensorToMang.\r\n");
; 001A 004C //	}
; 001A 004D 
; 001A 004E //
; 001A 004F //    if(iQueueReceive(pviQueueDeviceToMang,&pviRXReceiveSensor)==1){
; 001A 0050 //        printDebug("<managerTask>ACD");
; 001A 0051 //        for(i=0;i<SENSER_ADC_MAX_SIZE;i++){
; 001A 0052 //            printDebug("[%d]:%d | ",(i+1),pviRXReceiveSensor.adc[i]);
; 001A 0053 //        }
; 001A 0054 //        printDebug("\r\n");
; 001A 0055 //        printDebug("<managerTask>DHT11 Temp-c(%f), Humidity(%f)\r\n",pviRXReceiveSensor.dht11Temp,pviRXReceiveSensor.dht11Humi);
; 001A 0056 //	}else{
; 001A 0057 //		printDebug("<managerTask>data can not sent a data to pviQueueSensorToMang.\r\n");
; 001A 0058 //	}
; 001A 0059 
; 001A 005A     if(viFlagTerInit==0){
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 001A 005B         mti[0] = 0x08;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 001A 005C         mti[1] = 0x00;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 001A 005D         iPTCPack(&viTXDataBuff,(char *)"",0,mti,tid);
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 001A 005E         if(iLanWriteData(&viTXDataBuff)){
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 001A 005F             if(iLanReadData(&viRXDataBuff)){
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 001A 0060                 if(iPTCParser(&viRXDataBuff)){
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 001A 0061                     viFlagTerInit = 1;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 001A 0062                     iTagParser(&viRXDataBuff);      //tag process  othor do..
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 001A 0063                     if(iPTCCheckHostReq(&viRXDataBuff)){
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 001A 0064 
; 001A 0065                     }
; 001A 0066                 }
;PCODE: $0000004D VOL: 0
; 001A 0067                 //iHostReqProcess(&viTXDataBuff,&viRXDataBuff);
; 001A 0068             }
;PCODE: $0000004E VOL: 0
; 001A 0069         }
;PCODE: $0000004F VOL: 0
; 001A 006A     }else{
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 001A 006B 
; 001A 006C         //deviceStatus = DEVICE_DISABLE;
; 001A 006D         deviceStatus = DEVICE_ENABLE;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 001A 006E 
; 001A 006F         if(deviceStatus == DEVICE_ENABLE){
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 001A 0070             TIMER_setTimer(&viDelay_s, 5);
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 001A 0071             while(!TIMER_checkTimerExceed(viDelay_s)){
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 001A 0072                #asm("wdr")
;PCODE: $00000061 VOL: 0
	wdr
;PCODE: $00000062 VOL: 0
; 001A 0073             }
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 001A 0074 //
; 001A 0075 //
; 001A 0076 //            if(){
; 001A 0077 //
; 001A 0078 //            }
; 001A 0079 
; 001A 007A 
; 001A 007B             if(modeOperate == REALTIME_MODE){
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 001A 007C                  mti[0] = 0x02;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 001A 007D                  mti[1] = 0x00;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 001A 007E             }else if(modeOperate == LOGGER_MODE){
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 001A 007F                  mti[0] = 0x03;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 001A 0080                  mti[1] = 0x00;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 001A 0081             }
; 001A 0082 
; 001A 0083             iPTCPack(&viTXDataBuff,viGenDataElem,sizeof(viGenDataElem),mti,tid);
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 001A 0084             iMangQueueAddItem(&viTXDataBuff,&viTXDataBuff.value[17]); //add protocol in mang queue
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 001A 0085             iMangQueueDisplay();//display mang queue
;PCODE: $00000086 VOL: 0
; 001A 0086             delay_ms(1000);
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 001A 0087             iDataInsert(viTXDataBuff.value,viTXDataBuff.length);
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 001A 0088             #asm("wdr")
;PCODE: $0000008E VOL: 0
	wdr
;PCODE: $0000008F VOL: 0
; 001A 0089 
; 001A 008A             //print_payload(viTXDataBuff.value, (sizeof(viGenDataElem)+20));               //20 = header + check sum
; 001A 008B             while(iMangCheckRetransmit(&viTXDataBuff.value[17])!=0){
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 001A 008C                 if(iLanWriteData(&viTXDataBuff)){
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 001A 008D                       if(iLanReadData(&viRXDataBuff)){
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 001A 008E                             iMangQueueDelItem(&viRXDataBuff.value[17]);       //del queue with fid
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 001A 008F                             if(iPTCParser(&viRXDataBuff)){    //report success
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 001A 0090                                   printDebug("[managerTask]Print.[\r\n");
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 001A 0091                                   print_payload(viRXDataBuff.value,viRXDataBuff.length);
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 001A 0092                                   printDebug("]\r\n");
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 001A 0093 
; 001A 0094                                   iTagParser(&viRXDataBuff);      //tag process  othor do..
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 001A 0095 
; 001A 0096 
; 001A 0097                                   if(iPTCCheckHostReq(&viRXDataBuff)){
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 001A 0098                                      mti[0] = 0x08;
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 001A 0099                                      mti[1] = 0x00;
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 001A 009A                                      iPTCPack(&viTXDataBuff,(char *)"",0,mti,tid);
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 001A 009B                                      while(viHostRetransmit!=0){
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 001A 009C                                         if(iLanWriteData(&viTXDataBuff)){
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 001A 009D                                             if(iLanReadData(&viRXDataBuff)){
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 001A 009E                                                 iHostReqProcess(&viTXDataBuff,&viRXDataBuff);
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 001A 009F                                             }
; 001A 00A0                                             break;
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 001A 00A1                                         }
; 001A 00A2                                         viHostRetransmit--;
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 001A 00A3                                      }
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 001A 00A4                                   }
; 001A 00A5                             }
;PCODE: $000000E5 VOL: 0
; 001A 00A6                             break;
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 001A 00A7                        }else{
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 001A 00A8                             //iMangQueueDelItem(&viRXDataBuff.value[17]);       //del queue with fid
; 001A 00A9                        }
;PCODE: $000000EA VOL: 0
; 001A 00AA                 }
; 001A 00AB                 if(iMangCheckRetransmit(&viTXDataBuff.value[17])==0){
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 001A 00AC                      iDataLogInsert(viTXDataBuff.value,viTXDataBuff.length);
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 001A 00AD                      iMangQueueDelItem(&viTXDataBuff.value[17]);       //del queue with fid  due over retransmit
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 001A 00AE                 }
; 001A 00AF             }
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 001A 00B0 
; 001A 00B1 
; 001A 00B2         }
; 001A 00B3 
; 001A 00B4     }
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 001A 00B5 
; 001A 00B6 
; 001A 00B7 
; 001A 00B8 }
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;
;iUInt_t iHostReqProcess(iData_t * pviTXDataBuff_arg,iData_t * pviRXDataBuff_arg){
; 001A 00BA iUInt_t iHostReqProcess(iData_t * pviTXDataBuff_arg,iData_t * pviRXDataBuff_arg){
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 001A 00BB     char mti[2] = {0x08,0x00};
; 001A 00BC     char tid[8] = {0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01};
; 001A 00BD     iUInt_t viReturn = 0;
; 001A 00BE     iUChar_t viRetransmit = 1;
; 001A 00BF     iChar_t viHostNeedFlag = 0;
; 001A 00C0 
; 001A 00C1 //    iPTCPack(pviTXDataBuff_arg,(char *)"",0,mti,tid);
; 001A 00C2 //    iMangQueueAddItem(pviTXDataBuff_arg,&pviTXDataBuff_arg->value[17]); //add protocol in mang queue
; 001A 00C3 //    iMangQueueDisplay();//display mang queue
; 001A 00C4 //    iDataInsert(pviTXDataBuff_arg->value,pviTXDataBuff_arg->length);
; 001A 00C5     printDebug("[iHostReqProcess]TX Print 1.[\r\n");
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;	*pviTXDataBuff_arg -> Y+16
;	*pviRXDataBuff_arg -> Y+14
;	mti -> Y+12
;	tid -> Y+4
;	viReturn -> R16,R17
;	viRetransmit -> R19
;	viHostNeedFlag -> R18
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 001A 00C6     print_payload(pviTXDataBuff_arg->value,pviTXDataBuff_arg->length);
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 001A 00C7     printDebug("]\r\n");
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 001A 00C8 
; 001A 00C9     printDebug("[iHostReqProcess]RX Print 2.[\r\n");
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 001A 00CA     print_payload(pviRXDataBuff_arg->value,pviRXDataBuff_arg->length);
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 001A 00CB     printDebug("]\r\n");
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 001A 00CC 
; 001A 00CD     if(iPTCParser(pviRXDataBuff_arg)){    //report success
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 001A 00CE         printDebug("[iHostReqProcess]Print.[\r\n");
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 001A 00CF         print_payload(pviRXDataBuff_arg->value,pviRXDataBuff_arg->length);
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 001A 00D0         printDebug("]\r\n");
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 001A 00D1 
; 001A 00D2         iTagParser(pviRXDataBuff_arg);      //tag process  othor do..
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 001A 00D3     }
; 001A 00D4 //
; 001A 00D5 //    printDebug("[iHostReqProcess]FID(%02x%02x).\r\n",*(pviTXDataBuff_arg->value+17),*(pviTXDataBuff_arg->value+18));
; 001A 00D6 
; 001A 00D7 //        if(iLanReadData(pviRXDataBuff_arg)){
; 001A 00D8 //            iMangQueueDelItem((pviTXDataBuff_arg->value+17));       //del queue with fid
; 001A 00D9 //            if(iPTCParser(pviRXDataBuff_arg)){    report success
; 001A 00DA //                printDebug("[iHostReqProcess]Print 1-1.[\r\n");
; 001A 00DB //                print_payload(pviTXDataBuff_arg->value,pviTXDataBuff_arg->length);
; 001A 00DC //                printDebug("]\r\n");
; 001A 00DD //            }
; 001A 00DE //        }
; 001A 00DF //
; 001A 00E0 //    while(iMangCheckRetransmit((pviTXDataBuff_arg->value+17))!=0){
; 001A 00E1 //        if(iLanWriteData(pviTXDataBuff_arg)){
; 001A 00E2 //            if(iLanReadData(pviRXDataBuff_arg)){
; 001A 00E3 //                iMangQueueDelItem((pviTXDataBuff_arg->value+17));       //del queue with fid
; 001A 00E4 //                if(iPTCParser(pviRXDataBuff_arg)){    report success
; 001A 00E5 //                    printDebug("[iHostReqProcess]Print 1-1.[\r\n");
; 001A 00E6 //                    print_payload(pviTXDataBuff_arg->value,pviTXDataBuff_arg->length);
; 001A 00E7 //                    printDebug("]\r\n");
; 001A 00E8 //                }
; 001A 00E9 //            }
; 001A 00EA //        }
; 001A 00EB //        if(iMangCheckRetransmit((pviTXDataBuff_arg->value+17))==0){
; 001A 00EC //             iDataLogInsert(pviTXDataBuff_arg->value,pviTXDataBuff_arg->length);
; 001A 00ED //             iMangQueueDelItem((pviTXDataBuff_arg->value+17));       //del queue with fid  due over retransmit
; 001A 00EE //        }
; 001A 00EF //    }
; 001A 00F0 
; 001A 00F1 
; 001A 00F2     return viReturn;
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 001A 00F3 }
;PCODE: $0000015D VOL: 0
;
;void iDataReportTX(){
; 001A 00F5 void iDataReportTX(){
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 001A 00F6 
; 001A 00F7 }
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;
;void iStatusReportTX(iData_t * pviTXDataBuff_arg,iData_t * pviRXDataBuff_arg){
; 001A 00F9 void iStatusReportTX(iData_t * pviTXDataBuff_arg,iData_t * pviRXDataBuff_arg){
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 001A 00FA 
; 001A 00FB }
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;
;void iEventReportTX(){
; 001A 00FD void iEventReportTX(){
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 001A 00FE 
; 001A 00FF }
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;
;void iTerAckByTagB(iChar_t viTagName, iChar_t viPropNumber){              //host requst = A , terminal ack = B
; 001A 0101 void iTerAckByTagB(iChar_t viTagName, iChar_t viPropNumber){
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 001A 0102      iChar_t viMTI[2] = {0x08,0x00};
; 001A 0103      iChar_t viTID[8];
; 001A 0104      iChar_t viAckData[4] = {0x4b,0x02,0x10,0x00};
; 001A 0105      iData_t * pviDataTX;
; 001A 0106      iData_t * pviDataRX;
; 001A 0107 
; 001A 0108      pviDataTX = (iData_t*)malloc(sizeof(iData_t));
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;	viTagName -> Y+19
;	viPropNumber -> Y+18
;	viMTI -> Y+16
;	viTID -> Y+8
;	viAckData -> Y+4
;	*pviDataTX -> R16,R17
;	*pviDataRX -> R18,R19
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 001A 0109      pviDataRX = (iData_t*)malloc(sizeof(iData_t));
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 001A 010A      if(pviDataTX!=NULL && pviDataRX!=NULL){
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 001A 010B          //memcpy(viTID,&viDVConfigUpdate.viProperties.viDeviceID[0],8);
; 001A 010C          printConfig(&viDVConfigUpdate.viProperties.viDeviceID[0],sizeof(viDVConfigUpdate.viProperties.viDeviceID));
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 001A 010D          memcpyd(viTID,(char eeprom  *)&viDVConfigUpdate.viProperties.viDeviceID[0],8);
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 001A 010E          print_payload(viTID,8);
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 001A 010F          if(viTagName==TAG_4A){
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 001A 0110             if(viPropNumber==CONF_PROPERTIES){
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 001A 0111                 iPTCPack(pviDataTX,viAckData,sizeof(viAckData),viMTI,viTID);
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 001A 0112                 if(iLanWriteData(pviDataTX)){
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 001A 0113                     if(iLanReadData(pviDataRX)){
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 001A 0114                         if(iPTCParser(pviDataRX)){
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
; 001A 0115                             viFlagTerInit = 1;
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
; 001A 0116                             iTagParser(pviDataRX);      //tag process  othor do..
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
; 001A 0117                             if(iPTCCheckHostReq(pviDataRX)){
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
; 001A 0118 
; 001A 0119                             }
; 001A 011A                         }
;PCODE: $000001B8 VOL: 0
; 001A 011B                     }
;PCODE: $000001B9 VOL: 0
; 001A 011C                 }
;PCODE: $000001BA VOL: 0
; 001A 011D             }
;PCODE: $000001BB VOL: 0
; 001A 011E 
; 001A 011F          }
;PCODE: $000001BC VOL: 0
; 001A 0120          free(pviDataTX);
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 001A 0121          free(pviDataRX);
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
; 001A 0122      }else{
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
; 001A 0123         printDebug("[iTerAckByTagB]Not allocate memory.\r\n");
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
; 001A 0124      }
;PCODE: $000001CB VOL: 0
; 001A 0125 }
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;
;void iTagParser(iData_t *pviData_arg){
; 001A 0127 void iTagParser(iData_t *pviData_arg){
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
; 001A 0128     int i,j;
; 001A 0129     iUInt_t viDataLen = 0;
; 001A 012A 
; 001A 012B     printDebug("[iTagParser]Host response\r\n");
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;	*pviData_arg -> Y+6
;	i -> R16,R17
;	j -> R18,R19
;	viDataLen -> R20,R21
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
; 001A 012C     viDataLen = pviData_arg->value[1];
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 001A 012D     printDebug("[iTagParser]Len(%d)\r\n",viDataLen);
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
; 001A 012E 
; 001A 012F     if(pviData_arg->value[0] == 0x00){
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
; 001A 0130         for(i=2;i<(viDataLen);i+=2){
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
; 001A 0131              //printDebug("[iTagParser]Loop:%02x(%d)",iPTC_RX.dat.value[i],iPTC_RX.dat.value[(i+1)]);
; 001A 0132              switch(pviData_arg->value[i]){
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
; 001A 0133                 case TAG_2A:{
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 001A 0134                    printDebug("[iTagParser]Tag:%02x(%d)\r\n",pviData_arg->value[i],pviData_arg->value[(i+1)]);
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
; 001A 0135                    break;
;PCODE: $00000214 VOL: 0
; 001A 0136                 }
; 001A 0137                 case TAG_3A:{
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
; 001A 0138                    printDebug("[iTagParser]Tag:%02x(%d)\r\n",pviData_arg->value[i],pviData_arg->value[(i+1)]);
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
; 001A 0139                    break;
;PCODE: $0000022D VOL: 0
; 001A 013A                 }
; 001A 013B                 case TAG_4A:{
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
; 001A 013C                    printDebug("[iTagParser]Tag:%02x(%d)\r\n",pviData_arg->value[i],pviData_arg->value[(i+1)]);
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
; 001A 013D                    break;
;PCODE: $00000246 VOL: 0
; 001A 013E                 }
; 001A 013F                 case TAG_5A:{
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
; 001A 0140                    printDebug("[iTagParser]Tag:%02x(%d)\r\n",pviData_arg->value[i],pviData_arg->value[(i+1)]);
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
; 001A 0141                    break;
;PCODE: $0000025F VOL: 0
; 001A 0142                 }
; 001A 0143                 case TAG_6A:{
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
; 001A 0144                    printDebug("[iTagParser]Tag:%02x(%d)\r\n",pviData_arg->value[i],pviData_arg->value[(i+1)]);
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
; 001A 0145                    break;
;PCODE: $00000278 VOL: 0
; 001A 0146                 }
; 001A 0147                 case TAG_7A:{
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
; 001A 0148                    printDebug("[iTagParser]Tag:%02x(%d)\r\n",pviData_arg->value[i],pviData_arg->value[(i+1)]);
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
; 001A 0149                    break;
;PCODE: $00000291 VOL: 0
; 001A 014A                 }
; 001A 014B                 case TAG_8A:{
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
; 001A 014C                    printDebug("[iTagParser]Tag:%02x(%d)\r\n",pviData_arg->value[i],pviData_arg->value[(i+1)]);
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
; 001A 014D                    break;
;PCODE: $000002AA VOL: 0
; 001A 014E                 }
; 001A 014F                 case TAG_9A:{
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
; 001A 0150                    printDebug("[iTagParser]Tag:%02x(%d)\r\n",&pviData_arg->value[i],&pviData_arg->value[(i+1)]);
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
; 001A 0151                    break;
;PCODE: $000002C1 VOL: 0
; 001A 0152                 }
; 001A 0153              }
;PCODE: $000002C2 VOL: 0
; 001A 0154         }
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
; 001A 0155     }else if(pviData_arg->value[0] == TAG_4A){
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
; 001A 0156         switch(pviData_arg->value[2]){
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
; 001A 0157              case CONF_PROPERTIES:{      //config properties
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
; 001A 0158                 printDebug("[iTagParser]Host need to config(Properties)\r\n");
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
; 001A 0159                 memcpye((char eeprom *)&viDVConfigUpdate.viProperties,&pviData_arg->value[3],viDataLen);
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
; 001A 015A                 printConfig((char eeprom *)&viDVConfigUpdate.viProperties,sizeof(viDVConfigUpdate.viProperties));
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
; 001A 015B                 iTerAckByTagB(TAG_4A,CONF_PROPERTIES);
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
; 001A 015C                 break;
;PCODE: $000002EA VOL: 0
; 001A 015D              }
; 001A 015E              case CONF_OPERATEING:{      //config properties
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
; 001A 015F                 printDebug("[iTagParser]Host need to config(Operating)\r\n");
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
; 001A 0160                 memcpye((char eeprom *)&viDVConfigUpdate.viOperate,&pviData_arg->value[3],viDataLen);
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
; 001A 0161                 printConfig((char eeprom *)&viDVConfigUpdate.viOperate,sizeof(viDVConfigUpdate.viOperate));
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
; 001A 0162                 break;
;PCODE: $00000303 VOL: 0
; 001A 0163              }
; 001A 0164              case CONF_BUZZER:{      //config properties
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
; 001A 0165                 printDebug("[iTagParser]Host need to config(Buzzer)\r\n");
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
; 001A 0166                 break;
;PCODE: $0000030E VOL: 0
; 001A 0167              }
; 001A 0168              case CONF_ENVIRON_COND:{      //config properties
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
; 001A 0169                 printDebug("[iTagParser]Host need to config(Environment Alarm Condition)\r\n");
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
; 001A 016A                 break;
;PCODE: $00000319 VOL: 0
; 001A 016B              }
; 001A 016C         }
;PCODE: $0000031A VOL: 0
; 001A 016D 
; 001A 016E         if((pviData_arg->value[2]&0xf0) == CONF_DIGI_IN){
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
; 001A 016F              printDebug("[iTagParser]Host need to config(Digital Input)\r\n");
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
; 001A 0170         }else if((pviData_arg->value[2]&0xf0) == CONF_DIGI_OUT){
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
; 001A 0171              printDebug("[iTagParser]Host need to config(Digital Output)\r\n");
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
; 001A 0172         }else if((pviData_arg->value[2]&0xf0) == CONF_ANA_IN){
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
; 001A 0173              printDebug("[iTagParser]Host need to config(Analog Input)\r\n");
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
; 001A 0174         }else if((pviData_arg->value[2]&0xf0) == CONF_ANA_OUT){
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
; 001A 0175              printDebug("[iTagParser]Host need to config(Analog Output)\r\n");
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
; 001A 0176         }
; 001A 0177 
; 001A 0178     }else{
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
; 001A 0179        printDebug("[iTagParser]Host response unknow(%02x).\r\n",pviData_arg->value[0]);
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
; 001A 017A     }
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
; 001A 017B 
; 001A 017C 
; 001A 017D }
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
;
;
;iInt_t iMangQueueAddItem(iData_t *pviDataItem_arg,iChar_t *pviFid_arg){
; 001A 0180 iInt_t iMangQueueAddItem(iData_t *pviDataItem_arg,iChar_t *pviFid_arg){
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
; 001A 0181     iInt_t viReturn = -1;
; 001A 0182     iInt_t i;
; 001A 0183     iChar_t viFid[2];
; 001A 0184 
; 001A 0185     memcpy(viFid,&pviFid_arg[0],2);
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
;	*pviDataItem_arg -> Y+8
;	*pviFid_arg -> Y+6
;	viReturn -> R16,R17
;	i -> R18,R19
;	viFid -> Y+4
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
; 001A 0186     for(i=0;i<MANG_QUEUE_MAX;i++){
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
; 001A 0187         if(viMangQueue[i].value == NULL){
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
; 001A 0188             viMangQueue[i].value = (iChar_t * const)malloc(pviDataItem_arg->length);
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
; 001A 0189             if(viMangQueue[i].value != NULL){
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
; 001A 018A                 viMangQueue[i].length = pviDataItem_arg->length;
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
; 001A 018B                 memcpy(viMangQueue[i].value,&pviDataItem_arg->value[0],pviDataItem_arg->length);
;PCODE: $000003A3 VOL: 0
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
;PCODE: $000003A8 VOL: 0
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
; 001A 018C                 memcpy(&viMangQueue[i].fid[0],&viFid[0],2);
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
;PCODE: $000003B7 VOL: 0
;PCODE: $000003B8 VOL: 0
;PCODE: $000003B9 VOL: 0
; 001A 018D                 viMangQueue[i].reTransmit = MANG_RETRANSMIT;
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
;PCODE: $000003BC VOL: 0
;PCODE: $000003BD VOL: 0
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
; 001A 018E                 printDebug("[iMangQueueAddItem]Add by FID(%02x%02x).\r\n",viFid[0],viFid[1]);
;PCODE: $000003C0 VOL: 0
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
;PCODE: $000003C4 VOL: 0
;PCODE: $000003C5 VOL: 0
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
;PCODE: $000003C9 VOL: 0
;PCODE: $000003CA VOL: 0
;PCODE: $000003CB VOL: 0
;PCODE: $000003CC VOL: 0
; 001A 018F                 viReturn = 1;
;PCODE: $000003CD VOL: 0
;PCODE: $000003CE VOL: 0
; 001A 0190                 break;
;PCODE: $000003CF VOL: 0
; 001A 0191             }else{
;PCODE: $000003D0 VOL: 0
;PCODE: $000003D1 VOL: 0
; 001A 0192                printDebug("[iMangQueueAddItem]can't allocate mem.\r\n");
;PCODE: $000003D2 VOL: 0
;PCODE: $000003D3 VOL: 0
;PCODE: $000003D4 VOL: 0
;PCODE: $000003D5 VOL: 0
;PCODE: $000003D6 VOL: 0
;PCODE: $000003D7 VOL: 0
;PCODE: $000003D8 VOL: 0
; 001A 0193                viReturn = -1;
;PCODE: $000003D9 VOL: 0
;PCODE: $000003DA VOL: 0
; 001A 0194             }
;PCODE: $000003DB VOL: 0
; 001A 0195         }else{
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
; 001A 0196            viReturn = 0;
;PCODE: $000003DE VOL: 0
;PCODE: $000003DF VOL: 0
; 001A 0197         }
;PCODE: $000003E0 VOL: 0
; 001A 0198     }
;PCODE: $000003E1 VOL: 0
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
;PCODE: $000003E4 VOL: 0
;PCODE: $000003E5 VOL: 0
; 001A 0199     if(viReturn == 0){
;PCODE: $000003E6 VOL: 0
;PCODE: $000003E7 VOL: 0
; 001A 019A         printDebug("[iMangQueueAddItem]MangQueue Full.\r\n");
;PCODE: $000003E8 VOL: 0
;PCODE: $000003E9 VOL: 0
;PCODE: $000003EA VOL: 0
;PCODE: $000003EB VOL: 0
;PCODE: $000003EC VOL: 0
;PCODE: $000003ED VOL: 0
;PCODE: $000003EE VOL: 0
; 001A 019B     }
; 001A 019C     return viReturn;
;PCODE: $000003EF VOL: 0
;PCODE: $000003F0 VOL: 0
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
;PCODE: $000003F3 VOL: 0
; 001A 019D }
;PCODE: $000003F4 VOL: 0
;iInt_t iMangQueueDelItem(iChar_t *pviFid_arg){
; 001A 019E iInt_t iMangQueueDelItem(iChar_t *pviFid_arg){
;PCODE: $000003F5 VOL: 0
;PCODE: $000003F6 VOL: 0
; 001A 019F     iInt_t viReturn = -1;
; 001A 01A0     iInt_t i;
; 001A 01A1     iChar_t viFid[2];
; 001A 01A2 
; 001A 01A3     memcpy(viFid,&pviFid_arg[0],2);
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
;PCODE: $000003F9 VOL: 0
;	*pviFid_arg -> Y+6
;	viReturn -> R16,R17
;	i -> R18,R19
;	viFid -> Y+4
;PCODE: $000003FA VOL: 0
;PCODE: $000003FB VOL: 0
;PCODE: $000003FC VOL: 0
;PCODE: $000003FD VOL: 0
;PCODE: $000003FE VOL: 0
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
;PCODE: $00000401 VOL: 0
;PCODE: $00000402 VOL: 0
; 001A 01A4     printDebug("[iMangQueueDelItem]Del by FID(%02x%02x).\r\n",viFid[0],viFid[1]);
;PCODE: $00000403 VOL: 0
;PCODE: $00000404 VOL: 0
;PCODE: $00000405 VOL: 0
;PCODE: $00000406 VOL: 0
;PCODE: $00000407 VOL: 0
;PCODE: $00000408 VOL: 0
;PCODE: $00000409 VOL: 0
;PCODE: $0000040A VOL: 0
;PCODE: $0000040B VOL: 0
;PCODE: $0000040C VOL: 0
;PCODE: $0000040D VOL: 0
;PCODE: $0000040E VOL: 0
;PCODE: $0000040F VOL: 0
; 001A 01A5     for(i=0;i<MANG_QUEUE_MAX;i++){
;PCODE: $00000410 VOL: 0
;PCODE: $00000411 VOL: 0
;PCODE: $00000412 VOL: 0
;PCODE: $00000413 VOL: 0
;PCODE: $00000414 VOL: 0
;PCODE: $00000415 VOL: 0
;PCODE: $00000416 VOL: 0
;PCODE: $00000417 VOL: 0
;PCODE: $00000418 VOL: 0
; 001A 01A6         if(viMangQueue[i].value != NULL){
;PCODE: $00000419 VOL: 0
;PCODE: $0000041A VOL: 0
;PCODE: $0000041B VOL: 0
;PCODE: $0000041C VOL: 0
;PCODE: $0000041D VOL: 0
;PCODE: $0000041E VOL: 0
;PCODE: $0000041F VOL: 0
;PCODE: $00000420 VOL: 0
; 001A 01A7             if(memcmp(viMangQueue[i].fid,&viFid[0],2)==0){
;PCODE: $00000421 VOL: 0
;PCODE: $00000422 VOL: 0
;PCODE: $00000423 VOL: 0
;PCODE: $00000424 VOL: 0
;PCODE: $00000425 VOL: 0
;PCODE: $00000426 VOL: 0
;PCODE: $00000427 VOL: 0
;PCODE: $00000428 VOL: 0
;PCODE: $00000429 VOL: 0
;PCODE: $0000042A VOL: 0
;PCODE: $0000042B VOL: 0
; 001A 01A8                 free(viMangQueue[i].value);
;PCODE: $0000042C VOL: 0
;PCODE: $0000042D VOL: 0
;PCODE: $0000042E VOL: 0
;PCODE: $0000042F VOL: 0
;PCODE: $00000430 VOL: 0
;PCODE: $00000431 VOL: 0
;PCODE: $00000432 VOL: 0
;PCODE: $00000433 VOL: 0
; 001A 01A9                 viMangQueue[i].value = NULL;
;PCODE: $00000434 VOL: 0
;PCODE: $00000435 VOL: 0
;PCODE: $00000436 VOL: 0
;PCODE: $00000437 VOL: 0
;PCODE: $00000438 VOL: 0
;PCODE: $00000439 VOL: 0
; 001A 01AA                 memset(viMangQueue[i].fid,0,2);
;PCODE: $0000043A VOL: 0
;PCODE: $0000043B VOL: 0
;PCODE: $0000043C VOL: 0
;PCODE: $0000043D VOL: 0
;PCODE: $0000043E VOL: 0
;PCODE: $0000043F VOL: 0
;PCODE: $00000440 VOL: 0
;PCODE: $00000441 VOL: 0
;PCODE: $00000442 VOL: 0
; 001A 01AB                 viMangQueue[i].length = 0;
;PCODE: $00000443 VOL: 0
;PCODE: $00000444 VOL: 0
;PCODE: $00000445 VOL: 0
;PCODE: $00000446 VOL: 0
;PCODE: $00000447 VOL: 0
;PCODE: $00000448 VOL: 0
; 001A 01AC                 viReturn = 1;
;PCODE: $00000449 VOL: 0
;PCODE: $0000044A VOL: 0
; 001A 01AD                 break;
;PCODE: $0000044B VOL: 0
; 001A 01AE             }else{
;PCODE: $0000044C VOL: 0
;PCODE: $0000044D VOL: 0
; 001A 01AF                 viReturn = -1;
;PCODE: $0000044E VOL: 0
;PCODE: $0000044F VOL: 0
; 001A 01B0             }
;PCODE: $00000450 VOL: 0
; 001A 01B1         }else{
;PCODE: $00000451 VOL: 0
;PCODE: $00000452 VOL: 0
; 001A 01B2             viReturn = 0;
;PCODE: $00000453 VOL: 0
;PCODE: $00000454 VOL: 0
; 001A 01B3         }
;PCODE: $00000455 VOL: 0
; 001A 01B4     }
;PCODE: $00000456 VOL: 0
;PCODE: $00000457 VOL: 0
;PCODE: $00000458 VOL: 0
;PCODE: $00000459 VOL: 0
;PCODE: $0000045A VOL: 0
; 001A 01B5     if(viReturn == 0){
;PCODE: $0000045B VOL: 0
;PCODE: $0000045C VOL: 0
; 001A 01B6         printDebug("[iMangQueueDelItem]Queue is empty.\r\n");
;PCODE: $0000045D VOL: 0
;PCODE: $0000045E VOL: 0
;PCODE: $0000045F VOL: 0
;PCODE: $00000460 VOL: 0
;PCODE: $00000461 VOL: 0
;PCODE: $00000462 VOL: 0
;PCODE: $00000463 VOL: 0
; 001A 01B7     }else if(viReturn == -1){
;PCODE: $00000464 VOL: 0
;PCODE: $00000465 VOL: 0
;PCODE: $00000466 VOL: 0
;PCODE: $00000467 VOL: 0
;PCODE: $00000468 VOL: 0
; 001A 01B8         printDebug("[iMangQueueDelItem]FID invalid.\r\n");
;PCODE: $00000469 VOL: 0
;PCODE: $0000046A VOL: 0
;PCODE: $0000046B VOL: 0
;PCODE: $0000046C VOL: 0
;PCODE: $0000046D VOL: 0
;PCODE: $0000046E VOL: 0
;PCODE: $0000046F VOL: 0
; 001A 01B9     }
; 001A 01BA     return viReturn;
;PCODE: $00000470 VOL: 0
;PCODE: $00000471 VOL: 0
;PCODE: $00000472 VOL: 0
;PCODE: $00000473 VOL: 0
;PCODE: $00000474 VOL: 0
;PCODE: $00000475 VOL: 0
; 001A 01BB }
;PCODE: $00000476 VOL: 0
;
;void iMangQueueDisplay(){
; 001A 01BD void iMangQueueDisplay(){
;PCODE: $00000477 VOL: 0
;PCODE: $00000478 VOL: 0
; 001A 01BE     iInt_t viReturn = -1;
; 001A 01BF     iInt_t i;
; 001A 01C0 
; 001A 01C1     for(i=0;i<MANG_QUEUE_MAX;i++){
;PCODE: $00000479 VOL: 0
;	viReturn -> R16,R17
;	i -> R18,R19
;PCODE: $0000047A VOL: 0
;PCODE: $0000047B VOL: 0
;PCODE: $0000047C VOL: 0
;PCODE: $0000047D VOL: 0
;PCODE: $0000047E VOL: 0
;PCODE: $0000047F VOL: 0
;PCODE: $00000480 VOL: 0
;PCODE: $00000481 VOL: 0
;PCODE: $00000482 VOL: 0
;PCODE: $00000483 VOL: 0
;PCODE: $00000484 VOL: 0
; 001A 01C2         printDebug("[iMangQueueDisplay]Queue %d.[\r\n",i+1);
;PCODE: $00000485 VOL: 0
;PCODE: $00000486 VOL: 0
;PCODE: $00000487 VOL: 0
;PCODE: $00000488 VOL: 0
;PCODE: $00000489 VOL: 0
;PCODE: $0000048A VOL: 0
;PCODE: $0000048B VOL: 0
;PCODE: $0000048C VOL: 0
;PCODE: $0000048D VOL: 0
;PCODE: $0000048E VOL: 0
;PCODE: $0000048F VOL: 0
; 001A 01C3         if(viMangQueue[i].value != NULL){
;PCODE: $00000490 VOL: 0
;PCODE: $00000491 VOL: 0
;PCODE: $00000492 VOL: 0
;PCODE: $00000493 VOL: 0
;PCODE: $00000494 VOL: 0
;PCODE: $00000495 VOL: 0
;PCODE: $00000496 VOL: 0
;PCODE: $00000497 VOL: 0
; 001A 01C4            print_payload(viMangQueue[i].value,viMangQueue[i].length);
;PCODE: $00000498 VOL: 0
;PCODE: $00000499 VOL: 0
;PCODE: $0000049A VOL: 0
;PCODE: $0000049B VOL: 0
;PCODE: $0000049C VOL: 0
;PCODE: $0000049D VOL: 0
;PCODE: $0000049E VOL: 0
;PCODE: $0000049F VOL: 0
;PCODE: $000004A0 VOL: 0
;PCODE: $000004A1 VOL: 0
;PCODE: $000004A2 VOL: 0
;PCODE: $000004A3 VOL: 0
;PCODE: $000004A4 VOL: 0
;PCODE: $000004A5 VOL: 0
;PCODE: $000004A6 VOL: 0
; 001A 01C5         }else{
;PCODE: $000004A7 VOL: 0
;PCODE: $000004A8 VOL: 0
; 001A 01C6            printDebug("Empty\r\n");
;PCODE: $000004A9 VOL: 0
;PCODE: $000004AA VOL: 0
;PCODE: $000004AB VOL: 0
;PCODE: $000004AC VOL: 0
;PCODE: $000004AD VOL: 0
;PCODE: $000004AE VOL: 0
;PCODE: $000004AF VOL: 0
; 001A 01C7         }
;PCODE: $000004B0 VOL: 0
; 001A 01C8         printDebug("]\r\n");
;PCODE: $000004B1 VOL: 0
;PCODE: $000004B2 VOL: 0
;PCODE: $000004B3 VOL: 0
;PCODE: $000004B4 VOL: 0
;PCODE: $000004B5 VOL: 0
;PCODE: $000004B6 VOL: 0
;PCODE: $000004B7 VOL: 0
; 001A 01C9     }
;PCODE: $000004B8 VOL: 0
;PCODE: $000004B9 VOL: 0
;PCODE: $000004BA VOL: 0
;PCODE: $000004BB VOL: 0
;PCODE: $000004BC VOL: 0
; 001A 01CA }
;PCODE: $000004BD VOL: 0
;PCODE: $000004BE VOL: 0
;PCODE: $000004BF VOL: 0
;PCODE: $000004C0 VOL: 0
;
;iChar_t iMangCheckRetransmit(iChar_t *pviFid_arg){
; 001A 01CC iChar_t iMangCheckRetransmit(iChar_t *pviFid_arg){
;PCODE: $000004C1 VOL: 0
;PCODE: $000004C2 VOL: 0
; 001A 01CD     iInt_t viReturn = -1;
; 001A 01CE     iInt_t i;
; 001A 01CF     iChar_t viFid[2];
; 001A 01D0 
; 001A 01D1     memcpy(viFid,&pviFid_arg[0],2);
;PCODE: $000004C3 VOL: 0
;PCODE: $000004C4 VOL: 0
;PCODE: $000004C5 VOL: 0
;	*pviFid_arg -> Y+6
;	viReturn -> R16,R17
;	i -> R18,R19
;	viFid -> Y+4
;PCODE: $000004C6 VOL: 0
;PCODE: $000004C7 VOL: 0
;PCODE: $000004C8 VOL: 0
;PCODE: $000004C9 VOL: 0
;PCODE: $000004CA VOL: 0
;PCODE: $000004CB VOL: 0
;PCODE: $000004CC VOL: 0
;PCODE: $000004CD VOL: 0
;PCODE: $000004CE VOL: 0
; 001A 01D2     for(i=0;i<MANG_QUEUE_MAX;i++){
;PCODE: $000004CF VOL: 0
;PCODE: $000004D0 VOL: 0
;PCODE: $000004D1 VOL: 0
;PCODE: $000004D2 VOL: 0
;PCODE: $000004D3 VOL: 0
;PCODE: $000004D4 VOL: 0
;PCODE: $000004D5 VOL: 0
;PCODE: $000004D6 VOL: 0
;PCODE: $000004D7 VOL: 0
; 001A 01D3         if(viMangQueue[i].value != NULL){
;PCODE: $000004D8 VOL: 0
;PCODE: $000004D9 VOL: 0
;PCODE: $000004DA VOL: 0
;PCODE: $000004DB VOL: 0
;PCODE: $000004DC VOL: 0
;PCODE: $000004DD VOL: 0
;PCODE: $000004DE VOL: 0
;PCODE: $000004DF VOL: 0
; 001A 01D4            if(memcmp(viMangQueue[i].fid,&viFid[0],2)==0){
;PCODE: $000004E0 VOL: 0
;PCODE: $000004E1 VOL: 0
;PCODE: $000004E2 VOL: 0
;PCODE: $000004E3 VOL: 0
;PCODE: $000004E4 VOL: 0
;PCODE: $000004E5 VOL: 0
;PCODE: $000004E6 VOL: 0
;PCODE: $000004E7 VOL: 0
;PCODE: $000004E8 VOL: 0
;PCODE: $000004E9 VOL: 0
;PCODE: $000004EA VOL: 0
; 001A 01D5                 printDebug("[iMangCheckRetransmit]Retransmit remain %d.\r\n",viMangQueue[i].reTransmit);
;PCODE: $000004EB VOL: 0
;PCODE: $000004EC VOL: 0
;PCODE: $000004ED VOL: 0
;PCODE: $000004EE VOL: 0
;PCODE: $000004EF VOL: 0
;PCODE: $000004F0 VOL: 0
;PCODE: $000004F1 VOL: 0
;PCODE: $000004F2 VOL: 0
;PCODE: $000004F3 VOL: 0
;PCODE: $000004F4 VOL: 0
;PCODE: $000004F5 VOL: 0
;PCODE: $000004F6 VOL: 0
;PCODE: $000004F7 VOL: 0
;PCODE: $000004F8 VOL: 0
; 001A 01D6                 viMangQueue[i].reTransmit--;
;PCODE: $000004F9 VOL: 0
;PCODE: $000004FA VOL: 0
;PCODE: $000004FB VOL: 0
;PCODE: $000004FC VOL: 0
;PCODE: $000004FD VOL: 0
;PCODE: $000004FE VOL: 0
;PCODE: $000004FF VOL: 0
;PCODE: $00000500 VOL: 0
; 001A 01D7                 viReturn = viMangQueue[i].reTransmit;
;PCODE: $00000501 VOL: 0
;PCODE: $00000502 VOL: 0
;PCODE: $00000503 VOL: 0
;PCODE: $00000504 VOL: 0
;PCODE: $00000505 VOL: 0
;PCODE: $00000506 VOL: 0
; 001A 01D8                 if(viReturn<0){
;PCODE: $00000507 VOL: 0
;PCODE: $00000508 VOL: 0
; 001A 01D9                    viReturn = 0;
;PCODE: $00000509 VOL: 0
;PCODE: $0000050A VOL: 0
; 001A 01DA                 }
; 001A 01DB                 break;
;PCODE: $0000050B VOL: 0
;PCODE: $0000050C VOL: 0
; 001A 01DC             }else{
;PCODE: $0000050D VOL: 0
;PCODE: $0000050E VOL: 0
; 001A 01DD                 viReturn = -1;
;PCODE: $0000050F VOL: 0
;PCODE: $00000510 VOL: 0
; 001A 01DE             }
;PCODE: $00000511 VOL: 0
; 001A 01DF         }else{
;PCODE: $00000512 VOL: 0
;PCODE: $00000513 VOL: 0
; 001A 01E0            printDebug("There is no FID(%02x%02x) in queue.\r\n",viFid[0],viFid[1]);
;PCODE: $00000514 VOL: 0
;PCODE: $00000515 VOL: 0
;PCODE: $00000516 VOL: 0
;PCODE: $00000517 VOL: 0
;PCODE: $00000518 VOL: 0
;PCODE: $00000519 VOL: 0
;PCODE: $0000051A VOL: 0
;PCODE: $0000051B VOL: 0
;PCODE: $0000051C VOL: 0
;PCODE: $0000051D VOL: 0
;PCODE: $0000051E VOL: 0
;PCODE: $0000051F VOL: 0
;PCODE: $00000520 VOL: 0
; 001A 01E1         }
;PCODE: $00000521 VOL: 0
; 001A 01E2         printDebug("]\r\n");
;PCODE: $00000522 VOL: 0
;PCODE: $00000523 VOL: 0
;PCODE: $00000524 VOL: 0
;PCODE: $00000525 VOL: 0
;PCODE: $00000526 VOL: 0
;PCODE: $00000527 VOL: 0
;PCODE: $00000528 VOL: 0
; 001A 01E3     }
;PCODE: $00000529 VOL: 0
;PCODE: $0000052A VOL: 0
;PCODE: $0000052B VOL: 0
;PCODE: $0000052C VOL: 0
;PCODE: $0000052D VOL: 0
; 001A 01E4     return viReturn;
;PCODE: $0000052E VOL: 0
;PCODE: $0000052F VOL: 0
;PCODE: $00000530 VOL: 0
;PCODE: $00000531 VOL: 0
; 001A 01E5 }
;PCODE: $00000532 VOL: 0
;
;iChar_t mangInitDevice(){
; 001A 01E7 iChar_t mangInitDevice(){
;PCODE: $00000533 VOL: 0
;PCODE: $00000534 VOL: 0
; 001A 01E8 
; 001A 01E9 }
;PCODE: $00000535 VOL: 0
;PCODE: $00000536 VOL: 0
;
;void memcpye(char eeprom *eptr, char *dptr, int len)
; 001A 01EC {
;PCODE: $00000537 VOL: 0
;PCODE: $00000538 VOL: 0
; 001A 01ED    int i=0;
; 001A 01EE    for(i=0;i<len;i++) {
;PCODE: $00000539 VOL: 0
;PCODE: $0000053A VOL: 0
;PCODE: $0000053B VOL: 0
;	*eptr -> Y+6
;	*dptr -> Y+4
;	len -> Y+2
;	i -> R16,R17
;PCODE: $0000053C VOL: 0
;PCODE: $0000053D VOL: 0
;PCODE: $0000053E VOL: 0
;PCODE: $0000053F VOL: 0
;PCODE: $00000540 VOL: 0
;PCODE: $00000541 VOL: 0
;PCODE: $00000542 VOL: 0
;PCODE: $00000543 VOL: 0
;PCODE: $00000544 VOL: 0
;PCODE: $00000545 VOL: 0
;PCODE: $00000546 VOL: 0
; 001A 01EF       *eptr++ = *dptr;
;PCODE: $00000547 VOL: 0
;PCODE: $00000548 VOL: 0
;PCODE: $00000549 VOL: 0
;PCODE: $0000054A VOL: 0
;PCODE: $0000054B VOL: 0
;PCODE: $0000054C VOL: 0
;PCODE: $0000054D VOL: 0
;PCODE: $0000054E VOL: 0
;PCODE: $0000054F VOL: 0
; 001A 01F0       dptr++;
;PCODE: $00000550 VOL: 0
;PCODE: $00000551 VOL: 0
;PCODE: $00000552 VOL: 0
; 001A 01F1    }
;PCODE: $00000553 VOL: 0
;PCODE: $00000554 VOL: 0
;PCODE: $00000555 VOL: 0
;PCODE: $00000556 VOL: 0
;PCODE: $00000557 VOL: 0
; 001A 01F2    return;
;PCODE: $00000558 VOL: 0
;PCODE: $00000559 VOL: 0
;PCODE: $0000055A VOL: 0
;PCODE: $0000055B VOL: 0
;PCODE: $0000055C VOL: 0
;PCODE: $0000055D VOL: 0
; 001A 01F3 }
;PCODE: $0000055E VOL: 0
;
;void memcpyd(char *dptr, char eeprom *eptr,  int len)
; 001A 01F6 {
;PCODE: $0000055F VOL: 0
;PCODE: $00000560 VOL: 0
; 001A 01F7    int i=0;
; 001A 01F8    for(i=0;i<len;i++) {
;PCODE: $00000561 VOL: 0
;PCODE: $00000562 VOL: 0
;PCODE: $00000563 VOL: 0
;	*dptr -> Y+6
;	*eptr -> Y+4
;	len -> Y+2
;	i -> R16,R17
;PCODE: $00000564 VOL: 0
;PCODE: $00000565 VOL: 0
;PCODE: $00000566 VOL: 0
;PCODE: $00000567 VOL: 0
;PCODE: $00000568 VOL: 0
;PCODE: $00000569 VOL: 0
;PCODE: $0000056A VOL: 0
;PCODE: $0000056B VOL: 0
;PCODE: $0000056C VOL: 0
;PCODE: $0000056D VOL: 0
;PCODE: $0000056E VOL: 0
; 001A 01F9       *dptr++ = *eptr;
;PCODE: $0000056F VOL: 0
;PCODE: $00000570 VOL: 0
;PCODE: $00000571 VOL: 0
;PCODE: $00000572 VOL: 0
;PCODE: $00000573 VOL: 0
;PCODE: $00000574 VOL: 0
;PCODE: $00000575 VOL: 0
;PCODE: $00000576 VOL: 0
;PCODE: $00000577 VOL: 0
; 001A 01FA       eptr++;
;PCODE: $00000578 VOL: 0
;PCODE: $00000579 VOL: 0
;PCODE: $0000057A VOL: 0
; 001A 01FB    }
;PCODE: $0000057B VOL: 0
;PCODE: $0000057C VOL: 0
;PCODE: $0000057D VOL: 0
;PCODE: $0000057E VOL: 0
;PCODE: $0000057F VOL: 0
; 001A 01FC    return;
;PCODE: $00000580 VOL: 0
;PCODE: $00000581 VOL: 0
;PCODE: $00000582 VOL: 0
;PCODE: $00000583 VOL: 0
;PCODE: $00000584 VOL: 0
;PCODE: $00000585 VOL: 0
; 001A 01FD }
;PCODE: $00000586 VOL: 0
;
;void printConfig(char eeprom *eptr,unsigned int len)
; 001A 0200 {
;PCODE: $00000587 VOL: 0
;PCODE: $00000588 VOL: 0
; 001A 0201    int i=0,j=0;
; 001A 0202    printDebug("[printConfig]Data:[\r\n");
;PCODE: $00000589 VOL: 0
;PCODE: $0000058A VOL: 0
;	*eptr -> Y+6
;	len -> Y+4
;	i -> R16,R17
;	j -> R18,R19
;PCODE: $0000058B VOL: 0
;PCODE: $0000058C VOL: 0
;PCODE: $0000058D VOL: 0
;PCODE: $0000058E VOL: 0
;PCODE: $0000058F VOL: 0
;PCODE: $00000590 VOL: 0
;PCODE: $00000591 VOL: 0
;PCODE: $00000592 VOL: 0
;PCODE: $00000593 VOL: 0
;PCODE: $00000594 VOL: 0
;PCODE: $00000595 VOL: 0
; 001A 0203    printDebug("%04d\t\t",0);
;PCODE: $00000596 VOL: 0
;PCODE: $00000597 VOL: 0
;PCODE: $00000598 VOL: 0
;PCODE: $00000599 VOL: 0
;PCODE: $0000059A VOL: 0
;PCODE: $0000059B VOL: 0
;PCODE: $0000059C VOL: 0
;PCODE: $0000059D VOL: 0
;PCODE: $0000059E VOL: 0
; 001A 0204    for(i=0,j=1;i<len;i++,j++) {
;PCODE: $0000059F VOL: 0
;PCODE: $000005A0 VOL: 0
;PCODE: $000005A1 VOL: 0
;PCODE: $000005A2 VOL: 0
;PCODE: $000005A3 VOL: 0
;PCODE: $000005A4 VOL: 0
;PCODE: $000005A5 VOL: 0
;PCODE: $000005A6 VOL: 0
;PCODE: $000005A7 VOL: 0
;PCODE: $000005A8 VOL: 0
;PCODE: $000005A9 VOL: 0
;PCODE: $000005AA VOL: 0
;PCODE: $000005AB VOL: 0
; 001A 0205       printDebug("%02x",*(eptr++));
;PCODE: $000005AC VOL: 0
;PCODE: $000005AD VOL: 0
;PCODE: $000005AE VOL: 0
;PCODE: $000005AF VOL: 0
;PCODE: $000005B0 VOL: 0
;PCODE: $000005B1 VOL: 0
;PCODE: $000005B2 VOL: 0
;PCODE: $000005B3 VOL: 0
;PCODE: $000005B4 VOL: 0
;PCODE: $000005B5 VOL: 0
;PCODE: $000005B6 VOL: 0
;PCODE: $000005B7 VOL: 0
;PCODE: $000005B8 VOL: 0
;PCODE: $000005B9 VOL: 0
; 001A 0206       if(j==8){
;PCODE: $000005BA VOL: 0
;PCODE: $000005BB VOL: 0
;PCODE: $000005BC VOL: 0
; 001A 0207          printDebug("\t\t");
;PCODE: $000005BD VOL: 0
;PCODE: $000005BE VOL: 0
;PCODE: $000005BF VOL: 0
;PCODE: $000005C0 VOL: 0
;PCODE: $000005C1 VOL: 0
;PCODE: $000005C2 VOL: 0
;PCODE: $000005C3 VOL: 0
; 001A 0208       }else if(j==16){
;PCODE: $000005C4 VOL: 0
;PCODE: $000005C5 VOL: 0
;PCODE: $000005C6 VOL: 0
;PCODE: $000005C7 VOL: 0
;PCODE: $000005C8 VOL: 0
; 001A 0209          printDebug("\r\n");
;PCODE: $000005C9 VOL: 0
;PCODE: $000005CA VOL: 0
;PCODE: $000005CB VOL: 0
;PCODE: $000005CC VOL: 0
;PCODE: $000005CD VOL: 0
;PCODE: $000005CE VOL: 0
;PCODE: $000005CF VOL: 0
; 001A 020A          printDebug("%04d\t\t",i+1);
;PCODE: $000005D0 VOL: 0
;PCODE: $000005D1 VOL: 0
;PCODE: $000005D2 VOL: 0
;PCODE: $000005D3 VOL: 0
;PCODE: $000005D4 VOL: 0
;PCODE: $000005D5 VOL: 0
;PCODE: $000005D6 VOL: 0
;PCODE: $000005D7 VOL: 0
;PCODE: $000005D8 VOL: 0
;PCODE: $000005D9 VOL: 0
;PCODE: $000005DA VOL: 0
; 001A 020B          j=0;
;PCODE: $000005DB VOL: 0
;PCODE: $000005DC VOL: 0
; 001A 020C       }
; 001A 020D    }
;PCODE: $000005DD VOL: 0
;PCODE: $000005DE VOL: 0
;PCODE: $000005DF VOL: 0
;PCODE: $000005E0 VOL: 0
;PCODE: $000005E1 VOL: 0
;PCODE: $000005E2 VOL: 0
;PCODE: $000005E3 VOL: 0
;PCODE: $000005E4 VOL: 0
;PCODE: $000005E5 VOL: 0
; 001A 020E    printDebug("\r\n]\r\n");
;PCODE: $000005E6 VOL: 0
;PCODE: $000005E7 VOL: 0
;PCODE: $000005E8 VOL: 0
;PCODE: $000005E9 VOL: 0
;PCODE: $000005EA VOL: 0
;PCODE: $000005EB VOL: 0
;PCODE: $000005EC VOL: 0
; 001A 020F    return;
;PCODE: $000005ED VOL: 0
;PCODE: $000005EE VOL: 0
;PCODE: $000005EF VOL: 0
; 001A 0210 }
;PCODE: $000005F0 VOL: 0
