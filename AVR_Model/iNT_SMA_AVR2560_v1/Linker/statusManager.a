;#include "statusManager.h"
;#include "adc.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;//extern eeprom iDVConfig_t viDVConfigUpdate;
;extern iStatusReport_t viStatusReportBuff;
;
;extern iDataMini_t viDataReport;
;extern iDataMini_t viStatusReport;
;
;iChar_t iStatusRead(iDataMini_t *pviOutData_arg){
; 0029 000A iChar_t iStatusRead(iDataMini_t *pviOutData_arg){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0029 000B     iChar_t i;
; 0029 000C     iChar_t viReturn = 0;
; 0029 000D     const iChar_t viCMD[2] = {0x2a,0x06};
; 0029 000E     iUChar_t viIndexWrite = 0;
; 0029 000F 
; 0029 0010     /*test*/
; 0029 0011     #asm("wdr")
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;	*pviOutData_arg -> Y+6
;	i -> R17
;	viReturn -> R16
;	viCMD -> Y+4
;	viIndexWrite -> R19
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
	wdr
;PCODE: $0000001B VOL: 0
; 0029 0012     viStatusReportBuff.viStatusType = STATUS_BATTERY_TYPE;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0029 0013     viStatusReportBuff.viDataType =  STATUS_FLOAT;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0029 0014     iStatusReadByType(&viStatusReportBuff);
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0029 0015 
; 0029 0016     viIndexWrite = 0;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0029 0017     memcpy(&pviOutData_arg->value[viIndexWrite],viCMD,2);
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0029 0018     viIndexWrite += 2;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0029 0019     memcpy(&pviOutData_arg->value[viIndexWrite],&viStatusReportBuff,sizeof(viStatusReportBuff));
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0029 001A     viIndexWrite += sizeof(viStatusReportBuff);
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0029 001B     pviOutData_arg->length = viIndexWrite;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0029 001C 
; 0029 001D     printDebug("[iStatusRead]Data:[\r\n");
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0029 001E     print_payload(&pviOutData_arg->value[0],pviOutData_arg->length);
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0029 001F     printDebug("]\r\n");
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0029 0020 
; 0029 0021 
; 0029 0022     viReturn = 1;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0029 0023 
; 0029 0024     return viReturn;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0029 0025 }
;PCODE: $0000005E VOL: 0
;
;void iStatusReadByType(iStatusReport_t *pviInOutData_arg){
; 0029 0027 void iStatusReadByType(iStatusReport_t *pviInOutData_arg){
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0029 0028      //float viReturn = 0.0;
; 0029 0029      switch(pviInOutData_arg->viStatusType){
;PCODE: $00000061 VOL: 0
;	*pviInOutData_arg -> Y+0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0029 002A           case STATUS_BATTERY_TYPE:{
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0029 002B             //pviInOutData_arg->viData = iStatusReadBattery();
; 0029 002C             pviInOutData_arg->viData = 2.56;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0029 002D             break;
;PCODE: $0000006B VOL: 0
; 0029 002E           }
; 0029 002F      }
;PCODE: $0000006C VOL: 0
; 0029 0030 //     viReturn = 1;
; 0029 0031 //     return viReturn;
; 0029 0032 }
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;
;//float iStatusReadBattery(){
;//    float  viBatt = 0.0;
;//    float  viADCDividerMax = 635.5;//2.05      // from voltage divider 120k & 150k
;//    float  viVoltMaxBatt = 3.7;
;//
;//    //viBatt = (float)((read_adc(14)/viADCDividerMax) * viVoltMaxBatt);                // Battery Read
;//    viBatt = 2.50;
;//    return viBatt;
;//}
;//
;//float iStatusReadMainPower(iChar_t viStatusType_arg){
;//     float viMainPwr = 0.0;
;//     if(MAIN_POWER_CONNECT){
;//         viMainPwr = 1.0;
;//     }else{
;//         viMainPwr = 0.0;
;//     }
;//     return viMainPwr;
;//}
;//
;//float iStatusReadSDCard(iChar_t viStatusType_arg){
;//     float viReturn = 0.0;
;//
;//     return viReturn;
;//}
;//
;//float iStatusReadLan(iChar_t viStatusType_arg){
;//     float viReturn = 0.0;
;//
;//     return viReturn;
;//}
;//
;//float iStatusReadWifi(iChar_t viStatusType_arg){
;//     float viReturn = 0.0;
;//
;//     return viReturn;
;//}
;//
;//float iStatusReadDI0(iChar_t viStatusType_arg){
;//     float viReturn = 0.0;
;//
;//     return viReturn;
;//}
;//
;//float iStatusReadDI1(iChar_t viStatusType_arg){
;//     float viReturn = 0.0;
;//
;//     return viReturn;
;//}
