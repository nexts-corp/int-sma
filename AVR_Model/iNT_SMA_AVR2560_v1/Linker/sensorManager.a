;#include "sensorManager.h"
;#include "config.h"
;#include "sensor.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include "managerTask.h"
;extern eeprom iDVConfig_t viDVConfigUpdate;
;extern iDataReport_t viDataReportBuff[];
;
;extern iDataMini_t viDataReport;
;extern iDataMini_t viStatusReport;
;
;iChar_t iSensorRead(iDataMini_t *pviOutData_arg){
; 0028 000B iChar_t iSensorRead(iDataMini_t *pviOutData_arg){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0028 000C     iChar_t i;
; 0028 000D     iChar_t viReturn = 0;
; 0028 000E     const iChar_t viCMD[2] = {0x5a,0x07};
; 0028 000F     iUChar_t viIndexWrite = 0;
; 0028 0010 
; 0028 0011     /*test*/
; 0028 0012     viDVConfigUpdate.viOperate.viSensorEnable[0] = 1;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;	*pviOutData_arg -> Y+6
;	i -> R17
;	viReturn -> R16
;	viCMD -> Y+4
;	viIndexWrite -> R19
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0028 0013     viDVConfigUpdate.viOperate.viSensorEnable[1] = 1;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0028 0014     viDVConfigUpdate.viOperate.viSensorEnable[2] = 1;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0028 0015     viDVConfigUpdate.viOperate.viSensorEnable[3] = 1;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0028 0016     viDVConfigUpdate.viOperate.viSensorEnable[4] = 1;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0028 0017     viDVConfigUpdate.viSensorConfig[0].viChannelID = 0;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0028 0018     viDVConfigUpdate.viSensorConfig[1].viChannelID = 1;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0028 0019     viDVConfigUpdate.viSensorConfig[2].viChannelID = 2;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0028 001A     viDVConfigUpdate.viSensorConfig[3].viChannelID = 3;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0028 001B     viDVConfigUpdate.viSensorConfig[4].viChannelID = 4;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0028 001C     viDVConfigUpdate.viSensorConfig[0].viSensorID = SEN_ADC_TYPE;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0028 001D     viDVConfigUpdate.viSensorConfig[1].viSensorID = SEN_ADC_TYPE;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0028 001E     viDVConfigUpdate.viSensorConfig[2].viSensorID = SEN_ADC_TYPE;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0028 001F     viDVConfigUpdate.viSensorConfig[3].viSensorID = SEN_ADC_TYPE;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0028 0020     viDVConfigUpdate.viSensorConfig[4].viSensorID = SEN_ADC_TYPE;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0028 0021     viDVConfigUpdate.viSensorConfig[0].viUnitID = SEN_ADC10BIT_UNIT;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0028 0022     viDVConfigUpdate.viSensorConfig[1].viUnitID = SEN_ADC10BIT_UNIT;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0028 0023     viDVConfigUpdate.viSensorConfig[2].viUnitID = SEN_ADC10BIT_UNIT;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0028 0024     viDVConfigUpdate.viSensorConfig[3].viUnitID = SEN_ADC10BIT_UNIT;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0028 0025     viDVConfigUpdate.viSensorConfig[4].viUnitID = SEN_ADC10BIT_UNIT;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0028 0026 
; 0028 0027 #if (0)
; 0028 0028     printDebug("viOperate\r\n");
; 0028 0029     printConfig((char eeprom *)&viDVConfigUpdate.viOperate,sizeof(viDVConfigUpdate.viOperate));
; 0028 002A     printDebug("SensorConfig[0]\r\n");
; 0028 002B     printConfig((char eeprom *)&viDVConfigUpdate.viSensorConfig[0],sizeof(viDVConfigUpdate.viSensorConfig));
; 0028 002C     printDebug("SensorConfig[1]\r\n");
; 0028 002D     printConfig((char eeprom *)&viDVConfigUpdate.viSensorConfig[1],sizeof(viDVConfigUpdate.viSensorConfig));
; 0028 002E     printDebug("SensorConfig[2]\r\n");
; 0028 002F     printConfig((char eeprom *)&viDVConfigUpdate.viSensorConfig[2],sizeof(viDVConfigUpdate.viSensorConfig));
; 0028 0030     printDebug("SensorConfig[3]\r\n");
; 0028 0031     printConfig((char eeprom *)&viDVConfigUpdate.viSensorConfig[3],sizeof(viDVConfigUpdate.viSensorConfig));
; 0028 0032     printDebug("SensorConfig[4]\r\n");
; 0028 0033     printConfig((char eeprom *)&viDVConfigUpdate.viSensorConfig[4],sizeof(viDVConfigUpdate.viSensorConfig));
; 0028 0034     /////////
; 0028 0035 #endif
; 0028 0036 
; 0028 0037     viIndexWrite = 0;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0028 0038     for(i=0;i<5;i++){
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0028 0039         #asm("wdr")
;PCODE: $00000075 VOL: 0
	wdr
;PCODE: $00000076 VOL: 0
; 0028 003A        if(viDVConfigUpdate.viOperate.viSensorEnable[i]==1){
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0028 003B            viDataReportBuff[i].viChannelID = viDVConfigUpdate.viSensorConfig[i].viChannelID;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0028 003C            viDataReportBuff[i].viSensorID = viDVConfigUpdate.viSensorConfig[i].viSensorID;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0028 003D            viDataReportBuff[i].viUnitID =   viDVConfigUpdate.viSensorConfig[i].viUnitID;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0028 003E            iSensorReadByType(&viDataReportBuff[i]);
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0028 003F            memcpy(&pviOutData_arg->value[viIndexWrite],viCMD,2);
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0028 0040            viIndexWrite += 2;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0028 0041            memcpy(&pviOutData_arg->value[viIndexWrite],&viDataReportBuff[i],sizeof(viDataReportBuff[i]));
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0028 0042            viIndexWrite += sizeof(viDataReportBuff[i]);
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0028 0043            pviOutData_arg->length = viIndexWrite;
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0028 0044        }
; 0028 0045     }
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0028 0046     printDebug("[iSensorRead]Data:[\r\n");
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0028 0047     print_payload(&pviOutData_arg->value[0],pviOutData_arg->length);
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0028 0048     printDebug("]\r\n");
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0028 0049     viReturn = 1;
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0028 004A     return viReturn;
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0028 004B }
;PCODE: $000000F7 VOL: 0
;
;void iSensorReadByType(iDataReport_t *pviInOutData_arg){
; 0028 004D void iSensorReadByType(iDataReport_t *pviInOutData_arg){
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0028 004E     switch(pviInOutData_arg->viSensorID){
;PCODE: $000000FA VOL: 0
;	*pviInOutData_arg -> Y+0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0028 004F         case SEN_ADC_TYPE:{
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0028 0050             pviInOutData_arg->viData = read_adc(8+pviInOutData_arg->viChannelID);
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0028 0051             printDebug("[iSensorReadByType]Channel[%d] data : %f\r\n",pviInOutData_arg->viChannelID,pviInOutData_arg->viData);
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0028 0052             break;
;PCODE: $00000117 VOL: 0
; 0028 0053         }
; 0028 0054     }
;PCODE: $00000118 VOL: 0
; 0028 0055 }
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;
;float iADCTypeCalculator(){
; 0028 0057 float iADCTypeCalculator(){
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0028 0058     float viReturn = 0;
; 0028 0059     return viReturn;
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;	viReturn -> Y+0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0028 005A }
;PCODE: $0000012A VOL: 0
;
;float iKTypeCalculator(){
; 0028 005C float iKTypeCalculator(){
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0028 005D     float viReturn = 0;
; 0028 005E     return viReturn;
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;	viReturn -> Y+0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0028 005F }
;PCODE: $00000139 VOL: 0
;
;float iTP100TypeCalculator(){
; 0028 0061 float iTP100TypeCalculator(){
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0028 0062     float viReturn = 0;
; 0028 0063     return viReturn;
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;	viReturn -> Y+0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0028 0064 }
;PCODE: $00000148 VOL: 0
;
;float iVoltTypeCalculator(){
; 0028 0066 float iVoltTypeCalculator(){
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0028 0067     float viReturn = 0;
; 0028 0068     return viReturn;
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;	viReturn -> Y+0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0028 0069 }
;PCODE: $00000157 VOL: 0
;
;float iAmpTypeCalculator(){
; 0028 006B float iAmpTypeCalculator(){
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0028 006C     float viReturn = 0;
; 0028 006D     return viReturn;
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;	viReturn -> Y+0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0028 006E }
;PCODE: $00000166 VOL: 0
;
;float i420TypeCalculator(){
; 0028 0070 float i420TypeCalculator(){
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0028 0071     float viReturn = 0;
; 0028 0072     return viReturn;
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;	viReturn -> Y+0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0028 0073 }
;PCODE: $00000175 VOL: 0
;
;float iDHT11TypeCalculator(){
; 0028 0075 float iDHT11TypeCalculator(){
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0028 0076     float viReturn = 0;
; 0028 0077     return viReturn;
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;	viReturn -> Y+0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0028 0078 }
;PCODE: $00000184 VOL: 0
;
;float iDHT22TypeCalculator(){
; 0028 007A float iDHT22TypeCalculator(){
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0028 007B     float viReturn = 0;
; 0028 007C     return viReturn;
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;	viReturn -> Y+0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0028 007D }
;PCODE: $00000193 VOL: 0
;
;float iDS1820TypeCalculator(){
; 0028 007F float iDS1820TypeCalculator(){
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0028 0080     float viReturn = 0;
; 0028 0081     return viReturn;
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;	viReturn -> Y+0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
; 0028 0082 }
;PCODE: $000001A2 VOL: 0
;
;float iDS18B20TypeCalculator(){
; 0028 0084 float iDS18B20TypeCalculator(){
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
; 0028 0085     float viReturn = 0;
; 0028 0086     return viReturn;
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;	viReturn -> Y+0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0028 0087 }
;PCODE: $000001B1 VOL: 0
