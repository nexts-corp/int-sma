;#include "smoothFilter.h"
;
;int indexWrite = 0;
;int gItemSize = 0;
;unsigned int * smoothBuffer;
;iSmoothData_t iSmoothData;
;
;pviSmoothHandle_t pviSmoothSensorHandle;
;
;iSmoothData_t smoothFilter(pviSmoothHandle_t pviSmoothHandle_p,int adcValue_p){
; 0019 000A iSmoothData_t smoothFilter(pviSmoothHandle_t pviSmoothHandle_p,int adcValue_p){

	.CSEG
;PCODE: $00000000 VOL: 0
;PCODE: $00000001 VOL: 0
; 0019 000B     int * ptrSmoothBuffer;
; 0019 000C     iSmoothData_t iSmoothData;
; 0019 000D     iSmoothData.status = 0;
;PCODE: $00000002 VOL: 0
;PCODE: $00000003 VOL: 0
;PCODE: $00000004 VOL: 0
;PCODE: $00000005 VOL: 0
;	*pviSmoothHandle_p -> Y+12
;	adcValue_p -> Y+10
;	*ptrSmoothBuffer -> R16,R17
;	iSmoothData -> Y+2
;PCODE: $00000006 VOL: 0
;PCODE: $00000007 VOL: 0
; 0019 000E     if(indexWrite<gItemSize){
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 0
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
; 0019 000F         iSmoothData.status = 0;
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
; 0019 0010         ptrSmoothBuffer = pviSmoothHandle_p;
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0019 0011         *ptrSmoothBuffer = adcValue_p;
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0019 0012         indexWrite++;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0019 0013     }else if(indexWrite==gItemSize){
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0019 0014        iSmoothData.status = 1;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0019 0015        indexWrite = 0;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0019 0016        gItemSize = 0;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0019 0017        free(smoothBuffer);
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0019 0018     }
; 0019 0019 
; 0019 001A 
; 0019 001B     return iSmoothData;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0019 001C }
;PCODE: $00000034 VOL: 0
;
;pviSmoothHandle_t smoothAllocateMem(int itemSize){
; 0019 001E pviSmoothHandle_t smoothAllocateMem(int itemSize){
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0019 001F    pviSmoothHandle_t  pviSmoothHandle;
; 0019 0020    smoothBuffer = (int *)malloc(itemSize);
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;	itemSize -> Y+2
;	*pviSmoothHandle -> R16,R17
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0019 0021    if(smoothBuffer!=NULL){
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0019 0022      pviSmoothHandle = smoothBuffer;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0019 0023      gItemSize = itemSize;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0019 0024    }else{
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0019 0025      return   pviSmoothHandle = (int *)0;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0019 0026    }
;PCODE: $0000004E VOL: 0
; 0019 0027    return  pviSmoothHandle;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0019 0028 }
;PCODE: $00000056 VOL: 0
