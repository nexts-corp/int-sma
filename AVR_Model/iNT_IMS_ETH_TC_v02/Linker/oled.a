;#include <stdio.h>
;#include <stdlib.h>
;#include <string.h>
;#include <delay.h>
;#include "oled.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include "ds1672.h"
;#include "status.h"
;#include "alarm.h"
;#include "sensor.h"
;#include "config.h"
;#include "timer.h"
;#include "debug.h"
;
;/**************************************************************/
;/***************** OLED Service Page Function *****************/
;/**************************************************************/
;/*============================================================*/
;void OLED_showDateTime(int timezone)
; 0012 0013 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0012 0014     struct  rtc_structure   currentTime;
; 0012 0015 
; 0012 0016     RTC_getDateTime(&currentTime,timezone);
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	timezone -> Y+26
;	currentTime -> Y+0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0012 0017     printOLED("DT%02d-%02d-%04d",currentTime.date,currentTime.month,currentTime.year);
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0012 0018     printOLED("TM%02d:%02d",currentTime.hour,currentTime.min);
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0012 0019 
; 0012 001A }
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;/*============================================================*/
;void OLED_showSensorValue(void)
; 0012 001D {
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0012 001E     int i;
; 0012 001F 
; 0012 0020     for(i=0;i<MAX_SENS_CHANNEL;i++)
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;	i -> R16,R17
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0012 0021     {
; 0012 0022 
; 0012 0023         if( operating_config.sensorEnable[i] ){
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0012 0024 
; 0012 0025             switch (sensor[i].status)
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0012 0026             {
; 0012 0027                 case SENS_NORMAL            :   printOLED("DV%1d%.1f",i+1,sensor[i].value);
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0012 0028                                                 break;
;PCODE: $0000005C VOL: 0
; 0012 0029                 case SENS_ERR_LOWER_BOUND   :   printOLED("DV%1dERRLB",i+1);
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0012 002A                                                 break;
;PCODE: $0000006B VOL: 0
; 0012 002B                 case SENS_ERR_UPPER_BOUND   :   printOLED("DV%1dERRUB",i+1);
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0012 002C                                                 break;
;PCODE: $0000007A VOL: 0
; 0012 002D                 case SENS_ERR_DISCONNECT    :   printOLED("DV%1dERRNC",i+1);
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0012 002E                                                 break;
;PCODE: $00000089 VOL: 0
; 0012 002F                 case SENS_ERR_SHORT         :   printOLED("DV%1dERRSH",i+1);
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0012 0030                                                 break;
;PCODE: $00000098 VOL: 0
; 0012 0031                 case SENS_ERR_UNKNOWN       :   printOLED("DV%1dDETECTING",i+1);
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0012 0032                                                 break;
;PCODE: $000000A7 VOL: 0
; 0012 0033                 default                     :   printDebug("<OLED_showSensorValue> sensor[%d].status unknown [0x%02X]\r\n",i+1,sensor[i].status);
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0012 0034                                                 return;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0012 0035             }
;PCODE: $000000BD VOL: 0
; 0012 0036         }
; 0012 0037         else{
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0012 0038             printOLED("DV%1dN/A",i+1);
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0012 0039         }
;PCODE: $000000CB VOL: 0
; 0012 003A     }
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0012 003B 
; 0012 003C     return;
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0012 003D 
; 0012 003E }
;PCODE: $000000D3 VOL: 0
;/*============================================================*/
;void OLED_showPowerStatus(char pwrSrc,float batLevel)
; 0012 0041 {
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0012 0042 
; 0012 0043     if(pwrSrc == PWR_NORMAL){
;PCODE: $000000D6 VOL: 0
;	pwrSrc -> Y+4
;	batLevel -> Y+0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0012 0044         printOLED("CG1");
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0012 0045     }
; 0012 0046     else{
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0012 0047         //printDebug("<OLED_showPowerStatus> batt = %f\r\n",batLevel);
; 0012 0048         if(batLevel < 3.0){
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0012 0049             printOLED("BL0");
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0012 004A         }
; 0012 004B         else if((batLevel >= 3.0) && (batLevel < 3.3)){
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0012 004C             printOLED("BL1");
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0012 004D         }
; 0012 004E         else if((batLevel >= 3.3) && (batLevel < 3.7)){
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0012 004F             printOLED("BL2");
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0012 0050         }
; 0012 0051         else if((batLevel >= 3.7) && (batLevel < 4.0)){
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0012 0052             printOLED("BL3");
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0012 0053         }
; 0012 0054         else if(batLevel >= 4.0){
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0012 0055             printOLED("BL4");
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0012 0056         }
; 0012 0057     }
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0012 0058 }
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;/*============================================================*/
;void OLED_showInputStatus(int ch,char state)
; 0012 005B {
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0012 005C     if((ch < 0) || (ch >= 8)){
;PCODE: $00000145 VOL: 0
;	ch -> Y+1
;	state -> Y+0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0012 005D         printDebug("<OLED_showInputStatus> ERR: ch value out of range.!!\r\n");
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0012 005E         return;
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0012 005F     }
; 0012 0060 
; 0012 0061     if(din_config[ch].channelEnable != 0x01){
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0012 0062         return;
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0012 0063     }
; 0012 0064 
; 0012 0065     if((state != DIN_FALLING) && (state != DIN_RISING)){
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0012 0066         //printDebug("<OLED_showInputStatus> ERR: state invalid [0x%02X]!!\r\n",state);
; 0012 0067         return;
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0012 0068     }
; 0012 0069 
; 0012 006A     printOLED("IP%1d%1d",ch,state);
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0012 006B }
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;/*============================================================*/
;void OLED_showOutputStatus(int ch,char state)
; 0012 006E {
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0012 006F     if((ch < 0) || (ch >= 8)){
;PCODE: $00000181 VOL: 0
;	ch -> Y+1
;	state -> Y+0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0012 0070         printDebug("<OLED_showOutputStatus> ERR: ch value out of range.!!\r\n");
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0012 0071         return;
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0012 0072     }
; 0012 0073 
; 0012 0074     if(dout_config[ch].channelEnable != 0x01){
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0012 0075         return;
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0012 0076     }
; 0012 0077 
; 0012 0078     if((state != LOW) && (state != HIGH)){
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0012 0079         //printDebug("<OLED_showInputStatus> ERR: state invalid [0x%02X]!!\r\n",state);
; 0012 007A         return;
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0012 007B     }
; 0012 007C 
; 0012 007D     printOLED("OP%1d%1d",ch,state);
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
; 0012 007E }
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;/*============================================================*/
;void OLED_showServerCommStatus(char state)
; 0012 0081 {
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
; 0012 0082     printOLED("SC%1d",state);
;PCODE: $000001BD VOL: 0
;	state -> Y+0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
; 0012 0083 }
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;/*============================================================*/
;void OLED_showLanStatus(char state)
; 0012 0086 {
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
; 0012 0087     printOLED("LC%1d",state);
;PCODE: $000001CD VOL: 0
;	state -> Y+0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
; 0012 0088 }
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;/*============================================================*/
;void OLED_showBuzzerStatus(char state)
; 0012 008B {
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
; 0012 008C     printOLED("BZ%1d",state);
;PCODE: $000001DD VOL: 0
;	state -> Y+0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
; 0012 008D }
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;/*============================================================*/
;void OLED_showMemoryStatus(char state)
; 0012 0090 {
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
; 0012 0091     printOLED("MS%1d",state);
;PCODE: $000001ED VOL: 0
;	state -> Y+0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
; 0012 0092 }
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;/*============================================================*/
;void OLED_showAlarmStatus(void)
; 0012 0095 {
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
; 0012 0096     int     i=0;
; 0012 0097     char    flagSens[5],flagData[5],flagBatt,flagMemo;
; 0012 0098 
; 0012 0099     for(i=0;i<MAX_SENS_CHANNEL;i++)
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;	i -> R16,R17
;	flagSens -> Y+9
;	flagData -> Y+4
;	flagBatt -> R19
;	flagMemo -> R18
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
; 0012 009A     {
; 0012 009B         if(operating_config.sensorEnable[i]){
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
; 0012 009C 
; 0012 009D             flagSens[i]         = sensorAlarm[i] ? 1:0;
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
; 0012 009E 
; 0012 009F             if(sensor_config[i].alarmEnable){
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
; 0012 00A0                 flagData[i]     = dataAlarm[i] ? 1:0;
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
; 0012 00A1             }
; 0012 00A2             else{
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
; 0012 00A3                 flagData[i]     = 0;
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
; 0012 00A4             }
;PCODE: $0000023F VOL: 0
; 0012 00A5         }
; 0012 00A6         else{
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
; 0012 00A7             flagSens[i]         = 0;
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
; 0012 00A8             flagData[i]         = 0;
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
; 0012 00A9         }
;PCODE: $0000024A VOL: 0
; 0012 00AA 
; 0012 00AB     }
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
; 0012 00AC 
; 0012 00AD     if(env_config.batteryLevel > 0){
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
; 0012 00AE         flagBatt                = batteryAlarm ? 1:0;
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
; 0012 00AF     }
; 0012 00B0     else{
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
; 0012 00B1         flagBatt                = 0;
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
; 0012 00B2     }
;PCODE: $00000262 VOL: 0
; 0012 00B3 
; 0012 00B4     if(env_config.memoryMin > 0){
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
; 0012 00B5         flagMemo                = memoryAlarm ? 1:0;
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
; 0012 00B6     }
; 0012 00B7     else{
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
; 0012 00B8         flagMemo                = 0;
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
; 0012 00B9     }
;PCODE: $00000275 VOL: 0
; 0012 00BA 
; 0012 00BB     printOLED("AL%1d%1d%1d%1d%1d%1d%1d%1d%1d%1d%1d%1d",
; 0012 00BC         flagSens[0],flagSens[1],flagSens[2],flagSens[3],flagSens[4],
; 0012 00BD         flagData[0],flagData[1],flagData[2],flagData[3],flagData[4],
; 0012 00BE         flagBatt,flagMemo);
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
; 0012 00BF 
; 0012 00C0     return;
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
; 0012 00C1 }
;PCODE: $000002A4 VOL: 0
;/*============================================================*/
;
;/**************************************************************/
;/*************** OLED Low Level Communication *****************/
;/**************************************************************/
;/*============================================================*/
;void printOLED(flash char *fmtstr, ...)
; 0012 00C9 {
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
; 0012 00CA     TIMER   timeout;
; 0012 00CB 
; 0012 00CC     char strcmd[60];
; 0012 00CD 
; 0012 00CE     va_list argptr;
; 0012 00CF 
; 0012 00D0     va_start(argptr, fmtstr);
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;	*fmtstr -> Y+66
;	timeout -> Y+62
;	strcmd -> Y+2
;	*argptr -> R16,R17
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
; 0012 00D1     vsprintf(strcmd,fmtstr,argptr);
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
; 0012 00D2     va_end(argptr);
; 0012 00D3 
; 0012 00D4 //    if ( (strstr(strcmd,"DV") != NULL) ){
; 0012 00D5 //        printDebug("\r\n--%s--\r\n",strcmd);
; 0012 00D6 //    }
; 0012 00D7 
; 0012 00D8     flag_oled_ack = 0;
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
; 0012 00D9 
; 0012 00DA     putchar2(0x01);
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
; 0012 00DB     send_uart(2,strcmd);
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
; 0012 00DC     putchar2(0x04);
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
; 0012 00DD 
; 0012 00DE     TIMER_setTimer(&timeout, 3);
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
; 0012 00DF 
; 0012 00E0     /*bongkot OLED assume flag_oled_ack = 1(OLED has connect and ack);*/
; 0012 00E1     //flag_oled_ack = 1;
; 0012 00E2 
; 0012 00E3     while( (!flag_oled_ack) && !TIMER_checkTimerExceed(timeout));
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
; 0012 00E4 
; 0012 00E5     if(!flag_oled_ack){
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
; 0012 00E6         printDebug("\r\n!!!! OLED Error !!!!\r\n");
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
; 0012 00E7     }
; 0012 00E8 
; 0012 00E9 }
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;/*============================================================*/
;
;/**************************************************************/
;/****************** OLED Hardare Management *******************/
;/**************************************************************/
;/*============================================================*/
;void OLED_reset(void)
; 0012 00F1 {
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
; 0012 00F2     OLED_RESET = 0;            // Active SOLED Reset
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
; 0012 00F3     delay_ms(1);
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
; 0012 00F4     OLED_RESET = 1;            // Dective SOLED Reset for start use.
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
; 0012 00F5     delay_ms(1);
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
; 0012 00F6 
; 0012 00F7 }
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;/*============================================================*/
;void init_oled(void)
; 0012 00FA {
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
; 0012 00FB     printDebug("Initializing OLED.. ");
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
; 0012 00FC     flag_oled_ack = 0;
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
; 0012 00FD     OLED_reset();
;PCODE: $000002FE VOL: 0
; 0012 00FE     printDebug("OK\r\n");
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
; 0012 00FF }
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
;/*============================================================*/
;
