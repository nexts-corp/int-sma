;#include <stdio.h>
;#include <stdlib.h>
;#include <string.h>
;#include "status.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include "config.h"
;#include "timer.h"
;#include "debug.h"
;
;/*eeprom*/ char sensorStatus[MAX_SENS_CHANNEL]                  = {SENS_NORMAL,SENS_NORMAL,SENS_NORMAL,SENS_NORMAL,SENS_NORMAL};
;/*eeprom*/ char dataStatus[MAX_SENS_CHANNEL]                    = {DATA_NORMAL,DATA_NORMAL,DATA_NORMAL,DATA_NORMAL,DATA_NORMAL};
;char mtncStatus                                             = MTNC_NORMAL;
;char powerSrcStatus                                         = PWR_NORMAL;
;char batteryStatus                                          = BATT_NORMAL;
;char dinStatus[USE_DIN]                                     = {UNKNOWN,UNKNOWN};

	.DSEG
;char doutStatus[USE_DIN]                                    = {UNKNOWN,UNKNOWN};
;char serverCommStatus                                       = UNKNOWN;
;char lanStatus                                              = 0;
;char memoryStatus                                           = MEM_NORMAL;
;
;float batteryVolt                                           = 0.0;
;
;/*
;char dataLowerStatus[MAX_SENS_CHANNEL]           = {UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN};
;char dataLowerDelayStatus[MAX_SENS_CHANNEL]      = {UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN};
;char dataLowerExtremeStatus[MAX_SENS_CHANNEL]    = {UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN};
;char dataUpperStatus[MAX_SENS_CHANNEL]           = {UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN};
;char dataUpperDelayStatus[MAX_SENS_CHANNEL]      = {UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN};
;char dataUpperExtremeStatus[MAX_SENS_CHANNEL]    = {UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN};
;*/
;
;/****
;*  "sensor.h" -> struct sens_val_st sensor[]
;*
;****/
;/*============================================================*/
;int updateMIPStatus(void)
; 000F 0025 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 000F 0026     // -- depend on menu -- //
; 000F 0027     return 0;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 000F 0028 }
;PCODE: $00000011 VOL: 0
;/*============================================================*/
;int updateBatteryStatus(void)
; 000F 002B {
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 000F 002C     static TIMER    t               = 0;
; 000F 002D     static char     t_flag          = 0;
; 000F 002E     static char     lastCheck       = 0;
; 000F 002F     char            current_status  = 0;
; 000F 0030 
; 000F 0031     if(MAIN_POWER_CONNECT){
;PCODE: $00000014 VOL: 0
;	current_status -> R17
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 000F 0032         powerSrcStatus      =   PWR_NORMAL;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 000F 0033         batteryStatus       =   BATT_NORMAL;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 000F 0034         batteryVolt         =   4.2;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 000F 0035         return 0;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 000F 0036     }
; 000F 0037     else{
;PCODE: $00000027 VOL: 0
; 000F 0038         powerSrcStatus      =   PWR_DOWN;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 000F 0039         batteryVolt         =   readBattery();
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 000F 003A 
; 000F 003B         if(env_config.batteryLevel == 0)    // -- battery alarm disable --> always BATT_NORMAL -- //
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 000F 003C         {
; 000F 003D             batteryStatus = BATT_NORMAL;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 000F 003E         }
; 000F 003F         else
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 000F 0040         {
; 000F 0041             if(batteryVolt < env_config.batteryLevel)
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 000F 0042             {
; 000F 0043                 current_status      = BATT_LOW;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 000F 0044             }
; 000F 0045             else
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 000F 0046             {
; 000F 0047                 current_status      = BATT_NORMAL;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 000F 0048             }
;PCODE: $0000003F VOL: 0
; 000F 0049 
; 000F 004A             if(lastCheck != current_status)
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 000F 004B             {
; 000F 004C                 t_flag              = 0;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 000F 004D                 lastCheck           = current_status;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 000F 004E             }
; 000F 004F 
; 000F 0050             if(!t_flag)
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 000F 0051             {
; 000F 0052                 TIMER_setTimer(&t,10);
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 000F 0053                 t_flag              = 1;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 000F 0054             }
; 000F 0055             else
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 000F 0056             {
; 000F 0057                 if(TIMER_checkTimerExceed(t))
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 000F 0058                 {
; 000F 0059                     batteryStatus   = current_status;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 000F 005A                     t_flag          = 0;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 000F 005B                 }
; 000F 005C             }
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 000F 005D         }// -- battery alarm enable -- //
;PCODE: $0000005D VOL: 0
; 000F 005E         return 1;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 000F 005F     }// -- main power disconnect -- //
;PCODE: $00000061 VOL: 0
; 000F 0060 
; 000F 0061     return 0;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 000F 0062 }
;PCODE: $00000065 VOL: 0
;/*============================================================*/
;int updateCommStatus(void)
; 000F 0065 {
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 000F 0066     int res;
; 000F 0067 
; 000F 0068     if(!IO_LAN_CONNECT){
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;	res -> R16,R17
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 000F 0069         lanStatus                       = COMM_LAN_DISCONNECT;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 000F 006A 
; 000F 006B         serverCommStatus                = UNKNOWN;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 000F 006C 
; 000F 006D         commLostTimer                   = 0;                // -- re-initial -- //
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 000F 006E         return 1;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 000F 006F     }
; 000F 0070     else{
;PCODE: $00000079 VOL: 0
; 000F 0071         lanStatus                       = COMM_LAN_CONNECT;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 000F 0072 
; 000F 0073         if((commLostTimer != 0xFFFFFFFF) && (commLostTimer != 0)){
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 000F 0074             printDebug("<updateCommStatus> LostTimer time left = %ld(%lX)\r\n",(commLostTimer-baseCounter),(commLostTimer-baseCounter));
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 000F 0075         }
; 000F 0076 
; 000F 0077         res = TIMER_checkTimerExceed(commLostTimer);
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 000F 0078         if(res < 0){
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 000F 0079             serverCommStatus            = UNKNOWN;              // -- unknown -- //
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 000F 007A             return 0;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 000F 007B         }
; 000F 007C         else{
;PCODE: $000000A0 VOL: 0
; 000F 007D             if(res){
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 000F 007E                 if(serverCommStatus != COMM_LOST){
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 000F 007F                     printDebug("<updateCommStatus> Server Down!!!\r\n");
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 000F 0080                 }
; 000F 0081                 serverCommStatus        = COMM_LOST;            // -- disconnect -- //
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 000F 0082                 return 1;
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 000F 0083             }
; 000F 0084             else{
;PCODE: $000000B3 VOL: 0
; 000F 0085                 if(serverCommStatus != COMM_NORMAL){
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 000F 0086                     printDebug("<updateCommStatus> Server Up!!!\r\n");
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 000F 0087                 }
; 000F 0088                 serverCommStatus        = COMM_NORMAL;          // -- connect -- //
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 000F 0089                 return 0;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 000F 008A             }
;PCODE: $000000C4 VOL: 0
; 000F 008B         }
;PCODE: $000000C5 VOL: 0
; 000F 008C     }
;PCODE: $000000C6 VOL: 0
; 000F 008D }
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;/*============================================================*/
;int updateMemoryStatus(void)
; 000F 0090 {
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 000F 0091 //    if(env_config.memoryMin == 0)    // -- memory alarm disable --> always MEM_NORMAL -- //
; 000F 0092 //    {
; 000F 0093 //            memoryStatus        = MEM_NORMAL;
; 000F 0094 //    }
; 000F 0095 //    else
; 000F 0096 //    {
; 000F 0097         if(sdFreeSpace == 0)
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 000F 0098         {
; 000F 0099             memoryStatus    = MEM_ERROR;
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 000F 009A         }
; 000F 009B         else if((int)(sdFreeSpace/1024) < env_config.memoryMin)
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 000F 009C         {
; 000F 009D             memoryStatus    = MEM_LOW;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 000F 009E         }
; 000F 009F         else
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 000F 00A0         {
; 000F 00A1             memoryStatus    = MEM_NORMAL;
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 000F 00A2         }
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 000F 00A3 //    }// -- memory alarm enable -- //
; 000F 00A4 
; 000F 00A5     if( memoryStatus != MEM_NORMAL ){
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 000F 00A6         return 1;
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 000F 00A7     }
; 000F 00A8     else{
;PCODE: $000000E8 VOL: 0
; 000F 00A9         return 0;
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 000F 00AA     }
;PCODE: $000000EB VOL: 0
; 000F 00AB }
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;/*============================================================*/
;int updateSensorStatus(int ch)
; 000F 00AE {
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 000F 00AF     if((ch<0) || (ch>=MAX_SENS_CHANNEL)){
;PCODE: $000000F0 VOL: 0
;	ch -> Y+0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 000F 00B0         printDebug("<checkProbeAlarm> sensor channel out of range (%d)\r\n",ch);
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 000F 00B1         return 0;
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 000F 00B2     }
; 000F 00B3 
; 000F 00B4     sensorStatus[ch] = sensor[ch].status;
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 000F 00B5 
; 000F 00B6     if(sensorStatus[ch] == SENS_ERR_UNKNOWN){
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 000F 00B7         return 0;
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 000F 00B8     }
; 000F 00B9     else if(sensorStatus[ch] != SENS_NORMAL){
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 000F 00BA         //printDebug("<checkProbeAlarm> Channel %d ERR\r\n",ch);
; 000F 00BB         return 1;
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 000F 00BC     }
; 000F 00BD     else{
;PCODE: $00000123 VOL: 0
; 000F 00BE         //printDebug("<checkProbeAlarm> Channel %d OK\r\n",ch);
; 000F 00BF         return 0;
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 000F 00C0     }
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 000F 00C1 }
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;/*============================================================*/
;int updateDataStatus(int ch)
; 000F 00C4 {
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 000F 00C5     static TIMER t[MAX_SENS_CHANNEL];
; 000F 00C6     static char flag_lower[MAX_SENS_CHANNEL] = {0,0,0,0,0};
; 000F 00C7     static char flag_upper[MAX_SENS_CHANNEL] = {0,0,0,0,0};
; 000F 00C8     int res = 0;
; 000F 00C9 
; 000F 00CA     if((ch<0) || (ch>=MAX_SENS_CHANNEL)){
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;	ch -> Y+2
;	res -> R16,R17
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 000F 00CB         printDebug("<updateDataStatus> ABORT: sensor channel out of range (%d)\r\n",ch);
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 000F 00CC         return 0;
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 000F 00CD     }
; 000F 00CE 
; 000F 00CF     if(sensor[ch].status != SENS_NORMAL){
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 000F 00D0         //printDebug("<updateDataStatus> ABORT: sensor (%d) error\r\n",ch);
; 000F 00D1         return 0;
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 000F 00D2     }
; 000F 00D3 
; 000F 00D4     if(sensor[ch].value < sensor_config[ch].lowerLimit){
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 000F 00D5 
; 000F 00D6         if(!flag_lower[ch])
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 000F 00D7         {
; 000F 00D8             TIMER_setTimer(&t[ch],sensor_config[ch].lowerDelay);
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 000F 00D9             flag_lower[ch] = 1;
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 000F 00DA         }
; 000F 00DB         else
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 000F 00DC         {
; 000F 00DD             if(TIMER_checkTimerExceed(t[ch]))
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 000F 00DE             {
; 000F 00DF                 dataStatus[ch]              |=  DATA_LOWER_LIMIT;
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 000F 00E0                 //printDebug("<updateDataStatus> Probe %d lowerDelayLimit[%02X]\r\n", ch+1, dataStatus[ch]);   /////
; 000F 00E1             }
; 000F 00E2         }
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 000F 00E3         //dataStatus[ch]                      |=  DATA_LOWER_LIMIT;
; 000F 00E4         res |= 1;
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 000F 00E5 
; 000F 00E6         //printDebug("<updateDataStatus> Probe %d lowerLimit[%02X] -- sensor[%f] vs config[%f]\r\n",
; 000F 00E7         //                ch+1,dataStatus[ch],sensor[ch].value,sensor_config[ch].lowerLimit);
; 000F 00E8     }
; 000F 00E9     else{
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 000F 00EA         flag_lower[ch] = 0;
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 000F 00EB         dataStatus[ch]                      &=  ~DATA_LOWER_LIMIT;
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
; 000F 00EC         //dataStatus[ch]                      &=  ~DATA_LOWER_DELAY;
; 000F 00ED     }
;PCODE: $000001A5 VOL: 0
; 000F 00EE 
; 000F 00EF     if(sensor[ch].value < sensor_config[ch].lowerExtreme)
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
; 000F 00F0     {
; 000F 00F1         dataStatus[ch]                      |=  DATA_LOWER_EXTREME;
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 000F 00F2         res |= 1;
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
; 000F 00F3 
; 000F 00F4         //printDebug("<updateDataStatus> Probe %d lowerExtreme[%02X] -- sensor[%f] vs config[%f]\r\n",
; 000F 00F5         //                ch+1,dataStatus[ch],sensor[ch].value,sensor_config[ch].lowerExtreme);
; 000F 00F6     }
; 000F 00F7     else
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 000F 00F8     {
; 000F 00F9         dataStatus[ch]                      &=  ~DATA_LOWER_EXTREME;
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 000F 00FA     }
;PCODE: $000001C5 VOL: 0
; 000F 00FB 
; 000F 00FC     if(sensor[ch].value > sensor_config[ch].upperLimit)
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 000F 00FD     {
; 000F 00FE         if(!flag_upper[ch])
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 000F 00FF         {
; 000F 0100             TIMER_setTimer(&t[ch],sensor_config[ch].upperDelay);
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
; 000F 0101             flag_upper[ch] = 1;
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
; 000F 0102         }
; 000F 0103         else
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
; 000F 0104         {
; 000F 0105             if(TIMER_checkTimerExceed(t[ch]))
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
; 000F 0106             {
; 000F 0107                 dataStatus[ch]              |=  DATA_UPPER_LIMIT;
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 000F 0108             }
; 000F 0109         }
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
; 000F 010A         //dataStatus[ch]                      |=  DATA_UPPER_LIMIT;
; 000F 010B         res |= 1;
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
; 000F 010C 
; 000F 010D         //printDebug("<updateDataStatus> Probe %d upperLimit -- sensor[%f] vs config[%f]\r\n",
; 000F 010E         //                ch+1,sensor[ch].value,sensor_config[ch].upperLimit);
; 000F 010F     }
; 000F 0110     else
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
; 000F 0111     {
; 000F 0112         flag_upper[ch] = 0;
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
; 000F 0113         dataStatus[ch]                      &=  ~DATA_UPPER_LIMIT;
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
; 000F 0114         //dataStatus[ch]                      &=  ~DATA_UPPER_DELAY;
; 000F 0115     }
;PCODE: $0000020E VOL: 0
; 000F 0116 
; 000F 0117     if(sensor[ch].value > sensor_config[ch].upperExtreme)
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
; 000F 0118     {
; 000F 0119         dataStatus[ch]                      |=  DATA_UPPER_EXTREME;
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
; 000F 011A         res |= 1;
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
; 000F 011B 
; 000F 011C         //printDebug("<updateDataStatus> Probe %d upperExtreme -- sensor[%f] vs config[%f]\r\n",
; 000F 011D         //                ch+1,sensor[ch].value,sensor_config[ch].upperExtreme);
; 000F 011E     }
; 000F 011F     else
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
; 000F 0120     {
; 000F 0121         dataStatus[ch]                      &=  ~DATA_UPPER_EXTREME;
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
; 000F 0122     }
;PCODE: $0000022E VOL: 0
; 000F 0123 
; 000F 0124     return res;
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
; 000F 0125 }
;PCODE: $00000236 VOL: 0
;/*============================================================*/
;int updateDinStatus(void)
; 000F 0128 {
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
; 000F 0129     static TIMER    t[USE_DIN]                  = {0,0};
; 000F 012A     static char     lastDinCheck[USE_DIN]       = {UNKNOWN,UNKNOWN};   // -- initial with unuse value -- //

	.DSEG

	.CSEG
; 000F 012B     static char     steadyState[USE_DIN]        = {0,0};
; 000F 012C     char            currentState                = UNKNOWN;
; 000F 012D     int             ch                          = 0;
; 000F 012E     int             ret                         = 0;
; 000F 012F 
; 000F 0130     for(ch=0;ch<USE_DIN;ch++)
;PCODE: $00000239 VOL: 0
;	currentState -> R17
;	ch -> R18,R19
;	ret -> R20,R21
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
; 000F 0131     {
; 000F 0132         if(din_config[ch].channelEnable == 0x01)
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
; 000F 0133         {
; 000F 0134             switch(ch){
;PCODE: $0000024F VOL: 0
; 000F 0135                 case 0  : currentState = DIN1;  break;
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
; 000F 0136                 case 1  : currentState = DIN2;  break;
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
; 000F 0137                 default : printDebug("<updateDinStatus> channel[%d] out of range\r\n",ch); return 0;
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
; 000F 0138             }
;PCODE: $00000272 VOL: 0
; 000F 0139 
; 000F 013A             if(currentState != lastDinCheck[ch])
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
; 000F 013B             {
; 000F 013C                 TIMER_setTimer(&t[ch],1);
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
; 000F 013D                 lastDinCheck[ch]    = currentState;
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
; 000F 013E                 steadyState[ch]     = 0;
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
; 000F 013F             }
; 000F 0140             else if(!steadyState[ch])
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
; 000F 0141             {
; 000F 0142                 if(TIMER_checkTimerExceed(t[ch])){
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
; 000F 0143 
; 000F 0144                     steadyState[ch] = 1;
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
; 000F 0145 
; 000F 0146                     if(currentState){
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
; 000F 0147                         dinStatus[ch]   = DIN_RISING;
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
; 000F 0148                     }
; 000F 0149                     else{
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
; 000F 014A                         dinStatus[ch]   = DIN_FALLING;
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
; 000F 014B                     }
;PCODE: $000002A6 VOL: 0
; 000F 014C 
; 000F 014D                     ret += 1;
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
; 000F 014E                 }
; 000F 014F                 else{
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
; 000F 0150                     steadyState[ch] = 0;
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
; 000F 0151                 }
;PCODE: $000002AF VOL: 0
; 000F 0152             }
; 000F 0153         }
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
; 000F 0154     }
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
; 000F 0155 
; 000F 0156     return ret;
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
; 000F 0157 }
;PCODE: $000002BC VOL: 0
;/*============================================================*/
;int updateDoutStatus(void)
; 000F 015A {
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
; 000F 015B     if(d_out[0]){   doutStatus[0]        = DOUT_HIGH; }
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
; 000F 015C     else{           doutStatus[0]        = DOUT_LOW; }
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
; 000F 015D 
; 000F 015E     if(d_out[1]){   doutStatus[1]        = DOUT_HIGH; }
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
; 000F 015F     else{           doutStatus[1]        = DOUT_LOW; }
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
; 000F 0160 
; 000F 0161     return 0;
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
; 000F 0162 }
;PCODE: $000002D8 VOL: 0
;/*============================================================*/
;int getDeviceState(unsigned short *state)
; 000F 0165 {
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
; 000F 0166     int     i   = 0;
; 000F 0167 
; 000F 0168     *state      = 0x00;
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;	*state -> Y+2
;	i -> R16,R17
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
; 000F 0169 
; 000F 016A     if(isDeviceConfig()){
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
; 000F 016B         *state |= (1 << 15);
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
; 000F 016C     }
; 000F 016D     else{
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
; 000F 016E         *state &= ~(1 << 15);
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
; 000F 016F     }
;PCODE: $000002F0 VOL: 0
; 000F 0170 
; 000F 0171     if(operating_config.deviceEnable){
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
; 000F 0172         *state |= (1 << 14);
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
; 000F 0173     }
; 000F 0174     else{
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
; 000F 0175         *state &= ~(1 << 14);
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
; 000F 0176     }
;PCODE: $000002FF VOL: 0
; 000F 0177 
; 000F 0178     if(operating_config.mode == MODE_REALTIME){
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
; 000F 0179         *state |= (2 << 10);
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
; 000F 017A     }
; 000F 017B     else{
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
; 000F 017C         *state |= (1 << 10);
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
; 000F 017D     }
;PCODE: $0000030D VOL: 0
; 000F 017E 
; 000F 017F     if(operating_config.alarmEnable){
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
; 000F 0180         *state |= (2 << 8);
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
; 000F 0181     }
; 000F 0182     else{
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
; 000F 0183         *state |= (1 << 8);
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
; 000F 0184     }
;PCODE: $0000031C VOL: 0
; 000F 0185 
; 000F 0186     for(i=0;i<MAX_SENS_CHANNEL;i++)
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
; 000F 0187     {
; 000F 0188         if(operating_config.sensorEnable[i]){
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
; 000F 0189             *state |= (1 << (4-i) );
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
; 000F 018A         }
; 000F 018B         else{
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
; 000F 018C             *state &= ~(1 << (4-i) );
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
; 000F 018D         }
;PCODE: $00000343 VOL: 0
; 000F 018E     }
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
; 000F 018F 
; 000F 0190     printDebug("<getDeviceState> state = [0x%04X]\r\n",*state);
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
; 000F 0191 
; 000F 0192     return 0;
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
; 000F 0193 }
;PCODE: $0000035B VOL: 0
;/*============================================================*/
