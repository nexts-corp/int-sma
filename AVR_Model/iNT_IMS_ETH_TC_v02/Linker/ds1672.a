;#include <i2c.h>
;#include <delay.h>
;#include <string.h>
;#include <stdlib.h>
;#include <stdio.h>
;#include "ds1672.h"
;
;/*============================================================*/
;unsigned long raw_rtc;
;/*============================================================*/
;int DS1672_trickerChargeEnable(void) /* ----- enable the trickle-charger ------ */
; 0006 000C {

	.CSEG
;PCODE: $00000000 VOL: 0
;PCODE: $00000001 VOL: 0
; 0006 000D     #asm("cli")
;PCODE: $00000002 VOL: 0
	cli
;PCODE: $00000003 VOL: 0
; 0006 000E     i2c_start();
;PCODE: $00000004 VOL: 0
; 0006 000F     i2c_write(ADDRTC);
;PCODE: $00000005 VOL: 0
;PCODE: $00000006 VOL: 0
; 0006 0010     i2c_write(5);
;PCODE: $00000007 VOL: 0
;PCODE: $00000008 VOL: 0
; 0006 0011     i2c_write(0xA6);            /* enable the trickle-charger : No diode, 2k ohm resistor */
;PCODE: $00000009 VOL: 0
;PCODE: $0000000A VOL: 0
; 0006 0012     i2c_stop();
;PCODE: $0000000B VOL: 0
; 0006 0013     #asm("sei")
;PCODE: $0000000C VOL: 0
	sei
;PCODE: $0000000D VOL: 0
; 0006 0014 
; 0006 0015     /* 10ms delay to complete the write operation */
; 0006 0016     delay_ms(10);
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0006 0017 
; 0006 0018     return 0;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0006 0019 }
;PCODE: $00000013 VOL: 0
;/*============================================================*/
;unsigned long int DS1672_read(void)
; 0006 001C {
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0006 001D     unsigned long int z;
; 0006 001E     unsigned char rtc_reg1, rtc_reg2, rtc_reg3, rtc_reg4;
; 0006 001F 
; 0006 0020     #asm("cli")
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;	z -> Y+4
;	rtc_reg1 -> R17
;	rtc_reg2 -> R16
;	rtc_reg3 -> R19
;	rtc_reg4 -> R18
;PCODE: $00000018 VOL: 0
	cli
;PCODE: $00000019 VOL: 0
; 0006 0021     i2c_start();
;PCODE: $0000001A VOL: 0
; 0006 0022     i2c_write(ADDRTC);                      /* write slave address, write 1672 */
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0006 0023     i2c_write(0x00);                        /* write register address, 1st clock register */
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0006 0024     i2c_start();
;PCODE: $0000001F VOL: 0
; 0006 0025     i2c_write(ADDRTC | 1);                  /* write slave address, read 1672 */
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0006 0026     rtc_reg1 = i2c_read(ACK);                 /* starts w/last address stored in register pointer */
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0006 0027     rtc_reg2 = i2c_read(ACK);
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0006 0028     rtc_reg3 = i2c_read(ACK);
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0006 0029     rtc_reg4 = i2c_read(NACK);
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0006 002A     i2c_stop();
;PCODE: $0000002E VOL: 0
; 0006 002B     #asm("sei")
;PCODE: $0000002F VOL: 0
	sei
;PCODE: $00000030 VOL: 0
; 0006 002C 
; 0006 002D     z = rtc_reg4;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0006 002E     z <<= 8;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0006 002F     z += rtc_reg3;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0006 0030     z <<= 8;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0006 0031     z += rtc_reg2;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0006 0032     z <<= 8;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0006 0033     z += rtc_reg1;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0006 0034 
; 0006 0035     //printDebug("\r\nDS1672_read -> 0x%02X%02X%02X%02X\r\n",rtc_reg4,rtc_reg3,rtc_reg2,rtc_reg1);
; 0006 0036     //printDebug("rawtime [%ld]\r\n", z);
; 0006 0037 
; 0006 0038     return z;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0006 0039 }
;PCODE: $00000056 VOL: 0
;/*============================================================*/
;int binary_to_date(unsigned long x, struct rtc_structure *rtcCov) /* ------ convert binary time to date format ------ */
; 0006 003C {
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0006 003D     unsigned long yrs = 99, mon = 99, day = 99, tmp, jday, hrs, min, sec;
; 0006 003E     unsigned long j, n;
; 0006 003F     unsigned int dow;     // day of week
; 0006 0040 
; 0006 0041     j = x / 60;                             /* whole minutes since 1/1/70 */
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;	x -> Y+44
;	*rtcCov -> Y+42
;	yrs -> Y+38
;	mon -> Y+34
;	day -> Y+30
;	tmp -> Y+26
;	jday -> Y+22
;	hrs -> Y+18
;	min -> Y+14
;	sec -> Y+10
;	j -> Y+6
;	n -> Y+2
;	dow -> R16,R17
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0006 0042     sec = x - (60 * j);                     /* leftover seconds */
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0006 0043     n = j / 60;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0006 0044     min = j - (60 * n);
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0006 0045     j = n / 24;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0006 0046     hrs = n - (24 * j);
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0006 0047     j = j + (365 + 366);                    /* whole days since 1/1/68 */
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0006 0048 
; 0006 0049     dow = (j % 7)+1;                        /* since 1/1/68 is Monday */
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0006 004A                                             /* 1-7 => Sun - Sat */
; 0006 004B     day = j / ((4 * 365) + 1);
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0006 004C     tmp = j % ((4 * 365) + 1);
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0006 004D     if(tmp >= (31 + 29))                    /* if past 2/29 */
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0006 004E     day++;                                  /* add a leap day */
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0006 004F     yrs = (j - day) / 365;                  /* whole years since 1968 */
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0006 0050     jday = j - (yrs * 365) - day;           /* days since 1/1 of current year */
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0006 0051     if(tmp <= 365 && tmp >= 60)             /* if past 2/29 and a leap year then */
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0006 0052     jday++;                                 /* add a leap day */
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0006 0053     yrs += 1968;                            /* calculate year */
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0006 0054     for(mon = 12; mon > 0; mon--)
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0006 0055     {
; 0006 0056         switch(mon)
;PCODE: $000000C1 VOL: 0
; 0006 0057         {
; 0006 0058             case 1:     tmp = 0;
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0006 0059                         break;
;PCODE: $000000C6 VOL: 0
; 0006 005A             case 2:     tmp = 31;
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0006 005B                         break;
;PCODE: $000000CC VOL: 0
; 0006 005C             case 3:     tmp = 59;
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0006 005D                         break;
;PCODE: $000000D2 VOL: 0
; 0006 005E             case 4:     tmp = 90;
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0006 005F                         break;
;PCODE: $000000D8 VOL: 0
; 0006 0060             case 5:     tmp = 120;
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0006 0061                         break;
;PCODE: $000000DE VOL: 0
; 0006 0062             case 6:     tmp = 151;
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0006 0063                         break;
;PCODE: $000000E4 VOL: 0
; 0006 0064             case 7:     tmp = 181;
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0006 0065                         break;
;PCODE: $000000EA VOL: 0
; 0006 0066             case 8:     tmp = 212;
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0006 0067                         break;
;PCODE: $000000F0 VOL: 0
; 0006 0068             case 9:     tmp = 243;
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0006 0069                         break;
;PCODE: $000000F6 VOL: 0
; 0006 006A             case 10:    tmp = 273;
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0006 006B                         break;
;PCODE: $000000FC VOL: 0
; 0006 006C             case 11:    tmp = 304;
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0006 006D                         break;
;PCODE: $00000102 VOL: 0
; 0006 006E             case 12:    tmp = 334;
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0006 006F                         break;
;PCODE: $00000108 VOL: 0
; 0006 0070         }
;PCODE: $00000109 VOL: 0
; 0006 0071         if((mon > 2) && !(yrs % 4))         /* adjust for leap year */
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0006 0072         tmp++;
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0006 0073         if(jday >= tmp) break;
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0006 0074     }
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0006 0075     day = jday - tmp + 1;                   /* calculate day in month */
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0006 0076 
; 0006 0077     rtcCov->year    = yrs;
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0006 0078     rtcCov->month   = mon;
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0006 0079     rtcCov->date    = day;
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0006 007A     rtcCov->hour    = hrs;
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0006 007B     rtcCov->min     = min;
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0006 007C     rtcCov->sec     = sec;
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0006 007D     rtcCov->day     = dow;
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0006 007E 
; 0006 007F     return 0;
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0006 0080 }
;PCODE: $00000145 VOL: 0
;/*============================================================*/
;unsigned long int date_to_binary(struct rtc_structure rtcSrc)
; 0006 0083 {
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0006 0084     /* ---- convert date to elapsed days in binary ---- */
; 0006 0085     unsigned long x;                                        // total second
; 0006 0086 
; 0006 0087     /* the following is broken down for clarity */
; 0006 0088     x = (unsigned long)365 * (rtcSrc.year - 1970);          /* calculate number of days for previous years */
;PCODE: $00000148 VOL: 0
;	rtcSrc -> Y+4
;	x -> Y+0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0006 0089     x += ((rtcSrc.year - 1969) >> 2);                       /* add a day for each leap year */
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0006 008A     if((rtcSrc.month > 2) && (rtcSrc.year % 4 == 0))        /* add a day if current year is leap and past Feb 29th */
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0006 008B         x++;
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0006 008C 
; 0006 008D     switch(rtcSrc.month)
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0006 008E     {
; 0006 008F         case 1:     x += 0;
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0006 0090                     break;
;PCODE: $00000168 VOL: 0
; 0006 0091         case 2:     x += 31;
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0006 0092                     break;
;PCODE: $0000016F VOL: 0
; 0006 0093         case 3:     x += 59;
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0006 0094                     break;
;PCODE: $00000176 VOL: 0
; 0006 0095         case 4:     x += 90;
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0006 0096                     break;
;PCODE: $0000017D VOL: 0
; 0006 0097         case 5:     x += 120;
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0006 0098                     break;
;PCODE: $00000184 VOL: 0
; 0006 0099         case 6:     x += 151;
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0006 009A                     break;
;PCODE: $0000018B VOL: 0
; 0006 009B         case 7:     x += 181;
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0006 009C                     break;
;PCODE: $00000192 VOL: 0
; 0006 009D         case 8:     x += 212;
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0006 009E                     break;
;PCODE: $00000199 VOL: 0
; 0006 009F         case 9:     x += 243;
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0006 00A0                     break;
;PCODE: $000001A0 VOL: 0
; 0006 00A1         case 10:    x += 273;
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
; 0006 00A2                     break;
;PCODE: $000001A7 VOL: 0
; 0006 00A3         case 11:    x += 304;
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0006 00A4                     break;
;PCODE: $000001AE VOL: 0
; 0006 00A5         case 12:    x += 334;
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0006 00A6                     break;
;PCODE: $000001B5 VOL: 0
; 0006 00A7     }
;PCODE: $000001B6 VOL: 0
; 0006 00A8 
; 0006 00A9     x += rtcSrc.date - 1;                       /* finally, add the days into the current month */
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0006 00AA     x = x * 86400;                              /* and calculate the number of seconds in all those days (1 day = 86400 second)*/
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0006 00AB     x += (unsigned long)rtcSrc.hour * 1800;     /* add the number of seconds in the hours */
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
; 0006 00AC     x += (unsigned long)rtcSrc.hour * 1800;     /* add the number of seconds in the hours */
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
; 0006 00AD     x += (unsigned long)rtcSrc.min * 60;        /* ditto the minutes */
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
; 0006 00AE     x += rtcSrc.sec;                            /* finally, the seconds */
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
; 0006 00AF 
; 0006 00B0     return(x);
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0006 00B1 }
;PCODE: $000001D9 VOL: 0
;/*============================================================*/
;int RTC_setBinary(unsigned long int rtc_bin)
; 0006 00B4 {
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0006 00B5     unsigned long int rtc_current;
; 0006 00B6     unsigned long int rtc_diff;
; 0006 00B7     unsigned char a, b, c, d;
; 0006 00B8 
; 0006 00B9     rtc_current = DS1672_read();
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;	rtc_bin -> Y+12
;	rtc_current -> Y+8
;	rtc_diff -> Y+4
;	a -> R17
;	b -> R16
;	c -> R19
;	d -> R18
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0006 00BA 
; 0006 00BB     if(rtc_current > rtc_bin){
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
; 0006 00BC         rtc_diff = (unsigned long int) (rtc_current - rtc_bin);
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
; 0006 00BD     }
; 0006 00BE     else if(rtc_bin > rtc_current){
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
; 0006 00BF         rtc_diff = (unsigned long int) (rtc_bin - rtc_current);
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0006 00C0     }
; 0006 00C1     else{
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
; 0006 00C2         // set value and current value are equal
; 0006 00C3         //printDebug("\r\nset time and current time are equal\r\n");
; 0006 00C4         rtc_diff = 0;
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
; 0006 00C5     }
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
; 0006 00C6 
; 0006 00C7     if((rtc_diff >= 0) && (rtc_diff < 10)){
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
; 0006 00C8         //printDebug("\r\nset time is too close to current time, not set!!!\r\n");
; 0006 00C9         //printDebug("\r\nset time is too close to current time, not set!!! c[%ld] s[%ld]\r\n", rtc_current, rtc_bin);
; 0006 00CA         return -1;
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
; 0006 00CB     }
; 0006 00CC 
; 0006 00CD     printDebug("c_time[%ld] & s_time[%ld] => diff[%ld]\r\n",rtc_current,rtc_bin,rtc_diff);
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
; 0006 00CE 
; 0006 00CF     a = (rtc_bin & 0xff);
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
; 0006 00D0     b = ((rtc_bin >> 8) & 0xff);
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
; 0006 00D1     c = ((rtc_bin >> 16) & 0xff);
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
; 0006 00D2     d = ((rtc_bin >> 24) & 0xff);
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
; 0006 00D3 
; 0006 00D4     #asm("cli")
;PCODE: $00000226 VOL: 0
	cli
;PCODE: $00000227 VOL: 0
; 0006 00D5     i2c_start();
;PCODE: $00000228 VOL: 0
; 0006 00D6     i2c_write(ADDRTC);          /* write slave address, write 1672 */
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
; 0006 00D7     i2c_write(0x00);            /* write register address, 1st clock register */
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
; 0006 00D8     i2c_write(a);
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
; 0006 00D9     i2c_write(b);
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
; 0006 00DA     i2c_write(c);
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
; 0006 00DB     i2c_write(d);
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
; 0006 00DC     i2c_stop();
;PCODE: $00000235 VOL: 0
; 0006 00DD     #asm("sei")
;PCODE: $00000236 VOL: 0
	sei
;PCODE: $00000237 VOL: 0
; 0006 00DE 
; 0006 00DF     printDebug(">> RTC_setBinary RTC Sync.\r\n");
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
; 0006 00E0 
; 0006 00E1     /* 10ms delay to complete the write operation */
; 0006 00E2     delay_ms(10);
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
; 0006 00E3 
; 0006 00E4     return 0;
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
; 0006 00E5 }
;PCODE: $00000246 VOL: 0
;/*============================================================*/
;int RTC_setDateTime(struct rtc_structure rtcSrc,int timezone)
; 0006 00E8 {
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
; 0006 00E9     unsigned long int rtc_bin;
; 0006 00EA     unsigned long int rtc_current;
; 0006 00EB     unsigned long int rtc_diff;
; 0006 00EC     unsigned char a, b, c, d;
; 0006 00ED 
; 0006 00EE     if((timezone > 14) || (timezone < -12)){
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;	rtcSrc -> Y+18
;	timezone -> Y+16
;	rtc_bin -> Y+12
;	rtc_current -> Y+8
;	rtc_diff -> Y+4
;	a -> R17
;	b -> R16
;	c -> R19
;	d -> R18
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
; 0006 00EF         printDebug("<RTC_setDateTime> Timezone out of range (%+d)\r\n",timezone);
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
; 0006 00F0         return -2;
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
; 0006 00F1     }
; 0006 00F2 
; 0006 00F3     rtc_bin = date_to_binary(rtcSrc);
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
; 0006 00F4 
; 0006 00F5     rtc_bin = rtc_bin + (int)(timezone * 60 * 60 * -1);
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
; 0006 00F6 
; 0006 00F7     raw_rtc = rtc_bin;
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
; 0006 00F8 
; 0006 00F9     rtc_current = DS1672_read();
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
; 0006 00FA 
; 0006 00FB     if(rtc_current > rtc_bin){
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
; 0006 00FC         rtc_diff = (unsigned long int) (rtc_current - rtc_bin);
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
; 0006 00FD     }
; 0006 00FE     else if(rtc_bin > rtc_current){
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
; 0006 00FF         rtc_diff = (unsigned long int) (rtc_bin - rtc_current);
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
; 0006 0100     }
; 0006 0101     else{
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
; 0006 0102         // set value and current value are equal
; 0006 0103         rtc_diff = 0;
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
; 0006 0104     }
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
; 0006 0105 
; 0006 0106     if((rtc_diff >= 0) && (rtc_diff < 10)){
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
; 0006 0107         //printDebug("\r\nset time is too close to current time, not set!!! c[%ld] s[%ld]\r\n", rtc_current, rtc_bin);
; 0006 0108         return -1;
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
; 0006 0109     }
; 0006 010A 
; 0006 010B     printDebug("c_time[%ld] & s_time[%ld] => diff[%ld]\r\n",rtc_current,rtc_bin,rtc_diff);
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
; 0006 010C 
; 0006 010D     a = (rtc_bin & 0xff);
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
; 0006 010E     b = ((rtc_bin >> 8) & 0xff);
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
; 0006 010F     c = ((rtc_bin >> 16) & 0xff);
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
; 0006 0110     d = ((rtc_bin >> 24) & 0xff);
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
; 0006 0111 
; 0006 0112     #asm("cli")
;PCODE: $000002BB VOL: 0
	cli
;PCODE: $000002BC VOL: 0
; 0006 0113     i2c_start();
;PCODE: $000002BD VOL: 0
; 0006 0114     i2c_write(ADDRTC);          /* write slave address, write 1672 */
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
; 0006 0115     i2c_write(0x00);            /* write register address, 1st clock register */
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
; 0006 0116     i2c_write(a);
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
; 0006 0117     i2c_write(b);
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
; 0006 0118     i2c_write(c);
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
; 0006 0119     i2c_write(d);
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
; 0006 011A     i2c_stop();
;PCODE: $000002CA VOL: 0
; 0006 011B     #asm("sei")
;PCODE: $000002CB VOL: 0
	sei
;PCODE: $000002CC VOL: 0
; 0006 011C 
; 0006 011D     /* 10ms delay to complete the write operation */
; 0006 011E     delay_ms(10);
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
; 0006 011F 
; 0006 0120     return 0;
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
; 0006 0121 }
;PCODE: $000002D4 VOL: 0
;/*============================================================*/
;int RTC_getDateTime(struct rtc_structure *rtcPtr, int timezone)
; 0006 0124 {
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
; 0006 0125     unsigned long r_rtc;
; 0006 0126     int flag;
; 0006 0127 
; 0006 0128     r_rtc = DS1672_read();
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;	*rtcPtr -> Y+8
;	timezone -> Y+6
;	r_rtc -> Y+2
;	flag -> R16,R17
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
; 0006 0129     if(r_rtc == 0xFFFFFFFF){
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
; 0006 012A         flag    = RTC_BACKUP;
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
; 0006 012B         r_rtc   = raw_rtc;
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
; 0006 012C     }
; 0006 012D     else{
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
; 0006 012E         flag    = RTC_REAL;
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
; 0006 012F         raw_rtc = r_rtc;
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
; 0006 0130     }
;PCODE: $000002EA VOL: 0
; 0006 0131 
; 0006 0132     r_rtc = r_rtc + (int)(timezone * 60 * 60);
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
; 0006 0133 
; 0006 0134     binary_to_date(r_rtc,rtcPtr);
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
; 0006 0135 
; 0006 0136     return flag;
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
; 0006 0137 }
;PCODE: $000002FF VOL: 0
;/*============================================================*/
;void printRTC(struct rtc_structure time)
; 0006 013A {
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
; 0006 013B     switch(time.day){
;	time -> Y+0
;PCODE: $00000302 VOL: 0
; 0006 013C         case DAY_MON: printDebug("Mon. "); break;
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
; 0006 013D         case DAY_TUE: printDebug("Tue. "); break;
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
; 0006 013E         case DAY_WED: printDebug("Wed. "); break;
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
; 0006 013F         case DAY_THU: printDebug("Thu. "); break;
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
; 0006 0140         case DAY_FRI: printDebug("Fri. "); break;
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
; 0006 0141         case DAY_SAT: printDebug("Sat. "); break;
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
; 0006 0142         case DAY_SUN: printDebug("Sun. "); break;
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
; 0006 0143     }
;PCODE: $0000034F VOL: 0
; 0006 0144 
; 0006 0145     printDebug(
; 0006 0146         "[%d]%04d-%02d-%02d %02d:%02d:%02d\r\n",
; 0006 0147         time.day,
; 0006 0148         time.year,
; 0006 0149         time.month,
; 0006 014A         time.date,
; 0006 014B         time.hour,
; 0006 014C         time.min,
; 0006 014D         time.sec
; 0006 014E     );
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
; 0006 014F     return;
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
; 0006 0150 }
;PCODE: $00000368 VOL: 0
;/*============================================================*/
;void init_RTC(void)
; 0006 0153 {
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
; 0006 0154     struct rtc_structure rtcTest;
; 0006 0155 
; 0006 0156     raw_rtc = 0;            /* initial default time_value in RAM */
;PCODE: $0000036B VOL: 0
;	rtcTest -> Y+0
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
; 0006 0157 
; 0006 0158     #asm("cli")
;PCODE: $0000036E VOL: 0
	cli
;PCODE: $0000036F VOL: 0
; 0006 0159     i2c_start();
;PCODE: $00000370 VOL: 0
; 0006 015A     i2c_write(ADDRTC);
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
; 0006 015B     i2c_write(0x04);
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
; 0006 015C     i2c_write(0x00);         /* enable the oscillator */
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
; 0006 015D     i2c_stop();
;PCODE: $00000377 VOL: 0
; 0006 015E     #asm("sei")
;PCODE: $00000378 VOL: 0
	sei
;PCODE: $00000379 VOL: 0
; 0006 015F 
; 0006 0160     DS1672_trickerChargeEnable();
;PCODE: $0000037A VOL: 0
; 0006 0161 
; 0006 0162     RTC_getDateTime(&rtcTest,0);
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
; 0006 0163 
; 0006 0164     printDebug("Running with System Clock @ ");
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
; 0006 0165 
; 0006 0166     printRTC(rtcTest);
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
; 0006 0167 }
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
;PCODE: $0000038C VOL: 0
