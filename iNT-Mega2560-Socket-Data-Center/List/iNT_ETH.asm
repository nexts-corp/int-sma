
;CodeVisionAVR C Compiler V2.05.3 Standard
;(C) Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com

;Chip type                : ATmega2560
;Program type             : Application
;Clock frequency          : 8.000000 MHz
;Memory model             : Large
;Optimize for             : Size
;(s)printf features       : float, width, precision
;(s)scanf features        : long, width
;External RAM size        : 0
;Data Stack size          : 2800 byte(s)
;Heap size                : 1142 byte(s)
;Promote 'char' to 'int'  : Yes
;'char' is unsigned       : Yes
;8 bit enums              : Yes
;Global 'const' stored in FLASH     : Yes
;Enhanced function parameter passing: Yes
;Enhanced core instructions         : On
;Smart register allocation          : On
;Automatic register allocation      : On

	#pragma AVRPART ADMIN PART_NAME ATmega2560
	#pragma AVRPART MEMORY PROG_FLASH 262144
	#pragma AVRPART MEMORY EEPROM 4096
	#pragma AVRPART MEMORY INT_SRAM SIZE 8703
	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x200

	#define CALL_SUPPORTED 1

	.LISTMAC
	.EQU EERE=0x0
	.EQU EEWE=0x1
	.EQU EEMWE=0x2
	.EQU UDRE=0x5
	.EQU RXC=0x7
	.EQU EECR=0x1F
	.EQU EEDR=0x20
	.EQU EEARL=0x21
	.EQU EEARH=0x22
	.EQU SPSR=0x2D
	.EQU SPDR=0x2E
	.EQU SMCR=0x33
	.EQU MCUSR=0x34
	.EQU MCUCR=0x35
	.EQU WDTCSR=0x60
	.EQU UCSR0A=0xC0
	.EQU UDR0=0xC6
	.EQU RAMPZ=0x3B
	.EQU EIND=0x3C
	.EQU SPL=0x3D
	.EQU SPH=0x3E
	.EQU SREG=0x3F
	.EQU XMCRA=0x74
	.EQU XMCRB=0x75
	.EQU GPIOR0=0x1E

	.DEF R0X0=R0
	.DEF R0X1=R1
	.DEF R0X2=R2
	.DEF R0X3=R3
	.DEF R0X4=R4
	.DEF R0X5=R5
	.DEF R0X6=R6
	.DEF R0X7=R7
	.DEF R0X8=R8
	.DEF R0X9=R9
	.DEF R0XA=R10
	.DEF R0XB=R11
	.DEF R0XC=R12
	.DEF R0XD=R13
	.DEF R0XE=R14
	.DEF R0XF=R15
	.DEF R0X10=R16
	.DEF R0X11=R17
	.DEF R0X12=R18
	.DEF R0X13=R19
	.DEF R0X14=R20
	.DEF R0X15=R21
	.DEF R0X16=R22
	.DEF R0X17=R23
	.DEF R0X18=R24
	.DEF R0X19=R25
	.DEF R0X1A=R26
	.DEF R0X1B=R27
	.DEF R0X1C=R28
	.DEF R0X1D=R29
	.DEF R0X1E=R30
	.DEF R0X1F=R31

	.EQU __SRAM_START=0x0200
	.EQU __SRAM_END=0x21FF
	.EQU __DSTACK_SIZE=0x0AF0
	.EQU __HEAP_SIZE=0x0476
	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1

	.MACRO __CPD1N
	CPI  R30,LOW(@0)
	LDI  R26,HIGH(@0)
	CPC  R31,R26
	LDI  R26,BYTE3(@0)
	CPC  R22,R26
	LDI  R26,BYTE4(@0)
	CPC  R23,R26
	.ENDM

	.MACRO __CPD2N
	CPI  R26,LOW(@0)
	LDI  R30,HIGH(@0)
	CPC  R27,R30
	LDI  R30,BYTE3(@0)
	CPC  R24,R30
	LDI  R30,BYTE4(@0)
	CPC  R25,R30
	.ENDM

	.MACRO __CPWRR
	CP   R@0,R@2
	CPC  R@1,R@3
	.ENDM

	.MACRO __CPWRN
	CPI  R@0,LOW(@2)
	LDI  R30,HIGH(@2)
	CPC  R@1,R30
	.ENDM

	.MACRO __ADDB1MN
	SUBI R30,LOW(-@0-(@1))
	.ENDM

	.MACRO __ADDB2MN
	SUBI R26,LOW(-@0-(@1))
	.ENDM

	.MACRO __ADDW1MN
	SUBI R30,LOW(-@0-(@1))
	SBCI R31,HIGH(-@0-(@1))
	.ENDM

	.MACRO __ADDW2MN
	SUBI R26,LOW(-@0-(@1))
	SBCI R27,HIGH(-@0-(@1))
	.ENDM

	.MACRO __ADDW1FN
	SUBI R30,LOW(-2*@0-(@1))
	SBCI R31,HIGH(-2*@0-(@1))
	.ENDM

	.MACRO __ADDD1FN
	SUBI R30,LOW(-2*@0-(@1))
	SBCI R31,HIGH(-2*@0-(@1))
	SBCI R22,BYTE3(-2*@0-(@1))
	.ENDM

	.MACRO __ADDD1N
	SUBI R30,LOW(-@0)
	SBCI R31,HIGH(-@0)
	SBCI R22,BYTE3(-@0)
	SBCI R23,BYTE4(-@0)
	.ENDM

	.MACRO __ADDD2N
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	SBCI R24,BYTE3(-@0)
	SBCI R25,BYTE4(-@0)
	.ENDM

	.MACRO __SUBD1N
	SUBI R30,LOW(@0)
	SBCI R31,HIGH(@0)
	SBCI R22,BYTE3(@0)
	SBCI R23,BYTE4(@0)
	.ENDM

	.MACRO __SUBD2N
	SUBI R26,LOW(@0)
	SBCI R27,HIGH(@0)
	SBCI R24,BYTE3(@0)
	SBCI R25,BYTE4(@0)
	.ENDM

	.MACRO __ANDBMNN
	LDS  R30,@0+(@1)
	ANDI R30,LOW(@2)
	STS  @0+(@1),R30
	.ENDM

	.MACRO __ANDWMNN
	LDS  R30,@0+(@1)
	ANDI R30,LOW(@2)
	STS  @0+(@1),R30
	LDS  R30,@0+(@1)+1
	ANDI R30,HIGH(@2)
	STS  @0+(@1)+1,R30
	.ENDM

	.MACRO __ANDD1N
	ANDI R30,LOW(@0)
	ANDI R31,HIGH(@0)
	ANDI R22,BYTE3(@0)
	ANDI R23,BYTE4(@0)
	.ENDM

	.MACRO __ANDD2N
	ANDI R26,LOW(@0)
	ANDI R27,HIGH(@0)
	ANDI R24,BYTE3(@0)
	ANDI R25,BYTE4(@0)
	.ENDM

	.MACRO __ORBMNN
	LDS  R30,@0+(@1)
	ORI  R30,LOW(@2)
	STS  @0+(@1),R30
	.ENDM

	.MACRO __ORWMNN
	LDS  R30,@0+(@1)
	ORI  R30,LOW(@2)
	STS  @0+(@1),R30
	LDS  R30,@0+(@1)+1
	ORI  R30,HIGH(@2)
	STS  @0+(@1)+1,R30
	.ENDM

	.MACRO __ORD1N
	ORI  R30,LOW(@0)
	ORI  R31,HIGH(@0)
	ORI  R22,BYTE3(@0)
	ORI  R23,BYTE4(@0)
	.ENDM

	.MACRO __ORD2N
	ORI  R26,LOW(@0)
	ORI  R27,HIGH(@0)
	ORI  R24,BYTE3(@0)
	ORI  R25,BYTE4(@0)
	.ENDM

	.MACRO __DELAY_USB
	LDI  R24,LOW(@0)
__DELAY_USB_LOOP:
	DEC  R24
	BRNE __DELAY_USB_LOOP
	.ENDM

	.MACRO __DELAY_USW
	LDI  R24,LOW(@0)
	LDI  R25,HIGH(@0)
__DELAY_USW_LOOP:
	SBIW R24,1
	BRNE __DELAY_USW_LOOP
	.ENDM

	.MACRO __GETD1S
	LDD  R30,Y+@0
	LDD  R31,Y+@0+1
	LDD  R22,Y+@0+2
	LDD  R23,Y+@0+3
	.ENDM

	.MACRO __GETD2S
	LDD  R26,Y+@0
	LDD  R27,Y+@0+1
	LDD  R24,Y+@0+2
	LDD  R25,Y+@0+3
	.ENDM

	.MACRO __PUTD1S
	STD  Y+@0,R30
	STD  Y+@0+1,R31
	STD  Y+@0+2,R22
	STD  Y+@0+3,R23
	.ENDM

	.MACRO __PUTD2S
	STD  Y+@0,R26
	STD  Y+@0+1,R27
	STD  Y+@0+2,R24
	STD  Y+@0+3,R25
	.ENDM

	.MACRO __PUTDZ2
	STD  Z+@0,R26
	STD  Z+@0+1,R27
	STD  Z+@0+2,R24
	STD  Z+@0+3,R25
	.ENDM

	.MACRO __CLRD1S
	STD  Y+@0,R30
	STD  Y+@0+1,R30
	STD  Y+@0+2,R30
	STD  Y+@0+3,R30
	.ENDM

	.MACRO __POINTB1MN
	LDI  R30,LOW(@0+(@1))
	.ENDM

	.MACRO __POINTW1MN
	LDI  R30,LOW(@0+(@1))
	LDI  R31,HIGH(@0+(@1))
	.ENDM

	.MACRO __POINTD1M
	LDI  R30,LOW(@0)
	LDI  R31,HIGH(@0)
	LDI  R22,BYTE3(@0)
	LDI  R23,BYTE4(@0)
	.ENDM

	.MACRO __POINTW1FN
	LDI  R30,LOW(2*@0+(@1))
	LDI  R31,HIGH(2*@0+(@1))
	.ENDM

	.MACRO __POINTD1FN
	LDI  R30,LOW(2*@0+(@1))
	LDI  R31,HIGH(2*@0+(@1))
	LDI  R22,BYTE3(2*@0+(@1))
	LDI  R23,BYTE4(2*@0+(@1))
	.ENDM

	.MACRO __POINTB2MN
	LDI  R26,LOW(@0+(@1))
	.ENDM

	.MACRO __POINTW2MN
	LDI  R26,LOW(@0+(@1))
	LDI  R27,HIGH(@0+(@1))
	.ENDM

	.MACRO __POINTW2FN
	LDI  R26,LOW(2*@0+(@1))
	LDI  R27,HIGH(2*@0+(@1))
	.ENDM

	.MACRO __POINTD2FN
	LDI  R26,LOW(2*@0+(@1))
	LDI  R27,HIGH(2*@0+(@1))
	LDI  R24,BYTE3(2*@0+(@1))
	LDI  R25,BYTE4(2*@0+(@1))
	.ENDM

	.MACRO __POINTBRM
	LDI  R@0,LOW(@1)
	.ENDM

	.MACRO __POINTWRM
	LDI  R@0,LOW(@2)
	LDI  R@1,HIGH(@2)
	.ENDM

	.MACRO __POINTBRMN
	LDI  R@0,LOW(@1+(@2))
	.ENDM

	.MACRO __POINTWRMN
	LDI  R@0,LOW(@2+(@3))
	LDI  R@1,HIGH(@2+(@3))
	.ENDM

	.MACRO __POINTWRFN
	LDI  R@0,LOW(@2*2+(@3))
	LDI  R@1,HIGH(@2*2+(@3))
	.ENDM

	.MACRO __GETD1N
	LDI  R30,LOW(@0)
	LDI  R31,HIGH(@0)
	LDI  R22,BYTE3(@0)
	LDI  R23,BYTE4(@0)
	.ENDM

	.MACRO __GETD2N
	LDI  R26,LOW(@0)
	LDI  R27,HIGH(@0)
	LDI  R24,BYTE3(@0)
	LDI  R25,BYTE4(@0)
	.ENDM

	.MACRO __GETB1MN
	LDS  R30,@0+(@1)
	.ENDM

	.MACRO __GETB1HMN
	LDS  R31,@0+(@1)
	.ENDM

	.MACRO __GETW1MN
	LDS  R30,@0+(@1)
	LDS  R31,@0+(@1)+1
	.ENDM

	.MACRO __GETD1MN
	LDS  R30,@0+(@1)
	LDS  R31,@0+(@1)+1
	LDS  R22,@0+(@1)+2
	LDS  R23,@0+(@1)+3
	.ENDM

	.MACRO __GETBRMN
	LDS  R@0,@1+(@2)
	.ENDM

	.MACRO __GETWRMN
	LDS  R@0,@2+(@3)
	LDS  R@1,@2+(@3)+1
	.ENDM

	.MACRO __GETWRZ
	LDD  R@0,Z+@2
	LDD  R@1,Z+@2+1
	.ENDM

	.MACRO __GETD2Z
	LDD  R26,Z+@0
	LDD  R27,Z+@0+1
	LDD  R24,Z+@0+2
	LDD  R25,Z+@0+3
	.ENDM

	.MACRO __GETB2MN
	LDS  R26,@0+(@1)
	.ENDM

	.MACRO __GETW2MN
	LDS  R26,@0+(@1)
	LDS  R27,@0+(@1)+1
	.ENDM

	.MACRO __GETD2MN
	LDS  R26,@0+(@1)
	LDS  R27,@0+(@1)+1
	LDS  R24,@0+(@1)+2
	LDS  R25,@0+(@1)+3
	.ENDM

	.MACRO __PUTB1MN
	STS  @0+(@1),R30
	.ENDM

	.MACRO __PUTW1MN
	STS  @0+(@1),R30
	STS  @0+(@1)+1,R31
	.ENDM

	.MACRO __PUTD1MN
	STS  @0+(@1),R30
	STS  @0+(@1)+1,R31
	STS  @0+(@1)+2,R22
	STS  @0+(@1)+3,R23
	.ENDM

	.MACRO __PUTB1EN
	LDI  R26,LOW(@0+(@1))
	LDI  R27,HIGH(@0+(@1))
	CALL __EEPROMWRB
	.ENDM

	.MACRO __PUTW1EN
	LDI  R26,LOW(@0+(@1))
	LDI  R27,HIGH(@0+(@1))
	CALL __EEPROMWRW
	.ENDM

	.MACRO __PUTD1EN
	LDI  R26,LOW(@0+(@1))
	LDI  R27,HIGH(@0+(@1))
	CALL __EEPROMWRD
	.ENDM

	.MACRO __PUTBR0MN
	STS  @0+(@1),R0
	.ENDM

	.MACRO __PUTBMRN
	STS  @0+(@1),R@2
	.ENDM

	.MACRO __PUTWMRN
	STS  @0+(@1),R@2
	STS  @0+(@1)+1,R@3
	.ENDM

	.MACRO __PUTBZR
	STD  Z+@1,R@0
	.ENDM

	.MACRO __PUTWZR
	STD  Z+@2,R@0
	STD  Z+@2+1,R@1
	.ENDM

	.MACRO __GETW1R
	MOV  R30,R@0
	MOV  R31,R@1
	.ENDM

	.MACRO __GETW2R
	MOV  R26,R@0
	MOV  R27,R@1
	.ENDM

	.MACRO __GETWRN
	LDI  R@0,LOW(@2)
	LDI  R@1,HIGH(@2)
	.ENDM

	.MACRO __PUTW1R
	MOV  R@0,R30
	MOV  R@1,R31
	.ENDM

	.MACRO __PUTW2R
	MOV  R@0,R26
	MOV  R@1,R27
	.ENDM

	.MACRO __ADDWRN
	SUBI R@0,LOW(-@2)
	SBCI R@1,HIGH(-@2)
	.ENDM

	.MACRO __ADDWRR
	ADD  R@0,R@2
	ADC  R@1,R@3
	.ENDM

	.MACRO __SUBWRN
	SUBI R@0,LOW(@2)
	SBCI R@1,HIGH(@2)
	.ENDM

	.MACRO __SUBWRR
	SUB  R@0,R@2
	SBC  R@1,R@3
	.ENDM

	.MACRO __ANDWRN
	ANDI R@0,LOW(@2)
	ANDI R@1,HIGH(@2)
	.ENDM

	.MACRO __ANDWRR
	AND  R@0,R@2
	AND  R@1,R@3
	.ENDM

	.MACRO __ORWRN
	ORI  R@0,LOW(@2)
	ORI  R@1,HIGH(@2)
	.ENDM

	.MACRO __ORWRR
	OR   R@0,R@2
	OR   R@1,R@3
	.ENDM

	.MACRO __EORWRR
	EOR  R@0,R@2
	EOR  R@1,R@3
	.ENDM

	.MACRO __GETWRS
	LDD  R@0,Y+@2
	LDD  R@1,Y+@2+1
	.ENDM

	.MACRO __PUTBSR
	STD  Y+@1,R@0
	.ENDM

	.MACRO __PUTWSR
	STD  Y+@2,R@0
	STD  Y+@2+1,R@1
	.ENDM

	.MACRO __MOVEWRR
	MOV  R@0,R@2
	MOV  R@1,R@3
	.ENDM

	.MACRO __INWR
	IN   R@0,@2
	IN   R@1,@2+1
	.ENDM

	.MACRO __OUTWR
	OUT  @2+1,R@1
	OUT  @2,R@0
	.ENDM

	.MACRO __GETBRPF
	OUT  RAMPZ,R22
	ELPM R@0,Z
	.ENDM

	.MACRO __GETBRPF_INC
	OUT  RAMPZ,R22
	ELPM R@0,Z+
	.ENDM

	.MACRO __CALL1MN
	LDS  R30,@0+(@1)
	LDS  R31,@0+(@1)+1
	LDS  R22,@0+(@1)+2
	OUT  EIND,R22
	EICALL
	.ENDM

	.MACRO __CALL1FN
	LDI  R30,LOW(2*@0+(@1))
	LDI  R31,HIGH(2*@0+(@1))
	LDI  R22,BYTE3(2*@0+(@1))
	CALL __GETD1PF
	OUT  EIND,R22
	EICALL
	.ENDM

	.MACRO __CALL1FX
	SUBI R30,LOW(-@0)
	SBCI R31,HIGH(-@0)
	SBCI R22,BYTE3(-@0)
	CALL __GETD1PF
	OUT  EIND,R22
	EICALL
	.ENDM

	.MACRO __CALL2EN
	LDI  R26,LOW(@0+(@1))
	LDI  R27,HIGH(@0+(@1))
	CALL __EEPROMRDD
	OUT  EIND,R22
	EICALL
	.ENDM

	.MACRO __CALL2EX
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	CALL __EEPROMRDD
	OUT  EIND,R22
	EICALL
	.ENDM

	.MACRO __GETW1STACK
	IN   R26,SPL
	IN   R27,SPH
	ADIW R26,@0+1
	LD   R30,X+
	LD   R31,X
	.ENDM

	.MACRO __GETD1STACK
	IN   R26,SPL
	IN   R27,SPH
	ADIW R26,@0+1
	LD   R30,X+
	LD   R31,X+
	LD   R22,X
	.ENDM

	.MACRO __NBST
	BST  R@0,@1
	IN   R30,SREG
	LDI  R31,0x40
	EOR  R30,R31
	OUT  SREG,R30
	.ENDM


	.MACRO __PUTB1SN
	LDD  R26,Y+@0
	LDD  R27,Y+@0+1
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	ST   X,R30
	.ENDM

	.MACRO __PUTW1SN
	LDD  R26,Y+@0
	LDD  R27,Y+@0+1
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	ST   X+,R30
	ST   X,R31
	.ENDM

	.MACRO __PUTD1SN
	LDD  R26,Y+@0
	LDD  R27,Y+@0+1
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	CALL __PUTDP1
	.ENDM

	.MACRO __PUTB1SNS
	LDD  R26,Y+@0
	LDD  R27,Y+@0+1
	ADIW R26,@1
	ST   X,R30
	.ENDM

	.MACRO __PUTW1SNS
	LDD  R26,Y+@0
	LDD  R27,Y+@0+1
	ADIW R26,@1
	ST   X+,R30
	ST   X,R31
	.ENDM

	.MACRO __PUTD1SNS
	LDD  R26,Y+@0
	LDD  R27,Y+@0+1
	ADIW R26,@1
	CALL __PUTDP1
	.ENDM

	.MACRO __PUTB1PMN
	LDS  R26,@0
	LDS  R27,@0+1
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	ST   X,R30
	.ENDM

	.MACRO __PUTW1PMN
	LDS  R26,@0
	LDS  R27,@0+1
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	ST   X+,R30
	ST   X,R31
	.ENDM

	.MACRO __PUTD1PMN
	LDS  R26,@0
	LDS  R27,@0+1
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	CALL __PUTDP1
	.ENDM

	.MACRO __PUTB1PMNS
	LDS  R26,@0
	LDS  R27,@0+1
	ADIW R26,@1
	ST   X,R30
	.ENDM

	.MACRO __PUTW1PMNS
	LDS  R26,@0
	LDS  R27,@0+1
	ADIW R26,@1
	ST   X+,R30
	ST   X,R31
	.ENDM

	.MACRO __PUTD1PMNS
	LDS  R26,@0
	LDS  R27,@0+1
	ADIW R26,@1
	CALL __PUTDP1
	.ENDM

	.MACRO __PUTB1RN
	MOVW R26,R@0
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	ST   X,R30
	.ENDM

	.MACRO __PUTW1RN
	MOVW R26,R@0
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	ST   X+,R30
	ST   X,R31
	.ENDM

	.MACRO __PUTD1RN
	MOVW R26,R@0
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	CALL __PUTDP1
	.ENDM

	.MACRO __PUTB1RNS
	MOVW R26,R@0
	ADIW R26,@1
	ST   X,R30
	.ENDM

	.MACRO __PUTW1RNS
	MOVW R26,R@0
	ADIW R26,@1
	ST   X+,R30
	ST   X,R31
	.ENDM

	.MACRO __PUTD1RNS
	MOVW R26,R@0
	ADIW R26,@1
	CALL __PUTDP1
	.ENDM

	.MACRO __PUTB1RON
	MOV  R26,R@0
	MOV  R27,R@1
	SUBI R26,LOW(-@2)
	SBCI R27,HIGH(-@2)
	ST   X,R30
	.ENDM

	.MACRO __PUTW1RON
	MOV  R26,R@0
	MOV  R27,R@1
	SUBI R26,LOW(-@2)
	SBCI R27,HIGH(-@2)
	ST   X+,R30
	ST   X,R31
	.ENDM

	.MACRO __PUTD1RON
	MOV  R26,R@0
	MOV  R27,R@1
	SUBI R26,LOW(-@2)
	SBCI R27,HIGH(-@2)
	CALL __PUTDP1
	.ENDM

	.MACRO __PUTB1RONS
	MOV  R26,R@0
	MOV  R27,R@1
	ADIW R26,@2
	ST   X,R30
	.ENDM

	.MACRO __PUTW1RONS
	MOV  R26,R@0
	MOV  R27,R@1
	ADIW R26,@2
	ST   X+,R30
	ST   X,R31
	.ENDM

	.MACRO __PUTD1RONS
	MOV  R26,R@0
	MOV  R27,R@1
	ADIW R26,@2
	CALL __PUTDP1
	.ENDM


	.MACRO __GETB1SX
	MOVW R30,R28
	SUBI R30,LOW(-@0)
	SBCI R31,HIGH(-@0)
	LD   R30,Z
	.ENDM

	.MACRO __GETB1HSX
	MOVW R30,R28
	SUBI R30,LOW(-@0)
	SBCI R31,HIGH(-@0)
	LD   R31,Z
	.ENDM

	.MACRO __GETW1SX
	MOVW R30,R28
	SUBI R30,LOW(-@0)
	SBCI R31,HIGH(-@0)
	LD   R0,Z+
	LD   R31,Z
	MOV  R30,R0
	.ENDM

	.MACRO __GETD1SX
	MOVW R30,R28
	SUBI R30,LOW(-@0)
	SBCI R31,HIGH(-@0)
	LD   R0,Z+
	LD   R1,Z+
	LD   R22,Z+
	LD   R23,Z
	MOVW R30,R0
	.ENDM

	.MACRO __GETB2SX
	MOVW R26,R28
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	LD   R26,X
	.ENDM

	.MACRO __GETW2SX
	MOVW R26,R28
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	LD   R0,X+
	LD   R27,X
	MOV  R26,R0
	.ENDM

	.MACRO __GETD2SX
	MOVW R26,R28
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	LD   R0,X+
	LD   R1,X+
	LD   R24,X+
	LD   R25,X
	MOVW R26,R0
	.ENDM

	.MACRO __GETBRSX
	MOVW R30,R28
	SUBI R30,LOW(-@1)
	SBCI R31,HIGH(-@1)
	LD   R@0,Z
	.ENDM

	.MACRO __GETWRSX
	MOVW R30,R28
	SUBI R30,LOW(-@2)
	SBCI R31,HIGH(-@2)
	LD   R@0,Z+
	LD   R@1,Z
	.ENDM

	.MACRO __GETBRSX2
	MOVW R26,R28
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	LD   R@0,X
	.ENDM

	.MACRO __GETWRSX2
	MOVW R26,R28
	SUBI R26,LOW(-@2)
	SBCI R27,HIGH(-@2)
	LD   R@0,X+
	LD   R@1,X
	.ENDM

	.MACRO __LSLW8SX
	MOVW R30,R28
	SUBI R30,LOW(-@0)
	SBCI R31,HIGH(-@0)
	LD   R31,Z
	CLR  R30
	.ENDM

	.MACRO __PUTB1SX
	MOVW R26,R28
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	ST   X,R30
	.ENDM

	.MACRO __PUTW1SX
	MOVW R26,R28
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	ST   X+,R30
	ST   X,R31
	.ENDM

	.MACRO __PUTD1SX
	MOVW R26,R28
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	ST   X+,R30
	ST   X+,R31
	ST   X+,R22
	ST   X,R23
	.ENDM

	.MACRO __CLRW1SX
	MOVW R26,R28
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	ST   X+,R30
	ST   X,R30
	.ENDM

	.MACRO __CLRD1SX
	MOVW R26,R28
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	ST   X+,R30
	ST   X+,R30
	ST   X+,R30
	ST   X,R30
	.ENDM

	.MACRO __PUTB2SX
	MOVW R30,R28
	SUBI R30,LOW(-@0)
	SBCI R31,HIGH(-@0)
	ST   Z,R26
	.ENDM

	.MACRO __PUTW2SX
	MOVW R30,R28
	SUBI R30,LOW(-@0)
	SBCI R31,HIGH(-@0)
	ST   Z+,R26
	ST   Z,R27
	.ENDM

	.MACRO __PUTD2SX
	MOVW R30,R28
	SUBI R30,LOW(-@0)
	SBCI R31,HIGH(-@0)
	ST   Z+,R26
	ST   Z+,R27
	ST   Z+,R24
	ST   Z,R25
	.ENDM

	.MACRO __PUTBSRX
	MOVW R30,R28
	SUBI R30,LOW(-@1)
	SBCI R31,HIGH(-@1)
	ST   Z,R@0
	.ENDM

	.MACRO __PUTWSRX
	MOVW R30,R28
	SUBI R30,LOW(-@2)
	SBCI R31,HIGH(-@2)
	ST   Z+,R@0
	ST   Z,R@1
	.ENDM

	.MACRO __PUTB1SNX
	MOVW R26,R28
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	LD   R0,X+
	LD   R27,X
	MOV  R26,R0
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	ST   X,R30
	.ENDM

	.MACRO __PUTW1SNX
	MOVW R26,R28
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	LD   R0,X+
	LD   R27,X
	MOV  R26,R0
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	ST   X+,R30
	ST   X,R31
	.ENDM

	.MACRO __PUTD1SNX
	MOVW R26,R28
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	LD   R0,X+
	LD   R27,X
	MOV  R26,R0
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	ST   X+,R30
	ST   X+,R31
	ST   X+,R22
	ST   X,R23
	.ENDM

	.MACRO __MULBRR
	MULS R@0,R@1
	MOVW R30,R0
	.ENDM

	.MACRO __MULBRRU
	MUL  R@0,R@1
	MOVW R30,R0
	.ENDM

	.MACRO __MULBRR0
	MULS R@0,R@1
	.ENDM

	.MACRO __MULBRRU0
	MUL  R@0,R@1
	.ENDM

	.MACRO __MULBNWRU
	LDI  R26,@2
	MUL  R26,R@0
	MOVW R30,R0
	MUL  R26,R@1
	ADD  R31,R0
	.ENDM

;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
	.DEF _rxPackageIndex3=R5
	.DEF _rxPackageIndexCount3=R4
	.DEF _ETH_waitQCount=R7
	.DEF _last_sess_id=R8
	.DEF _last_wr_dataQ=R10
	.DEF _last_rd_dataQ=R12
	.DEF _muteAlarm=R6

;GPIOR0 INITIALIZATION VALUE
	.EQU __GPIOR0_INIT=0x00

	.CSEG
	.ORG 0x00

;START OF CODE MARKER
__START_OF_CODE:

;INTERRUPT VECTORS
	JMP  __RESET
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  _wdt_timeout_isr
	JMP  0x00
	JMP  0x00
	JMP  _timer2_ovf_isr
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  _timer1_ovf_isr
	JMP  0x00
	JMP  0x00
	JMP  _timer0_ovf_isr
	JMP  0x00
	JMP  _usart0_rx_isr
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  _timer3_ovf_isr
	JMP  _usart1_rx_isr
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  _timer4_ovf_isr
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  _usart2_rx_isr
	JMP  0x00
	JMP  0x00
	JMP  _usart3_rx_isr
	JMP  0x00
	JMP  0x00

_FIRMWARE_VERSION:
	.DB  0x69,0x4E,0x54,0x2D,0x45,0x54,0x48,0x2D
	.DB  0x44,0x43,0x2D,0x30,0x2E,0x30,0x31,0x61
	.DB  0x0
_error_msg:
	.DB  LOW(_0x260000*2),HIGH(_0x260000*2),BYTE3(_0x260000*2),BYTE4(_0x260000*2),LOW(_0x260000*2+1),HIGH(_0x260000*2+1),BYTE3(_0x260000*2+1),BYTE4(_0x260000*2+1)
	.DB  LOW(_0x260000*2+13),HIGH(_0x260000*2+13),BYTE3(_0x260000*2+13),BYTE4(_0x260000*2+13),LOW(_0x260000*2+24),HIGH(_0x260000*2+24),BYTE3(_0x260000*2+24),BYTE4(_0x260000*2+24)
	.DB  LOW(_0x260000*2+37),HIGH(_0x260000*2+37),BYTE3(_0x260000*2+37),BYTE4(_0x260000*2+37),LOW(_0x260000*2+48),HIGH(_0x260000*2+48),BYTE3(_0x260000*2+48),BYTE4(_0x260000*2+48)
	.DB  LOW(_0x260000*2+59),HIGH(_0x260000*2+59),BYTE3(_0x260000*2+59),BYTE4(_0x260000*2+59),LOW(_0x260000*2+75),HIGH(_0x260000*2+75),BYTE3(_0x260000*2+75),BYTE4(_0x260000*2+75)
	.DB  LOW(_0x260000*2+85),HIGH(_0x260000*2+85),BYTE3(_0x260000*2+85),BYTE4(_0x260000*2+85),LOW(_0x260000*2+94),HIGH(_0x260000*2+94),BYTE3(_0x260000*2+94),BYTE4(_0x260000*2+94)
	.DB  LOW(_0x260000*2+112),HIGH(_0x260000*2+112),BYTE3(_0x260000*2+112),BYTE4(_0x260000*2+112),LOW(_0x260000*2+131),HIGH(_0x260000*2+131),BYTE3(_0x260000*2+131),BYTE4(_0x260000*2+131)
	.DB  LOW(_0x260000*2+148),HIGH(_0x260000*2+148),BYTE3(_0x260000*2+148),BYTE4(_0x260000*2+148),LOW(_0x260000*2+163),HIGH(_0x260000*2+163),BYTE3(_0x260000*2+163),BYTE4(_0x260000*2+163)
	.DB  LOW(_0x260000*2+180),HIGH(_0x260000*2+180),BYTE3(_0x260000*2+180),BYTE4(_0x260000*2+180),LOW(_0x260000*2+196),HIGH(_0x260000*2+196),BYTE3(_0x260000*2+196),BYTE4(_0x260000*2+196)
_cmdSetRTCDateTime:
	.DB  0x24,0x43,0x4D,0x44,0x53,0x44,0x54,0x0
_cmdResetAlarmStatus:
	.DB  0x24,0x43,0x4D,0x44,0x52,0x41,0x53,0x0
_cmdClearLogFile:
	.DB  0x24,0x43,0x4D,0x44,0x43,0x4C,0x46,0x0
_cmdSetVref:
	.DB  0x24,0x43,0x4D,0x44,0x53,0x56,0x52,0x0
_cmdSensorSelect:
	.DB  0x24,0x43,0x4D,0x44,0x53,0x4E,0x53,0x0
_cmdDeviceEnable:
	.DB  0x24,0x43,0x4D,0x44,0x44,0x45,0x4E,0x0
_cmdDeviceDisable:
	.DB  0x24,0x43,0x4D,0x44,0x44,0x44,0x53,0x0
_cmdSetSerialNumber:
	.DB  0x24,0x43,0x4D,0x44,0x53,0x53,0x4E,0x0
_cmdReadSerialNumber:
	.DB  0x24,0x43,0x4D,0x44,0x52,0x53,0x4E,0x0
_cmdGetCal:
	.DB  0x24,0x43,0x4D,0x44,0x47,0x43,0x4C,0x0
_cmdSetCal:
	.DB  0x24,0x43,0x4D,0x44,0x53,0x43,0x4C,0x0
_cmdConfirmCal:
	.DB  0x24,0x43,0x4D,0x44,0x43,0x43,0x4C,0x0
_cmdGetCurSensor:
	.DB  0x24,0x43,0x4D,0x44,0x47,0x43,0x53,0x0
_k1:
	.DB  0x20,0x22,0x2A,0x2B,0x2C,0x5B,0x3D,0x5D
	.DB  0x7C,0x7F,0x0

;HEAP START MARKER INITIALIZATION
__HEAP_START_MARKER:
	.DW  0,0

_0x3:
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0
_0x75:
	.DB  0xFF,0xFF,0xFF,0xFF
_0x0:
	.DB  0xD,0xA,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
	.DB  0x20,0x49,0x6E,0x69,0x74,0x69,0x61,0x6C
	.DB  0x20,0x43,0x6F,0x6D,0x70,0x6C,0x65,0x74
	.DB  0x65,0x20,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
	.DB  0xD,0xA,0x0,0x43,0x6F,0x6E,0x74,0x61
	.DB  0x63,0x74,0x20,0x3A,0x20,0x63,0x6F,0x6E
	.DB  0x74,0x61,0x63,0x74,0x2E,0x74,0x61,0x77
	.DB  0x61,0x6E,0x40,0x67,0x6D,0x61,0x69,0x6C
	.DB  0x2E,0x63,0x6F,0x6D,0xD,0xA,0x0,0x3C
	.DB  0x6D,0x61,0x69,0x6E,0x3E,0x20,0x67,0x65
	.DB  0x74,0x53,0x65,0x6E,0x73,0x6F,0x72,0x43
	.DB  0x6F,0x6E,0x66,0x69,0x67,0x28,0x25,0x64
	.DB  0x29,0x20,0x65,0x72,0x72,0x6F,0x72,0xD
	.DB  0xA,0x0,0x3C,0x6D,0x61,0x69,0x6E,0x3E
	.DB  0x20,0x61,0x64,0x64,0x53,0x65,0x6E,0x73
	.DB  0x6F,0x72,0x44,0x61,0x74,0x61,0x51,0x75
	.DB  0x65,0x75,0x65,0x28,0x25,0x64,0x2C,0x25
	.DB  0x2E,0x31,0x66,0x29,0x20,0x66,0x61,0x69
	.DB  0x6C,0x65,0x64,0xD,0xA,0x0,0x3C,0x6D
	.DB  0x61,0x69,0x6E,0x3E,0x20,0x75,0x70,0x64
	.DB  0x61,0x74,0x65,0x53,0x74,0x61,0x74,0x75
	.DB  0x73,0x28,0x29,0x20,0x66,0x61,0x69,0x6C
	.DB  0x65,0x64,0xD,0xA,0x0,0x3C,0x6D,0x61
	.DB  0x69,0x6E,0x3E,0x20,0x6F,0x70,0x65,0x72
	.DB  0x61,0x74,0x69,0x6E,0x67,0x20,0x6D,0x6F
	.DB  0x64,0x65,0x20,0x65,0x72,0x72,0x6F,0x72
	.DB  0x21,0x21,0x20,0x5B,0x30,0x78,0x25,0x30
	.DB  0x32,0x58,0x5D,0xD,0xA,0x0,0x3C,0x6D
	.DB  0x61,0x69,0x6E,0x3E,0x20,0x53,0x44,0x5F
	.DB  0x72,0x65,0x61,0x64,0x4D,0x65,0x6D,0x6F
	.DB  0x72,0x79,0x52,0x65,0x6D,0x61,0x69,0x6E
	.DB  0x28,0x29,0x20,0x66,0x61,0x69,0x6C,0x65
	.DB  0x64,0xD,0xA,0x0,0x3C,0x75,0x70,0x64
	.DB  0x61,0x74,0x65,0x53,0x74,0x61,0x74,0x75
	.DB  0x73,0x3E,0x20,0x45,0x54,0x48,0x5F,0x72
	.DB  0x73,0x74,0x5F,0x74,0x69,0x6D,0x65,0x72
	.DB  0x20,0x74,0x69,0x6D,0x65,0x20,0x6C,0x65
	.DB  0x66,0x74,0x20,0x3D,0x20,0x25,0x6C,0x64
	.DB  0x28,0x25,0x6C,0x58,0x29,0xD,0xA,0x0
	.DB  0xD,0xA,0x3C,0x65,0x76,0x65,0x6E,0x74
	.DB  0x43,0x61,0x70,0x74,0x75,0x72,0x65,0x3E
	.DB  0x20,0x21,0x21,0x21,0x21,0x21,0x21,0x21
	.DB  0x21,0x21,0x21,0x21,0x20,0x4D,0x6F,0x6E
	.DB  0x69,0x74,0x6F,0x72,0x20,0x4D,0x6F,0x64
	.DB  0x65,0x20,0x21,0x21,0x21,0x21,0x21,0xD
	.DB  0xA,0x0,0xD,0xA,0x3C,0x65,0x76,0x65
	.DB  0x6E,0x74,0x43,0x61,0x70,0x74,0x75,0x72
	.DB  0x65,0x3E,0x20,0x21,0x21,0x21,0x21,0x21
	.DB  0x21,0x21,0x21,0x21,0x21,0x21,0x20,0x4D
	.DB  0x61,0x69,0x6E,0x74,0x65,0x6E,0x61,0x6E
	.DB  0x63,0x65,0x20,0x49,0x6E,0x20,0x50,0x72
	.DB  0x6F,0x67,0x72,0x65,0x73,0x73,0x20,0x21
	.DB  0x21,0x21,0x21,0x21,0xD,0xA,0x0,0x3C
	.DB  0x65,0x76,0x65,0x6E,0x74,0x43,0x61,0x70
	.DB  0x74,0x75,0x72,0x65,0x3E,0x20,0x61,0x64
	.DB  0x64,0x45,0x76,0x65,0x6E,0x74,0x51,0x75
	.DB  0x65,0x75,0x65,0x28,0x29,0x20,0x66,0x61
	.DB  0x69,0x6C,0x65,0x64,0xD,0xA,0x0,0xD
	.DB  0xA,0x3C,0x65,0x76,0x65,0x6E,0x74,0x43
	.DB  0x61,0x70,0x74,0x75,0x72,0x65,0x3E,0x20
	.DB  0x21,0x21,0x21,0x21,0x21,0x21,0x21,0x21
	.DB  0x21,0x21,0x21,0x20,0x4D,0x61,0x69,0x6E
	.DB  0x20,0x50,0x6F,0x77,0x65,0x72,0x20,0x44
	.DB  0x6F,0x77,0x6E,0x20,0x21,0x21,0x21,0x21
	.DB  0x21,0xD,0xA,0x0,0xD,0xA,0x3C,0x65
	.DB  0x76,0x65,0x6E,0x74,0x43,0x61,0x70,0x74
	.DB  0x75,0x72,0x65,0x3E,0x20,0x21,0x21,0x21
	.DB  0x21,0x21,0x21,0x21,0x21,0x21,0x21,0x21
	.DB  0x20,0x4D,0x61,0x69,0x6E,0x20,0x50,0x6F
	.DB  0x77,0x65,0x72,0x20,0x55,0x70,0x20,0x21
	.DB  0x21,0x21,0x21,0x21,0xD,0xA,0x0,0xD
	.DB  0xA,0x3C,0x65,0x76,0x65,0x6E,0x74,0x43
	.DB  0x61,0x70,0x74,0x75,0x72,0x65,0x3E,0x20
	.DB  0x21,0x21,0x21,0x21,0x21,0x21,0x21,0x21
	.DB  0x21,0x21,0x21,0x20,0x42,0x61,0x74,0x74
	.DB  0x65,0x72,0x79,0x20,0x4C,0x6F,0x77,0x20
	.DB  0x21,0x21,0x21,0x21,0x21,0xD,0xA,0x0
	.DB  0xD,0xA,0x3C,0x65,0x76,0x65,0x6E,0x74
	.DB  0x43,0x61,0x70,0x74,0x75,0x72,0x65,0x3E
	.DB  0x20,0x21,0x21,0x21,0x21,0x21,0x21,0x21
	.DB  0x21,0x21,0x21,0x21,0x20,0x42,0x61,0x74
	.DB  0x74,0x65,0x72,0x79,0x20,0x4F,0x4B,0x20
	.DB  0x21,0x21,0x21,0x21,0x21,0xD,0xA,0x0
	.DB  0xD,0xA,0x3C,0x65,0x76,0x65,0x6E,0x74
	.DB  0x43,0x61,0x70,0x74,0x75,0x72,0x65,0x3E
	.DB  0x20,0x21,0x21,0x21,0x21,0x21,0x21,0x21
	.DB  0x21,0x21,0x21,0x21,0x20,0x4D,0x65,0x6D
	.DB  0x6F,0x72,0x79,0x20,0x4C,0x6F,0x77,0x20
	.DB  0x21,0x21,0x21,0x21,0x21,0xD,0xA,0x0
	.DB  0xD,0xA,0x3C,0x65,0x76,0x65,0x6E,0x74
	.DB  0x43,0x61,0x70,0x74,0x75,0x72,0x65,0x3E
	.DB  0x20,0x21,0x21,0x21,0x21,0x21,0x21,0x21
	.DB  0x21,0x21,0x21,0x21,0x20,0x4D,0x65,0x6D
	.DB  0x6F,0x72,0x79,0x20,0x45,0x72,0x72,0x6F
	.DB  0x72,0x20,0x21,0x21,0x21,0x21,0x21,0xD
	.DB  0xA,0x0,0xD,0xA,0x3C,0x65,0x76,0x65
	.DB  0x6E,0x74,0x43,0x61,0x70,0x74,0x75,0x72
	.DB  0x65,0x3E,0x20,0x21,0x21,0x21,0x21,0x21
	.DB  0x21,0x21,0x21,0x21,0x21,0x21,0x20,0x4D
	.DB  0x65,0x6D,0x6F,0x72,0x79,0x20,0x4F,0x4B
	.DB  0x20,0x21,0x21,0x21,0x21,0x21,0xD,0xA
	.DB  0x0,0xD,0xA,0x3C,0x65,0x76,0x65,0x6E
	.DB  0x74,0x43,0x61,0x70,0x74,0x75,0x72,0x65
	.DB  0x3E,0x20,0x21,0x21,0x21,0x21,0x21,0x21
	.DB  0x21,0x21,0x21,0x21,0x21,0x20,0x44,0x69
	.DB  0x6E,0x20,0x25,0x64,0x20,0x52,0x69,0x73
	.DB  0x69,0x6E,0x67,0x20,0x21,0x21,0x21,0x21
	.DB  0x21,0xD,0xA,0x0,0xD,0xA,0x3C,0x65
	.DB  0x76,0x65,0x6E,0x74,0x43,0x61,0x70,0x74
	.DB  0x75,0x72,0x65,0x3E,0x20,0x21,0x21,0x21
	.DB  0x21,0x21,0x21,0x21,0x21,0x21,0x21,0x21
	.DB  0x20,0x44,0x69,0x6E,0x20,0x25,0x64,0x20
	.DB  0x46,0x61,0x6C,0x6C,0x69,0x6E,0x67,0x20
	.DB  0x21,0x21,0x21,0x21,0x21,0xD,0xA,0x0
	.DB  0xD,0xA,0x3C,0x65,0x76,0x65,0x6E,0x74
	.DB  0x43,0x61,0x70,0x74,0x75,0x72,0x65,0x3E
	.DB  0x20,0x21,0x21,0x21,0x21,0x21,0x21,0x21
	.DB  0x21,0x21,0x21,0x21,0x20,0x50,0x52,0x4F
	.DB  0x42,0x45,0x20,0x25,0x64,0x20,0x44,0x49
	.DB  0x53,0x43,0x4F,0x4E,0x4E,0x45,0x43,0x54
	.DB  0x20,0x21,0x21,0x21,0x21,0x21,0xD,0xA
	.DB  0x0,0xD,0xA,0x3C,0x65,0x76,0x65,0x6E
	.DB  0x74,0x43,0x61,0x70,0x74,0x75,0x72,0x65
	.DB  0x3E,0x20,0x21,0x21,0x21,0x21,0x21,0x21
	.DB  0x21,0x21,0x21,0x21,0x21,0x20,0x50,0x52
	.DB  0x4F,0x42,0x45,0x20,0x25,0x64,0x20,0x43
	.DB  0x4F,0x4E,0x4E,0x45,0x43,0x54,0x20,0x21
	.DB  0x21,0x21,0x21,0x21,0xD,0xA,0x0,0xD
	.DB  0xA,0x3C,0x65,0x76,0x65,0x6E,0x74,0x43
	.DB  0x61,0x70,0x74,0x75,0x72,0x65,0x3E,0x20
	.DB  0x21,0x21,0x21,0x21,0x21,0x21,0x21,0x21
	.DB  0x21,0x21,0x21,0x20,0x50,0x52,0x4F,0x42
	.DB  0x45,0x20,0x25,0x64,0x20,0x54,0x65,0x6D
	.DB  0x70,0x65,0x72,0x61,0x74,0x75,0x72,0x65
	.DB  0x20,0x45,0x52,0x52,0x4F,0x52,0x20,0x21
	.DB  0x21,0x21,0x21,0x21,0xD,0xA,0x0,0xD
	.DB  0xA,0x3C,0x65,0x76,0x65,0x6E,0x74,0x43
	.DB  0x61,0x70,0x74,0x75,0x72,0x65,0x3E,0x20
	.DB  0x21,0x21,0x21,0x21,0x21,0x21,0x21,0x21
	.DB  0x21,0x21,0x21,0x20,0x50,0x52,0x4F,0x42
	.DB  0x45,0x20,0x25,0x64,0x20,0x54,0x65,0x6D
	.DB  0x70,0x65,0x72,0x61,0x74,0x75,0x72,0x65
	.DB  0x20,0x4F,0x4B,0x20,0x21,0x21,0x21,0x21
	.DB  0x21,0xD,0xA,0x0,0x3C,0x73,0x74,0x61
	.DB  0x74,0x75,0x73,0x52,0x65,0x70,0x6F,0x72
	.DB  0x74,0x3E,0x20,0x52,0x45,0x50,0x4F,0x52
	.DB  0x54,0x5F,0x53,0x49,0x4E,0x47,0x4C,0x45
	.DB  0x20,0x6D,0x6F,0x64,0x65,0x20,0x6E,0x6F
	.DB  0x74,0x20,0x73,0x75,0x70,0x70,0x6F,0x72
	.DB  0x74,0x65,0x64,0x20,0x79,0x65,0x74,0xD
	.DB  0xA,0x0,0x3C,0x73,0x74,0x61,0x74,0x75
	.DB  0x73,0x52,0x65,0x70,0x6F,0x72,0x74,0x3E
	.DB  0x20,0x52,0x45,0x50,0x4F,0x52,0x54,0x5F
	.DB  0x4D,0x55,0x4C,0x54,0x49,0x50,0x4C,0x45
	.DB  0x20,0x6D,0x6F,0x64,0x65,0x20,0x6E,0x6F
	.DB  0x74,0x20,0x73,0x75,0x70,0x70,0x6F,0x72
	.DB  0x74,0x65,0x64,0x20,0x79,0x65,0x74,0xD
	.DB  0xA,0x0,0x3C,0x73,0x74,0x61,0x74,0x75
	.DB  0x73,0x52,0x65,0x70,0x6F,0x72,0x74,0x3E
	.DB  0x20,0x6D,0x61,0x6C,0x6C,0x6F,0x63,0x20
	.DB  0x66,0x61,0x69,0x6C,0x65,0x64,0x20,0x28
	.DB  0x25,0x64,0x20,0x62,0x79,0x74,0x65,0x73
	.DB  0x29,0xD,0xA,0x0,0x3C,0x73,0x74,0x61
	.DB  0x74,0x75,0x73,0x52,0x65,0x70,0x6F,0x72
	.DB  0x74,0x3E,0x20,0x67,0x65,0x74,0x44,0x65
	.DB  0x76,0x69,0x63,0x65,0x53,0x74,0x61,0x74
	.DB  0x65,0x28,0x29,0x20,0x66,0x61,0x69,0x6C
	.DB  0x65,0x64,0xD,0xA,0x0,0x3C,0x73,0x74
	.DB  0x61,0x74,0x75,0x73,0x52,0x65,0x70,0x6F
	.DB  0x72,0x74,0x3E,0x20,0x73,0x74,0x61,0x74
	.DB  0x75,0x73,0x20,0x72,0x65,0x70,0x6F,0x72
	.DB  0x74,0x20,0x61,0x63,0x63,0x6D,0x20,0x75
	.DB  0x6E,0x6B,0x6E,0x6F,0x77,0x6E,0x20,0x5B
	.DB  0x30,0x78,0x25,0x30,0x32,0x58,0x5D,0xD
	.DB  0xA,0x0,0x3C,0x73,0x74,0x61,0x74,0x75
	.DB  0x73,0x52,0x65,0x70,0x6F,0x72,0x74,0x3E
	.DB  0x20,0x45,0x54,0x48,0x5F,0x73,0x65,0x6E
	.DB  0x64,0x53,0x74,0x61,0x74,0x75,0x73,0x52
	.DB  0x65,0x70,0x6F,0x72,0x74,0x43,0x6D,0x64
	.DB  0x28,0x29,0x20,0x66,0x61,0x69,0x6C,0x65
	.DB  0x64,0xD,0xA,0x0,0x3C,0x73,0x65,0x6E
	.DB  0x73,0x6F,0x72,0x44,0x61,0x74,0x61,0x52
	.DB  0x65,0x70,0x6F,0x72,0x74,0x3E,0x20,0x5B
	.DB  0x25,0x6C,0x64,0x5D,0x5B,0x25,0x64,0x5D
	.DB  0x5B,0x25,0x2E,0x32,0x66,0x5D,0xD,0xA
	.DB  0x0,0xD,0xA,0x3C,0x73,0x65,0x6E,0x73
	.DB  0x6F,0x72,0x44,0x61,0x74,0x61,0x52,0x65
	.DB  0x70,0x6F,0x72,0x74,0x3E,0x20,0x3D,0x3D
	.DB  0x3D,0x20,0x45,0x52,0x52,0x4F,0x52,0x20
	.DB  0x49,0x4E,0x46,0x4F,0x4D,0x41,0x54,0x49
	.DB  0x4F,0x4E,0x20,0x49,0x4E,0x20,0x54,0x45
	.DB  0x4D,0x50,0x20,0x51,0x55,0x45,0x55,0x45
	.DB  0x20,0x3D,0x3D,0x3D,0xD,0xA,0x0,0x3C
	.DB  0x73,0x65,0x6E,0x73,0x6F,0x72,0x44,0x61
	.DB  0x74,0x61,0x52,0x65,0x70,0x6F,0x72,0x74
	.DB  0x3E,0x20,0x45,0x54,0x48,0x5F,0x73,0x65
	.DB  0x6E,0x64,0x44,0x61,0x74,0x61,0x52,0x65
	.DB  0x70,0x6F,0x72,0x74,0x43,0x6D,0x64,0x28
	.DB  0x29,0x20,0x66,0x61,0x69,0x6C,0x65,0x64
	.DB  0xD,0xA,0x0,0x3C,0x65,0x76,0x65,0x6E
	.DB  0x74,0x52,0x65,0x70,0x6F,0x72,0x74,0x3E
	.DB  0x20,0x5B,0x25,0x6C,0x64,0x5D,0x5B,0x30
	.DB  0x78,0x25,0x30,0x32,0x58,0x5D,0x5B,0x30
	.DB  0x78,0x25,0x30,0x32,0x58,0x5D,0xD,0xA
	.DB  0x0,0xD,0xA,0x3C,0x65,0x76,0x65,0x6E
	.DB  0x74,0x52,0x65,0x70,0x6F,0x72,0x74,0x3E
	.DB  0x20,0x3D,0x3D,0x3D,0x20,0x45,0x52,0x52
	.DB  0x4F,0x52,0x20,0x49,0x4E,0x46,0x4F,0x4D
	.DB  0x41,0x54,0x49,0x4F,0x4E,0x20,0x49,0x4E
	.DB  0x20,0x54,0x45,0x4D,0x50,0x20,0x51,0x55
	.DB  0x45,0x55,0x45,0x20,0x3D,0x3D,0x3D,0xD
	.DB  0xA,0x0,0x3C,0x65,0x76,0x65,0x6E,0x74
	.DB  0x52,0x65,0x70,0x6F,0x72,0x74,0x3E,0x20
	.DB  0x45,0x54,0x48,0x5F,0x73,0x65,0x6E,0x64
	.DB  0x45,0x76,0x65,0x6E,0x74,0x52,0x65,0x70
	.DB  0x6F,0x72,0x74,0x43,0x6D,0x64,0x28,0x29
	.DB  0x20,0x66,0x61,0x69,0x6C,0x65,0x64,0xD
	.DB  0xA,0x0,0x3C,0x73,0x65,0x6E,0x73,0x6F
	.DB  0x72,0x44,0x61,0x74,0x61,0x53,0x61,0x76
	.DB  0x65,0x3E,0x20,0x74,0x69,0x6D,0x65,0x5B
	.DB  0x25,0x6C,0x64,0x5D,0x2C,0x63,0x68,0x5B
	.DB  0x25,0x64,0x5D,0x2C,0x76,0x61,0x6C,0x5B
	.DB  0x25,0x2E,0x32,0x66,0x5D,0xD,0xA,0x0
	.DB  0xD,0xA,0x3C,0x73,0x65,0x6E,0x73,0x6F
	.DB  0x72,0x44,0x61,0x74,0x61,0x53,0x61,0x76
	.DB  0x65,0x3E,0x20,0x3D,0x3D,0x3D,0x20,0x45
	.DB  0x52,0x52,0x4F,0x52,0x20,0x49,0x4E,0x46
	.DB  0x4F,0x4D,0x41,0x54,0x49,0x4F,0x4E,0x20
	.DB  0x49,0x4E,0x20,0x54,0x45,0x4D,0x50,0x20
	.DB  0x51,0x55,0x45,0x55,0x45,0x20,0x3D,0x3D
	.DB  0x3D,0xD,0xA,0x0,0x3C,0x73,0x65,0x6E
	.DB  0x73,0x6F,0x72,0x44,0x61,0x74,0x61,0x53
	.DB  0x61,0x76,0x65,0x3E,0x20,0x4C,0x4F,0x47
	.DB  0x5F,0x6F,0x70,0x65,0x6E,0x46,0x69,0x6C
	.DB  0x65,0x28,0x25,0x73,0x29,0x20,0x66,0x61
	.DB  0x69,0x6C,0x65,0x64,0x2C,0x20,0x63,0x6F
	.DB  0x75,0x6C,0x64,0x6E,0x27,0x74,0x20,0x73
	.DB  0x61,0x76,0x65,0x20,0x6C,0x6F,0x67,0xD
	.DB  0xA,0x0,0x3C,0x73,0x65,0x6E,0x73,0x6F
	.DB  0x72,0x44,0x61,0x74,0x61,0x53,0x61,0x76
	.DB  0x65,0x3E,0x20,0x4C,0x4F,0x47,0x5F,0x69
	.DB  0x6E,0x73,0x65,0x72,0x74,0x44,0x61,0x74
	.DB  0x61,0x28,0x29,0x20,0x66,0x61,0x69,0x6C
	.DB  0x65,0x64,0xD,0xA,0x0,0x3C,0x73,0x65
	.DB  0x6E,0x73,0x6F,0x72,0x44,0x61,0x74,0x61
	.DB  0x53,0x61,0x76,0x65,0x3E,0x20,0x4C,0x4F
	.DB  0x47,0x5F,0x63,0x6C,0x6F,0x73,0x65,0x46
	.DB  0x69,0x6C,0x65,0x28,0x29,0x20,0x66,0x61
	.DB  0x69,0x6C,0x65,0x64,0xD,0xA,0x0,0x3C
	.DB  0x73,0x65,0x6E,0x73,0x6F,0x72,0x44,0x61
	.DB  0x74,0x61,0x53,0x61,0x76,0x65,0x3E,0x20
	.DB  0x44,0x61,0x74,0x61,0x20,0x4C,0x6F,0x67
	.DB  0x20,0x69,0x73,0x20,0x6E,0x6F,0x74,0x20
	.DB  0x65,0x6D,0x70,0x74,0x79,0xD,0xA,0x0
	.DB  0x3C,0x65,0x76,0x65,0x6E,0x74,0x53,0x61
	.DB  0x76,0x65,0x3E,0x20,0x74,0x69,0x6D,0x65
	.DB  0x5B,0x25,0x6C,0x64,0x5D,0x2C,0x69,0x64
	.DB  0x5B,0x30,0x78,0x25,0x30,0x32,0x58,0x5D
	.DB  0x2C,0x73,0x74,0x61,0x74,0x5B,0x30,0x78
	.DB  0x25,0x30,0x32,0x58,0x5D,0xD,0xA,0x0
	.DB  0xD,0xA,0x3C,0x65,0x76,0x65,0x6E,0x74
	.DB  0x53,0x61,0x76,0x65,0x3E,0x20,0x3D,0x3D
	.DB  0x3D,0x20,0x45,0x52,0x52,0x4F,0x52,0x20
	.DB  0x49,0x4E,0x46,0x4F,0x4D,0x41,0x54,0x49
	.DB  0x4F,0x4E,0x20,0x49,0x4E,0x20,0x54,0x45
	.DB  0x4D,0x50,0x20,0x51,0x55,0x45,0x55,0x45
	.DB  0x20,0x3D,0x3D,0x3D,0xD,0xA,0x0,0x3C
	.DB  0x65,0x76,0x65,0x6E,0x74,0x53,0x61,0x76
	.DB  0x65,0x3E,0x20,0x4C,0x4F,0x47,0x5F,0x6F
	.DB  0x70,0x65,0x6E,0x46,0x69,0x6C,0x65,0x28
	.DB  0x25,0x73,0x29,0x20,0x66,0x61,0x69,0x6C
	.DB  0x65,0x64,0x2C,0x20,0x63,0x6F,0x75,0x6C
	.DB  0x64,0x6E,0x27,0x74,0x20,0x73,0x61,0x76
	.DB  0x65,0x20,0x6C,0x6F,0x67,0xD,0xA,0x0
	.DB  0x3C,0x65,0x76,0x65,0x6E,0x74,0x53,0x61
	.DB  0x76,0x65,0x3E,0x20,0x4C,0x4F,0x47,0x5F
	.DB  0x69,0x6E,0x73,0x65,0x72,0x74,0x45,0x76
	.DB  0x65,0x6E,0x74,0x28,0x29,0x20,0x66,0x61
	.DB  0x69,0x6C,0x65,0x64,0xD,0xA,0x0,0x3C
	.DB  0x65,0x76,0x65,0x6E,0x74,0x53,0x61,0x76
	.DB  0x65,0x3E,0x20,0x4C,0x4F,0x47,0x5F,0x63
	.DB  0x6C,0x6F,0x73,0x65,0x46,0x69,0x6C,0x65
	.DB  0x28,0x29,0x20,0x66,0x61,0x69,0x6C,0x65
	.DB  0x64,0xD,0xA,0x0,0x3C,0x65,0x76,0x65
	.DB  0x6E,0x74,0x53,0x61,0x76,0x65,0x3E,0x20
	.DB  0x45,0x76,0x65,0x6E,0x74,0x20,0x4C,0x6F
	.DB  0x67,0x20,0x69,0x73,0x20,0x6E,0x6F,0x74
	.DB  0x20,0x65,0x6D,0x70,0x74,0x79,0xD,0xA
	.DB  0x0,0x3C,0x6C,0x6F,0x67,0x52,0x65,0x70
	.DB  0x6F,0x72,0x74,0x3E,0x20,0x43,0x68,0x65
	.DB  0x63,0x6B,0x20,0x44,0x61,0x74,0x61,0x20
	.DB  0x4C,0x6F,0x67,0x20,0x45,0x78,0x69,0x73
	.DB  0x74,0xD,0xA,0x0,0x3C,0x6C,0x6F,0x67
	.DB  0x52,0x65,0x70,0x6F,0x72,0x74,0x3E,0x20
	.DB  0x4C,0x4F,0x47,0x5F,0x6F,0x70,0x65,0x6E
	.DB  0x46,0x69,0x6C,0x65,0x28,0x25,0x73,0x29
	.DB  0x20,0x66,0x61,0x69,0x6C,0x65,0x64,0xD
	.DB  0xA,0x0,0x3C,0x6C,0x6F,0x67,0x52,0x65
	.DB  0x70,0x6F,0x72,0x74,0x3E,0x20,0x4C,0x4F
	.DB  0x47,0x5F,0x72,0x65,0x61,0x64,0x44,0x61
	.DB  0x74,0x61,0x28,0x25,0x73,0x29,0x20,0x66
	.DB  0x61,0x69,0x6C,0x65,0x64,0xD,0xA,0x0
	.DB  0x3C,0x6C,0x6F,0x67,0x52,0x65,0x70,0x6F
	.DB  0x72,0x74,0x3E,0x20,0x4C,0x4F,0x47,0x5F
	.DB  0x72,0x65,0x61,0x64,0x44,0x61,0x74,0x61
	.DB  0x28,0x29,0x20,0x4C,0x6F,0x67,0x20,0x65
	.DB  0x6D,0x70,0x74,0x79,0xD,0xA,0x0,0xD
	.DB  0xA,0x3C,0x6C,0x6F,0x67,0x52,0x65,0x70
	.DB  0x6F,0x72,0x74,0x3E,0x20,0x3D,0x3D,0x3D
	.DB  0x20,0x45,0x52,0x52,0x4F,0x52,0x20,0x49
	.DB  0x4E,0x46,0x4F,0x4D,0x41,0x54,0x49,0x4F
	.DB  0x4E,0x20,0x49,0x4E,0x20,0x25,0x73,0x20
	.DB  0x3D,0x3D,0x3D,0xD,0xA,0x0,0x3C,0x6C
	.DB  0x6F,0x67,0x52,0x65,0x70,0x6F,0x72,0x74
	.DB  0x3E,0x20,0x44,0x61,0x74,0x61,0x4C,0x6F
	.DB  0x67,0x20,0x66,0x6F,0x75,0x6E,0x64,0x20
	.DB  0x74,0x69,0x6D,0x65,0x5B,0x25,0x6C,0x64
	.DB  0x5D,0x2C,0x63,0x68,0x5B,0x25,0x64,0x5D
	.DB  0x2C,0x76,0x61,0x6C,0x5B,0x25,0x2E,0x32
	.DB  0x66,0x5D,0xD,0xA,0x0,0x3C,0x6C,0x6F
	.DB  0x67,0x52,0x65,0x70,0x6F,0x72,0x74,0x3E
	.DB  0x20,0x45,0x54,0x48,0x5F,0x73,0x65,0x6E
	.DB  0x64,0x44,0x61,0x74,0x61,0x52,0x65,0x70
	.DB  0x6F,0x72,0x74,0x43,0x6D,0x64,0x28,0x29
	.DB  0x20,0x66,0x61,0x69,0x6C,0x65,0x64,0xD
	.DB  0xA,0x0,0x3C,0x6C,0x6F,0x67,0x52,0x65
	.DB  0x70,0x6F,0x72,0x74,0x3E,0x20,0x44,0x61
	.DB  0x74,0x61,0x4C,0x6F,0x67,0x20,0x73,0x65
	.DB  0x6E,0x74,0x20,0x66,0x72,0x61,0x6D,0x65
	.DB  0x49,0x44,0x5B,0x30,0x78,0x25,0x30,0x32
	.DB  0x58,0x5D,0x20,0x6C,0x6F,0x67,0x49,0x44
	.DB  0x5B,0x30,0x78,0x25,0x30,0x32,0x58,0x5D
	.DB  0xD,0xA,0x0,0x3C,0x6C,0x6F,0x67,0x52
	.DB  0x65,0x70,0x6F,0x72,0x74,0x3E,0x20,0x4C
	.DB  0x4F,0x47,0x5F,0x63,0x6C,0x6F,0x73,0x65
	.DB  0x46,0x69,0x6C,0x65,0x28,0x29,0x20,0x66
	.DB  0x61,0x69,0x6C,0x65,0x64,0xD,0xA,0x0
	.DB  0x3C,0x6C,0x6F,0x67,0x52,0x65,0x70,0x6F
	.DB  0x72,0x74,0x3E,0x20,0x43,0x68,0x65,0x63
	.DB  0x6B,0x20,0x45,0x76,0x65,0x6E,0x74,0x20
	.DB  0x4C,0x6F,0x67,0x20,0x45,0x78,0x69,0x73
	.DB  0x74,0xD,0xA,0x0,0x3C,0x6C,0x6F,0x67
	.DB  0x52,0x65,0x70,0x6F,0x72,0x74,0x3E,0x20
	.DB  0x4C,0x4F,0x47,0x5F,0x72,0x65,0x61,0x64
	.DB  0x45,0x76,0x65,0x6E,0x74,0x28,0x29,0x20
	.DB  0x66,0x61,0x69,0x6C,0x65,0x64,0xD,0xA
	.DB  0x0,0x3C,0x6C,0x6F,0x67,0x52,0x65,0x70
	.DB  0x6F,0x72,0x74,0x3E,0x20,0x4C,0x4F,0x47
	.DB  0x5F,0x72,0x65,0x61,0x64,0x45,0x76,0x65
	.DB  0x6E,0x74,0x28,0x29,0x20,0x4C,0x6F,0x67
	.DB  0x20,0x65,0x6D,0x70,0x74,0x79,0xD,0xA
	.DB  0x0,0x3C,0x6C,0x6F,0x67,0x52,0x65,0x70
	.DB  0x6F,0x72,0x74,0x3E,0x20,0x45,0x76,0x65
	.DB  0x6E,0x74,0x4C,0x6F,0x67,0x20,0x66,0x6F
	.DB  0x75,0x6E,0x64,0x20,0x74,0x69,0x6D,0x65
	.DB  0x5B,0x25,0x6C,0x64,0x5D,0x2C,0x69,0x64
	.DB  0x5B,0x30,0x78,0x25,0x30,0x32,0x58,0x5D
	.DB  0x2C,0x73,0x74,0x61,0x74,0x5B,0x30,0x78
	.DB  0x25,0x30,0x32,0x58,0x5D,0xD,0xA,0x0
	.DB  0x3C,0x6C,0x6F,0x67,0x52,0x65,0x70,0x6F
	.DB  0x72,0x74,0x3E,0x20,0x45,0x54,0x48,0x5F
	.DB  0x73,0x65,0x6E,0x64,0x45,0x76,0x65,0x6E
	.DB  0x74,0x52,0x65,0x70,0x6F,0x72,0x74,0x43
	.DB  0x6D,0x64,0x28,0x29,0x20,0x66,0x61,0x69
	.DB  0x6C,0x65,0x64,0xD,0xA,0x0,0x3C,0x6C
	.DB  0x6F,0x67,0x52,0x65,0x70,0x6F,0x72,0x74
	.DB  0x3E,0x20,0x45,0x76,0x65,0x6E,0x74,0x4C
	.DB  0x6F,0x67,0x20,0x73,0x65,0x6E,0x74,0x20
	.DB  0x66,0x72,0x61,0x6D,0x65,0x49,0x44,0x5B
	.DB  0x30,0x78,0x25,0x30,0x32,0x58,0x5D,0x20
	.DB  0x6C,0x6F,0x67,0x49,0x44,0x5B,0x30,0x78
	.DB  0x25,0x30,0x32,0x58,0x5D,0xD,0xA,0x0
	.DB  0x3C,0x6C,0x6F,0x67,0x52,0x65,0x70,0x6F
	.DB  0x72,0x74,0x3E,0x20,0x4C,0x4F,0x47,0x5F
	.DB  0x63,0x6C,0x6F,0x73,0x65,0x46,0x69,0x6C
	.DB  0x65,0x28,0x25,0x73,0x29,0x20,0x66,0x61
	.DB  0x69,0x6C,0x65,0x64,0xD,0xA,0x0
_0x20000:
	.DB  0xD,0xA,0x50,0x6F,0x77,0x65,0x72,0x2D
	.DB  0x6F,0x6E,0x20,0x52,0x65,0x73,0x65,0x74
	.DB  0xD,0xA,0x0,0xD,0xA,0x45,0x78,0x74
	.DB  0x65,0x72,0x6E,0x61,0x6C,0x20,0x52,0x65
	.DB  0x73,0x65,0x74,0xD,0xA,0x0,0xD,0xA
	.DB  0x42,0x72,0x6F,0x77,0x6E,0x2D,0x6F,0x75
	.DB  0x74,0x20,0x52,0x65,0x73,0x65,0x74,0xD
	.DB  0xA,0x0,0xD,0xA,0x57,0x61,0x74,0x63
	.DB  0x68,0x64,0x6F,0x67,0x20,0x52,0x65,0x73
	.DB  0x65,0x74,0xD,0xA,0x0,0xD,0xA,0x4A
	.DB  0x54,0x41,0x47,0x20,0x52,0x65,0x73,0x65
	.DB  0x74,0xD,0xA,0x0,0x3C,0x69,0x6E,0x69
	.DB  0x74,0x69,0x61,0x6C,0x5F,0x73,0x79,0x73
	.DB  0x74,0x65,0x6D,0x3E,0x20,0x4C,0x4F,0x47
	.DB  0x5F,0x69,0x6E,0x69,0x74,0x28,0x29,0x20
	.DB  0x66,0x61,0x69,0x6C,0x65,0x64,0xD,0xA
	.DB  0x0,0x3C,0x69,0x6E,0x69,0x74,0x69,0x61
	.DB  0x6C,0x5F,0x73,0x79,0x73,0x74,0x65,0x6D
	.DB  0x3E,0x20,0x53,0x44,0x5F,0x69,0x6E,0x69
	.DB  0x74,0x28,0x29,0x20,0x66,0x61,0x69,0x6C
	.DB  0x65,0x64,0xD,0xA,0x0,0x49,0x6E,0x69
	.DB  0x74,0x69,0x61,0x6C,0x20,0x44,0x65,0x76
	.DB  0x69,0x63,0x65,0x20,0x43,0x6F,0x6D,0x70
	.DB  0x6C,0x65,0x74,0x65,0x64,0x20,0x61,0x74
	.DB  0x20,0x2D,0x20,0x0,0x25,0x30,0x34,0x64
	.DB  0x2D,0x25,0x30,0x32,0x64,0x2D,0x25,0x30
	.DB  0x32,0x64,0x20,0x25,0x30,0x32,0x64,0x3A
	.DB  0x25,0x30,0x32,0x64,0x3A,0x25,0x30,0x32
	.DB  0x64,0xD,0xA,0x0
_0x40000:
	.DB  0xD,0xA,0x21,0x21,0x21,0x21,0x21,0x21
	.DB  0x21,0x21,0x21,0x21,0x21,0x21,0x21,0x21
	.DB  0x21,0x21,0x21,0x21,0x21,0x21,0x21,0x21
	.DB  0x21,0x21,0x21,0x21,0x21,0x21,0x21,0x21
	.DB  0x21,0x21,0x21,0x21,0x21,0x21,0x21,0x21
	.DB  0xD,0xA,0x0,0x21,0x21,0x21,0x21,0x21
	.DB  0x21,0x21,0x20,0x45,0x74,0x68,0x20,0x42
	.DB  0x75,0x66,0x66,0x65,0x72,0x20,0x4F,0x76
	.DB  0x65,0x72,0x66,0x6C,0x6F,0x77,0x20,0x21
	.DB  0x21,0x21,0x21,0x21,0x21,0x21,0x21,0x21
	.DB  0x0
_0x60000:
	.DB  0x3C,0x54,0x49,0x4D,0x45,0x52,0x5F,0x73
	.DB  0x65,0x74,0x54,0x69,0x6D,0x65,0x72,0x3E
	.DB  0x20,0x45,0x52,0x52,0x3A,0x20,0x70,0x65
	.DB  0x72,0x69,0x6F,0x64,0x20,0x3D,0x20,0x30
	.DB  0xD,0xA,0x0,0x3C,0x54,0x49,0x4D,0x45
	.DB  0x52,0x5F,0x73,0x65,0x74,0x54,0x69,0x6D
	.DB  0x65,0x72,0x3E,0x20,0x62,0x61,0x73,0x65
	.DB  0x43,0x6F,0x75,0x6E,0x74,0x65,0x72,0x5B
	.DB  0x25,0x6C,0x64,0x5D,0x20,0x2B,0x20,0x70
	.DB  0x65,0x72,0x69,0x6F,0x64,0x5B,0x25,0x6C
	.DB  0x64,0x5D,0x20,0x3D,0x20,0x25,0x6C,0x64
	.DB  0x20,0x4F,0x56,0x45,0x52,0x46,0x4C,0x4F
	.DB  0x57,0x21,0x21,0xD,0xA,0x0,0x3C,0x57
	.DB  0x44,0x54,0x3E,0x20,0x57,0x61,0x74,0x63
	.DB  0x68,0x44,0x6F,0x67,0x20,0x54,0x69,0x6D
	.DB  0x65,0x72,0x20,0x52,0x65,0x73,0x65,0x74
	.DB  0x21,0x21,0xD,0xA,0x0
_0x80003:
	.DB  0xFF,0xFF
_0x80000:
	.DB  0x3C,0x49,0x4F,0x5F,0x6B,0x65,0x79,0x43
	.DB  0x68,0x65,0x63,0x6B,0x3E,0x20,0x6B,0x65
	.DB  0x79,0x20,0x4D,0x4F,0x44,0x45,0xD,0xA
	.DB  0x0,0x3C,0x49,0x4F,0x5F,0x6B,0x65,0x79
	.DB  0x43,0x68,0x65,0x63,0x6B,0x3E,0x20,0x6B
	.DB  0x65,0x79,0x20,0x55,0x50,0xD,0xA,0x0
	.DB  0x3C,0x49,0x4F,0x5F,0x6B,0x65,0x79,0x43
	.DB  0x68,0x65,0x63,0x6B,0x3E,0x20,0x6B,0x65
	.DB  0x79,0x20,0x44,0x4F,0x57,0x4E,0xD,0xA
	.DB  0x0,0x3C,0x49,0x4F,0x5F,0x6B,0x65,0x79
	.DB  0x43,0x68,0x65,0x63,0x6B,0x3E,0x20,0x6B
	.DB  0x65,0x79,0x20,0x4F,0x4B,0xD,0xA,0x0
_0xA0000:
	.DB  0x49,0x6E,0x69,0x74,0x69,0x61,0x6C,0x69
	.DB  0x7A,0x69,0x6E,0x67,0x20,0x41,0x44,0x43
	.DB  0x2E,0x2E,0x20,0x0,0x4F,0x4B,0xD,0xA
	.DB  0x0
_0xC0003:
	.DB  0x63,0x0,0x0,0x0,0x63,0x0,0x0,0x0
	.DB  0x63,0x0,0x0,0x0
_0xC0000:
	.DB  0x63,0x5F,0x74,0x69,0x6D,0x65,0x5B,0x25
	.DB  0x6C,0x64,0x5D,0x20,0x26,0x20,0x73,0x5F
	.DB  0x74,0x69,0x6D,0x65,0x5B,0x25,0x6C,0x64
	.DB  0x5D,0x20,0x3D,0x3E,0x20,0x64,0x69,0x66
	.DB  0x66,0x5B,0x25,0x6C,0x64,0x5D,0xD,0xA
	.DB  0x0,0x3E,0x3E,0x20,0x52,0x54,0x43,0x5F
	.DB  0x73,0x65,0x74,0x42,0x69,0x6E,0x61,0x72
	.DB  0x79,0x20,0x52,0x54,0x43,0x20,0x53,0x79
	.DB  0x6E,0x63,0x2E,0xD,0xA,0x0,0x3C,0x52
	.DB  0x54,0x43,0x5F,0x73,0x65,0x74,0x44,0x61
	.DB  0x74,0x65,0x54,0x69,0x6D,0x65,0x3E,0x20
	.DB  0x54,0x69,0x6D,0x65,0x7A,0x6F,0x6E,0x65
	.DB  0x20,0x6F,0x75,0x74,0x20,0x6F,0x66,0x20
	.DB  0x72,0x61,0x6E,0x67,0x65,0x20,0x28,0x25
	.DB  0x2B,0x64,0x29,0xD,0xA,0x0,0x4D,0x6F
	.DB  0x6E,0x2E,0x20,0x0,0x54,0x75,0x65,0x2E
	.DB  0x20,0x0,0x57,0x65,0x64,0x2E,0x20,0x0
	.DB  0x54,0x68,0x75,0x2E,0x20,0x0,0x46,0x72
	.DB  0x69,0x2E,0x20,0x0,0x53,0x61,0x74,0x2E
	.DB  0x20,0x0,0x53,0x75,0x6E,0x2E,0x20,0x0
	.DB  0x5B,0x25,0x64,0x5D,0x25,0x30,0x34,0x64
	.DB  0x2D,0x25,0x30,0x32,0x64,0x2D,0x25,0x30
	.DB  0x32,0x64,0x20,0x25,0x30,0x32,0x64,0x3A
	.DB  0x25,0x30,0x32,0x64,0x3A,0x25,0x30,0x32
	.DB  0x64,0xD,0xA,0x0,0x52,0x75,0x6E,0x6E
	.DB  0x69,0x6E,0x67,0x20,0x77,0x69,0x74,0x68
	.DB  0x20,0x53,0x79,0x73,0x74,0x65,0x6D,0x20
	.DB  0x43,0x6C,0x6F,0x63,0x6B,0x20,0x40,0x20
	.DB  0x0
_0xE0003:
	.DB  0x1
_0xE0004:
	.DB  0x1
_0xE0005:
	.DB  0x1,0x1,0x1,0x1,0x1
_0xE0006:
	.DB  0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1
	.DB  0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1
_0xE0007:
	.DB  0x1,0x1,0x1,0x1,0x1
_0xE0008:
	.DB  0x1
_0xE0009:
	.DB  0x1
_0xE000A:
	.DB  0x1
_0xE0000:
	.DB  0x3C,0x67,0x65,0x74,0x50,0x72,0x6F,0x70
	.DB  0x65,0x72,0x74,0x69,0x65,0x73,0x43,0x6F
	.DB  0x6E,0x66,0x69,0x67,0x3E,0x20,0x6E,0x6F
	.DB  0x20,0x63,0x6F,0x6E,0x66,0x69,0x67,0x75
	.DB  0x72,0x61,0x74,0x69,0x6F,0x6E,0x2C,0x20
	.DB  0x75,0x73,0x65,0x20,0x64,0x65,0x66,0x61
	.DB  0x75,0x6C,0x74,0xD,0xA,0x0,0x3C,0x67
	.DB  0x65,0x74,0x4F,0x70,0x65,0x72,0x61,0x74
	.DB  0x69,0x6E,0x67,0x43,0x6F,0x6E,0x66,0x69
	.DB  0x67,0x3E,0x20,0x6E,0x6F,0x20,0x63,0x6F
	.DB  0x6E,0x66,0x69,0x67,0x75,0x72,0x61,0x74
	.DB  0x69,0x6F,0x6E,0x2C,0x20,0x75,0x73,0x65
	.DB  0x20,0x64,0x65,0x66,0x61,0x75,0x6C,0x74
	.DB  0xD,0xA,0x0,0x3C,0x67,0x65,0x74,0x4F
	.DB  0x70,0x65,0x72,0x61,0x74,0x69,0x6E,0x67
	.DB  0x43,0x6F,0x6E,0x66,0x69,0x67,0x3E,0x20
	.DB  0x6D,0x6F,0x64,0x65,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x3E,0x3E,0x20,0x30,0x78,0x25,0x30,0x32
	.DB  0x58,0xD,0xA,0x0,0x3C,0x67,0x65,0x74
	.DB  0x4F,0x70,0x65,0x72,0x61,0x74,0x69,0x6E
	.DB  0x67,0x43,0x6F,0x6E,0x66,0x69,0x67,0x3E
	.DB  0x20,0x64,0x65,0x76,0x69,0x63,0x65,0x45
	.DB  0x6E,0x61,0x62,0x6C,0x65,0x20,0x20,0x20
	.DB  0x20,0x3E,0x3E,0x20,0x30,0x78,0x25,0x30
	.DB  0x32,0x58,0xD,0xA,0x0,0x3C,0x67,0x65
	.DB  0x74,0x4F,0x70,0x65,0x72,0x61,0x74,0x69
	.DB  0x6E,0x67,0x43,0x6F,0x6E,0x66,0x69,0x67
	.DB  0x3E,0x20,0x61,0x6C,0x61,0x72,0x6D,0x45
	.DB  0x6E,0x61,0x62,0x6C,0x65,0x20,0x20,0x20
	.DB  0x20,0x20,0x3E,0x3E,0x20,0x30,0x78,0x25
	.DB  0x30,0x32,0x58,0xD,0xA,0x0,0x3C,0x67
	.DB  0x65,0x74,0x4F,0x70,0x65,0x72,0x61,0x74
	.DB  0x69,0x6E,0x67,0x43,0x6F,0x6E,0x66,0x69
	.DB  0x67,0x3E,0x20,0x73,0x65,0x6E,0x73,0x6F
	.DB  0x72,0x45,0x6E,0x61,0x62,0x6C,0x65,0x20
	.DB  0x20,0x20,0x20,0x3E,0x3E,0x20,0x0,0x5B
	.DB  0x30,0x78,0x25,0x30,0x32,0x58,0x5D,0x0
	.DB  0x3C,0x67,0x65,0x74,0x53,0x65,0x6E,0x73
	.DB  0x6F,0x72,0x43,0x6F,0x6E,0x66,0x69,0x67
	.DB  0x3E,0x20,0x73,0x65,0x6E,0x73,0x6F,0x72
	.DB  0x20,0x63,0x68,0x61,0x6E,0x6E,0x65,0x6C
	.DB  0x20,0x6F,0x75,0x74,0x20,0x6F,0x66,0x20
	.DB  0x72,0x61,0x6E,0x67,0x65,0x20,0x28,0x25
	.DB  0x64,0x29,0xD,0xA,0x0,0x3C,0x67,0x65
	.DB  0x74,0x53,0x65,0x6E,0x73,0x6F,0x72,0x43
	.DB  0x6F,0x6E,0x66,0x69,0x67,0x3E,0x20,0x6E
	.DB  0x6F,0x20,0x63,0x6F,0x6E,0x66,0x69,0x67
	.DB  0x75,0x72,0x61,0x74,0x69,0x6F,0x6E,0x2C
	.DB  0x20,0x75,0x73,0x65,0x20,0x64,0x65,0x66
	.DB  0x61,0x75,0x6C,0x74,0xD,0xA,0x0,0x3C
	.DB  0x67,0x65,0x74,0x41,0x75,0x78,0x44,0x69
	.DB  0x6E,0x43,0x6F,0x6E,0x66,0x69,0x67,0x3E
	.DB  0x20,0x64,0x69,0x67,0x69,0x74,0x61,0x6C
	.DB  0x20,0x69,0x6E,0x70,0x75,0x74,0x20,0x63
	.DB  0x68,0x61,0x6E,0x6E,0x65,0x6C,0x20,0x6F
	.DB  0x75,0x74,0x20,0x6F,0x66,0x20,0x72,0x61
	.DB  0x6E,0x67,0x65,0x20,0x28,0x25,0x64,0x29
	.DB  0xD,0xA,0x0,0x3C,0x67,0x65,0x74,0x41
	.DB  0x75,0x78,0x44,0x69,0x6E,0x43,0x6F,0x6E
	.DB  0x66,0x69,0x67,0x3E,0x20,0x6E,0x6F,0x20
	.DB  0x63,0x6F,0x6E,0x66,0x69,0x67,0x75,0x72
	.DB  0x61,0x74,0x69,0x6F,0x6E,0x2C,0x20,0x75
	.DB  0x73,0x65,0x20,0x64,0x65,0x66,0x61,0x75
	.DB  0x6C,0x74,0xD,0xA,0x0,0x3C,0x67,0x65
	.DB  0x74,0x41,0x75,0x78,0x44,0x6F,0x75,0x74
	.DB  0x43,0x6F,0x6E,0x66,0x69,0x67,0x3E,0x20
	.DB  0x64,0x69,0x67,0x69,0x74,0x61,0x6C,0x20
	.DB  0x6F,0x75,0x74,0x70,0x75,0x74,0x20,0x63
	.DB  0x68,0x61,0x6E,0x6E,0x65,0x6C,0x20,0x6F
	.DB  0x75,0x74,0x20,0x6F,0x66,0x20,0x72,0x61
	.DB  0x6E,0x67,0x65,0x20,0x28,0x25,0x64,0x29
	.DB  0xD,0xA,0x0,0x3C,0x67,0x65,0x74,0x41
	.DB  0x75,0x78,0x44,0x6F,0x75,0x74,0x43,0x6F
	.DB  0x6E,0x66,0x69,0x67,0x3E,0x20,0x6E,0x6F
	.DB  0x20,0x63,0x6F,0x6E,0x66,0x69,0x67,0x75
	.DB  0x72,0x61,0x74,0x69,0x6F,0x6E,0x2C,0x20
	.DB  0x75,0x73,0x65,0x20,0x64,0x65,0x66,0x61
	.DB  0x75,0x6C,0x74,0xD,0xA,0x0,0x3C,0x67
	.DB  0x65,0x74,0x41,0x75,0x78,0x44,0x6F,0x75
	.DB  0x74,0x43,0x6F,0x6E,0x66,0x69,0x67,0x3E
	.DB  0x20,0x2D,0x2D,0x20,0x43,0x48,0x20,0x25
	.DB  0x64,0x20,0x2D,0x2D,0x20,0xD,0xA,0x0
	.DB  0x3C,0x67,0x65,0x74,0x41,0x75,0x78,0x44
	.DB  0x6F,0x75,0x74,0x43,0x6F,0x6E,0x66,0x69
	.DB  0x67,0x3E,0x20,0x65,0x6E,0x61,0x62,0x6C
	.DB  0x65,0x20,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x5B,0x30,0x78,0x25,0x30,0x32
	.DB  0x58,0x5D,0xD,0xA,0x0,0x3C,0x67,0x65
	.DB  0x74,0x41,0x75,0x78,0x44,0x6F,0x75,0x74
	.DB  0x43,0x6F,0x6E,0x66,0x69,0x67,0x3E,0x20
	.DB  0x73,0x74,0x61,0x74,0x65,0x4F,0x6E,0x45
	.DB  0x76,0x65,0x6E,0x74,0x20,0x20,0x20,0x5B
	.DB  0x30,0x78,0x25,0x30,0x32,0x58,0x5D,0xD
	.DB  0xA,0x0,0x3C,0x67,0x65,0x74,0x41,0x75
	.DB  0x78,0x44,0x6F,0x75,0x74,0x43,0x6F,0x6E
	.DB  0x66,0x69,0x67,0x3E,0x20,0x6E,0x75,0x6D
	.DB  0x62,0x65,0x72,0x45,0x76,0x53,0x72,0x63
	.DB  0x20,0x20,0x20,0x20,0x5B,0x25,0x64,0x5D
	.DB  0x2D,0x3E,0x0,0x3C,0x67,0x65,0x74,0x41
	.DB  0x75,0x78,0x41,0x69,0x6E,0x43,0x6F,0x6E
	.DB  0x66,0x69,0x67,0x3E,0x20,0x61,0x6E,0x61
	.DB  0x6C,0x6F,0x67,0x20,0x69,0x6E,0x70,0x75
	.DB  0x74,0x20,0x63,0x68,0x61,0x6E,0x6E,0x65
	.DB  0x6C,0x20,0x6F,0x75,0x74,0x20,0x6F,0x66
	.DB  0x20,0x72,0x61,0x6E,0x67,0x65,0x20,0x28
	.DB  0x25,0x64,0x29,0xD,0xA,0x0,0x3C,0x67
	.DB  0x65,0x74,0x41,0x75,0x78,0x41,0x69,0x6E
	.DB  0x43,0x6F,0x6E,0x66,0x69,0x67,0x3E,0x20
	.DB  0x6E,0x6F,0x20,0x63,0x6F,0x6E,0x66,0x69
	.DB  0x67,0x75,0x72,0x61,0x74,0x69,0x6F,0x6E
	.DB  0x2C,0x20,0x75,0x73,0x65,0x20,0x64,0x65
	.DB  0x66,0x61,0x75,0x6C,0x74,0xD,0xA,0x0
	.DB  0x3C,0x67,0x65,0x74,0x41,0x75,0x78,0x41
	.DB  0x6F,0x75,0x74,0x43,0x6F,0x6E,0x66,0x69
	.DB  0x67,0x3E,0x20,0x61,0x6E,0x61,0x6C,0x6F
	.DB  0x67,0x20,0x6F,0x75,0x74,0x70,0x75,0x74
	.DB  0x20,0x63,0x68,0x61,0x6E,0x6E,0x65,0x6C
	.DB  0x20,0x6F,0x75,0x74,0x20,0x6F,0x66,0x20
	.DB  0x72,0x61,0x6E,0x67,0x65,0x20,0x28,0x25
	.DB  0x64,0x29,0xD,0xA,0x0,0x3C,0x67,0x65
	.DB  0x74,0x41,0x75,0x78,0x41,0x6F,0x75,0x74
	.DB  0x43,0x6F,0x6E,0x66,0x69,0x67,0x3E,0x20
	.DB  0x6E,0x6F,0x20,0x63,0x6F,0x6E,0x66,0x69
	.DB  0x67,0x75,0x72,0x61,0x74,0x69,0x6F,0x6E
	.DB  0x2C,0x20,0x75,0x73,0x65,0x20,0x64,0x65
	.DB  0x66,0x61,0x75,0x6C,0x74,0xD,0xA,0x0
	.DB  0x3C,0x67,0x65,0x74,0x42,0x75,0x7A,0x7A
	.DB  0x65,0x72,0x43,0x6F,0x6E,0x66,0x69,0x67
	.DB  0x3E,0x20,0x6E,0x6F,0x20,0x63,0x6F,0x6E
	.DB  0x66,0x69,0x67,0x75,0x72,0x61,0x74,0x69
	.DB  0x6F,0x6E,0x2C,0x20,0x75,0x73,0x65,0x20
	.DB  0x64,0x65,0x66,0x61,0x75,0x6C,0x74,0xD
	.DB  0xA,0x0,0x3C,0x67,0x65,0x74,0x42,0x75
	.DB  0x7A,0x7A,0x65,0x72,0x43,0x6F,0x6E,0x66
	.DB  0x69,0x67,0x3E,0x20,0x65,0x6E,0x61,0x62
	.DB  0x6C,0x65,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x3E,0x3E
	.DB  0x5B,0x30,0x78,0x25,0x30,0x32,0x58,0x5D
	.DB  0xD,0xA,0x0,0x3C,0x67,0x65,0x74,0x42
	.DB  0x75,0x7A,0x7A,0x65,0x72,0x43,0x6F,0x6E
	.DB  0x66,0x69,0x67,0x3E,0x20,0x65,0x76,0x65
	.DB  0x6E,0x74,0x53,0x6F,0x75,0x72,0x63,0x65
	.DB  0x4E,0x75,0x6D,0x62,0x65,0x72,0x20,0x3E
	.DB  0x3E,0x5B,0x25,0x64,0x5D,0xD,0xA,0x0
	.DB  0x3C,0x67,0x65,0x74,0x42,0x75,0x7A,0x7A
	.DB  0x65,0x72,0x43,0x6F,0x6E,0x66,0x69,0x67
	.DB  0x3E,0x20,0x65,0x76,0x65,0x6E,0x74,0x53
	.DB  0x6F,0x75,0x72,0x63,0x65,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x3E,0x3E,0x0,0x3C
	.DB  0x67,0x65,0x74,0x45,0x6E,0x76,0x41,0x6C
	.DB  0x61,0x72,0x6D,0x43,0x6F,0x6E,0x66,0x69
	.DB  0x67,0x3E,0x20,0x6E,0x6F,0x20,0x63,0x6F
	.DB  0x6E,0x66,0x69,0x67,0x75,0x72,0x61,0x74
	.DB  0x69,0x6F,0x6E,0x2C,0x20,0x75,0x73,0x65
	.DB  0x20,0x64,0x65,0x66,0x61,0x75,0x6C,0x74
	.DB  0xD,0xA,0x0,0x3C,0x67,0x65,0x74,0x45
	.DB  0x6E,0x76,0x41,0x6C,0x61,0x72,0x6D,0x43
	.DB  0x6F,0x6E,0x66,0x69,0x67,0x3E,0x20,0x67
	.DB  0x73,0x6D,0x52,0x53,0x53,0x49,0x4C,0x65
	.DB  0x76,0x65,0x6C,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x5B,0x25,0x66,0x5D
	.DB  0xD,0xA,0x0,0x3C,0x67,0x65,0x74,0x45
	.DB  0x6E,0x76,0x41,0x6C,0x61,0x72,0x6D,0x43
	.DB  0x6F,0x6E,0x66,0x69,0x67,0x3E,0x20,0x67
	.DB  0x73,0x6D,0x43,0x72,0x65,0x64,0x69,0x74
	.DB  0x42,0x61,0x6C,0x61,0x6E,0x63,0x65,0x20
	.DB  0x20,0x20,0x20,0x20,0x5B,0x25,0x64,0x5D
	.DB  0xD,0xA,0x0,0x3C,0x67,0x65,0x74,0x45
	.DB  0x6E,0x76,0x41,0x6C,0x61,0x72,0x6D,0x43
	.DB  0x6F,0x6E,0x66,0x69,0x67,0x3E,0x20,0x62
	.DB  0x61,0x74,0x74,0x65,0x72,0x79,0x4C,0x65
	.DB  0x76,0x65,0x6C,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x5B,0x25,0x66,0x5D
	.DB  0xD,0xA,0x0,0x3C,0x67,0x65,0x74,0x45
	.DB  0x6E,0x76,0x41,0x6C,0x61,0x72,0x6D,0x43
	.DB  0x6F,0x6E,0x66,0x69,0x67,0x3E,0x20,0x63
	.DB  0x6F,0x6D,0x6D,0x53,0x69,0x67,0x6E,0x61
	.DB  0x6C,0x4C,0x65,0x76,0x65,0x6C,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x5B,0x25,0x66,0x5D
	.DB  0xD,0xA,0x0,0x3C,0x67,0x65,0x74,0x45
	.DB  0x6E,0x76,0x41,0x6C,0x61,0x72,0x6D,0x43
	.DB  0x6F,0x6E,0x66,0x69,0x67,0x3E,0x20,0x63
	.DB  0x6F,0x6D,0x6D,0x4C,0x6F,0x73,0x74,0x44
	.DB  0x65,0x6C,0x61,0x79,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x5B,0x25,0x64,0x5D
	.DB  0xD,0xA,0x0,0x3C,0x67,0x65,0x74,0x45
	.DB  0x6E,0x76,0x41,0x6C,0x61,0x72,0x6D,0x43
	.DB  0x6F,0x6E,0x66,0x69,0x67,0x3E,0x20,0x6D
	.DB  0x65,0x6D,0x6F,0x72,0x79,0x4D,0x69,0x6E
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x5B,0x25,0x75,0x5D
	.DB  0xD,0xA,0x0,0x3C,0x67,0x65,0x74,0x53
	.DB  0x74,0x61,0x74,0x75,0x73,0x52,0x65,0x70
	.DB  0x6F,0x72,0x74,0x43,0x6F,0x6E,0x66,0x69
	.DB  0x67,0x3E,0x20,0x6E,0x6F,0x20,0x63,0x6F
	.DB  0x6E,0x66,0x69,0x67,0x75,0x72,0x61,0x74
	.DB  0x69,0x6F,0x6E,0x2C,0x20,0x75,0x73,0x65
	.DB  0x20,0x64,0x65,0x66,0x61,0x75,0x6C,0x74
	.DB  0xD,0xA,0x0,0x3C,0x67,0x65,0x74,0x53
	.DB  0x74,0x61,0x74,0x75,0x73,0x52,0x65,0x70
	.DB  0x6F,0x72,0x74,0x43,0x6F,0x6E,0x66,0x69
	.DB  0x67,0x3E,0x20,0x61,0x63,0x63,0x6D,0x20
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5B
	.DB  0x30,0x78,0x25,0x30,0x32,0x58,0x5D,0xD
	.DB  0xA,0x0,0x3C,0x67,0x65,0x74,0x53,0x74
	.DB  0x61,0x74,0x75,0x73,0x52,0x65,0x70,0x6F
	.DB  0x72,0x74,0x43,0x6F,0x6E,0x66,0x69,0x67
	.DB  0x3E,0x20,0x69,0x6E,0x74,0x76,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x5B,0x25
	.DB  0x64,0x5D,0xD,0xA,0x0,0x3C,0x73,0x65
	.DB  0x74,0x4F,0x70,0x65,0x72,0x61,0x74,0x69
	.DB  0x6E,0x67,0x43,0x6F,0x6E,0x66,0x69,0x67
	.DB  0x3E,0x20,0x45,0x72,0x72,0x6F,0x72,0x3A
	.DB  0x20,0x6F,0x70,0x65,0x72,0x61,0x74,0x69
	.DB  0x6E,0x67,0x20,0x6D,0x6F,0x64,0x65,0x20
	.DB  0x69,0x6E,0x76,0x61,0x6C,0x69,0x64,0x20
	.DB  0x5B,0x30,0x78,0x25,0x30,0x32,0x58,0x5D
	.DB  0xD,0xA,0x0,0xD,0xA,0x20,0x6D,0x6F
	.DB  0x64,0x65,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x3E,0x3E
	.DB  0x20,0x30,0x78,0x25,0x30,0x32,0x58,0x0
	.DB  0xD,0xA,0x20,0x64,0x65,0x76,0x69,0x63
	.DB  0x65,0x45,0x6E,0x61,0x62,0x6C,0x65,0x20
	.DB  0x20,0x20,0x20,0x3E,0x3E,0x20,0x30,0x78
	.DB  0x25,0x30,0x32,0x58,0x0,0xD,0xA,0x20
	.DB  0x61,0x6C,0x61,0x72,0x6D,0x45,0x6E,0x61
	.DB  0x62,0x6C,0x65,0x20,0x20,0x20,0x20,0x20
	.DB  0x3E,0x3E,0x20,0x30,0x78,0x25,0x30,0x32
	.DB  0x58,0x0,0xD,0xA,0x20,0x73,0x65,0x6E
	.DB  0x73,0x6F,0x72,0x45,0x6E,0x61,0x62,0x6C
	.DB  0x65,0x20,0x20,0x20,0x20,0x3E,0x3E,0x20
	.DB  0x0,0x3C,0x73,0x65,0x74,0x53,0x65,0x6E
	.DB  0x73,0x6F,0x72,0x43,0x6F,0x6E,0x66,0x69
	.DB  0x67,0x3E,0x20,0x45,0x52,0x52,0x3A,0x20
	.DB  0x63,0x68,0x61,0x6E,0x6E,0x65,0x6C,0x20
	.DB  0x6F,0x75,0x74,0x20,0x6F,0x66,0x20,0x72
	.DB  0x61,0x6E,0x67,0x65,0xD,0xA,0x0,0x3C
	.DB  0x73,0x65,0x74,0x53,0x65,0x6E,0x73,0x6F
	.DB  0x72,0x43,0x6F,0x6E,0x66,0x69,0x67,0x3E
	.DB  0x20,0x45,0x52,0x52,0x3A,0x20,0x73,0x61
	.DB  0x6D,0x70,0x6C,0x69,0x6E,0x67,0x52,0x61
	.DB  0x74,0x65,0x20,0x63,0x6F,0x75,0x6C,0x64
	.DB  0x6E,0x27,0x74,0x20,0x62,0x65,0x20,0x73
	.DB  0x65,0x74,0x20,0x74,0x6F,0x20,0x30,0xD
	.DB  0xA,0x0,0xD,0xA,0x20,0x73,0x61,0x6D
	.DB  0x70,0x6C,0x69,0x6E,0x67,0x52,0x61,0x74
	.DB  0x65,0x20,0x20,0x20,0x20,0x3E,0x3E,0x20
	.DB  0x30,0x78,0x25,0x30,0x34,0x58,0x0,0xD
	.DB  0xA,0x20,0x72,0x65,0x4F,0x63,0x63,0x75
	.DB  0x72,0x72,0x65,0x6E,0x63,0x65,0x20,0x20
	.DB  0x20,0x20,0x3E,0x3E,0x20,0x30,0x78,0x25
	.DB  0x30,0x34,0x58,0x0,0xD,0xA,0x20,0x74
	.DB  0x69,0x6D,0x65,0x53,0x74,0x61,0x72,0x74
	.DB  0x48,0x6F,0x75,0x72,0x20,0x20,0x20,0x3E
	.DB  0x3E,0x20,0x30,0x78,0x25,0x30,0x32,0x58
	.DB  0x0,0xD,0xA,0x20,0x74,0x69,0x6D,0x65
	.DB  0x53,0x74,0x61,0x72,0x74,0x4D,0x69,0x6E
	.DB  0x20,0x20,0x20,0x20,0x3E,0x3E,0x20,0x30
	.DB  0x78,0x25,0x30,0x32,0x58,0x0,0xD,0xA
	.DB  0x20,0x74,0x69,0x6D,0x65,0x53,0x74,0x6F
	.DB  0x70,0x48,0x6F,0x75,0x72,0x20,0x20,0x20
	.DB  0x20,0x3E,0x3E,0x20,0x30,0x78,0x25,0x30
	.DB  0x32,0x58,0x0,0xD,0xA,0x20,0x74,0x69
	.DB  0x6D,0x65,0x53,0x74,0x6F,0x70,0x4D,0x69
	.DB  0x6E,0x20,0x20,0x20,0x20,0x20,0x3E,0x3E
	.DB  0x20,0x30,0x78,0x25,0x30,0x32,0x58,0x0
	.DB  0xD,0xA,0x20,0x6C,0x6F,0x77,0x65,0x72
	.DB  0x4C,0x69,0x6D,0x69,0x74,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x3E,0x3E,0x20,0x25,0x66
	.DB  0x20,0x5B,0x25,0x30,0x34,0x6C,0x58,0x5D
	.DB  0x0,0xD,0xA,0x20,0x6C,0x6F,0x77,0x65
	.DB  0x72,0x44,0x65,0x6C,0x61,0x79,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x3E,0x3E,0x20,0x25
	.DB  0x64,0x20,0x5B,0x25,0x30,0x32,0x58,0x5D
	.DB  0x0,0xD,0xA,0x20,0x6C,0x6F,0x77,0x65
	.DB  0x72,0x45,0x78,0x74,0x72,0x65,0x6D,0x65
	.DB  0x20,0x20,0x20,0x20,0x3E,0x3E,0x20,0x25
	.DB  0x66,0x20,0x5B,0x25,0x30,0x34,0x6C,0x58
	.DB  0x5D,0x0,0xD,0xA,0x20,0x75,0x70,0x70
	.DB  0x65,0x72,0x4C,0x69,0x6D,0x69,0x74,0x20
	.DB  0x20,0x20,0x20,0x20,0x20,0x3E,0x3E,0x20
	.DB  0x25,0x66,0x20,0x5B,0x25,0x30,0x34,0x6C
	.DB  0x58,0x5D,0x0,0xD,0xA,0x20,0x75,0x70
	.DB  0x70,0x65,0x72,0x44,0x65,0x6C,0x61,0x79
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x3E,0x3E
	.DB  0x20,0x25,0x64,0x20,0x5B,0x25,0x30,0x32
	.DB  0x58,0x5D,0x0,0xD,0xA,0x20,0x75,0x70
	.DB  0x70,0x65,0x72,0x45,0x78,0x74,0x72,0x65
	.DB  0x6D,0x65,0x20,0x20,0x20,0x20,0x3E,0x3E
	.DB  0x20,0x25,0x66,0x20,0x5B,0x25,0x30,0x34
	.DB  0x6C,0x58,0x5D,0x0,0xD,0xA,0x20,0x63
	.DB  0x68,0x61,0x6E,0x6E,0x65,0x6C,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x3E
	.DB  0x3E,0x20,0x5B,0x25,0x64,0x5D,0x0,0xD
	.DB  0xA,0x20,0x63,0x68,0x61,0x6E,0x6E,0x65
	.DB  0x6C,0x45,0x6E,0x61,0x62,0x6C,0x65,0x20
	.DB  0x20,0x20,0x3E,0x3E,0x20,0x30,0x78,0x25
	.DB  0x30,0x32,0x58,0x0,0xD,0xA,0x20,0x61
	.DB  0x6C,0x61,0x72,0x6D,0x44,0x65,0x6C,0x61
	.DB  0x79,0x20,0x20,0x20,0x20,0x20,0x20,0x3E
	.DB  0x3E,0x20,0x25,0x64,0x0,0xD,0xA,0x3C
	.DB  0x73,0x65,0x74,0x41,0x75,0x78,0x44,0x6F
	.DB  0x75,0x74,0x43,0x6F,0x6E,0x66,0x69,0x67
	.DB  0x3E,0x20,0x43,0x68,0x61,0x6E,0x6E,0x65
	.DB  0x6C,0x20,0x45,0x72,0x72,0x6F,0x72,0x21
	.DB  0x21,0xD,0xA,0x0,0xD,0xA,0x3C,0x73
	.DB  0x65,0x74,0x41,0x75,0x78,0x44,0x6F,0x75
	.DB  0x74,0x43,0x6F,0x6E,0x66,0x69,0x67,0x3E
	.DB  0x20,0x65,0x76,0x65,0x6E,0x74,0x53,0x6F
	.DB  0x75,0x72,0x63,0x65,0x4E,0x75,0x6D,0x62
	.DB  0x65,0x72,0x20,0x69,0x73,0x20,0x74,0x6F
	.DB  0x6F,0x20,0x6C,0x6F,0x6E,0x67,0x20,0x28
	.DB  0x25,0x64,0x29,0x21,0x21,0xD,0xA,0x0
	.DB  0xD,0xA,0x20,0x63,0x68,0x61,0x6E,0x6E
	.DB  0x65,0x6C,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x20,0x3E,0x3E,0x20
	.DB  0x5B,0x25,0x64,0x5D,0x0,0xD,0xA,0x20
	.DB  0x63,0x68,0x61,0x6E,0x6E,0x65,0x6C,0x45
	.DB  0x6E,0x61,0x62,0x6C,0x65,0x20,0x20,0x20
	.DB  0x20,0x20,0x3E,0x3E,0x20,0x30,0x78,0x25
	.DB  0x30,0x32,0x58,0x0,0xD,0xA,0x20,0x73
	.DB  0x74,0x61,0x74,0x65,0x4F,0x6E,0x45,0x76
	.DB  0x65,0x6E,0x74,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x3E,0x3E,0x20,0x30,0x78,0x25,0x30
	.DB  0x32,0x58,0x0,0xD,0xA,0x20,0x65,0x76
	.DB  0x65,0x6E,0x74,0x53,0x6F,0x75,0x72,0x63
	.DB  0x65,0x4E,0x75,0x6D,0x62,0x65,0x72,0x20
	.DB  0x3E,0x3E,0x20,0x25,0x64,0x0,0xD,0xA
	.DB  0x20,0x65,0x76,0x65,0x6E,0x74,0x53,0x6F
	.DB  0x75,0x72,0x63,0x65,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x3E,0x3E,0x20,0x0,0xD
	.DB  0xA,0x20,0x61,0x6C,0x61,0x72,0x6D,0x4C
	.DB  0x65,0x76,0x65,0x6C,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x3E,0x3E,0x20,0x25,0x64,0x0
	.DB  0xD,0xA,0x3C,0x73,0x65,0x74,0x41,0x75
	.DB  0x78,0x41,0x6F,0x75,0x74,0x43,0x6F,0x6E
	.DB  0x66,0x69,0x67,0x3E,0x20,0x43,0x68,0x61
	.DB  0x6E,0x6E,0x65,0x6C,0x20,0x45,0x72,0x72
	.DB  0x6F,0x72,0x21,0x21,0xD,0xA,0x0,0xD
	.DB  0xA,0x3C,0x73,0x65,0x74,0x41,0x75,0x78
	.DB  0x41,0x6F,0x75,0x74,0x43,0x6F,0x6E,0x66
	.DB  0x69,0x67,0x3E,0x20,0x65,0x76,0x65,0x6E
	.DB  0x74,0x53,0x6F,0x75,0x72,0x63,0x65,0x4E
	.DB  0x75,0x6D,0x62,0x65,0x72,0x20,0x69,0x73
	.DB  0x20,0x74,0x6F,0x6F,0x20,0x6C,0x6F,0x6E
	.DB  0x67,0x20,0x28,0x25,0x64,0x29,0x21,0x21
	.DB  0xD,0xA,0x0,0xD,0xA,0x20,0x6C,0x65
	.DB  0x76,0x65,0x6C,0x4F,0x6E,0x45,0x76,0x65
	.DB  0x6E,0x74,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x3E,0x3E,0x20,0x25,0x66,0x0,0xD,0xA
	.DB  0x3C,0x73,0x65,0x74,0x42,0x75,0x7A,0x7A
	.DB  0x65,0x72,0x43,0x6F,0x6E,0x66,0x69,0x67
	.DB  0x3E,0x20,0x65,0x76,0x65,0x6E,0x74,0x53
	.DB  0x6F,0x75,0x72,0x63,0x65,0x4E,0x75,0x6D
	.DB  0x62,0x65,0x72,0x20,0x69,0x73,0x20,0x74
	.DB  0x6F,0x6F,0x20,0x6C,0x6F,0x6E,0x67,0x20
	.DB  0x28,0x25,0x64,0x29,0x21,0x21,0xD,0xA
	.DB  0x0,0xD,0xA,0x20,0x65,0x6E,0x61,0x62
	.DB  0x6C,0x65,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x3E,0x3E
	.DB  0x20,0x30,0x78,0x25,0x30,0x32,0x58,0x0
	.DB  0xD,0xA,0x20,0x65,0x76,0x65,0x6E,0x74
	.DB  0x53,0x6F,0x75,0x72,0x63,0x65,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x20,0x3E,0x3E,0x0
	.DB  0xD,0xA,0x20,0x67,0x73,0x6D,0x52,0x53
	.DB  0x53,0x49,0x4C,0x65,0x76,0x65,0x6C,0x20
	.DB  0x20,0x20,0x20,0x20,0x3E,0x3E,0x20,0x25
	.DB  0x66,0x20,0x64,0x42,0x0,0xD,0xA,0x20
	.DB  0x67,0x73,0x6D,0x43,0x72,0x65,0x64,0x69
	.DB  0x74,0x42,0x61,0x6C,0x61,0x6E,0x63,0x65
	.DB  0x20,0x3E,0x3E,0x20,0x25,0x64,0x20,0x42
	.DB  0x61,0x68,0x74,0x0,0xD,0xA,0x20,0x62
	.DB  0x61,0x74,0x74,0x65,0x72,0x79,0x4C,0x65
	.DB  0x76,0x65,0x6C,0x20,0x20,0x20,0x20,0x20
	.DB  0x3E,0x3E,0x20,0x25,0x66,0x20,0x56,0x6F
	.DB  0x6C,0x74,0x73,0x0,0xD,0xA,0x20,0x63
	.DB  0x6F,0x6D,0x6D,0x53,0x69,0x67,0x6E,0x61
	.DB  0x6C,0x4C,0x65,0x76,0x65,0x6C,0x20,0x20
	.DB  0x3E,0x3E,0x20,0x25,0x66,0x20,0x64,0x42
	.DB  0x0,0xD,0xA,0x20,0x63,0x6F,0x6D,0x6D
	.DB  0x4C,0x6F,0x73,0x74,0x44,0x65,0x6C,0x61
	.DB  0x79,0x20,0x20,0x20,0x20,0x3E,0x3E,0x20
	.DB  0x25,0x64,0x20,0x73,0x65,0x63,0x0,0xD
	.DB  0xA,0x20,0x6D,0x65,0x6D,0x6F,0x72,0x79
	.DB  0x4D,0x69,0x6E,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x3E,0x3E,0x20,0x25,0x64
	.DB  0x20,0x4D,0x42,0x2E,0x0,0xD,0xA,0x20
	.DB  0x61,0x63,0x63,0x6D,0x20,0x20,0x20,0x20
	.DB  0x20,0x3E,0x3E,0x20,0x25,0x66,0x20,0x64
	.DB  0x42,0x0,0xD,0xA,0x20,0x69,0x6E,0x74
	.DB  0x76,0x20,0x20,0x20,0x20,0x20,0x3E,0x3E
	.DB  0x20,0x25,0x64,0x20,0x42,0x61,0x68,0x74
	.DB  0x0,0x3C,0x6D,0x61,0x69,0x6E,0x3E,0x20
	.DB  0x67,0x65,0x74,0x53,0x65,0x6E,0x73,0x6F
	.DB  0x72,0x43,0x6F,0x6E,0x66,0x69,0x67,0x28
	.DB  0x25,0x64,0x29,0x20,0x65,0x72,0x72,0x6F
	.DB  0x72,0xD,0xA,0x0
_0x120000:
	.DB  0x3C,0x45,0x54,0x48,0x5F,0x73,0x65,0x6E
	.DB  0x64,0x4E,0x61,0x63,0x6B,0x3E,0x20,0x73
	.DB  0x65,0x6E,0x64,0x69,0x6E,0x67,0x2E,0x2E
	.DB  0xD,0xA,0x0,0x3C,0x45,0x54,0x48,0x5F
	.DB  0x73,0x65,0x6E,0x64,0x53,0x74,0x61,0x74
	.DB  0x75,0x73,0x52,0x65,0x71,0x75,0x65,0x73
	.DB  0x74,0x41,0x63,0x6B,0x3E,0x20,0x73,0x65
	.DB  0x6E,0x64,0x69,0x6E,0x67,0x2E,0x2E,0xD
	.DB  0xA,0x0,0x3C,0x45,0x54,0x48,0x5F,0x73
	.DB  0x65,0x6E,0x64,0x53,0x74,0x61,0x74,0x75
	.DB  0x73,0x52,0x65,0x70,0x6F,0x72,0x74,0x43
	.DB  0x6D,0x64,0x3E,0x20,0x66,0x72,0x61,0x6D
	.DB  0x65,0x4C,0x65,0x6E,0x20,0x74,0x6F,0x6F
	.DB  0x20,0x6C,0x6F,0x6E,0x67,0x20,0x28,0x25
	.DB  0x64,0x20,0x62,0x79,0x74,0x65,0x73,0x29
	.DB  0xD,0xA,0x0,0x3C,0x45,0x54,0x48,0x5F
	.DB  0x73,0x65,0x6E,0x64,0x53,0x74,0x61,0x74
	.DB  0x75,0x73,0x52,0x65,0x70,0x6F,0x72,0x74
	.DB  0x43,0x6D,0x64,0x3E,0x20,0x6D,0x61,0x6C
	.DB  0x6C,0x6F,0x63,0x20,0x66,0x61,0x69,0x6C
	.DB  0x65,0x64,0x20,0x28,0x25,0x64,0x20,0x62
	.DB  0x79,0x74,0x65,0x73,0x29,0xD,0xA,0x0
	.DB  0x3C,0x45,0x54,0x48,0x5F,0x73,0x65,0x6E
	.DB  0x64,0x45,0x76,0x65,0x6E,0x74,0x52,0x65
	.DB  0x70,0x6F,0x72,0x74,0x43,0x6D,0x64,0x3E
	.DB  0x20,0x57,0x72,0x6F,0x6E,0x67,0x20,0x65
	.DB  0x76,0x65,0x6E,0x74,0x54,0x79,0x70,0x65
	.DB  0x20,0x30,0x78,0x25,0x30,0x32,0x58,0xD
	.DB  0xA,0x0,0x3C,0x45,0x54,0x48,0x5F,0x73
	.DB  0x65,0x6E,0x64,0x45,0x76,0x65,0x6E,0x74
	.DB  0x52,0x65,0x70,0x6F,0x72,0x74,0x43,0x6D
	.DB  0x64,0x3E,0x20,0x61,0x64,0x64,0x45,0x76
	.DB  0x65,0x6E,0x74,0x4C,0x6F,0x67,0x51,0x75
	.DB  0x65,0x75,0x65,0x28,0x30,0x78,0x25,0x30
	.DB  0x32,0x58,0x2C,0x25,0x6C,0x64,0x2C,0x30
	.DB  0x78,0x25,0x30,0x32,0x58,0x2C,0x30,0x78
	.DB  0x25,0x30,0x32,0x58,0x29,0x20,0x66,0x61
	.DB  0x69,0x6C,0x65,0x64,0xD,0xA,0x0,0x3C
	.DB  0x45,0x54,0x48,0x5F,0x73,0x65,0x6E,0x64
	.DB  0x45,0x76,0x65,0x6E,0x74,0x52,0x65,0x70
	.DB  0x6F,0x72,0x74,0x43,0x6D,0x64,0x3E,0x20
	.DB  0x73,0x65,0x6E,0x64,0x69,0x6E,0x67,0x2E
	.DB  0x2E,0xD,0xA,0x0,0x3C,0x45,0x54,0x48
	.DB  0x5F,0x73,0x65,0x6E,0x64,0x43,0x6F,0x6E
	.DB  0x66,0x69,0x67,0x4D,0x61,0x6E,0x61,0x67
	.DB  0x65,0x4E,0x61,0x63,0x6B,0x3E,0x20,0x73
	.DB  0x65,0x6E,0x64,0x69,0x6E,0x67,0x2E,0x2E
	.DB  0xD,0xA,0x0,0x3C,0x45,0x54,0x48,0x5F
	.DB  0x73,0x65,0x6E,0x64,0x43,0x6F,0x6E,0x66
	.DB  0x69,0x67,0x4D,0x61,0x6E,0x61,0x67,0x65
	.DB  0x41,0x63,0x6B,0x3E,0x20,0x66,0x72,0x61
	.DB  0x6D,0x65,0x4C,0x65,0x6E,0x20,0x74,0x6F
	.DB  0x6F,0x20,0x6C,0x6F,0x6E,0x67,0x20,0x28
	.DB  0x25,0x64,0x20,0x62,0x79,0x74,0x65,0x73
	.DB  0x29,0xD,0xA,0x0,0x3C,0x45,0x54,0x48
	.DB  0x5F,0x73,0x65,0x6E,0x64,0x43,0x6F,0x6E
	.DB  0x66,0x69,0x67,0x4D,0x61,0x6E,0x61,0x67
	.DB  0x65,0x41,0x63,0x6B,0x3E,0x20,0x6D,0x61
	.DB  0x6C,0x6C,0x6F,0x63,0x20,0x66,0x61,0x69
	.DB  0x6C,0x65,0x64,0x20,0x28,0x25,0x64,0x20
	.DB  0x62,0x79,0x74,0x65,0x73,0x29,0xD,0xA
	.DB  0x0,0x3C,0x45,0x54,0x48,0x5F,0x73,0x65
	.DB  0x6E,0x64,0x43,0x6F,0x6E,0x66,0x69,0x67
	.DB  0x4D,0x61,0x6E,0x61,0x67,0x65,0x41,0x63
	.DB  0x6B,0x3E,0x20,0x73,0x65,0x6E,0x64,0x69
	.DB  0x6E,0x67,0x2E,0x2E,0xD,0xA,0x0,0x3C
	.DB  0x45,0x54,0x48,0x5F,0x73,0x65,0x6E,0x64
	.DB  0x44,0x61,0x74,0x61,0x52,0x65,0x70,0x6F
	.DB  0x72,0x74,0x43,0x6D,0x64,0x3E,0x20,0x57
	.DB  0x72,0x6F,0x6E,0x67,0x20,0x64,0x61,0x74
	.DB  0x61,0x54,0x79,0x70,0x65,0x20,0x30,0x78
	.DB  0x25,0x30,0x32,0x58,0xD,0xA,0x0,0x3C
	.DB  0x45,0x54,0x48,0x5F,0x73,0x65,0x6E,0x64
	.DB  0x44,0x61,0x74,0x61,0x52,0x65,0x70,0x6F
	.DB  0x72,0x74,0x43,0x6D,0x64,0x3E,0x20,0x61
	.DB  0x64,0x64,0x44,0x61,0x74,0x61,0x4C,0x6F
	.DB  0x67,0x51,0x75,0x65,0x75,0x65,0x28,0x30
	.DB  0x78,0x25,0x30,0x32,0x58,0x2C,0x25,0x6C
	.DB  0x64,0x2C,0x25,0x75,0x2C,0x25,0x2E,0x32
	.DB  0x66,0x29,0x20,0x66,0x61,0x69,0x6C,0x65
	.DB  0x64,0xD,0xA,0x0,0x3C,0x45,0x54,0x48
	.DB  0x5F,0x73,0x65,0x6E,0x64,0x44,0x61,0x74
	.DB  0x61,0x52,0x65,0x70,0x6F,0x72,0x74,0x43
	.DB  0x6D,0x64,0x3E,0x20,0x73,0x65,0x6E,0x64
	.DB  0x69,0x6E,0x67,0x2E,0x2E,0xD,0xA,0x0
	.DB  0x3C,0x45,0x54,0x48,0x5F,0x73,0x65,0x6E
	.DB  0x64,0x4C,0x6F,0x67,0x4D,0x61,0x6E,0x69
	.DB  0x70,0x75,0x6C,0x61,0x74,0x69,0x6F,0x6E
	.DB  0x41,0x63,0x6B,0x3E,0x20,0x73,0x65,0x6E
	.DB  0x64,0x69,0x6E,0x67,0x2E,0x2E,0xD,0xA
	.DB  0x0,0x3C,0x45,0x54,0x48,0x5F,0x73,0x65
	.DB  0x6E,0x64,0x4E,0x65,0x74,0x77,0x6F,0x72
	.DB  0x6B,0x4D,0x61,0x69,0x6E,0x74,0x65,0x6E
	.DB  0x61,0x6E,0x63,0x65,0x41,0x63,0x6B,0x3E
	.DB  0x20,0x73,0x65,0x6E,0x64,0x69,0x6E,0x67
	.DB  0x2E,0x2E,0xD,0xA,0x0,0x3C,0x45,0x54
	.DB  0x48,0x5F,0x72,0x65,0x6D,0x6F,0x74,0x65
	.DB  0x44,0x65,0x76,0x69,0x63,0x65,0x43,0x6F
	.DB  0x6E,0x74,0x72,0x6F,0x6C,0x41,0x63,0x6B
	.DB  0x3E,0x20,0x73,0x65,0x6E,0x64,0x69,0x6E
	.DB  0x67,0x2E,0x2E,0xD,0xA,0x0,0x3C,0x45
	.DB  0x54,0x48,0x5F,0x63,0x6C,0x65,0x61,0x72
	.DB  0x44,0x75,0x70,0x6C,0x69,0x63,0x61,0x74
	.DB  0x65,0x52,0x65,0x71,0x75,0x65,0x73,0x74
	.DB  0x43,0x6D,0x64,0x3E,0x20,0x73,0x65,0x6E
	.DB  0x64,0x69,0x6E,0x67,0x2E,0x2E,0xD,0xA
	.DB  0x0,0xD,0xA,0x3C,0x45,0x54,0x48,0x5F
	.DB  0x63,0x68,0x65,0x63,0x6B,0x50,0x75,0x73
	.DB  0x68,0x4C,0x6F,0x67,0x3E,0x20,0x3D,0x3D
	.DB  0x3D,0x20,0x45,0x52,0x52,0x4F,0x52,0x20
	.DB  0x49,0x4E,0x46,0x4F,0x4D,0x41,0x54,0x49
	.DB  0x4F,0x4E,0x20,0x49,0x4E,0x20,0x44,0x41
	.DB  0x54,0x41,0x20,0x4C,0x4F,0x47,0x20,0x51
	.DB  0x55,0x45,0x55,0x45,0x20,0x3D,0x3D,0x3D
	.DB  0xD,0xA,0x0,0x3C,0x45,0x54,0x48,0x5F
	.DB  0x63,0x68,0x65,0x63,0x6B,0x50,0x75,0x73
	.DB  0x68,0x4C,0x6F,0x67,0x3E,0x20,0x44,0x61
	.DB  0x74,0x61,0x4C,0x6F,0x67,0x20,0x74,0x69
	.DB  0x6D,0x65,0x5B,0x25,0x6C,0x64,0x5D,0x2C
	.DB  0x63,0x68,0x5B,0x25,0x64,0x5D,0x2C,0x76
	.DB  0x61,0x6C,0x5B,0x25,0x2E,0x32,0x66,0x5D
	.DB  0xD,0xA,0x0,0x3C,0x45,0x54,0x48,0x5F
	.DB  0x63,0x68,0x65,0x63,0x6B,0x50,0x75,0x73
	.DB  0x68,0x4C,0x6F,0x67,0x3E,0x20,0x4C,0x4F
	.DB  0x47,0x5F,0x6F,0x70,0x65,0x6E,0x46,0x69
	.DB  0x6C,0x65,0x28,0x25,0x73,0x29,0x20,0x66
	.DB  0x61,0x69,0x6C,0x65,0x64,0x2C,0x20,0x63
	.DB  0x6F,0x75,0x6C,0x64,0x6E,0x27,0x74,0x20
	.DB  0x73,0x61,0x76,0x65,0x20,0x6C,0x6F,0x67
	.DB  0xD,0xA,0x0,0x3C,0x45,0x54,0x48,0x5F
	.DB  0x63,0x68,0x65,0x63,0x6B,0x50,0x75,0x73
	.DB  0x68,0x4C,0x6F,0x67,0x3E,0x20,0x4C,0x4F
	.DB  0x47,0x5F,0x69,0x6E,0x73,0x65,0x72,0x74
	.DB  0x44,0x61,0x74,0x61,0x28,0x29,0x20,0x66
	.DB  0x61,0x69,0x6C,0x65,0x64,0xD,0xA,0x0
	.DB  0x3C,0x45,0x54,0x48,0x5F,0x63,0x68,0x65
	.DB  0x63,0x6B,0x50,0x75,0x73,0x68,0x4C,0x6F
	.DB  0x67,0x3E,0x20,0x4C,0x4F,0x47,0x5F,0x63
	.DB  0x6C,0x6F,0x73,0x65,0x46,0x69,0x6C,0x65
	.DB  0x28,0x29,0x20,0x66,0x61,0x69,0x6C,0x65
	.DB  0x64,0xD,0xA,0x0,0x3C,0x45,0x54,0x48
	.DB  0x5F,0x63,0x68,0x65,0x63,0x6B,0x50,0x75
	.DB  0x73,0x68,0x4C,0x6F,0x67,0x3E,0x20,0x49
	.DB  0x6E,0x73,0x65,0x72,0x74,0x65,0x64,0x20
	.DB  0x44,0x61,0x74,0x61,0x20,0x4C,0x6F,0x67
	.DB  0xD,0xA,0x0,0xD,0xA,0x3C,0x45,0x54
	.DB  0x48,0x5F,0x63,0x68,0x65,0x63,0x6B,0x50
	.DB  0x75,0x73,0x68,0x4C,0x6F,0x67,0x3E,0x20
	.DB  0x3D,0x3D,0x3D,0x20,0x45,0x52,0x52,0x4F
	.DB  0x52,0x20,0x49,0x4E,0x46,0x4F,0x4D,0x41
	.DB  0x54,0x49,0x4F,0x4E,0x20,0x49,0x4E,0x20
	.DB  0x45,0x56,0x45,0x4E,0x54,0x20,0x4C,0x4F
	.DB  0x47,0x20,0x51,0x55,0x45,0x55,0x45,0x20
	.DB  0x3D,0x3D,0x3D,0xD,0xA,0x0,0x3C,0x45
	.DB  0x54,0x48,0x5F,0x63,0x68,0x65,0x63,0x6B
	.DB  0x50,0x75,0x73,0x68,0x4C,0x6F,0x67,0x3E
	.DB  0x20,0x45,0x76,0x65,0x6E,0x74,0x4C,0x6F
	.DB  0x67,0x20,0x74,0x69,0x6D,0x65,0x5B,0x25
	.DB  0x6C,0x64,0x5D,0x2C,0x69,0x64,0x5B,0x30
	.DB  0x78,0x25,0x30,0x32,0x58,0x5D,0x2C,0x73
	.DB  0x74,0x61,0x74,0x5B,0x30,0x78,0x25,0x30
	.DB  0x32,0x58,0x5D,0xD,0xA,0x0,0x3C,0x45
	.DB  0x54,0x48,0x5F,0x63,0x68,0x65,0x63,0x6B
	.DB  0x50,0x75,0x73,0x68,0x4C,0x6F,0x67,0x3E
	.DB  0x20,0x49,0x6E,0x73,0x65,0x72,0x74,0x65
	.DB  0x64,0x20,0x45,0x76,0x65,0x6E,0x74,0x20
	.DB  0x4C,0x6F,0x67,0xD,0xA,0x0,0x3C,0x45
	.DB  0x54,0x48,0x5F,0x72,0x65,0x74,0x72,0x61
	.DB  0x6E,0x73,0x6D,0x69,0x74,0x3E,0x20,0x70
	.DB  0x61,0x63,0x6B,0x65,0x74,0x20,0x5B,0x30
	.DB  0x78,0x25,0x30,0x32,0x58,0x5D,0x20,0x45
	.DB  0x78,0x70,0x69,0x72,0x65,0x64,0xD,0xA
	.DB  0x0,0x3C,0x45,0x54,0x48,0x5F,0x72,0x65
	.DB  0x74,0x72,0x61,0x6E,0x73,0x6D,0x69,0x74
	.DB  0x3E,0x20,0x75,0x70,0x64,0x61,0x74,0x65
	.DB  0x20,0x6C,0x6F,0x67,0x44,0x61,0x74,0x61
	.DB  0x20,0x74,0x69,0x6D,0x65,0x6F,0x75,0x74
	.DB  0xD,0xA,0x0,0x3C,0x45,0x54,0x48,0x5F
	.DB  0x72,0x65,0x74,0x72,0x61,0x6E,0x73,0x6D
	.DB  0x69,0x74,0x3E,0x20,0x75,0x70,0x64,0x61
	.DB  0x74,0x65,0x20,0x6C,0x6F,0x67,0x45,0x76
	.DB  0x65,0x6E,0x74,0x20,0x74,0x69,0x6D,0x65
	.DB  0x6F,0x75,0x74,0xD,0xA,0x0,0x3C,0x45
	.DB  0x54,0x48,0x5F,0x72,0x65,0x74,0x72,0x61
	.DB  0x6E,0x73,0x6D,0x69,0x74,0x3E,0x20,0x63
	.DB  0x6F,0x6D,0x6D,0x4C,0x6F,0x73,0x74,0x54
	.DB  0x69,0x6D,0x65,0x72,0x20,0x3D,0x20,0x25
	.DB  0x6C,0x64,0x28,0x25,0x6C,0x58,0x29,0xD
	.DB  0xA,0x0,0x3C,0x45,0x54,0x48,0x5F,0x72
	.DB  0x65,0x74,0x72,0x61,0x6E,0x73,0x6D,0x69
	.DB  0x74,0x3E,0x20,0x4C,0x6F,0x73,0x74,0x54
	.DB  0x69,0x6D,0x65,0x72,0x20,0x74,0x69,0x6D
	.DB  0x65,0x20,0x6C,0x65,0x66,0x74,0x20,0x3D
	.DB  0x20,0x25,0x6C,0x64,0x28,0x25,0x6C,0x58
	.DB  0x29,0xD,0xA,0x0,0xD,0xA,0x3C,0x45
	.DB  0x54,0x48,0x5F,0x72,0x65,0x74,0x72,0x61
	.DB  0x6E,0x73,0x6D,0x69,0x74,0x3E,0x20,0x2D
	.DB  0x2D,0x52,0x65,0x74,0x72,0x61,0x6E,0x73
	.DB  0x6D,0x69,0x74,0x74,0x69,0x6E,0x67,0x2D
	.DB  0x2D,0x20,0x5B,0x30,0x78,0x25,0x30,0x32
	.DB  0x58,0x5D,0xD,0xA,0x0,0x3C,0x45,0x54
	.DB  0x48,0x5F,0x70,0x72,0x6F,0x63,0x65,0x73
	.DB  0x73,0x50,0x61,0x63,0x6B,0x65,0x74,0x3E
	.DB  0x20,0x73,0x74,0x61,0x74,0x75,0x73,0x20
	.DB  0x72,0x65,0x71,0x75,0x65,0x73,0x74,0x20
	.DB  0x69,0x6E,0x76,0x61,0x6C,0x69,0x64,0x20
	.DB  0x6C,0x65,0x6E,0x67,0x74,0x68,0x20,0x28
	.DB  0x25,0x64,0x29,0xD,0xA,0x0,0x3C,0x45
	.DB  0x54,0x48,0x5F,0x70,0x72,0x6F,0x63,0x65
	.DB  0x73,0x73,0x50,0x61,0x63,0x6B,0x65,0x74
	.DB  0x3E,0x20,0x70,0x61,0x79,0x6C,0x6F,0x61
	.DB  0x64,0x20,0x6D,0x61,0x6C,0x6C,0x6F,0x63
	.DB  0x28,0x29,0x20,0x66,0x61,0x69,0x6C,0x65
	.DB  0x64,0xD,0xA,0x0,0x3C,0x45,0x54,0x48
	.DB  0x5F,0x70,0x72,0x6F,0x63,0x65,0x73,0x73
	.DB  0x50,0x61,0x63,0x6B,0x65,0x74,0x3E,0x20
	.DB  0x73,0x74,0x61,0x74,0x75,0x73,0x52,0x65
	.DB  0x71,0x75,0x65,0x73,0x74,0x50,0x61,0x72
	.DB  0x73,0x65,0x72,0x28,0x29,0x20,0x66,0x61
	.DB  0x69,0x6C,0x65,0x64,0xD,0xA,0x0,0xD
	.DB  0xA,0x2D,0x2D,0x73,0x74,0x61,0x74,0x75
	.DB  0x73,0x52,0x65,0x71,0x75,0x65,0x73,0x74
	.DB  0x50,0x61,0x72,0x73,0x65,0x72,0x2D,0x2D
	.DB  0x20,0x43,0x4D,0x44,0x20,0x5B,0x30,0x78
	.DB  0x25,0x30,0x32,0x58,0x5D,0xD,0xA,0x0
	.DB  0x61,0x63,0x63,0x65,0x73,0x73,0x4D,0x65
	.DB  0x74,0x68,0x6F,0x64,0x20,0x20,0x20,0x20
	.DB  0x5B,0x30,0x78,0x25,0x30,0x32,0x58,0x5D
	.DB  0xD,0xA,0x0,0x69,0x6E,0x74,0x65,0x72
	.DB  0x76,0x61,0x6C,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x5B,0x30,0x78,0x25,0x30
	.DB  0x34,0x58,0x5D,0x20,0x3D,0x20,0x25,0x64
	.DB  0xD,0xA,0x0,0x73,0x74,0x61,0x74,0x75
	.DB  0x73,0x4C,0x69,0x73,0x74,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x7C,0x0,0x25,0x30,0x32
	.DB  0x58,0x7C,0x0,0xD,0xA,0x2D,0x2D,0x20
	.DB  0x2E,0x2E,0x44,0x6F,0x6E,0x65,0x2E,0x2E
	.DB  0x20,0x2D,0x2D,0xD,0xA,0x0,0x3C,0x45
	.DB  0x54,0x48,0x5F,0x70,0x72,0x6F,0x63,0x65
	.DB  0x73,0x73,0x50,0x61,0x63,0x6B,0x65,0x74
	.DB  0x3E,0x20,0x73,0x74,0x61,0x74,0x75,0x73
	.DB  0x20,0x72,0x65,0x70,0x6F,0x72,0x74,0x20
	.DB  0x69,0x6E,0x76,0x61,0x6C,0x69,0x64,0x20
	.DB  0x6C,0x65,0x6E,0x67,0x74,0x68,0x20,0x28
	.DB  0x25,0x64,0x29,0xD,0xA,0x0,0xD,0xA
	.DB  0x2D,0x2D,0x73,0x74,0x61,0x74,0x75,0x73
	.DB  0x52,0x65,0x70,0x6F,0x72,0x74,0x50,0x61
	.DB  0x72,0x73,0x65,0x72,0x2D,0x2D,0x20,0x41
	.DB  0x43,0x4B,0x20,0x5B,0x30,0x78,0x25,0x30
	.DB  0x32,0x58,0x5D,0xD,0xA,0x0,0x75,0x6E
	.DB  0x69,0x78,0x54,0x69,0x6D,0x65,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x5B,0x30
	.DB  0x78,0x25,0x30,0x32,0x58,0x5D,0x5B,0x30
	.DB  0x78,0x25,0x30,0x32,0x58,0x5D,0x5B,0x30
	.DB  0x78,0x25,0x30,0x32,0x58,0x5D,0x5B,0x30
	.DB  0x78,0x25,0x30,0x32,0x58,0x5D,0xD,0xA
	.DB  0x0,0x3C,0x45,0x54,0x48,0x5F,0x70,0x72
	.DB  0x6F,0x63,0x65,0x73,0x73,0x50,0x61,0x63
	.DB  0x6B,0x65,0x74,0x3E,0x20,0x65,0x76,0x65
	.DB  0x6E,0x74,0x20,0x72,0x65,0x70,0x6F,0x72
	.DB  0x74,0x20,0x69,0x6E,0x76,0x61,0x6C,0x69
	.DB  0x64,0x20,0x6C,0x65,0x6E,0x67,0x74,0x68
	.DB  0x20,0x28,0x25,0x64,0x29,0xD,0xA,0x0
	.DB  0xD,0xA,0x2D,0x2D,0x65,0x76,0x65,0x6E
	.DB  0x74,0x52,0x65,0x70,0x6F,0x72,0x74,0x50
	.DB  0x61,0x72,0x73,0x65,0x72,0x2D,0x2D,0x20
	.DB  0x41,0x43,0x4B,0x20,0x5B,0x30,0x78,0x25
	.DB  0x30,0x32,0x58,0x5D,0xD,0xA,0x0,0x3C
	.DB  0x45,0x54,0x48,0x5F,0x70,0x72,0x6F,0x63
	.DB  0x65,0x73,0x73,0x50,0x61,0x63,0x6B,0x65
	.DB  0x74,0x3E,0x20,0x67,0x6F,0x74,0x20,0x65
	.DB  0x76,0x65,0x6E,0x74,0x20,0x6C,0x6F,0x67
	.DB  0x20,0x61,0x63,0x6B,0xD,0xA,0x0,0x3C
	.DB  0x6C,0x6F,0x67,0x52,0x65,0x70,0x6F,0x72
	.DB  0x74,0x3E,0x20,0x4C,0x4F,0x47,0x5F,0x6F
	.DB  0x70,0x65,0x6E,0x46,0x69,0x6C,0x65,0x28
	.DB  0x25,0x73,0x29,0x20,0x66,0x61,0x69,0x6C
	.DB  0x65,0x64,0xD,0xA,0x0,0x3C,0x4C,0x4F
	.DB  0x47,0x5F,0x72,0x65,0x61,0x64,0x44,0x61
	.DB  0x74,0x61,0x3E,0x20,0x4C,0x4F,0x47,0x5F
	.DB  0x73,0x65,0x74,0x4C,0x61,0x73,0x74,0x53
	.DB  0x65,0x6E,0x64,0x28,0x29,0x20,0x66,0x61
	.DB  0x69,0x6C,0x65,0x64,0xD,0xA,0x0,0x3C
	.DB  0x4C,0x4F,0x47,0x5F,0x72,0x65,0x61,0x64
	.DB  0x44,0x61,0x74,0x61,0x3E,0x20,0x4C,0x4F
	.DB  0x47,0x5F,0x73,0x65,0x74,0x4C,0x61,0x73
	.DB  0x74,0x53,0x65,0x6E,0x64,0x28,0x25,0x73
	.DB  0x2C,0x25,0x6C,0x64,0x29,0xD,0xA,0x0
	.DB  0x3C,0x6C,0x6F,0x67,0x52,0x65,0x70,0x6F
	.DB  0x72,0x74,0x3E,0x20,0x4C,0x4F,0x47,0x5F
	.DB  0x63,0x6C,0x6F,0x73,0x65,0x46,0x69,0x6C
	.DB  0x65,0x28,0x25,0x73,0x29,0x20,0x66,0x61
	.DB  0x69,0x6C,0x65,0x64,0xD,0xA,0x0,0x3C
	.DB  0x45,0x54,0x48,0x5F,0x70,0x72,0x6F,0x63
	.DB  0x65,0x73,0x73,0x50,0x61,0x63,0x6B,0x65
	.DB  0x74,0x3E,0x20,0x43,0x6F,0x6E,0x66,0x69
	.DB  0x67,0x20,0x4D,0x61,0x6E,0x61,0x67,0x65
	.DB  0xD,0xA,0x0,0x3C,0x45,0x54,0x48,0x5F
	.DB  0x70,0x72,0x6F,0x63,0x65,0x73,0x73,0x50
	.DB  0x61,0x63,0x6B,0x65,0x74,0x3E,0x20,0x63
	.DB  0x6F,0x6E,0x66,0x69,0x67,0x75,0x72,0x61
	.DB  0x74,0x69,0x6F,0x6E,0x20,0x6D,0x61,0x6E
	.DB  0x61,0x67,0x65,0x6D,0x65,0x6E,0x74,0x20
	.DB  0x69,0x6E,0x76,0x61,0x6C,0x69,0x64,0x20
	.DB  0x6C,0x65,0x6E,0x67,0x74,0x68,0x20,0x28
	.DB  0x25,0x64,0x29,0xD,0xA,0x0,0x3C,0x45
	.DB  0x54,0x48,0x5F,0x70,0x72,0x6F,0x63,0x65
	.DB  0x73,0x73,0x50,0x61,0x63,0x6B,0x65,0x74
	.DB  0x3E,0x20,0x70,0x61,0x79,0x6C,0x6F,0x61
	.DB  0x64,0x20,0x6D,0x61,0x6C,0x6C,0x6F,0x63
	.DB  0x28,0x25,0x64,0x29,0x20,0x66,0x61,0x69
	.DB  0x6C,0x65,0x64,0xD,0xA,0x0,0x3C,0x45
	.DB  0x54,0x48,0x5F,0x70,0x72,0x6F,0x63,0x65
	.DB  0x73,0x73,0x50,0x61,0x63,0x6B,0x65,0x74
	.DB  0x3E,0x20,0x63,0x6F,0x6E,0x66,0x69,0x67
	.DB  0x4D,0x61,0x6E,0x61,0x67,0x65,0x50,0x61
	.DB  0x72,0x73,0x65,0x72,0x28,0x29,0x20,0x66
	.DB  0x61,0x69,0x6C,0x65,0x64,0xD,0xA,0x0
	.DB  0xD,0xA,0x2D,0x2D,0x63,0x6F,0x6E,0x66
	.DB  0x69,0x67,0x4D,0x61,0x6E,0x61,0x67,0x65
	.DB  0x50,0x61,0x72,0x73,0x65,0x72,0x2D,0x2D
	.DB  0x20,0x43,0x4D,0x44,0x20,0x5B,0x30,0x78
	.DB  0x25,0x30,0x32,0x58,0x5D,0xD,0xA,0x0
	.DB  0x61,0x63,0x63,0x64,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x5B,0x30,0x78,0x25,0x30,0x32,0x58,0x5D
	.DB  0xD,0xA,0x0,0x63,0x6E,0x66,0x67,0x20
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x5B,0x30,0x78,0x25,0x30
	.DB  0x32,0x58,0x5D,0xD,0xA,0x0,0x3C,0x45
	.DB  0x54,0x48,0x5F,0x70,0x72,0x6F,0x63,0x65
	.DB  0x73,0x73,0x50,0x61,0x63,0x6B,0x65,0x74
	.DB  0x3E,0x20,0x67,0x65,0x74,0x43,0x6F,0x6E
	.DB  0x66,0x69,0x67,0x4C,0x65,0x6E,0x28,0x29
	.DB  0x20,0x66,0x61,0x69,0x6C,0x65,0x64,0xD
	.DB  0xA,0x0,0x3C,0x45,0x54,0x48,0x5F,0x70
	.DB  0x72,0x6F,0x63,0x65,0x73,0x73,0x50,0x61
	.DB  0x63,0x6B,0x65,0x74,0x3E,0x20,0x63,0x6E
	.DB  0x66,0x67,0x52,0x64,0x20,0x6D,0x61,0x6C
	.DB  0x6C,0x6F,0x63,0x28,0x29,0x20,0x66,0x61
	.DB  0x69,0x6C,0x65,0x64,0xD,0xA,0x0,0x3C
	.DB  0x45,0x54,0x48,0x5F,0x70,0x72,0x6F,0x63
	.DB  0x65,0x73,0x73,0x50,0x61,0x63,0x6B,0x65
	.DB  0x74,0x3E,0x20,0x63,0x6F,0x6E,0x66,0x69
	.DB  0x67,0x52,0x65,0x61,0x64,0x28,0x29,0x20
	.DB  0x66,0x61,0x69,0x6C,0x65,0x64,0xD,0xA
	.DB  0x0,0x3C,0x45,0x54,0x48,0x5F,0x70,0x72
	.DB  0x6F,0x63,0x65,0x73,0x73,0x50,0x61,0x63
	.DB  0x6B,0x65,0x74,0x3E,0x20,0x52,0x44,0x5F
	.DB  0x43,0x4D,0x44,0x20,0x3A,0x20,0x45,0x54
	.DB  0x48,0x5F,0x73,0x65,0x6E,0x64,0x43,0x6F
	.DB  0x6E,0x66,0x69,0x67,0x4D,0x61,0x6E,0x61
	.DB  0x67,0x65,0x41,0x63,0x6B,0x28,0x29,0x20
	.DB  0x66,0x61,0x69,0x6C,0x65,0x64,0xD,0xA
	.DB  0x0,0x3C,0x45,0x54,0x48,0x5F,0x70,0x72
	.DB  0x6F,0x63,0x65,0x73,0x73,0x50,0x61,0x63
	.DB  0x6B,0x65,0x74,0x3E,0x20,0x63,0x6E,0x66
	.DB  0x67,0x57,0x72,0x20,0x6D,0x61,0x6C,0x6C
	.DB  0x6F,0x63,0x28,0x29,0x20,0x66,0x61,0x69
	.DB  0x6C,0x65,0x64,0xD,0xA,0x0,0x3C,0x45
	.DB  0x54,0x48,0x5F,0x70,0x72,0x6F,0x63,0x65
	.DB  0x73,0x73,0x50,0x61,0x63,0x6B,0x65,0x74
	.DB  0x3E,0x20,0x63,0x6F,0x6E,0x66,0x69,0x67
	.DB  0x57,0x72,0x69,0x74,0x65,0x28,0x29,0x20
	.DB  0x66,0x61,0x69,0x6C,0x65,0x64,0xD,0xA
	.DB  0x0,0x57,0x41,0x52,0x4E,0x20,0x3A,0x20
	.DB  0x3C,0x45,0x54,0x48,0x5F,0x70,0x72,0x6F
	.DB  0x63,0x65,0x73,0x73,0x50,0x61,0x63,0x6B
	.DB  0x65,0x74,0x3E,0x20,0x57,0x52,0x5F,0x43
	.DB  0x4D,0x44,0x20,0x3A,0x20,0x45,0x54,0x48
	.DB  0x5F,0x73,0x65,0x6E,0x64,0x43,0x6F,0x6E
	.DB  0x66,0x69,0x67,0x4D,0x61,0x6E,0x61,0x67
	.DB  0x65,0x41,0x63,0x6B,0x28,0x29,0x20,0x66
	.DB  0x61,0x69,0x6C,0x65,0x64,0xD,0xA,0x0
	.DB  0x3C,0x45,0x54,0x48,0x5F,0x70,0x72,0x6F
	.DB  0x63,0x65,0x73,0x73,0x50,0x61,0x63,0x6B
	.DB  0x65,0x74,0x3E,0x20,0x63,0x6F,0x6E,0x66
	.DB  0x69,0x67,0x43,0x6F,0x6E,0x66,0x69,0x72
	.DB  0x6D,0x28,0x29,0x20,0x66,0x61,0x69,0x6C
	.DB  0x65,0x64,0xD,0xA,0x0,0x3C,0x45,0x54
	.DB  0x48,0x5F,0x70,0x72,0x6F,0x63,0x65,0x73
	.DB  0x73,0x50,0x61,0x63,0x6B,0x65,0x74,0x3E
	.DB  0x20,0x75,0x6E,0x6B,0x6E,0x6F,0x77,0x6E
	.DB  0x20,0x74,0x79,0x70,0x65,0x20,0x66,0x6F
	.DB  0x72,0x20,0x63,0x6F,0x6E,0x66,0x69,0x67
	.DB  0x2D,0x3E,0x61,0x63,0x63,0x64,0x20,0x5B
	.DB  0x30,0x78,0x25,0x30,0x32,0x58,0x5D,0xD
	.DB  0xA,0x0,0x3C,0x45,0x54,0x48,0x5F,0x70
	.DB  0x72,0x6F,0x63,0x65,0x73,0x73,0x50,0x61
	.DB  0x63,0x6B,0x65,0x74,0x3E,0x20,0x44,0x61
	.DB  0x74,0x61,0x20,0x72,0x65,0x70,0x6F,0x72
	.DB  0x74,0x20,0x69,0x6E,0x76,0x61,0x6C,0x69
	.DB  0x64,0x20,0x6C,0x65,0x6E,0x67,0x74,0x68
	.DB  0x20,0x28,0x25,0x64,0x29,0xD,0xA,0x0
	.DB  0xD,0xA,0x2D,0x2D,0x64,0x61,0x74,0x61
	.DB  0x52,0x65,0x70,0x6F,0x72,0x74,0x50,0x61
	.DB  0x72,0x73,0x65,0x72,0x2D,0x2D,0x20,0x41
	.DB  0x43,0x4B,0x20,0x5B,0x30,0x78,0x25,0x30
	.DB  0x32,0x58,0x5D,0xD,0xA,0x0,0x3C,0x45
	.DB  0x54,0x48,0x5F,0x70,0x72,0x6F,0x63,0x65
	.DB  0x73,0x73,0x50,0x61,0x63,0x6B,0x65,0x74
	.DB  0x3E,0x20,0x67,0x6F,0x74,0x20,0x64,0x61
	.DB  0x74,0x61,0x20,0x6C,0x6F,0x67,0x20,0x61
	.DB  0x63,0x6B,0xD,0xA,0x0,0x3C,0x45,0x54
	.DB  0x48,0x5F,0x70,0x72,0x6F,0x63,0x65,0x73
	.DB  0x73,0x50,0x61,0x63,0x6B,0x65,0x74,0x3E
	.DB  0x20,0x6C,0x6F,0x67,0x20,0x6D,0x61,0x6E
	.DB  0x69,0x70,0x75,0x6C,0x61,0x74,0x69,0x6F
	.DB  0x6E,0x20,0x28,0x43,0x4D,0x44,0x29,0x20
	.DB  0x69,0x6E,0x76,0x61,0x6C,0x69,0x64,0x20
	.DB  0x6C,0x65,0x6E,0x67,0x74,0x68,0x20,0x28
	.DB  0x25,0x64,0x29,0xD,0xA,0x0,0x3C,0x45
	.DB  0x54,0x48,0x5F,0x70,0x72,0x6F,0x63,0x65
	.DB  0x73,0x73,0x50,0x61,0x63,0x6B,0x65,0x74
	.DB  0x3E,0x20,0x6C,0x6F,0x67,0x4D,0x61,0x6E
	.DB  0x69,0x70,0x75,0x6C,0x61,0x74,0x69,0x6F
	.DB  0x6E,0x43,0x6D,0x64,0x50,0x61,0x72,0x73
	.DB  0x65,0x72,0x28,0x29,0x20,0x66,0x61,0x69
	.DB  0x6C,0x65,0x64,0xD,0xA,0x0,0xD,0xA
	.DB  0x2D,0x2D,0x6C,0x6F,0x67,0x4D,0x61,0x6E
	.DB  0x69,0x70,0x75,0x6C,0x61,0x74,0x69,0x6F
	.DB  0x6E,0x43,0x6D,0x64,0x50,0x61,0x72,0x73
	.DB  0x65,0x72,0x2D,0x2D,0x20,0x43,0x4D,0x44
	.DB  0x20,0x5B,0x30,0x78,0x25,0x30,0x32,0x58
	.DB  0x5D,0xD,0xA,0x0,0x74,0x53,0x74,0x61
	.DB  0x72,0x74,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x5B,0x25,0x6C,0x64
	.DB  0x5D,0xD,0xA,0x0,0x74,0x53,0x74,0x6F
	.DB  0x70,0x20,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x5B,0x25,0x6C,0x64
	.DB  0x5D,0xD,0xA,0x0,0x3C,0x45,0x54,0x48
	.DB  0x5F,0x70,0x72,0x6F,0x63,0x65,0x73,0x73
	.DB  0x50,0x61,0x63,0x6B,0x65,0x74,0x3E,0x20
	.DB  0x73,0x65,0x74,0x4C,0x6F,0x67,0x4D,0x61
	.DB  0x6E,0x69,0x70,0x75,0x6C,0x61,0x74,0x65
	.DB  0x53,0x63,0x68,0x65,0x6D,0x61,0x28,0x29
	.DB  0x20,0x66,0x61,0x69,0x6C,0x65,0x64,0xD
	.DB  0xA,0x0,0x3C,0x45,0x54,0x48,0x5F,0x70
	.DB  0x72,0x6F,0x63,0x65,0x73,0x73,0x50,0x61
	.DB  0x63,0x6B,0x65,0x74,0x3E,0x20,0x6C,0x6F
	.DB  0x67,0x20,0x6D,0x61,0x6E,0x69,0x70,0x75
	.DB  0x6C,0x61,0x74,0x69,0x6F,0x6E,0x20,0x28
	.DB  0x41,0x43,0x4B,0x29,0x20,0x69,0x6E,0x76
	.DB  0x61,0x6C,0x69,0x64,0x20,0x6C,0x65,0x6E
	.DB  0x67,0x74,0x68,0x20,0x28,0x25,0x64,0x29
	.DB  0xD,0xA,0x0,0xD,0xA,0x2D,0x2D,0x6C
	.DB  0x6F,0x67,0x4D,0x61,0x6E,0x69,0x70,0x75
	.DB  0x6C,0x61,0x74,0x69,0x6F,0x6E,0x41,0x63
	.DB  0x6B,0x50,0x61,0x72,0x73,0x65,0x72,0x2D
	.DB  0x2D,0x20,0x41,0x43,0x4B,0x20,0x5B,0x30
	.DB  0x78,0x25,0x30,0x32,0x58,0x5D,0xD,0xA
	.DB  0x0,0x73,0x74,0x61,0x74,0x75,0x73,0x20
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x5B,0x25,0x6C,0x64,0x5D,0xD,0xA
	.DB  0x0,0x3C,0x45,0x54,0x48,0x5F,0x70,0x72
	.DB  0x6F,0x63,0x65,0x73,0x73,0x50,0x61,0x63
	.DB  0x6B,0x65,0x74,0x3E,0x20,0x6E,0x65,0x74
	.DB  0x77,0x6F,0x72,0x6B,0x20,0x6D,0x61,0x69
	.DB  0x6E,0x74,0x65,0x6E,0x61,0x6E,0x63,0x65
	.DB  0x20,0x69,0x6E,0x76,0x61,0x6C,0x69,0x64
	.DB  0x20,0x6C,0x65,0x6E,0x67,0x74,0x68,0x20
	.DB  0x28,0x25,0x64,0x29,0xD,0xA,0x0,0x3C
	.DB  0x45,0x54,0x48,0x5F,0x70,0x72,0x6F,0x63
	.DB  0x65,0x73,0x73,0x50,0x61,0x63,0x6B,0x65
	.DB  0x74,0x3E,0x20,0x6E,0x65,0x74,0x77,0x6F
	.DB  0x72,0x6B,0x4D,0x61,0x69,0x6E,0x74,0x65
	.DB  0x6E,0x61,0x6E,0x63,0x65,0x50,0x61,0x72
	.DB  0x73,0x65,0x72,0x28,0x29,0x20,0x66,0x61
	.DB  0x69,0x6C,0x65,0x64,0xD,0xA,0x0,0xD
	.DB  0xA,0x2D,0x2D,0x6E,0x65,0x74,0x77,0x6F
	.DB  0x72,0x6B,0x4D,0x61,0x69,0x6E,0x74,0x65
	.DB  0x6E,0x61,0x6E,0x63,0x65,0x50,0x61,0x72
	.DB  0x73,0x65,0x72,0x2D,0x2D,0x20,0x43,0x4D
	.DB  0x44,0x20,0x5B,0x30,0x78,0x25,0x30,0x32
	.DB  0x58,0x5D,0xD,0xA,0x0,0x63,0x6D,0x64
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x20,0x5B,0x30,0x78
	.DB  0x25,0x30,0x32,0x58,0x5D,0xD,0xA,0x0
	.DB  0x64,0x61,0x74,0x61,0x4C,0x65,0x6E,0x20
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x5B,0x25,0x64,0x5D,0xD,0xA,0x0,0x64
	.DB  0x61,0x74,0x61,0x20,0x2D,0x2D,0x2D,0x20
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0xD
	.DB  0xA,0x0,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
	.DB  0x2D,0x2D,0xD,0xA,0x0,0x3C,0x45,0x54
	.DB  0x48,0x5F,0x70,0x72,0x6F,0x63,0x65,0x73
	.DB  0x73,0x50,0x61,0x63,0x6B,0x65,0x74,0x3E
	.DB  0x20,0x73,0x65,0x74,0x54,0x69,0x6D,0x65
	.DB  0x53,0x79,0x6E,0x63,0x53,0x63,0x68,0x65
	.DB  0x6D,0x61,0x28,0x29,0x20,0x66,0x61,0x69
	.DB  0x6C,0x65,0x64,0xD,0xA,0x0,0x57,0x41
	.DB  0x52,0x4E,0x20,0x3A,0x20,0x3C,0x45,0x54
	.DB  0x48,0x5F,0x70,0x72,0x6F,0x63,0x65,0x73
	.DB  0x73,0x50,0x61,0x63,0x6B,0x65,0x74,0x3E
	.DB  0x20,0x4E,0x45,0x54,0x57,0x5F,0x54,0x49
	.DB  0x4D,0x45,0x5F,0x53,0x59,0x4E,0x43,0x20
	.DB  0x3A,0x20,0x45,0x54,0x48,0x5F,0x73,0x65
	.DB  0x6E,0x64,0x4E,0x65,0x74,0x77,0x6F,0x72
	.DB  0x6B,0x4D,0x61,0x69,0x6E,0x74,0x65,0x6E
	.DB  0x61,0x6E,0x63,0x65,0x41,0x63,0x6B,0x28
	.DB  0x29,0x20,0x66,0x61,0x69,0x6C,0x65,0x64
	.DB  0xD,0xA,0x0,0x3C,0x45,0x54,0x48,0x5F
	.DB  0x70,0x72,0x6F,0x63,0x65,0x73,0x73,0x50
	.DB  0x61,0x63,0x6B,0x65,0x74,0x3E,0x20,0x72
	.DB  0x65,0x6D,0x6F,0x74,0x65,0x20,0x64,0x65
	.DB  0x76,0x69,0x63,0x65,0x20,0x63,0x6F,0x6E
	.DB  0x74,0x72,0x6F,0x6C,0x20,0x69,0x6E,0x76
	.DB  0x61,0x6C,0x69,0x64,0x20,0x6C,0x65,0x6E
	.DB  0x67,0x74,0x68,0x20,0x28,0x25,0x64,0x29
	.DB  0xD,0xA,0x0,0x3C,0x45,0x54,0x48,0x5F
	.DB  0x70,0x72,0x6F,0x63,0x65,0x73,0x73,0x50
	.DB  0x61,0x63,0x6B,0x65,0x74,0x3E,0x20,0x72
	.DB  0x65,0x6D,0x6F,0x74,0x65,0x44,0x65,0x76
	.DB  0x69,0x63,0x65,0x43,0x6F,0x6E,0x74,0x72
	.DB  0x6F,0x6C,0x50,0x61,0x72,0x73,0x65,0x72
	.DB  0x28,0x29,0x20,0x66,0x61,0x69,0x6C,0x65
	.DB  0x64,0xD,0xA,0x0,0xD,0xA,0x2D,0x2D
	.DB  0x72,0x65,0x6D,0x6F,0x74,0x65,0x44,0x65
	.DB  0x76,0x69,0x63,0x65,0x43,0x6F,0x6E,0x74
	.DB  0x72,0x6F,0x6C,0x50,0x61,0x72,0x73,0x65
	.DB  0x72,0x2D,0x2D,0x20,0x43,0x4D,0x44,0x20
	.DB  0x5B,0x30,0x78,0x25,0x30,0x32,0x58,0x5D
	.DB  0xD,0xA,0x0,0x76,0x61,0x6C,0x75,0x65
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x5B,0x25,0x6C,0x64,0x5D
	.DB  0xD,0xA,0x0,0x3C,0x45,0x54,0x48,0x5F
	.DB  0x70,0x72,0x6F,0x63,0x65,0x73,0x73,0x50
	.DB  0x61,0x63,0x6B,0x65,0x74,0x3E,0x20,0x73
	.DB  0x65,0x74,0x54,0x69,0x6D,0x65,0x53,0x79
	.DB  0x6E,0x63,0x53,0x63,0x68,0x65,0x6D,0x61
	.DB  0x28,0x25,0x6C,0x64,0x29,0x20,0x66,0x61
	.DB  0x69,0x6C,0x65,0x64,0xD,0xA,0x0,0x57
	.DB  0x41,0x52,0x4E,0x20,0x3A,0x20,0x3C,0x45
	.DB  0x54,0x48,0x5F,0x70,0x72,0x6F,0x63,0x65
	.DB  0x73,0x73,0x50,0x61,0x63,0x6B,0x65,0x74
	.DB  0x3E,0x20,0x44,0x45,0x56,0x43,0x54,0x52
	.DB  0x4C,0x5F,0x4D,0x55,0x54,0x45,0x5F,0x41
	.DB  0x4C,0x41,0x52,0x4D,0x20,0x3A,0x20,0x45
	.DB  0x54,0x48,0x5F,0x72,0x65,0x6D,0x6F,0x74
	.DB  0x65,0x44,0x65,0x76,0x69,0x63,0x65,0x43
	.DB  0x6F,0x6E,0x74,0x72,0x6F,0x6C,0x41,0x63
	.DB  0x6B,0x28,0x29,0x20,0x66,0x61,0x69,0x6C
	.DB  0x65,0x64,0xD,0xA,0x0,0x3C,0x45,0x54
	.DB  0x48,0x5F,0x70,0x72,0x6F,0x63,0x65,0x73
	.DB  0x73,0x50,0x61,0x63,0x6B,0x65,0x74,0x3E
	.DB  0x20,0x63,0x6C,0x65,0x61,0x72,0x20,0x6C
	.DB  0x69,0x73,0x74,0x20,0x41,0x43,0x4B,0x20
	.DB  0x69,0x6E,0x76,0x61,0x6C,0x69,0x64,0x20
	.DB  0x6C,0x65,0x6E,0x67,0x74,0x68,0x20,0x28
	.DB  0x25,0x64,0x29,0xD,0xA,0x0,0x3C,0x45
	.DB  0x54,0x48,0x5F,0x70,0x72,0x6F,0x63,0x65
	.DB  0x73,0x73,0x50,0x61,0x63,0x6B,0x65,0x74
	.DB  0x3E,0x20,0x63,0x6C,0x65,0x61,0x72,0x4C
	.DB  0x69,0x73,0x74,0x50,0x61,0x72,0x73,0x65
	.DB  0x72,0x28,0x29,0x20,0x66,0x61,0x69,0x6C
	.DB  0x65,0x64,0xD,0xA,0x0,0xD,0xA,0x2D
	.DB  0x2D,0x63,0x6C,0x65,0x61,0x72,0x4C,0x69
	.DB  0x73,0x74,0x50,0x61,0x72,0x73,0x65,0x72
	.DB  0x2D,0x2D,0x20,0x41,0x43,0x4B,0x20,0x5B
	.DB  0x30,0x78,0x25,0x30,0x32,0x58,0x5D,0xD
	.DB  0xA,0x0,0x73,0x74,0x61,0x74,0x75,0x73
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x5B,0x30,0x78,0x25,0x30,0x32
	.DB  0x58,0x5D,0xD,0xA,0x0,0x3C,0x45,0x54
	.DB  0x48,0x5F,0x70,0x72,0x6F,0x63,0x65,0x73
	.DB  0x73,0x50,0x61,0x63,0x6B,0x65,0x74,0x3E
	.DB  0x20,0x63,0x6C,0x65,0x61,0x72,0x20,0x64
	.DB  0x75,0x70,0x6C,0x69,0x63,0x61,0x74,0x65
	.DB  0x20,0x72,0x65,0x71,0x75,0x65,0x73,0x74
	.DB  0x20,0x28,0x41,0x43,0x4B,0x29,0x20,0x53
	.DB  0x55,0x43,0x43,0x45,0x53,0x53,0x21,0x21
	.DB  0xD,0xA,0x0,0x3C,0x45,0x54,0x48,0x5F
	.DB  0x70,0x72,0x6F,0x63,0x65,0x73,0x73,0x50
	.DB  0x61,0x63,0x6B,0x65,0x74,0x3E,0x20,0x63
	.DB  0x6C,0x65,0x61,0x72,0x20,0x64,0x75,0x70
	.DB  0x6C,0x69,0x63,0x61,0x74,0x65,0x20,0x72
	.DB  0x65,0x71,0x75,0x65,0x73,0x74,0x20,0x28
	.DB  0x41,0x43,0x4B,0x29,0x20,0x46,0x41,0x49
	.DB  0x4C,0x45,0x44,0x5B,0x30,0x78,0x25,0x30
	.DB  0x32,0x58,0x5D,0x21,0x21,0xD,0xA,0x0
	.DB  0x3C,0x45,0x54,0x48,0x5F,0x70,0x72,0x6F
	.DB  0x63,0x65,0x73,0x73,0x50,0x61,0x63,0x6B
	.DB  0x65,0x74,0x3E,0x20,0x75,0x6E,0x6B,0x6E
	.DB  0x6F,0x77,0x6E,0x20,0x74,0x79,0x70,0x65
	.DB  0x20,0x66,0x6F,0x72,0x20,0x63,0x6C,0x72
	.DB  0x5F,0x6C,0x73,0x74,0x5F,0x73,0x74,0x2D
	.DB  0x3E,0x63,0x6D,0x64,0x20,0x5B,0x30,0x78
	.DB  0x25,0x30,0x32,0x58,0x5D,0xD,0xA,0x0
	.DB  0x3C,0x45,0x54,0x48,0x5F,0x70,0x72,0x6F
	.DB  0x63,0x65,0x73,0x73,0x50,0x61,0x63,0x6B
	.DB  0x65,0x74,0x3E,0x20,0x66,0x69,0x72,0x6D
	.DB  0x77,0x61,0x72,0x65,0x20,0x75,0x70,0x6C
	.DB  0x6F,0x61,0x64,0x20,0x68,0x61,0x73,0x6E
	.DB  0x27,0x74,0x20,0x73,0x75,0x70,0x70,0x6F
	.DB  0x72,0x74,0x65,0x64,0x20,0x79,0x65,0x74
	.DB  0xD,0xA,0x0,0xD,0xA,0x3C,0x45,0x54
	.DB  0x48,0x5F,0x70,0x72,0x6F,0x63,0x65,0x73
	.DB  0x73,0x50,0x61,0x63,0x6B,0x65,0x74,0x3E
	.DB  0x20,0x69,0x6E,0x76,0x61,0x6C,0x69,0x64
	.DB  0x20,0x66,0x72,0x61,0x6D,0x65,0x20,0x74
	.DB  0x79,0x70,0x65,0x20,0x28,0x20,0x25,0x30
	.DB  0x32,0x58,0x20,0x29,0x21,0x21,0xD,0xA
	.DB  0x0,0x3C,0x45,0x54,0x48,0x5F,0x72,0x65
	.DB  0x63,0x65,0x69,0x76,0x65,0x3E,0x20,0x6D
	.DB  0x61,0x6C,0x6C,0x6F,0x63,0x2E,0x2E,0x46
	.DB  0x41,0x49,0x4C,0x45,0x44,0x2E,0x2E,0xD
	.DB  0xA,0x0,0xD,0xA,0xD,0xA,0x2B,0x2B
	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x20,0x52,0x61
	.DB  0x77,0x20,0x62,0x75,0x66,0x66,0x65,0x72
	.DB  0x20,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
	.DB  0xD,0xA,0x0,0x7E,0x0,0xD,0xA,0x69
	.DB  0x6E,0x76,0x61,0x6C,0x69,0x64,0x20,0x6C
	.DB  0x65,0x6E,0x67,0x74,0x68,0x21,0x21,0xD
	.DB  0xA,0x0,0x3C,0x45,0x54,0x48,0x5F,0x72
	.DB  0x65,0x63,0x65,0x69,0x76,0x65,0x3E,0x20
	.DB  0x63,0x68,0x65,0x63,0x6B,0x73,0x75,0x6D
	.DB  0x20,0x65,0x72,0x72,0x6F,0x72,0xD,0xA
	.DB  0x0,0x3C,0x45,0x54,0x48,0x5F,0x73,0x65
	.DB  0x6E,0x64,0x3E,0x20,0x57,0x41,0x52,0x4E
	.DB  0x49,0x4E,0x47,0x20,0x3A,0x20,0x50,0x61
	.DB  0x63,0x6B,0x65,0x74,0x20,0x69,0x73,0x20
	.DB  0x74,0x6F,0x6F,0x20,0x6C,0x6F,0x6E,0x67
	.DB  0x28,0x25,0x64,0x20,0x62,0x79,0x74,0x65
	.DB  0x73,0x29,0xD,0xA,0x0,0x3C,0x45,0x54
	.DB  0x48,0x5F,0x73,0x65,0x6E,0x64,0x3E,0x20
	.DB  0x57,0x41,0x52,0x4E,0x49,0x4E,0x47,0x20
	.DB  0x3A,0x20,0x45,0x54,0x48,0x5F,0x73,0x65
	.DB  0x6E,0x64,0x20,0x6D,0x61,0x6C,0x6C,0x6F
	.DB  0x63,0x20,0x66,0x61,0x69,0x6C,0x65,0x64
	.DB  0x20,0x28,0x25,0x64,0x29,0xD,0xA,0x0
	.DB  0x3C,0x45,0x54,0x48,0x5F,0x73,0x65,0x6E
	.DB  0x64,0x3E,0x20,0x45,0x54,0x48,0x5F,0x61
	.DB  0x64,0x64,0x57,0x61,0x69,0x74,0x51,0x75
	.DB  0x65,0x75,0x65,0x28,0x29,0x20,0x66,0x61
	.DB  0x69,0x6C,0x65,0x64,0x20,0x5B,0x69,0x64
	.DB  0x3A,0x30,0x78,0x25,0x30,0x32,0x58,0x5D
	.DB  0xD,0xA,0x0,0xD,0xA,0x2D,0x2D,0x54
	.DB  0x72,0x61,0x6E,0x73,0x6D,0x69,0x74,0x74
	.DB  0x69,0x6E,0x67,0x20,0x5B,0x30,0x78,0x25
	.DB  0x30,0x32,0x58,0x5D,0xD,0xA,0x0,0x3C
	.DB  0x45,0x54,0x48,0x5F,0x73,0x77,0x69,0x74
	.DB  0x63,0x68,0x4D,0x6F,0x64,0x65,0x3E,0x20
	.DB  0x73,0x77,0x69,0x74,0x63,0x68,0x20,0x74
	.DB  0x6F,0x20,0x43,0x6F,0x6E,0x66,0x69,0x67
	.DB  0x20,0x6D,0x6F,0x64,0x65,0xD,0xA,0x0
	.DB  0x3C,0x45,0x54,0x48,0x5F,0x73,0x77,0x69
	.DB  0x74,0x63,0x68,0x4D,0x6F,0x64,0x65,0x3E
	.DB  0x20,0x73,0x77,0x69,0x74,0x63,0x68,0x20
	.DB  0x74,0x6F,0x20,0x4E,0x6F,0x72,0x6D,0x61
	.DB  0x6C,0x20,0x6D,0x6F,0x64,0x65,0xD,0xA
	.DB  0x0,0x3C,0x45,0x54,0x48,0x5F,0x67,0x65
	.DB  0x74,0x43,0x6F,0x6E,0x66,0x69,0x67,0x3E
	.DB  0x20,0x57,0x72,0x69,0x74,0x65,0x20,0x74
	.DB  0x6F,0x20,0x75,0x61,0x72,0x74,0x20,0x30
	.DB  0x20,0x3A,0x0,0x3C,0x45,0x54,0x48,0x5F
	.DB  0x73,0x65,0x74,0x43,0x6F,0x6E,0x66,0x69
	.DB  0x67,0x3E,0x20,0x6D,0x61,0x6C,0x6C,0x6F
	.DB  0x63,0x28,0x43,0x4F,0x4E,0x46,0x5F,0x52
	.DB  0x45,0x41,0x44,0x5F,0x42,0x55,0x46,0x46
	.DB  0x45,0x52,0x29,0x20,0x66,0x61,0x69,0x6C
	.DB  0x65,0x64,0xD,0xA,0x0,0x3C,0x45,0x54
	.DB  0x48,0x5F,0x73,0x65,0x74,0x43,0x6F,0x6E
	.DB  0x66,0x69,0x67,0x3E,0x20,0x57,0x72,0x69
	.DB  0x74,0x65,0x20,0x74,0x6F,0x20,0x75,0x61
	.DB  0x72,0x74,0x20,0x30,0x20,0x3A,0x0,0x3C
	.DB  0x45,0x54,0x48,0x5F,0x73,0x65,0x74,0x43
	.DB  0x6F,0x6E,0x66,0x69,0x67,0x3E,0x20,0x72
	.DB  0x65,0x61,0x64,0x20,0x63,0x6F,0x6E,0x66
	.DB  0x69,0x67,0x20,0x66,0x72,0x6F,0x6D,0x20
	.DB  0x45,0x54,0x48,0x20,0x6D,0x6F,0x64,0x75
	.DB  0x6C,0x65,0x20,0x66,0x61,0x69,0x6C,0x65
	.DB  0x64,0xD,0xA,0x0,0x25,0x30,0x32,0x58
	.DB  0x25,0x30,0x32,0x58,0x25,0x30,0x32,0x58
	.DB  0x25,0x30,0x32,0x58,0x25,0x30,0x32,0x58
	.DB  0x25,0x30,0x32,0x58,0x25,0x30,0x32,0x58
	.DB  0x25,0x30,0x32,0x58,0x25,0x30,0x32,0x58
	.DB  0x25,0x30,0x32,0x58,0x25,0x30,0x32,0x58
	.DB  0x25,0x30,0x32,0x58,0x0,0x3C,0x45,0x54
	.DB  0x48,0x5F,0x73,0x65,0x74,0x43,0x6F,0x6E
	.DB  0x66,0x69,0x67,0x3E,0x20,0x53,0x65,0x74
	.DB  0x20,0x53,0x74,0x72,0x69,0x6E,0x67,0x20
	.DB  0x5B,0x25,0x73,0x5D,0xD,0xA,0x0,0x3C
	.DB  0x45,0x54,0x48,0x5F,0x73,0x65,0x74,0x43
	.DB  0x6F,0x6E,0x66,0x69,0x67,0x3E,0x20,0x53
	.DB  0x65,0x74,0x74,0x69,0x6E,0x67,0x20,0x6D
	.DB  0x73,0x67,0x20,0x2D,0x2D,0x2D,0xD,0xA
	.DB  0x0,0xD,0xA,0x2D,0x2D,0x2D,0xD,0xA
	.DB  0x0,0x3C,0x45,0x54,0x48,0x5F,0x72,0x65
	.DB  0x73,0x65,0x74,0x3E,0x20,0x52,0x65,0x73
	.DB  0x65,0x74,0x74,0x69,0x6E,0x67,0x20,0x45
	.DB  0x74,0x68,0x65,0x72,0x6E,0x65,0x74,0x20
	.DB  0x4D,0x6F,0x64,0x75,0x6C,0x65,0x2C,0x20
	.DB  0x70,0x6C,0x65,0x61,0x73,0x65,0x20,0x77
	.DB  0x61,0x69,0x74,0x2E,0x0,0x2E,0x2E,0x2E
	.DB  0x44,0x6F,0x6E,0x65,0xD,0xA,0x0
_0x140000:
	.DB  0x3C,0x73,0x74,0x61,0x74,0x75,0x73,0x52
	.DB  0x65,0x71,0x75,0x65,0x73,0x74,0x50,0x61
	.DB  0x72,0x73,0x65,0x72,0x3E,0x20,0x6D,0x61
	.DB  0x6C,0x6C,0x6F,0x63,0x20,0x66,0x61,0x69
	.DB  0x6C,0x65,0x64,0xD,0xA,0x0,0x3C,0x63
	.DB  0x6F,0x6E,0x66,0x69,0x67,0x4D,0x61,0x6E
	.DB  0x61,0x67,0x65,0x50,0x61,0x72,0x73,0x65
	.DB  0x72,0x3E,0xD,0xA,0x0,0x3C,0x63,0x6F
	.DB  0x6E,0x66,0x69,0x67,0x4D,0x61,0x6E,0x61
	.DB  0x67,0x65,0x50,0x61,0x72,0x73,0x65,0x72
	.DB  0x3E,0x20,0x52,0x45,0x41,0x44,0x49,0x4E
	.DB  0x47,0xD,0xA,0x0,0x3C,0x63,0x6F,0x6E
	.DB  0x66,0x69,0x67,0x4D,0x61,0x6E,0x61,0x67
	.DB  0x65,0x50,0x61,0x72,0x73,0x65,0x72,0x3E
	.DB  0x20,0x57,0x52,0x49,0x54,0x49,0x4E,0x47
	.DB  0xD,0xA,0x0,0x3C,0x63,0x6F,0x6E,0x66
	.DB  0x69,0x67,0x4D,0x61,0x6E,0x61,0x67,0x65
	.DB  0x50,0x61,0x72,0x73,0x65,0x72,0x3E,0x20
	.DB  0x63,0x6F,0x6E,0x66,0x4C,0x65,0x6E,0x20
	.DB  0x3D,0x20,0x25,0x64,0xD,0xA,0x0,0x3C
	.DB  0x63,0x6F,0x6E,0x66,0x69,0x67,0x4D,0x61
	.DB  0x6E,0x61,0x67,0x65,0x50,0x61,0x72,0x73
	.DB  0x65,0x72,0x3E,0x20,0x6D,0x61,0x6C,0x6C
	.DB  0x6F,0x63,0x20,0x66,0x61,0x69,0x6C,0x65
	.DB  0x64,0xD,0xA,0x0,0x3C,0x6E,0x65,0x74
	.DB  0x77,0x6F,0x72,0x6B,0x4D,0x61,0x69,0x6E
	.DB  0x74,0x65,0x6E,0x61,0x6E,0x63,0x65,0x50
	.DB  0x61,0x72,0x73,0x65,0x72,0x3E,0x20,0x6D
	.DB  0x61,0x6C,0x6C,0x6F,0x63,0x20,0x66,0x61
	.DB  0x69,0x6C,0x65,0x64,0x20,0x28,0x25,0x64
	.DB  0x29,0xD,0xA,0x0
_0x160000:
	.DB  0x3C,0x67,0x65,0x74,0x43,0x6F,0x6E,0x66
	.DB  0x69,0x67,0x4C,0x65,0x6E,0x3E,0x20,0x75
	.DB  0x6E,0x6B,0x6E,0x6F,0x77,0x6E,0x20,0x63
	.DB  0x6F,0x6E,0x66,0x69,0x67,0x75,0x72,0x61
	.DB  0x74,0x69,0x6F,0x6E,0x20,0x74,0x79,0x70
	.DB  0x65,0x20,0x5B,0x30,0x78,0x25,0x30,0x32
	.DB  0x58,0x5D,0xD,0xA,0x0,0x3C,0x63,0x6F
	.DB  0x6E,0x66,0x69,0x67,0x52,0x65,0x61,0x64
	.DB  0x3E,0x20,0x43,0x4F,0x4E,0x46,0x5F,0x50
	.DB  0x52,0x4F,0x50,0x45,0x52,0x54,0x49,0x45
	.DB  0x53,0x20,0x6D,0x61,0x6C,0x6C,0x6F,0x63
	.DB  0x31,0x20,0x66,0x61,0x69,0x6C,0x65,0x64
	.DB  0x20,0x28,0x25,0x64,0x20,0x62,0x79,0x74
	.DB  0x65,0x73,0x29,0xD,0xA,0x0,0x3C,0x63
	.DB  0x6F,0x6E,0x66,0x69,0x67,0x52,0x65,0x61
	.DB  0x64,0x3E,0x20,0x67,0x65,0x74,0x50,0x72
	.DB  0x6F,0x70,0x65,0x72,0x74,0x69,0x65,0x73
	.DB  0x43,0x6F,0x6E,0x66,0x69,0x67,0x28,0x29
	.DB  0x20,0x66,0x61,0x69,0x6C,0x65,0x64,0xD
	.DB  0xA,0x0,0xD,0xA,0x2D,0x2D,0x2D,0x20
	.DB  0x52,0x45,0x41,0x44,0x20,0x43,0x4F,0x4E
	.DB  0x46,0x5F,0x50,0x52,0x4F,0x50,0x45,0x52
	.DB  0x54,0x49,0x45,0x53,0x20,0x2D,0x2D,0x2D
	.DB  0xD,0xA,0x0,0x25,0x73,0xD,0xA,0x0
	.DB  0x25,0x64,0xD,0xA,0x0,0x3C,0x63,0x6F
	.DB  0x6E,0x66,0x69,0x67,0x52,0x65,0x61,0x64
	.DB  0x3E,0x20,0x43,0x4F,0x4E,0x46,0x5F,0x4F
	.DB  0x50,0x45,0x52,0x41,0x54,0x45,0x20,0x6D
	.DB  0x61,0x6C,0x6C,0x6F,0x63,0x31,0x20,0x66
	.DB  0x61,0x69,0x6C,0x65,0x64,0x20,0x28,0x25
	.DB  0x64,0x20,0x62,0x79,0x74,0x65,0x73,0x29
	.DB  0xD,0xA,0x0,0x3C,0x63,0x6F,0x6E,0x66
	.DB  0x69,0x67,0x52,0x65,0x61,0x64,0x3E,0x20
	.DB  0x67,0x65,0x74,0x4F,0x70,0x65,0x72,0x61
	.DB  0x74,0x69,0x6E,0x67,0x43,0x6F,0x6E,0x66
	.DB  0x69,0x67,0x28,0x29,0x20,0x66,0x61,0x69
	.DB  0x6C,0x65,0x64,0xD,0xA,0x0,0xD,0xA
	.DB  0x2D,0x2D,0x2D,0x20,0x52,0x45,0x41,0x44
	.DB  0x20,0x43,0x4F,0x4E,0x46,0x5F,0x4F,0x50
	.DB  0x45,0x52,0x41,0x54,0x45,0x20,0x2D,0x2D
	.DB  0x2D,0xD,0xA,0x0,0x6D,0x6F,0x64,0x65
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x5B,0x30,0x78,0x25
	.DB  0x30,0x32,0x58,0x5D,0xD,0xA,0x0,0x64
	.DB  0x65,0x76,0x69,0x63,0x65,0x45,0x6E,0x61
	.DB  0x62,0x6C,0x65,0x20,0x20,0x20,0x20,0x5B
	.DB  0x30,0x78,0x25,0x30,0x32,0x58,0x5D,0xD
	.DB  0xA,0x0,0x61,0x6C,0x61,0x72,0x6D,0x45
	.DB  0x6E,0x61,0x62,0x6C,0x65,0x20,0x20,0x20
	.DB  0x20,0x20,0x5B,0x30,0x78,0x25,0x30,0x32
	.DB  0x58,0x5D,0xD,0xA,0x0,0x73,0x65,0x6E
	.DB  0x73,0x6F,0x72,0x45,0x6E,0x61,0x62,0x6C
	.DB  0x65,0x20,0x20,0x20,0x20,0x0,0x5B,0x30
	.DB  0x78,0x25,0x30,0x32,0x58,0x5D,0x0,0x3C
	.DB  0x63,0x6F,0x6E,0x66,0x69,0x67,0x52,0x65
	.DB  0x61,0x64,0x3E,0x20,0x43,0x4F,0x4E,0x46
	.DB  0x5F,0x53,0x45,0x4E,0x53,0x4F,0x52,0x20
	.DB  0x6D,0x61,0x6C,0x6C,0x6F,0x63,0x31,0x20
	.DB  0x66,0x61,0x69,0x6C,0x65,0x64,0x20,0x28
	.DB  0x25,0x64,0x20,0x62,0x79,0x74,0x65,0x73
	.DB  0x29,0xD,0xA,0x0,0x3C,0x63,0x6F,0x6E
	.DB  0x66,0x69,0x67,0x52,0x65,0x61,0x64,0x3E
	.DB  0x20,0x67,0x65,0x74,0x53,0x65,0x6E,0x73
	.DB  0x6F,0x72,0x43,0x6F,0x6E,0x66,0x69,0x67
	.DB  0x28,0x29,0x20,0x66,0x61,0x69,0x6C,0x65
	.DB  0x64,0xD,0xA,0x0,0xD,0xA,0x2D,0x2D
	.DB  0x2D,0x20,0x52,0x45,0x41,0x44,0x20,0x43
	.DB  0x4F,0x4E,0x46,0x5F,0x53,0x45,0x4E,0x53
	.DB  0x4F,0x52,0x20,0x5B,0x25,0x64,0x5D,0x2D
	.DB  0x2D,0x2D,0xD,0xA,0x0,0x73,0x61,0x6D
	.DB  0x70,0x6C,0x69,0x6E,0x67,0x52,0x61,0x74
	.DB  0x65,0x20,0x20,0x20,0x20,0x5B,0x25,0x64
	.DB  0x5D,0xD,0xA,0x0,0x72,0x65,0x4F,0x63
	.DB  0x63,0x75,0x72,0x72,0x65,0x6E,0x63,0x65
	.DB  0x20,0x20,0x20,0x20,0x5B,0x30,0x78,0x25
	.DB  0x30,0x34,0x58,0x5D,0xD,0xA,0x0,0x74
	.DB  0x69,0x6D,0x65,0x53,0x74,0x61,0x72,0x74
	.DB  0x48,0x6F,0x75,0x72,0x20,0x20,0x20,0x5B
	.DB  0x25,0x64,0x5D,0xD,0xA,0x0,0x74,0x69
	.DB  0x6D,0x65,0x53,0x74,0x61,0x72,0x74,0x4D
	.DB  0x69,0x6E,0x20,0x20,0x20,0x20,0x5B,0x25
	.DB  0x64,0x5D,0xD,0xA,0x0,0x74,0x69,0x6D
	.DB  0x65,0x53,0x74,0x6F,0x70,0x48,0x6F,0x75
	.DB  0x72,0x20,0x20,0x20,0x20,0x5B,0x25,0x64
	.DB  0x5D,0xD,0xA,0x0,0x74,0x69,0x6D,0x65
	.DB  0x53,0x74,0x6F,0x70,0x4D,0x69,0x6E,0x20
	.DB  0x20,0x20,0x20,0x20,0x5B,0x25,0x64,0x5D
	.DB  0xD,0xA,0x0,0x6C,0x6F,0x77,0x65,0x72
	.DB  0x4C,0x69,0x6D,0x69,0x74,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x5B,0x25,0x66,0x5D,0xD
	.DB  0xA,0x0,0x6C,0x6F,0x77,0x65,0x72,0x44
	.DB  0x65,0x6C,0x61,0x79,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x5B,0x25,0x64,0x5D,0xD,0xA
	.DB  0x0,0x6C,0x6F,0x77,0x65,0x72,0x45,0x78
	.DB  0x74,0x72,0x65,0x6D,0x65,0x20,0x20,0x20
	.DB  0x20,0x5B,0x25,0x66,0x5D,0xD,0xA,0x0
	.DB  0x75,0x70,0x70,0x65,0x72,0x4C,0x69,0x6D
	.DB  0x69,0x74,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x5B,0x25,0x66,0x5D,0xD,0xA,0x0,0x75
	.DB  0x70,0x70,0x65,0x72,0x44,0x65,0x6C,0x61
	.DB  0x79,0x20,0x20,0x20,0x20,0x20,0x20,0x5B
	.DB  0x25,0x64,0x5D,0xD,0xA,0x0,0x75,0x70
	.DB  0x70,0x65,0x72,0x45,0x78,0x74,0x72,0x65
	.DB  0x6D,0x65,0x20,0x20,0x20,0x20,0x5B,0x25
	.DB  0x66,0x5D,0xD,0xA,0x0,0x3C,0x63,0x6F
	.DB  0x6E,0x66,0x69,0x67,0x52,0x65,0x61,0x64
	.DB  0x3E,0x20,0x43,0x4F,0x4E,0x46,0x5F,0x41
	.DB  0x55,0x58,0x44,0x49,0x20,0x6D,0x61,0x6C
	.DB  0x6C,0x6F,0x63,0x31,0x20,0x66,0x61,0x69
	.DB  0x6C,0x65,0x64,0x20,0x28,0x25,0x64,0x20
	.DB  0x62,0x79,0x74,0x65,0x73,0x29,0xD,0xA
	.DB  0x0,0x3C,0x63,0x6F,0x6E,0x66,0x69,0x67
	.DB  0x52,0x65,0x61,0x64,0x3E,0x20,0x67,0x65
	.DB  0x74,0x41,0x75,0x78,0x44,0x69,0x6E,0x43
	.DB  0x6F,0x6E,0x66,0x69,0x67,0x28,0x29,0x20
	.DB  0x66,0x61,0x69,0x6C,0x65,0x64,0xD,0xA
	.DB  0x0,0xD,0xA,0x2D,0x2D,0x2D,0x20,0x52
	.DB  0x45,0x41,0x44,0x20,0x43,0x4F,0x4E,0x46
	.DB  0x5F,0x41,0x55,0x58,0x44,0x49,0x20,0x5B
	.DB  0x25,0x64,0x5D,0x2D,0x2D,0x2D,0xD,0xA
	.DB  0x0,0x63,0x68,0x61,0x6E,0x6E,0x65,0x6C
	.DB  0x45,0x6E,0x61,0x62,0x6C,0x65,0x20,0x20
	.DB  0x20,0x20,0x5B,0x30,0x78,0x25,0x30,0x32
	.DB  0x58,0x5D,0xD,0xA,0x0,0x61,0x6C,0x61
	.DB  0x72,0x6D,0x44,0x65,0x6C,0x61,0x79,0x20
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x5B,0x25
	.DB  0x64,0x5D,0xD,0xA,0x0,0x3C,0x63,0x6F
	.DB  0x6E,0x66,0x69,0x67,0x52,0x65,0x61,0x64
	.DB  0x3E,0x20,0x43,0x4F,0x4E,0x46,0x5F,0x41
	.DB  0x55,0x58,0x44,0x4F,0x20,0x6D,0x61,0x6C
	.DB  0x6C,0x6F,0x63,0x31,0x20,0x66,0x61,0x69
	.DB  0x6C,0x65,0x64,0x20,0x28,0x25,0x64,0x20
	.DB  0x62,0x79,0x74,0x65,0x73,0x29,0xD,0xA
	.DB  0x0,0x3C,0x63,0x6F,0x6E,0x66,0x69,0x67
	.DB  0x52,0x65,0x61,0x64,0x3E,0x20,0x67,0x65
	.DB  0x74,0x41,0x75,0x78,0x44,0x6F,0x75,0x74
	.DB  0x43,0x6F,0x6E,0x66,0x69,0x67,0x28,0x29
	.DB  0x20,0x66,0x61,0x69,0x6C,0x65,0x64,0xD
	.DB  0xA,0x0,0xD,0xA,0x2D,0x2D,0x2D,0x20
	.DB  0x52,0x45,0x41,0x44,0x20,0x43,0x4F,0x4E
	.DB  0x46,0x5F,0x41,0x55,0x58,0x44,0x4F,0x20
	.DB  0x5B,0x25,0x64,0x5D,0x2D,0x2D,0x2D,0xD
	.DB  0xA,0x0,0x63,0x68,0x61,0x6E,0x6E,0x65
	.DB  0x6C,0x45,0x6E,0x61,0x62,0x6C,0x65,0x20
	.DB  0x20,0x20,0x20,0x20,0x5B,0x30,0x78,0x25
	.DB  0x30,0x32,0x58,0x5D,0xD,0xA,0x0,0x73
	.DB  0x74,0x61,0x74,0x65,0x4F,0x6E,0x45,0x76
	.DB  0x65,0x6E,0x74,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x5B,0x25,0x64,0x5D,0xD,0xA,0x0
	.DB  0x65,0x76,0x65,0x6E,0x74,0x53,0x6F,0x75
	.DB  0x72,0x63,0x65,0x4E,0x75,0x6D,0x62,0x65
	.DB  0x72,0x20,0x5B,0x25,0x64,0x5D,0xD,0xA
	.DB  0x0,0x65,0x76,0x65,0x6E,0x74,0x53,0x6F
	.DB  0x75,0x72,0x63,0x65,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x0,0x3C,0x63,0x6F,0x6E
	.DB  0x66,0x69,0x67,0x52,0x65,0x61,0x64,0x3E
	.DB  0x20,0x43,0x4F,0x4E,0x46,0x5F,0x41,0x55
	.DB  0x58,0x41,0x49,0x20,0x6D,0x61,0x6C,0x6C
	.DB  0x6F,0x63,0x31,0x20,0x66,0x61,0x69,0x6C
	.DB  0x65,0x64,0x20,0x28,0x25,0x64,0x20,0x62
	.DB  0x79,0x74,0x65,0x73,0x29,0xD,0xA,0x0
	.DB  0x3C,0x63,0x6F,0x6E,0x66,0x69,0x67,0x52
	.DB  0x65,0x61,0x64,0x3E,0x20,0x67,0x65,0x74
	.DB  0x41,0x75,0x78,0x41,0x69,0x6E,0x43,0x6F
	.DB  0x6E,0x66,0x69,0x67,0x28,0x29,0x20,0x66
	.DB  0x61,0x69,0x6C,0x65,0x64,0xD,0xA,0x0
	.DB  0xD,0xA,0x2D,0x2D,0x2D,0x20,0x52,0x45
	.DB  0x41,0x44,0x20,0x43,0x4F,0x4E,0x46,0x5F
	.DB  0x41,0x55,0x58,0x41,0x49,0x20,0x5B,0x25
	.DB  0x64,0x5D,0x2D,0x2D,0x2D,0xD,0xA,0x0
	.DB  0x61,0x6C,0x61,0x72,0x6D,0x44,0x65,0x6C
	.DB  0x61,0x79,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x5B,0x25,0x66,0x5D,0xD,0xA,0x0
	.DB  0x3C,0x63,0x6F,0x6E,0x66,0x69,0x67,0x52
	.DB  0x65,0x61,0x64,0x3E,0x20,0x43,0x4F,0x4E
	.DB  0x46,0x5F,0x41,0x55,0x58,0x41,0x4F,0x20
	.DB  0x6D,0x61,0x6C,0x6C,0x6F,0x63,0x31,0x20
	.DB  0x66,0x61,0x69,0x6C,0x65,0x64,0x20,0x28
	.DB  0x25,0x64,0x20,0x62,0x79,0x74,0x65,0x73
	.DB  0x29,0xD,0xA,0x0,0x3C,0x63,0x6F,0x6E
	.DB  0x66,0x69,0x67,0x52,0x65,0x61,0x64,0x3E
	.DB  0x20,0x67,0x65,0x74,0x41,0x75,0x78,0x41
	.DB  0x6F,0x75,0x74,0x43,0x6F,0x6E,0x66,0x69
	.DB  0x67,0x28,0x29,0x20,0x66,0x61,0x69,0x6C
	.DB  0x65,0x64,0xD,0xA,0x0,0xD,0xA,0x2D
	.DB  0x2D,0x2D,0x20,0x52,0x45,0x41,0x44,0x20
	.DB  0x43,0x4F,0x4E,0x46,0x5F,0x41,0x55,0x58
	.DB  0x41,0x4F,0x20,0x5B,0x25,0x64,0x5D,0x2D
	.DB  0x2D,0x2D,0xD,0xA,0x0,0x6C,0x65,0x76
	.DB  0x65,0x6C,0x4F,0x6E,0x45,0x76,0x65,0x6E
	.DB  0x74,0x20,0x20,0x20,0x20,0x20,0x20,0x5B
	.DB  0x25,0x66,0x5D,0xD,0xA,0x0,0x3C,0x63
	.DB  0x6F,0x6E,0x66,0x69,0x67,0x52,0x65,0x61
	.DB  0x64,0x3E,0x20,0x43,0x4F,0x4E,0x46,0x5F
	.DB  0x42,0x55,0x5A,0x5A,0x45,0x52,0x20,0x6D
	.DB  0x61,0x6C,0x6C,0x6F,0x63,0x31,0x20,0x66
	.DB  0x61,0x69,0x6C,0x65,0x64,0x20,0x28,0x25
	.DB  0x64,0x20,0x62,0x79,0x74,0x65,0x73,0x29
	.DB  0xD,0xA,0x0,0x3C,0x63,0x6F,0x6E,0x66
	.DB  0x69,0x67,0x52,0x65,0x61,0x64,0x3E,0x20
	.DB  0x67,0x65,0x74,0x42,0x75,0x7A,0x7A,0x65
	.DB  0x72,0x43,0x6F,0x6E,0x66,0x69,0x67,0x28
	.DB  0x29,0x20,0x66,0x61,0x69,0x6C,0x65,0x64
	.DB  0xD,0xA,0x0,0xD,0xA,0x2D,0x2D,0x2D
	.DB  0x20,0x52,0x45,0x41,0x44,0x20,0x43,0x4F
	.DB  0x4E,0x46,0x5F,0x42,0x55,0x5A,0x5A,0x45
	.DB  0x52,0x20,0x2D,0x2D,0x2D,0xD,0xA,0x0
	.DB  0x65,0x6E,0x61,0x62,0x6C,0x65,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x5B,0x30,0x78,0x25,0x30,0x32
	.DB  0x58,0x5D,0xD,0xA,0x0,0x3C,0x63,0x6F
	.DB  0x6E,0x66,0x69,0x67,0x52,0x65,0x61,0x64
	.DB  0x3E,0x20,0x43,0x4F,0x4E,0x46,0x5F,0x45
	.DB  0x4E,0x56,0x41,0x4C,0x41,0x52,0x4D,0x20
	.DB  0x6D,0x61,0x6C,0x6C,0x6F,0x63,0x31,0x20
	.DB  0x66,0x61,0x69,0x6C,0x65,0x64,0x20,0x28
	.DB  0x25,0x64,0x20,0x62,0x79,0x74,0x65,0x73
	.DB  0x29,0xD,0xA,0x0,0x3C,0x63,0x6F,0x6E
	.DB  0x66,0x69,0x67,0x52,0x65,0x61,0x64,0x3E
	.DB  0x20,0x67,0x65,0x74,0x45,0x6E,0x76,0x41
	.DB  0x6C,0x61,0x72,0x6D,0x43,0x6F,0x6E,0x66
	.DB  0x69,0x67,0x28,0x29,0x20,0x66,0x61,0x69
	.DB  0x6C,0x65,0x64,0xD,0xA,0x0,0xD,0xA
	.DB  0x2D,0x2D,0x2D,0x20,0x52,0x45,0x41,0x44
	.DB  0x20,0x43,0x4F,0x4E,0x46,0x5F,0x45,0x4E
	.DB  0x56,0x41,0x4C,0x41,0x52,0x4D,0x20,0x2D
	.DB  0x2D,0x2D,0xD,0xA,0x0,0x67,0x73,0x6D
	.DB  0x52,0x53,0x53,0x49,0x4C,0x65,0x76,0x65
	.DB  0x6C,0x20,0x20,0x20,0x20,0x20,0x20,0x5B
	.DB  0x25,0x66,0x5D,0xD,0xA,0x0,0x67,0x73
	.DB  0x6D,0x43,0x72,0x65,0x64,0x69,0x74,0x42
	.DB  0x61,0x6C,0x61,0x6E,0x63,0x65,0x20,0x20
	.DB  0x5B,0x25,0x64,0x5D,0xD,0xA,0x0,0x62
	.DB  0x61,0x74,0x74,0x65,0x72,0x79,0x4C,0x65
	.DB  0x76,0x65,0x6C,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x5B,0x25,0x66,0x5D,0xD,0xA,0x0
	.DB  0x63,0x6F,0x6D,0x6D,0x53,0x69,0x67,0x6E
	.DB  0x61,0x6C,0x4C,0x65,0x76,0x65,0x6C,0x20
	.DB  0x20,0x20,0x5B,0x25,0x66,0x5D,0xD,0xA
	.DB  0x0,0x63,0x6F,0x6D,0x6D,0x4C,0x6F,0x73
	.DB  0x74,0x44,0x65,0x6C,0x61,0x79,0x20,0x20
	.DB  0x20,0x20,0x20,0x5B,0x25,0x64,0x5D,0xD
	.DB  0xA,0x0,0x6D,0x65,0x6D,0x6F,0x72,0x79
	.DB  0x4D,0x69,0x6E,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x5B,0x25,0x64,0x5D
	.DB  0xD,0xA,0x0,0x3C,0x63,0x6F,0x6E,0x66
	.DB  0x69,0x67,0x52,0x65,0x61,0x64,0x3E,0x20
	.DB  0x43,0x4F,0x4E,0x46,0x5F,0x53,0x54,0x41
	.DB  0x54,0x52,0x45,0x50,0x4F,0x52,0x54,0x20
	.DB  0x6D,0x61,0x6C,0x6C,0x6F,0x63,0x31,0x20
	.DB  0x66,0x61,0x69,0x6C,0x65,0x64,0x20,0x28
	.DB  0x25,0x64,0x20,0x62,0x79,0x74,0x65,0x73
	.DB  0x29,0xD,0xA,0x0,0x3C,0x63,0x6F,0x6E
	.DB  0x66,0x69,0x67,0x52,0x65,0x61,0x64,0x3E
	.DB  0x20,0x67,0x65,0x74,0x53,0x74,0x61,0x74
	.DB  0x75,0x73,0x52,0x65,0x70,0x6F,0x72,0x74
	.DB  0x43,0x6F,0x6E,0x66,0x69,0x67,0x28,0x29
	.DB  0x20,0x66,0x61,0x69,0x6C,0x65,0x64,0xD
	.DB  0xA,0x0,0xD,0xA,0x2D,0x2D,0x2D,0x20
	.DB  0x52,0x45,0x41,0x44,0x20,0x43,0x4F,0x4E
	.DB  0x46,0x5F,0x53,0x54,0x41,0x54,0x52,0x45
	.DB  0x50,0x4F,0x52,0x54,0x20,0x2D,0x2D,0x2D
	.DB  0xD,0xA,0x0,0x61,0x63,0x63,0x6D,0x20
	.DB  0x20,0x20,0x20,0x20,0x20,0x5B,0x30,0x78
	.DB  0x25,0x30,0x32,0x58,0x5D,0xD,0xA,0x0
	.DB  0x69,0x6E,0x74,0x76,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x5B,0x25,0x64,0x5D,0xD,0xA
	.DB  0x0,0x3C,0x63,0x6F,0x6E,0x66,0x69,0x67
	.DB  0x52,0x65,0x61,0x64,0x3E,0x20,0x75,0x6E
	.DB  0x6B,0x6E,0x6F,0x77,0x6E,0x20,0x63,0x6F
	.DB  0x6E,0x66,0x69,0x67,0x75,0x72,0x61,0x74
	.DB  0x69,0x6F,0x6E,0x20,0x74,0x79,0x70,0x65
	.DB  0x20,0x5B,0x30,0x78,0x25,0x30,0x32,0x58
	.DB  0x5D,0xD,0xA,0x0,0xD,0xA,0x20,0x2D
	.DB  0x2D,0x2D,0x20,0x57,0x52,0x49,0x54,0x45
	.DB  0x20,0x43,0x4F,0x4E,0x46,0x49,0x47,0x20
	.DB  0x70,0x61,0x63,0x6B,0x65,0x74,0x20,0x28
	.DB  0x25,0x64,0x29,0x2D,0x2D,0x2D,0x20,0xD
	.DB  0xA,0x0,0xD,0xA,0x2D,0x2D,0x2D,0x20
	.DB  0x57,0x72,0x69,0x74,0x65,0x20,0x43,0x4F
	.DB  0x4E,0x46,0x5F,0x50,0x52,0x4F,0x50,0x45
	.DB  0x52,0x54,0x49,0x45,0x53,0x20,0x2D,0x2D
	.DB  0x2D,0x0,0x3C,0x63,0x6F,0x6E,0x66,0x69
	.DB  0x67,0x57,0x72,0x69,0x74,0x65,0x3E,0x20
	.DB  0x73,0x65,0x74,0x50,0x72,0x6F,0x70,0x65
	.DB  0x72,0x74,0x69,0x65,0x73,0x43,0x6F,0x6E
	.DB  0x66,0x69,0x67,0x28,0x29,0x20,0x66,0x61
	.DB  0x69,0x6C,0x65,0x64,0xD,0xA,0x0,0xD
	.DB  0xA,0x2D,0x2D,0x2D,0x20,0x57,0x72,0x69
	.DB  0x74,0x65,0x20,0x43,0x4F,0x4E,0x46,0x5F
	.DB  0x4F,0x50,0x45,0x52,0x41,0x54,0x45,0x20
	.DB  0x2D,0x2D,0x2D,0x0,0x3C,0x63,0x6F,0x6E
	.DB  0x66,0x69,0x67,0x57,0x72,0x69,0x74,0x65
	.DB  0x3E,0x20,0x73,0x65,0x74,0x4F,0x70,0x65
	.DB  0x72,0x61,0x74,0x69,0x6E,0x67,0x43,0x6F
	.DB  0x6E,0x66,0x69,0x67,0x28,0x29,0x20,0x66
	.DB  0x61,0x69,0x6C,0x65,0x64,0xD,0xA,0x0
	.DB  0xD,0xA,0x2D,0x2D,0x2D,0x20,0x57,0x72
	.DB  0x69,0x74,0x65,0x20,0x43,0x4F,0x4E,0x46
	.DB  0x5F,0x53,0x45,0x4E,0x53,0x4F,0x52,0x20
	.DB  0x28,0x25,0x64,0x29,0x20,0x2D,0x2D,0x2D
	.DB  0x0,0x3C,0x63,0x6F,0x6E,0x66,0x69,0x67
	.DB  0x57,0x72,0x69,0x74,0x65,0x3E,0x20,0x73
	.DB  0x65,0x74,0x53,0x65,0x6E,0x73,0x6F,0x72
	.DB  0x43,0x6F,0x6E,0x66,0x69,0x67,0x28,0x29
	.DB  0x20,0x66,0x61,0x69,0x6C,0x65,0x64,0xD
	.DB  0xA,0x0,0xD,0xA,0x2D,0x2D,0x2D,0x20
	.DB  0x57,0x72,0x69,0x74,0x65,0x20,0x43,0x4F
	.DB  0x4E,0x46,0x5F,0x41,0x55,0x58,0x44,0x49
	.DB  0x20,0x28,0x25,0x64,0x29,0x20,0x2D,0x2D
	.DB  0x2D,0x0,0x3C,0x63,0x6F,0x6E,0x66,0x69
	.DB  0x67,0x57,0x72,0x69,0x74,0x65,0x3E,0x20
	.DB  0x73,0x65,0x74,0x41,0x75,0x78,0x44,0x69
	.DB  0x6E,0x43,0x6F,0x6E,0x66,0x69,0x67,0x28
	.DB  0x29,0x20,0x66,0x61,0x69,0x6C,0x65,0x64
	.DB  0xD,0xA,0x0,0xD,0xA,0x2D,0x2D,0x2D
	.DB  0x20,0x57,0x72,0x69,0x74,0x65,0x20,0x43
	.DB  0x4F,0x4E,0x46,0x5F,0x41,0x55,0x58,0x44
	.DB  0x4F,0x20,0x28,0x25,0x64,0x29,0x20,0x2D
	.DB  0x2D,0x2D,0x0,0x3C,0x63,0x6F,0x6E,0x66
	.DB  0x69,0x67,0x57,0x72,0x69,0x74,0x65,0x3E
	.DB  0x20,0x73,0x65,0x74,0x41,0x75,0x78,0x44
	.DB  0x6F,0x75,0x74,0x43,0x6F,0x6E,0x66,0x69
	.DB  0x67,0x28,0x29,0x20,0x66,0x61,0x69,0x6C
	.DB  0x65,0x64,0xD,0xA,0x0,0xD,0xA,0x2D
	.DB  0x2D,0x2D,0x20,0x57,0x72,0x69,0x74,0x65
	.DB  0x20,0x43,0x4F,0x4E,0x46,0x5F,0x41,0x55
	.DB  0x58,0x41,0x49,0x20,0x28,0x25,0x64,0x29
	.DB  0x20,0x2D,0x2D,0x2D,0x0,0x3C,0x63,0x6F
	.DB  0x6E,0x66,0x69,0x67,0x57,0x72,0x69,0x74
	.DB  0x65,0x3E,0x20,0x73,0x65,0x74,0x41,0x75
	.DB  0x78,0x41,0x69,0x6E,0x43,0x6F,0x6E,0x66
	.DB  0x69,0x67,0x28,0x29,0x20,0x66,0x61,0x69
	.DB  0x6C,0x65,0x64,0xD,0xA,0x0,0xD,0xA
	.DB  0x2D,0x2D,0x2D,0x20,0x57,0x72,0x69,0x74
	.DB  0x65,0x20,0x43,0x4F,0x4E,0x46,0x5F,0x41
	.DB  0x55,0x58,0x41,0x4F,0x20,0x28,0x25,0x64
	.DB  0x29,0x20,0x2D,0x2D,0x2D,0x0,0x3C,0x63
	.DB  0x6F,0x6E,0x66,0x69,0x67,0x57,0x72,0x69
	.DB  0x74,0x65,0x3E,0x20,0x73,0x65,0x74,0x41
	.DB  0x75,0x78,0x41,0x6F,0x75,0x74,0x43,0x6F
	.DB  0x6E,0x66,0x69,0x67,0x28,0x29,0x20,0x66
	.DB  0x61,0x69,0x6C,0x65,0x64,0xD,0xA,0x0
	.DB  0xD,0xA,0x2D,0x2D,0x2D,0x20,0x57,0x72
	.DB  0x69,0x74,0x65,0x20,0x43,0x4F,0x4E,0x46
	.DB  0x5F,0x42,0x55,0x5A,0x5A,0x45,0x52,0x20
	.DB  0x2D,0x2D,0x2D,0x0,0x3C,0x63,0x6F,0x6E
	.DB  0x66,0x69,0x67,0x57,0x72,0x69,0x74,0x65
	.DB  0x3E,0x20,0x73,0x65,0x74,0x42,0x75,0x7A
	.DB  0x7A,0x65,0x72,0x43,0x6F,0x6E,0x66,0x69
	.DB  0x67,0x28,0x29,0x20,0x66,0x61,0x69,0x6C
	.DB  0x65,0x64,0xD,0xA,0x0,0xD,0xA,0x2D
	.DB  0x2D,0x2D,0x20,0x57,0x72,0x69,0x74,0x65
	.DB  0x20,0x43,0x4F,0x4E,0x46,0x5F,0x45,0x4E
	.DB  0x56,0x41,0x4C,0x41,0x52,0x4D,0x20,0x2D
	.DB  0x2D,0x2D,0x0,0x3C,0x63,0x6F,0x6E,0x66
	.DB  0x69,0x67,0x57,0x72,0x69,0x74,0x65,0x3E
	.DB  0x20,0x73,0x65,0x74,0x45,0x6E,0x76,0x41
	.DB  0x6C,0x61,0x72,0x6D,0x43,0x6F,0x6E,0x66
	.DB  0x69,0x67,0x28,0x29,0x20,0x66,0x61,0x69
	.DB  0x6C,0x65,0x64,0xD,0xA,0x0,0xD,0xA
	.DB  0x2D,0x2D,0x2D,0x20,0x57,0x72,0x69,0x74
	.DB  0x65,0x20,0x43,0x4F,0x4E,0x46,0x5F,0x53
	.DB  0x54,0x41,0x54,0x52,0x45,0x50,0x4F,0x52
	.DB  0x54,0x20,0x2D,0x2D,0x2D,0x0,0x3C,0x63
	.DB  0x6F,0x6E,0x66,0x69,0x67,0x57,0x72,0x69
	.DB  0x74,0x65,0x3E,0x20,0x73,0x65,0x74,0x53
	.DB  0x74,0x61,0x74,0x75,0x73,0x52,0x65,0x70
	.DB  0x6F,0x72,0x74,0x43,0x6F,0x6E,0x66,0x69
	.DB  0x67,0x28,0x29,0x20,0x66,0x61,0x69,0x6C
	.DB  0x65,0x64,0xD,0xA,0x0,0x3C,0x73,0x65
	.DB  0x74,0x4C,0x6F,0x67,0x4D,0x61,0x6E,0x69
	.DB  0x70,0x75,0x6C,0x61,0x74,0x65,0x53,0x63
	.DB  0x68,0x65,0x6D,0x61,0x3E,0x20,0x74,0x69
	.DB  0x6D,0x65,0x20,0x70,0x65,0x72,0x69,0x6F
	.DB  0x64,0x20,0x65,0x72,0x72,0x6F,0x72,0x20
	.DB  0x73,0x74,0x61,0x72,0x74,0x5B,0x25,0x6C
	.DB  0x64,0x5D,0x20,0x2D,0x20,0x73,0x74,0x6F
	.DB  0x70,0x5B,0x25,0x6C,0x64,0x5D,0xD,0xA
	.DB  0x0,0x3C,0x73,0x65,0x74,0x54,0x69,0x6D
	.DB  0x65,0x53,0x79,0x6E,0x63,0x53,0x63,0x68
	.DB  0x65,0x6D,0x61,0x3E,0x20,0x47,0x6F,0x74
	.DB  0x20,0x30,0x20,0x55,0x6E,0x69,0x78,0x20
	.DB  0x74,0x69,0x6D,0x65,0x20,0x73,0x74,0x61
	.DB  0x6D,0x70,0xD,0xA,0x0,0x3C,0x73,0x65
	.DB  0x74,0x54,0x69,0x6D,0x65,0x53,0x79,0x6E
	.DB  0x63,0x53,0x63,0x68,0x65,0x6D,0x61,0x3E
	.DB  0x20,0x52,0x65,0x63,0x65,0x69,0x76,0x65
	.DB  0x64,0x20,0x74,0x69,0x6D,0x65,0x20,0x73
	.DB  0x79,0x6E,0x63,0x2E,0x20,0x70,0x61,0x63
	.DB  0x6B,0x65,0x74,0x20,0x25,0x6C,0x64,0xD
	.DB  0xA,0x0,0x3C,0x73,0x65,0x74,0x54,0x69
	.DB  0x6D,0x65,0x53,0x79,0x6E,0x63,0x53,0x63
	.DB  0x68,0x65,0x6D,0x61,0x3E,0x20,0x52,0x54
	.DB  0x43,0x5F,0x73,0x65,0x74,0x42,0x69,0x6E
	.DB  0x61,0x72,0x79,0x28,0x25,0x6C,0x64,0x29
	.DB  0x20,0x66,0x61,0x69,0x6C,0x65,0x64,0xD
	.DB  0xA,0x0,0x3C,0x73,0x65,0x74,0x4D,0x75
	.DB  0x74,0x65,0x41,0x6C,0x61,0x72,0x6D,0x3E
	.DB  0x20,0x70,0x65,0x72,0x6D,0x61,0x6E,0x65
	.DB  0x6E,0x74,0x20,0x6D,0x75,0x74,0x65,0x20
	.DB  0x61,0x6C,0x61,0x72,0x6D,0xD,0xA,0x0
	.DB  0x3C,0x73,0x65,0x74,0x4D,0x75,0x74,0x65
	.DB  0x41,0x6C,0x61,0x72,0x6D,0x3E,0x20,0x69
	.DB  0x6E,0x76,0x61,0x6C,0x69,0x64,0x20,0x70
	.DB  0x65,0x72,0x69,0x6F,0x64,0x20,0x28,0x25
	.DB  0x6C,0x64,0x29,0xD,0xA,0x0,0x3C,0x73
	.DB  0x65,0x74,0x4D,0x75,0x74,0x65,0x41,0x6C
	.DB  0x61,0x72,0x6D,0x3E,0x20,0x6D,0x75,0x74
	.DB  0x65,0x20,0x61,0x6C,0x61,0x72,0x6D,0x20
	.DB  0x66,0x6F,0x72,0x20,0x25,0x6C,0x64,0x20
	.DB  0x73,0x65,0x63,0x6F,0x6E,0x64,0xD,0xA
	.DB  0x0,0x3C,0x73,0x65,0x74,0x4D,0x75,0x74
	.DB  0x65,0x41,0x6C,0x61,0x72,0x6D,0x3E,0x20
	.DB  0x41,0x4C,0x41,0x52,0x4D,0x5F,0x6D,0x75
	.DB  0x74,0x65,0x28,0x25,0x6C,0x64,0x29,0x20
	.DB  0x66,0x61,0x69,0x6C,0x65,0x64,0xD,0xA
	.DB  0x0
_0x18001D:
	.DB  0x0,0x0,0x0
_0x180000:
	.DB  0xD,0xA,0xD,0xA,0x3C,0x45,0x54,0x48
	.DB  0x5F,0x61,0x64,0x64,0x57,0x61,0x69,0x74
	.DB  0x51,0x75,0x65,0x75,0x65,0x3E,0x20,0x57
	.DB  0x41,0x52,0x4E,0x49,0x4E,0x47,0x20,0x3A
	.DB  0x20,0x57,0x61,0x69,0x74,0x20,0x71,0x75
	.DB  0x65,0x75,0x65,0x20,0x46,0x55,0x4C,0x4C
	.DB  0xD,0xA,0xD,0xA,0x0,0x3C,0x45,0x54
	.DB  0x48,0x5F,0x61,0x64,0x64,0x57,0x61,0x69
	.DB  0x74,0x51,0x75,0x65,0x75,0x65,0x3E,0x20
	.DB  0x6D,0x61,0x6C,0x6C,0x6F,0x63,0x28,0x25
	.DB  0x64,0x29,0x20,0x66,0x61,0x69,0x6C,0x65
	.DB  0x64,0xD,0xA,0x0,0xD,0xA,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x41,0x64,0x64,0x65,0x64
	.DB  0x20,0x28,0x25,0x30,0x32,0x58,0x29,0x20
	.DB  0x74,0x6F,0x20,0x65,0x74,0x68,0x5F,0x77
	.DB  0x61,0x69,0x74,0x51,0x75,0x65,0x75,0x65
	.DB  0x5B,0x25,0x64,0x5D,0xD,0xA,0x0,0xD
	.DB  0xA,0x20,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x52,0x65
	.DB  0x6D,0x6F,0x76,0x65,0x64,0x20,0x28,0x25
	.DB  0x30,0x32,0x58,0x29,0x20,0x74,0x6F,0x20
	.DB  0x65,0x74,0x68,0x5F,0x77,0x61,0x69,0x74
	.DB  0x51,0x75,0x65,0x75,0x65,0x5B,0x25,0x64
	.DB  0x5D,0xD,0xA,0x0,0xD,0xA,0xD,0xA
	.DB  0x57,0x41,0x52,0x4E,0x49,0x4E,0x47,0x20
	.DB  0x3A,0x20,0x45,0x54,0x48,0x5F,0x72,0x65
	.DB  0x6D,0x6F,0x76,0x65,0x57,0x61,0x69,0x74
	.DB  0x51,0x75,0x65,0x75,0x65,0x28,0x25,0x30
	.DB  0x32,0x58,0x29,0x20,0x6E,0x6F,0x74,0x20
	.DB  0x66,0x6F,0x75,0x6E,0x64,0x21,0x21,0xD
	.DB  0xA,0xD,0xA,0x0
_0x1A0011:
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x94,0x41,0x0,0x0,0x0,0x0
_0x1A0000:
	.DB  0x53,0x65,0x6E,0x73,0x6F,0x72,0x20,0x63
	.DB  0x68,0x5B,0x25,0x64,0x5D,0x20,0x69,0x73
	.DB  0x20,0x61,0x20,0x72,0x61,0x77,0x20,0x64
	.DB  0x61,0x74,0x61,0x5B,0x25,0x30,0x2E,0x32
	.DB  0x66,0x5D,0x20,0x2C,0x20,0x63,0x61,0x6C
	.DB  0x50,0x72,0x6F,0x63,0x65,0x73,0x73,0x5B
	.DB  0x25,0x30,0x2E,0x32,0x66,0x5D,0xD,0xA
	.DB  0x0
_0x1C0005:
	.DB  0x0,0x0,0x0,0x0
_0x1E0003:
	.DB  0xFF,0xFF
_0x1E0004:
	.DB  0xFF,0xFF
_0x1E0005:
	.DB  0xFF
_0x1E003A:
	.DB  0xFF,0xFF
_0x1E0000:
	.DB  0x3C,0x75,0x70,0x64,0x61,0x74,0x65,0x43
	.DB  0x6F,0x6D,0x6D,0x53,0x74,0x61,0x74,0x75
	.DB  0x73,0x3E,0x20,0x4C,0x6F,0x73,0x74,0x54
	.DB  0x69,0x6D,0x65,0x72,0x20,0x74,0x69,0x6D
	.DB  0x65,0x20,0x6C,0x65,0x66,0x74,0x20,0x3D
	.DB  0x20,0x25,0x6C,0x64,0x28,0x25,0x6C,0x58
	.DB  0x29,0xD,0xA,0x0,0x3C,0x75,0x70,0x64
	.DB  0x61,0x74,0x65,0x43,0x6F,0x6D,0x6D,0x53
	.DB  0x74,0x61,0x74,0x75,0x73,0x3E,0x20,0x53
	.DB  0x65,0x72,0x76,0x65,0x72,0x20,0x44,0x6F
	.DB  0x77,0x6E,0x21,0x21,0x21,0xD,0xA,0x0
	.DB  0x3C,0x75,0x70,0x64,0x61,0x74,0x65,0x43
	.DB  0x6F,0x6D,0x6D,0x53,0x74,0x61,0x74,0x75
	.DB  0x73,0x3E,0x20,0x53,0x65,0x72,0x76,0x65
	.DB  0x72,0x20,0x55,0x70,0x21,0x21,0x21,0xD
	.DB  0xA,0x0,0x3C,0x63,0x68,0x65,0x63,0x6B
	.DB  0x50,0x72,0x6F,0x62,0x65,0x41,0x6C,0x61
	.DB  0x72,0x6D,0x3E,0x20,0x73,0x65,0x6E,0x73
	.DB  0x6F,0x72,0x20,0x63,0x68,0x61,0x6E,0x6E
	.DB  0x65,0x6C,0x20,0x6F,0x75,0x74,0x20,0x6F
	.DB  0x66,0x20,0x72,0x61,0x6E,0x67,0x65,0x20
	.DB  0x28,0x25,0x64,0x29,0xD,0xA,0x0,0x3C
	.DB  0x75,0x70,0x64,0x61,0x74,0x65,0x44,0x61
	.DB  0x74,0x61,0x53,0x74,0x61,0x74,0x75,0x73
	.DB  0x3E,0x20,0x41,0x42,0x4F,0x52,0x54,0x3A
	.DB  0x20,0x73,0x65,0x6E,0x73,0x6F,0x72,0x20
	.DB  0x63,0x68,0x61,0x6E,0x6E,0x65,0x6C,0x20
	.DB  0x6F,0x75,0x74,0x20,0x6F,0x66,0x20,0x72
	.DB  0x61,0x6E,0x67,0x65,0x20,0x28,0x25,0x64
	.DB  0x29,0xD,0xA,0x0,0x3C,0x75,0x70,0x64
	.DB  0x61,0x74,0x65,0x44,0x69,0x6E,0x53,0x74
	.DB  0x61,0x74,0x75,0x73,0x3E,0x20,0x63,0x68
	.DB  0x61,0x6E,0x6E,0x65,0x6C,0x5B,0x25,0x64
	.DB  0x5D,0x20,0x6F,0x75,0x74,0x20,0x6F,0x66
	.DB  0x20,0x72,0x61,0x6E,0x67,0x65,0xD,0xA
	.DB  0x0,0x3C,0x67,0x65,0x74,0x44,0x65,0x76
	.DB  0x69,0x63,0x65,0x53,0x74,0x61,0x74,0x65
	.DB  0x3E,0x20,0x73,0x74,0x61,0x74,0x65,0x20
	.DB  0x3D,0x20,0x5B,0x30,0x78,0x25,0x30,0x34
	.DB  0x58,0x5D,0xD,0xA,0x0
_0x220003:
	.DB  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
	.DB  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
_0x220004:
	.DB  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
	.DB  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
_0x2200A8:
	.DB  0x69
_0x2200B1:
	.DB  0x69
_0x2200C5:
	.DB  0x69,0x69
_0x2200CF:
	.DB  0x69,0x69,0x69,0x69,0x69
_0x2200DD:
	.DB  0xFF,0xFF,0xFF,0xFF
_0x2200F6:
	.DB  0xFF
_0x220000:
	.DB  0x3C,0x63,0x68,0x65,0x63,0x6B,0x41,0x6C
	.DB  0x61,0x72,0x6D,0x46,0x72,0x6F,0x6D,0x53
	.DB  0x72,0x63,0x3E,0x20,0x47,0x53,0x4D,0x20
	.DB  0x4E,0x6F,0x74,0x20,0x73,0x75,0x70,0x70
	.DB  0x6F,0x72,0x74,0x20,0x79,0x65,0x74,0x20
	.DB  0x5B,0x30,0x78,0x25,0x30,0x32,0x58,0x5D
	.DB  0xD,0xA,0x0,0x3C,0x63,0x68,0x65,0x63
	.DB  0x6B,0x41,0x6C,0x61,0x72,0x6D,0x46,0x72
	.DB  0x6F,0x6D,0x53,0x72,0x63,0x3E,0x20,0x61
	.DB  0x6C,0x61,0x72,0x6D,0x53,0x72,0x63,0x20
	.DB  0x75,0x6E,0x6B,0x6E,0x6F,0x77,0x6E,0x20
	.DB  0x5B,0x30,0x78,0x25,0x30,0x32,0x58,0x5D
	.DB  0xD,0xA,0x0,0x3C,0x63,0x68,0x65,0x63
	.DB  0x6B,0x53,0x65,0x6E,0x64,0x44,0x69,0x6E
	.DB  0x41,0x6C,0x61,0x72,0x6D,0x3E,0x20,0x63
	.DB  0x68,0x61,0x6E,0x6E,0x65,0x6C,0x20,0x6F
	.DB  0x75,0x74,0x20,0x6F,0x66,0x20,0x72,0x61
	.DB  0x6E,0x67,0x65,0x20,0x5B,0x25,0x64,0x5D
	.DB  0xD,0xA,0x0,0x3C,0x63,0x68,0x65,0x63
	.DB  0x6B,0x53,0x65,0x6E,0x64,0x44,0x61,0x74
	.DB  0x61,0x41,0x6C,0x61,0x72,0x6D,0x3E,0x20
	.DB  0x50,0x72,0x6F,0x62,0x65,0x20,0x25,0x64
	.DB  0x20,0x64,0x61,0x74,0x61,0x41,0x6C,0x61
	.DB  0x72,0x6D,0x5B,0x30,0x78,0x25,0x30,0x32
	.DB  0x58,0x5D,0xD,0xA,0x0,0x3C,0x41,0x4C
	.DB  0x41,0x52,0x4D,0x5F,0x63,0x68,0x65,0x63
	.DB  0x6B,0x4D,0x75,0x74,0x65,0x45,0x78,0x70
	.DB  0x69,0x72,0x65,0x64,0x3E,0x20,0x69,0x6E
	.DB  0x76,0x61,0x6C,0x69,0x64,0x20,0x6D,0x75
	.DB  0x74,0x65,0x4D,0x6F,0x64,0x65,0x20,0x28
	.DB  0x25,0x64,0x29,0xD,0xA,0x0
_0x240000:
	.DB  0x44,0x54,0x25,0x30,0x32,0x64,0x2D,0x25
	.DB  0x30,0x32,0x64,0x2D,0x25,0x30,0x34,0x64
	.DB  0x0,0x54,0x4D,0x25,0x30,0x32,0x64,0x3A
	.DB  0x25,0x30,0x32,0x64,0x0,0x44,0x56,0x25
	.DB  0x31,0x64,0x25,0x2E,0x31,0x66,0x0,0x44
	.DB  0x56,0x25,0x31,0x64,0x45,0x52,0x52,0x4C
	.DB  0x42,0x0,0x44,0x56,0x25,0x31,0x64,0x45
	.DB  0x52,0x52,0x55,0x42,0x0,0x44,0x56,0x25
	.DB  0x31,0x64,0x45,0x52,0x52,0x4E,0x43,0x0
	.DB  0x44,0x56,0x25,0x31,0x64,0x45,0x52,0x52
	.DB  0x53,0x48,0x0,0x44,0x56,0x25,0x31,0x64
	.DB  0x44,0x45,0x54,0x45,0x43,0x54,0x49,0x4E
	.DB  0x47,0x0,0x3C,0x4F,0x4C,0x45,0x44,0x5F
	.DB  0x73,0x68,0x6F,0x77,0x53,0x65,0x6E,0x73
	.DB  0x6F,0x72,0x56,0x61,0x6C,0x75,0x65,0x3E
	.DB  0x20,0x73,0x65,0x6E,0x73,0x6F,0x72,0x5B
	.DB  0x25,0x64,0x5D,0x2E,0x73,0x74,0x61,0x74
	.DB  0x75,0x73,0x20,0x75,0x6E,0x6B,0x6E,0x6F
	.DB  0x77,0x6E,0x20,0x5B,0x30,0x78,0x25,0x30
	.DB  0x32,0x58,0x5D,0xD,0xA,0x0,0x44,0x56
	.DB  0x25,0x31,0x64,0x4E,0x2F,0x41,0x0,0x43
	.DB  0x47,0x31,0x0,0x42,0x4C,0x30,0x0,0x42
	.DB  0x4C,0x31,0x0,0x42,0x4C,0x32,0x0,0x42
	.DB  0x4C,0x33,0x0,0x42,0x4C,0x34,0x0,0x3C
	.DB  0x4F,0x4C,0x45,0x44,0x5F,0x73,0x68,0x6F
	.DB  0x77,0x49,0x6E,0x70,0x75,0x74,0x53,0x74
	.DB  0x61,0x74,0x75,0x73,0x3E,0x20,0x45,0x52
	.DB  0x52,0x3A,0x20,0x63,0x68,0x20,0x76,0x61
	.DB  0x6C,0x75,0x65,0x20,0x6F,0x75,0x74,0x20
	.DB  0x6F,0x66,0x20,0x72,0x61,0x6E,0x67,0x65
	.DB  0x2E,0x21,0x21,0xD,0xA,0x0,0x49,0x50
	.DB  0x25,0x31,0x64,0x25,0x31,0x64,0x0,0x3C
	.DB  0x4F,0x4C,0x45,0x44,0x5F,0x73,0x68,0x6F
	.DB  0x77,0x4F,0x75,0x74,0x70,0x75,0x74,0x53
	.DB  0x74,0x61,0x74,0x75,0x73,0x3E,0x20,0x45
	.DB  0x52,0x52,0x3A,0x20,0x63,0x68,0x20,0x76
	.DB  0x61,0x6C,0x75,0x65,0x20,0x6F,0x75,0x74
	.DB  0x20,0x6F,0x66,0x20,0x72,0x61,0x6E,0x67
	.DB  0x65,0x2E,0x21,0x21,0xD,0xA,0x0,0x4F
	.DB  0x50,0x25,0x31,0x64,0x25,0x31,0x64,0x0
	.DB  0x53,0x43,0x25,0x31,0x64,0x0,0x4C,0x43
	.DB  0x25,0x31,0x64,0x0,0x42,0x5A,0x25,0x31
	.DB  0x64,0x0,0x4D,0x53,0x25,0x31,0x64,0x0
	.DB  0x41,0x4C,0x25,0x31,0x64,0x25,0x31,0x64
	.DB  0x25,0x31,0x64,0x25,0x31,0x64,0x25,0x31
	.DB  0x64,0x25,0x31,0x64,0x25,0x31,0x64,0x25
	.DB  0x31,0x64,0x25,0x31,0x64,0x25,0x31,0x64
	.DB  0x25,0x31,0x64,0x25,0x31,0x64,0x0,0xD
	.DB  0xA,0x21,0x21,0x21,0x21,0x20,0x4F,0x4C
	.DB  0x45,0x44,0x20,0x45,0x72,0x72,0x6F,0x72
	.DB  0x20,0x21,0x21,0x21,0x21,0xD,0xA,0x0
	.DB  0x49,0x6E,0x69,0x74,0x69,0x61,0x6C,0x69
	.DB  0x7A,0x69,0x6E,0x67,0x20,0x4F,0x4C,0x45
	.DB  0x44,0x2E,0x2E,0x20,0x0,0x4F,0x4B,0xD
	.DB  0xA,0x0
_0x260003:
	.DB  0x30,0x3A,0x2F
_0x260000:
	.DB  0x0,0x46,0x52,0x5F,0x44,0x49,0x53,0x4B
	.DB  0x5F,0x45,0x52,0x52,0x0,0x46,0x52,0x5F
	.DB  0x49,0x4E,0x54,0x5F,0x45,0x52,0x52,0x0
	.DB  0x46,0x52,0x5F,0x4E,0x4F,0x54,0x5F,0x52
	.DB  0x45,0x41,0x44,0x59,0x0,0x46,0x52,0x5F
	.DB  0x4E,0x4F,0x5F,0x46,0x49,0x4C,0x45,0x0
	.DB  0x46,0x52,0x5F,0x4E,0x4F,0x5F,0x50,0x41
	.DB  0x54,0x48,0x0,0x46,0x52,0x5F,0x49,0x4E
	.DB  0x56,0x41,0x4C,0x49,0x44,0x5F,0x4E,0x41
	.DB  0x4D,0x45,0x0,0x46,0x52,0x5F,0x44,0x45
	.DB  0x4E,0x49,0x45,0x44,0x0,0x46,0x52,0x5F
	.DB  0x45,0x58,0x49,0x53,0x54,0x0,0x46,0x52
	.DB  0x5F,0x49,0x4E,0x56,0x41,0x4C,0x49,0x44
	.DB  0x5F,0x4F,0x42,0x4A,0x45,0x43,0x54,0x0
	.DB  0x46,0x52,0x5F,0x57,0x52,0x49,0x54,0x45
	.DB  0x5F,0x50,0x52,0x4F,0x54,0x45,0x43,0x54
	.DB  0x45,0x44,0x0,0x46,0x52,0x5F,0x49,0x4E
	.DB  0x56,0x41,0x4C,0x49,0x44,0x5F,0x44,0x52
	.DB  0x49,0x56,0x45,0x0,0x46,0x52,0x5F,0x4E
	.DB  0x4F,0x54,0x5F,0x45,0x4E,0x41,0x42,0x4C
	.DB  0x45,0x44,0x0,0x46,0x52,0x5F,0x4E,0x4F
	.DB  0x5F,0x46,0x49,0x4C,0x45,0x53,0x59,0x53
	.DB  0x54,0x45,0x4D,0x0,0x46,0x52,0x5F,0x4D
	.DB  0x4B,0x46,0x53,0x5F,0x41,0x42,0x4F,0x52
	.DB  0x54,0x45,0x44,0x0,0x46,0x52,0x5F,0x54
	.DB  0x49,0x4D,0x45,0x4F,0x55,0x54,0x0,0x3C
	.DB  0x45,0x52,0x52,0x3E,0x20,0x25,0x70,0x2E
	.DB  0xD,0xA,0x0,0x3C,0x53,0x44,0x5F,0x77
	.DB  0x72,0x69,0x74,0x65,0x44,0x61,0x74,0x61
	.DB  0x3E,0x20,0x53,0x44,0x20,0x43,0x61,0x72
	.DB  0x64,0x20,0x6E,0x6F,0x74,0x20,0x72,0x65
	.DB  0x61,0x64,0x79,0xD,0xA,0x0,0x3C,0x53
	.DB  0x44,0x5F,0x77,0x72,0x69,0x74,0x65,0x44
	.DB  0x61,0x74,0x61,0x3E,0x20,0x66,0x5F,0x6C
	.DB  0x73,0x65,0x65,0x6B,0x28,0x25,0x75,0x29
	.DB  0x20,0x66,0x61,0x69,0x6C,0x65,0x64,0x21
	.DB  0x21,0xD,0xA,0x0,0x3C,0x53,0x44,0x5F
	.DB  0x77,0x72,0x69,0x74,0x65,0x44,0x61,0x74
	.DB  0x61,0x3E,0x20,0x66,0x5F,0x77,0x72,0x69
	.DB  0x74,0x65,0x28,0x29,0x20,0x66,0x61,0x69
	.DB  0x6C,0x65,0x64,0xD,0xA,0x0,0x3C,0x53
	.DB  0x44,0x5F,0x77,0x72,0x69,0x74,0x65,0x44
	.DB  0x61,0x74,0x61,0x3E,0x20,0x61,0x63,0x74
	.DB  0x75,0x61,0x6C,0x5F,0x77,0x72,0x69,0x74
	.DB  0x65,0x5B,0x25,0x75,0x5D,0x20,0x21,0x3D
	.DB  0x20,0x6C,0x65,0x6E,0x5B,0x25,0x75,0x5D
	.DB  0xD,0xA,0x0,0x3C,0x53,0x44,0x5F,0x72
	.DB  0x65,0x61,0x64,0x44,0x61,0x74,0x61,0x3E
	.DB  0x20,0x53,0x44,0x20,0x43,0x61,0x72,0x64
	.DB  0x20,0x6E,0x6F,0x74,0x20,0x72,0x65,0x61
	.DB  0x64,0x79,0xD,0xA,0x0,0x3C,0x53,0x44
	.DB  0x5F,0x72,0x65,0x61,0x64,0x44,0x61,0x74
	.DB  0x61,0x3E,0x20,0x66,0x5F,0x6C,0x73,0x65
	.DB  0x65,0x6B,0x28,0x25,0x75,0x29,0x20,0x66
	.DB  0x61,0x69,0x6C,0x65,0x64,0x21,0x21,0xD
	.DB  0xA,0x0,0x3C,0x53,0x44,0x5F,0x72,0x65
	.DB  0x61,0x64,0x44,0x61,0x74,0x61,0x3E,0x20
	.DB  0x66,0x5F,0x72,0x65,0x61,0x64,0x28,0x29
	.DB  0x20,0x66,0x61,0x69,0x6C,0x65,0x64,0xD
	.DB  0xA,0x0,0x3C,0x53,0x44,0x5F,0x77,0x72
	.DB  0x69,0x74,0x65,0x44,0x61,0x74,0x61,0x3E
	.DB  0x20,0x61,0x63,0x74,0x75,0x61,0x6C,0x5F
	.DB  0x72,0x65,0x61,0x64,0x5B,0x25,0x75,0x5D
	.DB  0x20,0x21,0x3D,0x20,0x6C,0x65,0x6E,0x5B
	.DB  0x25,0x75,0x5D,0xD,0xA,0x0,0x3C,0x53
	.DB  0x44,0x5F,0x72,0x65,0x61,0x64,0x4D,0x65
	.DB  0x6D,0x6F,0x72,0x79,0x52,0x65,0x6D,0x61
	.DB  0x69,0x6E,0x3E,0x20,0x66,0x5F,0x67,0x65
	.DB  0x74,0x66,0x72,0x65,0x65,0x28,0x25,0x73
	.DB  0x29,0x20,0x65,0x72,0x72,0x6F,0x72,0x21
	.DB  0x21,0xD,0xA,0x0,0x4C,0x6F,0x67,0x69
	.DB  0x63,0x61,0x6C,0x20,0x64,0x72,0x69,0x76
	.DB  0x65,0x20,0x30,0x3A,0x20,0x6D,0x6F,0x75
	.DB  0x6E,0x74,0x65,0x64,0x20,0x45,0x52,0x52
	.DB  0x4F,0x52,0xD,0xA,0x0,0x4C,0x6F,0x67
	.DB  0x69,0x63,0x61,0x6C,0x20,0x64,0x72,0x69
	.DB  0x76,0x65,0x20,0x30,0x3A,0x20,0x6D,0x6F
	.DB  0x75,0x6E,0x74,0x65,0x64,0x20,0x4F,0x4B
	.DB  0xD,0xA,0x0,0x4C,0x6F,0x67,0x69,0x63
	.DB  0x61,0x6C,0x20,0x64,0x72,0x69,0x76,0x65
	.DB  0x20,0x30,0x3A,0x20,0x75,0x6E,0x6D,0x6F
	.DB  0x75,0x6E,0x74,0x65,0x64,0x20,0x45,0x52
	.DB  0x52,0x4F,0x52,0xD,0xA,0x0,0x4C,0x6F
	.DB  0x67,0x69,0x63,0x61,0x6C,0x20,0x64,0x72
	.DB  0x69,0x76,0x65,0x20,0x30,0x3A,0x20,0x75
	.DB  0x6E,0x6D,0x6F,0x75,0x6E,0x74,0x65,0x64
	.DB  0x20,0x4F,0x4B,0xD,0xA,0x0,0x3C,0x53
	.DB  0x44,0x5F,0x72,0x65,0x6D,0x6F,0x75,0x6E
	.DB  0x74,0x3E,0x20,0x53,0x44,0x5F,0x75,0x6E
	.DB  0x6D,0x6F,0x75,0x6E,0x74,0x28,0x29,0x20
	.DB  0x66,0x61,0x69,0x6C,0x65,0x64,0xD,0xA
	.DB  0x0,0x3C,0x53,0x44,0x5F,0x72,0x65,0x6D
	.DB  0x6F,0x75,0x6E,0x74,0x3E,0x20,0x53,0x44
	.DB  0x5F,0x6D,0x6F,0x75,0x6E,0x74,0x28,0x29
	.DB  0x20,0x66,0x61,0x69,0x6C,0x65,0x64,0xD
	.DB  0xA,0x0,0x3C,0x53,0x44,0x5F,0x63,0x72
	.DB  0x65,0x61,0x74,0x65,0x46,0x69,0x6C,0x65
	.DB  0x3E,0x20,0x53,0x44,0x20,0x43,0x61,0x72
	.DB  0x64,0x20,0x6E,0x6F,0x74,0x20,0x72,0x65
	.DB  0x61,0x64,0x79,0xD,0xA,0x0,0x25,0x73
	.DB  0x25,0x73,0x0,0x3C,0x53,0x44,0x5F,0x63
	.DB  0x72,0x65,0x61,0x74,0x65,0x46,0x69,0x6C
	.DB  0x65,0x3E,0x20,0x66,0x5F,0x6F,0x70,0x65
	.DB  0x6E,0x28,0x29,0x20,0x66,0x61,0x69,0x6C
	.DB  0x65,0x64,0xD,0xA,0x0,0x3C,0x53,0x44
	.DB  0x5F,0x63,0x72,0x65,0x61,0x74,0x65,0x46
	.DB  0x69,0x6C,0x65,0x3E,0x20,0x66,0x5F,0x63
	.DB  0x6C,0x6F,0x73,0x65,0x28,0x29,0x20,0x66
	.DB  0x61,0x69,0x6C,0x65,0x64,0xD,0xA,0x0
	.DB  0x3C,0x53,0x44,0x5F,0x6F,0x70,0x65,0x6E
	.DB  0x46,0x69,0x6C,0x65,0x3E,0x20,0x53,0x44
	.DB  0x20,0x43,0x61,0x72,0x64,0x20,0x6E,0x6F
	.DB  0x74,0x20,0x72,0x65,0x61,0x64,0x79,0xD
	.DB  0xA,0x0,0x3C,0x53,0x44,0x5F,0x6F,0x70
	.DB  0x65,0x6E,0x46,0x69,0x6C,0x65,0x3E,0x20
	.DB  0x66,0x5F,0x6F,0x70,0x65,0x6E,0x28,0x29
	.DB  0x20,0x5B,0x25,0x73,0x5D,0x20,0x66,0x61
	.DB  0x69,0x6C,0x65,0x64,0xD,0xA,0x0,0x3C
	.DB  0x53,0x44,0x5F,0x63,0x6C,0x6F,0x73,0x65
	.DB  0x46,0x69,0x6C,0x65,0x3E,0x20,0x53,0x44
	.DB  0x20,0x43,0x61,0x72,0x64,0x20,0x6E,0x6F
	.DB  0x74,0x20,0x72,0x65,0x61,0x64,0x79,0xD
	.DB  0xA,0x0,0x3C,0x53,0x44,0x5F,0x63,0x6C
	.DB  0x6F,0x73,0x65,0x46,0x69,0x6C,0x65,0x3E
	.DB  0x20,0x66,0x5F,0x63,0x6C,0x6F,0x73,0x65
	.DB  0x28,0x29,0x20,0x66,0x61,0x69,0x6C,0x65
	.DB  0x64,0xD,0xA,0x0,0x3C,0x53,0x44,0x5F
	.DB  0x69,0x6E,0x69,0x74,0x3E,0x20,0x53,0x74
	.DB  0x61,0x72,0x74,0x20,0x69,0x6E,0x69,0x74
	.DB  0x69,0x61,0x6C,0x20,0x6D,0x65,0x6D,0x6F
	.DB  0x72,0x79,0x20,0x63,0x61,0x72,0x64,0xD
	.DB  0xA,0x0,0xD,0xA,0x3C,0x53,0x44,0x5F
	.DB  0x69,0x6E,0x69,0x74,0x3E,0x20,0x4D,0x6F
	.DB  0x75,0x6E,0x74,0x69,0x6E,0x67,0x20,0x53
	.DB  0x44,0x20,0x43,0x61,0x72,0x64,0x2E,0x2E
	.DB  0x2E,0x0,0x3C,0x53,0x44,0x5F,0x69,0x6E
	.DB  0x69,0x74,0x3E,0x20,0x53,0x44,0x5F,0x6D
	.DB  0x6F,0x75,0x6E,0x74,0x28,0x29,0x20,0x66
	.DB  0x61,0x69,0x6C,0x65,0x64,0xD,0xA,0x0
	.DB  0xD,0xA,0x3C,0x53,0x44,0x5F,0x69,0x6E
	.DB  0x69,0x74,0x3E,0x20,0x43,0x68,0x65,0x63
	.DB  0x6B,0x20,0x43,0x61,0x72,0x64,0x20,0x53
	.DB  0x69,0x7A,0x65,0x2E,0x2E,0x2E,0x0,0x3C
	.DB  0x53,0x44,0x5F,0x69,0x6E,0x69,0x74,0x3E
	.DB  0x20,0x53,0x44,0x5F,0x72,0x65,0x61,0x64
	.DB  0x4D,0x65,0x6D,0x6F,0x72,0x79,0x52,0x65
	.DB  0x6D,0x61,0x69,0x6E,0x28,0x29,0x20,0x66
	.DB  0x61,0x69,0x6C,0x65,0x64,0xD,0xA,0x0
	.DB  0x3C,0x53,0x44,0x5F,0x69,0x6E,0x69,0x74
	.DB  0x3E,0x20,0x46,0x72,0x65,0x65,0x20,0x73
	.DB  0x70,0x61,0x63,0x65,0x20,0x6F,0x6E,0x20
	.DB  0x6C,0x6F,0x67,0x69,0x63,0x61,0x6C,0x20
	.DB  0x64,0x72,0x69,0x76,0x65,0x20,0x30,0x3A
	.DB  0x20,0x25,0x6C,0x75,0x20,0x6B,0x62,0x79
	.DB  0x74,0x65,0x73,0xD,0xA,0x0
_0x280003:
	.DB  0x64,0x61,0x74,0x61,0x2E,0x6C,0x6F,0x67
_0x280004:
	.DB  0x65,0x76,0x65,0x6E,0x74,0x2E,0x6C,0x6F
	.DB  0x67
_0x280005:
	.DB  0x65,0x72,0x72,0x6F,0x72,0x2E,0x6C,0x6F
	.DB  0x67
_0x280006:
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
_0x280007:
	.DB  LOW(_SD_openFile),HIGH(_SD_openFile),BYTE3(_SD_openFile),BYTE4(_SD_openFile)
_0x280008:
	.DB  LOW(_SD_closeFile),HIGH(_SD_closeFile),BYTE3(_SD_closeFile),BYTE4(_SD_closeFile)
_0x280000:
	.DB  0x3C,0x4C,0x4F,0x47,0x5F,0x69,0x6E,0x73
	.DB  0x65,0x72,0x74,0x44,0x61,0x74,0x61,0x3E
	.DB  0x20,0x4C,0x4F,0x47,0x5F,0x67,0x65,0x74
	.DB  0x4C,0x61,0x73,0x74,0x49,0x6E,0x73,0x65
	.DB  0x72,0x74,0x28,0x29,0x20,0x66,0x61,0x69
	.DB  0x6C,0x65,0x64,0xD,0xA,0x0,0x3C,0x4C
	.DB  0x4F,0x47,0x5F,0x69,0x6E,0x73,0x65,0x72
	.DB  0x74,0x44,0x61,0x74,0x61,0x3E,0x20,0x53
	.DB  0x44,0x5F,0x77,0x72,0x69,0x74,0x65,0x44
	.DB  0x61,0x74,0x61,0x28,0x66,0x6C,0x61,0x67
	.DB  0x29,0x20,0x66,0x61,0x69,0x6C,0x65,0x64
	.DB  0xD,0xA,0x0,0x3C,0x4C,0x4F,0x47,0x5F
	.DB  0x69,0x6E,0x73,0x65,0x72,0x74,0x44,0x61
	.DB  0x74,0x61,0x3E,0x20,0x53,0x44,0x5F,0x77
	.DB  0x72,0x69,0x74,0x65,0x44,0x61,0x74,0x61
	.DB  0x28,0x74,0x69,0x6D,0x65,0x73,0x74,0x61
	.DB  0x6D,0x70,0x29,0x20,0x66,0x61,0x69,0x6C
	.DB  0x65,0x64,0xD,0xA,0x0,0x3C,0x4C,0x4F
	.DB  0x47,0x5F,0x69,0x6E,0x73,0x65,0x72,0x74
	.DB  0x44,0x61,0x74,0x61,0x3E,0x20,0x53,0x44
	.DB  0x5F,0x77,0x72,0x69,0x74,0x65,0x44,0x61
	.DB  0x74,0x61,0x28,0x63,0x68,0x61,0x6E,0x6E
	.DB  0x65,0x6C,0x29,0x20,0x66,0x61,0x69,0x6C
	.DB  0x65,0x64,0xD,0xA,0x0,0x3C,0x4C,0x4F
	.DB  0x47,0x5F,0x69,0x6E,0x73,0x65,0x72,0x74
	.DB  0x44,0x61,0x74,0x61,0x3E,0x20,0x53,0x44
	.DB  0x5F,0x77,0x72,0x69,0x74,0x65,0x44,0x61
	.DB  0x74,0x61,0x28,0x76,0x61,0x6C,0x75,0x65
	.DB  0x29,0x20,0x66,0x61,0x69,0x6C,0x65,0x64
	.DB  0xD,0xA,0x0,0x3C,0x4C,0x4F,0x47,0x5F
	.DB  0x69,0x6E,0x73,0x65,0x72,0x74,0x44,0x61
	.DB  0x74,0x61,0x3E,0x20,0x4C,0x4F,0x47,0x5F
	.DB  0x73,0x65,0x74,0x4C,0x61,0x73,0x74,0x49
	.DB  0x6E,0x73,0x65,0x72,0x74,0x28,0x25,0x6C
	.DB  0x64,0x29,0x20,0x66,0x61,0x69,0x6C,0x65
	.DB  0x64,0xD,0xA,0x0,0x3C,0x4C,0x4F,0x47
	.DB  0x5F,0x72,0x65,0x61,0x64,0x44,0x61,0x74
	.DB  0x61,0x3E,0x20,0x4C,0x4F,0x47,0x5F,0x67
	.DB  0x65,0x74,0x4C,0x61,0x73,0x74,0x49,0x6E
	.DB  0x73,0x65,0x72,0x74,0x28,0x29,0x20,0x66
	.DB  0x61,0x69,0x6C,0x65,0x64,0xD,0xA,0x0
	.DB  0x3C,0x4C,0x4F,0x47,0x5F,0x72,0x65,0x61
	.DB  0x64,0x44,0x61,0x74,0x61,0x3E,0x20,0x4C
	.DB  0x4F,0x47,0x5F,0x67,0x65,0x74,0x4C,0x61
	.DB  0x73,0x74,0x53,0x65,0x6E,0x64,0x28,0x29
	.DB  0x20,0x66,0x61,0x69,0x6C,0x65,0x64,0xD
	.DB  0xA,0x0,0x3C,0x4C,0x4F,0x47,0x5F,0x72
	.DB  0x65,0x61,0x64,0x45,0x76,0x65,0x6E,0x74
	.DB  0x3E,0x20,0x6C,0x61,0x73,0x74,0x53,0x65
	.DB  0x6E,0x64,0x2F,0x6C,0x61,0x73,0x74,0x49
	.DB  0x6E,0x73,0x65,0x72,0x74,0x20,0x20,0x2D
	.DB  0x2D,0x3E,0x20,0x25,0x6C,0x64,0x2F,0x25
	.DB  0x6C,0x64,0xD,0xA,0x0,0x3C,0x4C,0x4F
	.DB  0x47,0x5F,0x72,0x65,0x61,0x64,0x44,0x61
	.DB  0x74,0x61,0x3E,0x20,0x4C,0x6F,0x67,0x20
	.DB  0x65,0x6D,0x70,0x74,0x79,0x2E,0x2E,0x21
	.DB  0x21,0xD,0xA,0x0,0x3C,0x44,0x45,0x42
	.DB  0x55,0x47,0x5F,0x43,0x6C,0x65,0x61,0x72
	.DB  0x4C,0x6F,0x67,0x46,0x69,0x6C,0x65,0x3E
	.DB  0x20,0x4C,0x4F,0x47,0x5F,0x63,0x72,0x65
	.DB  0x61,0x74,0x65,0x46,0x69,0x6C,0x65,0x28
	.DB  0x25,0x73,0x29,0x20,0x66,0x61,0x69,0x6C
	.DB  0x65,0x64,0xD,0xA,0x0,0x3C,0x4C,0x4F
	.DB  0x47,0x5F,0x72,0x65,0x61,0x64,0x44,0x61
	.DB  0x74,0x61,0x3E,0x20,0x53,0x44,0x5F,0x72
	.DB  0x65,0x61,0x64,0x44,0x61,0x74,0x61,0x28
	.DB  0x66,0x6C,0x61,0x67,0x29,0x20,0x66,0x61
	.DB  0x69,0x6C,0x65,0x64,0xD,0xA,0x0,0x3C
	.DB  0x4C,0x4F,0x47,0x5F,0x72,0x65,0x61,0x64
	.DB  0x44,0x61,0x74,0x61,0x3E,0x20,0x53,0x44
	.DB  0x5F,0x72,0x65,0x61,0x64,0x44,0x61,0x74
	.DB  0x61,0x28,0x74,0x69,0x6D,0x65,0x73,0x74
	.DB  0x61,0x6D,0x70,0x29,0x20,0x66,0x61,0x69
	.DB  0x6C,0x65,0x64,0xD,0xA,0x0,0x3C,0x4C
	.DB  0x4F,0x47,0x5F,0x72,0x65,0x61,0x64,0x44
	.DB  0x61,0x74,0x61,0x3E,0x20,0x53,0x44,0x5F
	.DB  0x72,0x65,0x61,0x64,0x44,0x61,0x74,0x61
	.DB  0x28,0x63,0x68,0x61,0x6E,0x6E,0x65,0x6C
	.DB  0x29,0x20,0x66,0x61,0x69,0x6C,0x65,0x64
	.DB  0xD,0xA,0x0,0x3C,0x4C,0x4F,0x47,0x5F
	.DB  0x72,0x65,0x61,0x64,0x44,0x61,0x74,0x61
	.DB  0x3E,0x20,0x53,0x44,0x5F,0x72,0x65,0x61
	.DB  0x64,0x44,0x61,0x74,0x61,0x28,0x76,0x61
	.DB  0x6C,0x75,0x65,0x29,0x20,0x66,0x61,0x69
	.DB  0x6C,0x65,0x64,0xD,0xA,0x0,0x3C,0x4C
	.DB  0x4F,0x47,0x5F,0x69,0x6E,0x73,0x65,0x72
	.DB  0x74,0x45,0x76,0x65,0x6E,0x74,0x3E,0x20
	.DB  0x4C,0x4F,0x47,0x5F,0x67,0x65,0x74,0x4C
	.DB  0x61,0x73,0x74,0x49,0x6E,0x73,0x65,0x72
	.DB  0x74,0x28,0x29,0x20,0x66,0x61,0x69,0x6C
	.DB  0x65,0x64,0xD,0xA,0x0,0x3C,0x4C,0x4F
	.DB  0x47,0x5F,0x69,0x6E,0x73,0x65,0x72,0x74
	.DB  0x45,0x76,0x65,0x6E,0x74,0x3E,0x20,0x53
	.DB  0x44,0x5F,0x77,0x72,0x69,0x74,0x65,0x44
	.DB  0x61,0x74,0x61,0x28,0x66,0x6C,0x61,0x67
	.DB  0x29,0x20,0x66,0x61,0x69,0x6C,0x65,0x64
	.DB  0xD,0xA,0x0,0x3C,0x4C,0x4F,0x47,0x5F
	.DB  0x69,0x6E,0x73,0x65,0x72,0x74,0x45,0x76
	.DB  0x65,0x6E,0x74,0x3E,0x20,0x53,0x44,0x5F
	.DB  0x77,0x72,0x69,0x74,0x65,0x44,0x61,0x74
	.DB  0x61,0x28,0x74,0x69,0x6D,0x65,0x73,0x74
	.DB  0x61,0x6D,0x70,0x29,0x20,0x66,0x61,0x69
	.DB  0x6C,0x65,0x64,0xD,0xA,0x0,0x3C,0x4C
	.DB  0x4F,0x47,0x5F,0x69,0x6E,0x73,0x65,0x72
	.DB  0x74,0x45,0x76,0x65,0x6E,0x74,0x3E,0x20
	.DB  0x53,0x44,0x5F,0x77,0x72,0x69,0x74,0x65
	.DB  0x44,0x61,0x74,0x61,0x28,0x69,0x64,0x29
	.DB  0x20,0x66,0x61,0x69,0x6C,0x65,0x64,0xD
	.DB  0xA,0x0,0x3C,0x4C,0x4F,0x47,0x5F,0x69
	.DB  0x6E,0x73,0x65,0x72,0x74,0x45,0x76,0x65
	.DB  0x6E,0x74,0x3E,0x20,0x53,0x44,0x5F,0x77
	.DB  0x72,0x69,0x74,0x65,0x44,0x61,0x74,0x61
	.DB  0x28,0x73,0x74,0x61,0x74,0x75,0x73,0x29
	.DB  0x20,0x66,0x61,0x69,0x6C,0x65,0x64,0xD
	.DB  0xA,0x0,0x3C,0x4C,0x4F,0x47,0x5F,0x69
	.DB  0x6E,0x73,0x65,0x72,0x74,0x45,0x76,0x65
	.DB  0x6E,0x74,0x3E,0x20,0x4C,0x4F,0x47,0x5F
	.DB  0x73,0x65,0x74,0x4C,0x61,0x73,0x74,0x49
	.DB  0x6E,0x73,0x65,0x72,0x74,0x28,0x25,0x6C
	.DB  0x64,0x29,0x20,0x66,0x61,0x69,0x6C,0x65
	.DB  0x64,0xD,0xA,0x0,0x3C,0x4C,0x4F,0x47
	.DB  0x5F,0x72,0x65,0x61,0x64,0x45,0x76,0x65
	.DB  0x6E,0x74,0x3E,0x20,0x4C,0x4F,0x47,0x5F
	.DB  0x67,0x65,0x74,0x4C,0x61,0x73,0x74,0x49
	.DB  0x6E,0x73,0x65,0x72,0x74,0x28,0x29,0x20
	.DB  0x66,0x61,0x69,0x6C,0x65,0x64,0xD,0xA
	.DB  0x0,0x3C,0x4C,0x4F,0x47,0x5F,0x72,0x65
	.DB  0x61,0x64,0x45,0x76,0x65,0x6E,0x74,0x3E
	.DB  0x20,0x4C,0x4F,0x47,0x5F,0x67,0x65,0x74
	.DB  0x4C,0x61,0x73,0x74,0x53,0x65,0x6E,0x64
	.DB  0x28,0x29,0x20,0x66,0x61,0x69,0x6C,0x65
	.DB  0x64,0xD,0xA,0x0,0x3C,0x4C,0x4F,0x47
	.DB  0x5F,0x72,0x65,0x61,0x64,0x45,0x76,0x65
	.DB  0x6E,0x74,0x3E,0x20,0x4C,0x6F,0x67,0x20
	.DB  0x65,0x6D,0x70,0x74,0x79,0x2E,0x2E,0x21
	.DB  0x21,0xD,0xA,0x0,0x3C,0x4C,0x4F,0x47
	.DB  0x5F,0x72,0x65,0x61,0x64,0x45,0x76,0x65
	.DB  0x6E,0x74,0x3E,0x20,0x53,0x44,0x5F,0x72
	.DB  0x65,0x61,0x64,0x44,0x61,0x74,0x61,0x28
	.DB  0x66,0x6C,0x61,0x67,0x29,0x20,0x66,0x61
	.DB  0x69,0x6C,0x65,0x64,0xD,0xA,0x0,0x3C
	.DB  0x4C,0x4F,0x47,0x5F,0x72,0x65,0x61,0x64
	.DB  0x45,0x76,0x65,0x6E,0x74,0x3E,0x20,0x53
	.DB  0x44,0x5F,0x72,0x65,0x61,0x64,0x44,0x61
	.DB  0x74,0x61,0x28,0x74,0x69,0x6D,0x65,0x73
	.DB  0x74,0x61,0x6D,0x70,0x29,0x20,0x66,0x61
	.DB  0x69,0x6C,0x65,0x64,0xD,0xA,0x0,0x3C
	.DB  0x4C,0x4F,0x47,0x5F,0x72,0x65,0x61,0x64
	.DB  0x45,0x76,0x65,0x6E,0x74,0x3E,0x20,0x53
	.DB  0x44,0x5F,0x72,0x65,0x61,0x64,0x44,0x61
	.DB  0x74,0x61,0x28,0x69,0x64,0x29,0x20,0x66
	.DB  0x61,0x69,0x6C,0x65,0x64,0xD,0xA,0x0
	.DB  0x3C,0x4C,0x4F,0x47,0x5F,0x72,0x65,0x61
	.DB  0x64,0x45,0x76,0x65,0x6E,0x74,0x3E,0x20
	.DB  0x53,0x44,0x5F,0x72,0x65,0x61,0x64,0x44
	.DB  0x61,0x74,0x61,0x28,0x73,0x74,0x61,0x74
	.DB  0x75,0x73,0x29,0x20,0x66,0x61,0x69,0x6C
	.DB  0x65,0x64,0xD,0xA,0x0,0x3C,0x4C,0x4F
	.DB  0x47,0x5F,0x67,0x65,0x74,0x4C,0x61,0x73
	.DB  0x74,0x49,0x6E,0x73,0x65,0x72,0x74,0x3E
	.DB  0x20,0x53,0x44,0x5F,0x72,0x65,0x61,0x64
	.DB  0x44,0x61,0x74,0x61,0x28,0x29,0x20,0x66
	.DB  0x61,0x69,0x6C,0x65,0x64,0xD,0xA,0x0
	.DB  0x3C,0x4C,0x4F,0x47,0x5F,0x67,0x65,0x74
	.DB  0x4C,0x61,0x73,0x74,0x49,0x6E,0x73,0x65
	.DB  0x72,0x74,0x3E,0x20,0x67,0x6F,0x74,0x20
	.DB  0x25,0x6C,0x64,0xD,0xA,0x0,0x3C,0x4C
	.DB  0x4F,0x47,0x5F,0x73,0x65,0x74,0x4C,0x61
	.DB  0x73,0x74,0x49,0x6E,0x73,0x65,0x72,0x74
	.DB  0x3E,0x20,0x77,0x72,0x69,0x74,0x69,0x6E
	.DB  0x67,0x20,0x25,0x6C,0x64,0xD,0xA,0x0
	.DB  0x3C,0x4C,0x4F,0x47,0x5F,0x73,0x65,0x74
	.DB  0x4C,0x61,0x73,0x74,0x49,0x6E,0x73,0x65
	.DB  0x72,0x74,0x3E,0x20,0x53,0x44,0x5F,0x72
	.DB  0x65,0x61,0x64,0x44,0x61,0x74,0x61,0x28
	.DB  0x29,0x20,0x66,0x61,0x69,0x6C,0x65,0x64
	.DB  0xD,0xA,0x0,0x3C,0x4C,0x4F,0x47,0x5F
	.DB  0x67,0x65,0x74,0x4C,0x61,0x73,0x74,0x53
	.DB  0x65,0x6E,0x64,0x3E,0x20,0x53,0x44,0x5F
	.DB  0x72,0x65,0x61,0x64,0x44,0x61,0x74,0x61
	.DB  0x28,0x29,0x20,0x66,0x61,0x69,0x6C,0x65
	.DB  0x64,0xD,0xA,0x0,0x3C,0x4C,0x4F,0x47
	.DB  0x5F,0x67,0x65,0x74,0x4C,0x61,0x73,0x74
	.DB  0x53,0x65,0x6E,0x64,0x3E,0x20,0x67,0x6F
	.DB  0x74,0x20,0x25,0x6C,0x64,0xD,0xA,0x0
	.DB  0x3C,0x4C,0x4F,0x47,0x5F,0x73,0x65,0x74
	.DB  0x4C,0x61,0x73,0x74,0x53,0x65,0x6E,0x64
	.DB  0x3E,0x20,0x77,0x72,0x69,0x74,0x69,0x6E
	.DB  0x67,0x20,0x25,0x6C,0x64,0xD,0xA,0x0
	.DB  0x3C,0x4C,0x4F,0x47,0x5F,0x73,0x65,0x74
	.DB  0x4C,0x61,0x73,0x74,0x53,0x65,0x6E,0x64
	.DB  0x3E,0x20,0x53,0x44,0x5F,0x72,0x65,0x61
	.DB  0x64,0x44,0x61,0x74,0x61,0x28,0x29,0x20
	.DB  0x66,0x61,0x69,0x6C,0x65,0x64,0xD,0xA
	.DB  0x0,0x3C,0x4C,0x4F,0x47,0x5F,0x63,0x72
	.DB  0x65,0x61,0x74,0x65,0x46,0x69,0x6C,0x65
	.DB  0x3E,0x20,0x53,0x44,0x5F,0x63,0x72,0x65
	.DB  0x61,0x74,0x65,0x46,0x69,0x6C,0x65,0x28
	.DB  0x25,0x73,0x29,0x20,0x66,0x61,0x69,0x6C
	.DB  0x65,0x64,0xD,0xA,0x0,0x3C,0x4C,0x4F
	.DB  0x47,0x5F,0x63,0x72,0x65,0x61,0x74,0x65
	.DB  0x46,0x69,0x6C,0x65,0x3E,0x20,0x25,0x73
	.DB  0x20,0x61,0x6C,0x72,0x65,0x61,0x64,0x79
	.DB  0x20,0x65,0x78,0x69,0x73,0x74,0xD,0xA
	.DB  0x0,0x3C,0x4C,0x4F,0x47,0x5F,0x63,0x72
	.DB  0x65,0x61,0x74,0x65,0x46,0x69,0x6C,0x65
	.DB  0x3E,0x20,0x25,0x73,0x20,0x63,0x72,0x65
	.DB  0x61,0x74,0x65,0x64,0xD,0xA,0x0,0x3C
	.DB  0x4C,0x4F,0x47,0x5F,0x63,0x72,0x65,0x61
	.DB  0x74,0x65,0x46,0x69,0x6C,0x65,0x3E,0x20
	.DB  0x25,0x73,0x20,0x63,0x6F,0x6E,0x74,0x61
	.DB  0x69,0x6E,0x65,0x64,0x20,0x6E,0x6F,0x20
	.DB  0x69,0x6E,0x69,0x74,0x69,0x61,0x6C,0x20
	.DB  0x64,0x61,0x74,0x61,0xD,0xA,0x0,0x3C
	.DB  0x4C,0x4F,0x47,0x5F,0x63,0x72,0x65,0x61
	.DB  0x74,0x65,0x46,0x69,0x6C,0x65,0x3E,0x20
	.DB  0x53,0x44,0x5F,0x6F,0x70,0x65,0x6E,0x46
	.DB  0x69,0x6C,0x65,0x28,0x25,0x73,0x29,0x20
	.DB  0x66,0x61,0x69,0x6C,0x65,0x64,0xD,0xA
	.DB  0x0,0x3C,0x4C,0x4F,0x47,0x5F,0x63,0x72
	.DB  0x65,0x61,0x74,0x65,0x46,0x69,0x6C,0x65
	.DB  0x3E,0x20,0x77,0x72,0x69,0x74,0x69,0x6E
	.DB  0x67,0x20,0x69,0x6E,0x69,0x74,0x69,0x61
	.DB  0x6C,0x20,0x64,0x61,0x74,0x61,0xD,0xA
	.DB  0x0,0x3C,0x4C,0x4F,0x47,0x5F,0x63,0x72
	.DB  0x65,0x61,0x74,0x65,0x46,0x69,0x6C,0x65
	.DB  0x3E,0x20,0x53,0x44,0x5F,0x77,0x72,0x69
	.DB  0x74,0x65,0x44,0x61,0x74,0x61,0x28,0x29
	.DB  0x20,0x66,0x61,0x69,0x6C,0x65,0x64,0x20
	.DB  0x57,0x72,0x69,0x74,0x69,0x6E,0x67,0x2E
	.DB  0x2E,0x20,0xD,0xA,0x0,0x3C,0x4C,0x4F
	.DB  0x47,0x5F,0x63,0x72,0x65,0x61,0x74,0x65
	.DB  0x46,0x69,0x6C,0x65,0x3E,0x20,0x53,0x44
	.DB  0x5F,0x63,0x6C,0x6F,0x73,0x65,0x46,0x69
	.DB  0x6C,0x65,0x28,0x29,0x20,0x66,0x61,0x69
	.DB  0x6C,0x65,0x64,0xD,0xA,0x0,0x3C,0x4C
	.DB  0x4F,0x47,0x5F,0x69,0x6E,0x69,0x74,0x3E
	.DB  0x20,0x49,0x6E,0x69,0x74,0x69,0x61,0x6C
	.DB  0x20,0x6C,0x6F,0x67,0x20,0x66,0x69,0x6C
	.DB  0x65,0xD,0xA,0x0,0x3C,0x4C,0x4F,0x47
	.DB  0x5F,0x69,0x6E,0x69,0x74,0x3E,0x20,0x4C
	.DB  0x4F,0x47,0x5F,0x63,0x72,0x65,0x61,0x74
	.DB  0x65,0x46,0x69,0x6C,0x65,0x28,0x25,0x73
	.DB  0x29,0x20,0x66,0x61,0x69,0x6C,0x65,0x64
	.DB  0xD,0xA,0x0
_0x2A0000:
	.DB  0xD,0xA,0xD,0xA,0x3C,0x61,0x64,0x64
	.DB  0x44,0x61,0x74,0x61,0x4C,0x6F,0x67,0x51
	.DB  0x75,0x65,0x75,0x65,0x3E,0x20,0x57,0x41
	.DB  0x52,0x4E,0x49,0x4E,0x47,0x20,0x3A,0x20
	.DB  0x64,0x61,0x74,0x61,0x4C,0x6F,0x67,0x51
	.DB  0x75,0x65,0x75,0x65,0x20,0x46,0x55,0x4C
	.DB  0x4C,0xD,0xA,0xD,0xA,0x0,0xD,0xA
	.DB  0x3C,0x61,0x64,0x64,0x44,0x61,0x74,0x61
	.DB  0x4C,0x6F,0x67,0x51,0x75,0x65,0x75,0x65
	.DB  0x3E,0x20,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x41,0x64,0x64,0x65
	.DB  0x64,0x20,0x28,0x25,0x30,0x32,0x58,0x29
	.DB  0x20,0x74,0x6F,0x20,0x64,0x61,0x74,0x61
	.DB  0x4C,0x6F,0x67,0x51,0x75,0x65,0x75,0x65
	.DB  0x5B,0x25,0x64,0x5D,0x20,0x43,0x6F,0x75
	.DB  0x6E,0x74,0x20,0x3D,0x20,0x25,0x64,0xD
	.DB  0xA,0x0,0x3C,0x72,0x65,0x61,0x64,0x44
	.DB  0x61,0x74,0x61,0x4C,0x6F,0x67,0x51,0x75
	.DB  0x65,0x75,0x65,0x3E,0x20,0x57,0x41,0x52
	.DB  0x4E,0x3A,0x20,0x64,0x61,0x74,0x61,0x4C
	.DB  0x6F,0x67,0x51,0x75,0x65,0x75,0x65,0x20
	.DB  0x65,0x6D,0x70,0x74,0x79,0x21,0x21,0xD
	.DB  0xA,0x0,0x3C,0x72,0x65,0x61,0x64,0x44
	.DB  0x61,0x74,0x61,0x4C,0x6F,0x67,0x51,0x75
	.DB  0x65,0x75,0x65,0x3E,0x20,0x57,0x41,0x52
	.DB  0x4E,0x3A,0x20,0x6E,0x6F,0x74,0x20,0x66
	.DB  0x6F,0x75,0x6E,0x64,0x20,0x69,0x64,0x5B
	.DB  0x30,0x78,0x25,0x30,0x32,0x58,0x5D,0x20
	.DB  0x69,0x6E,0x20,0x64,0x61,0x74,0x61,0x4C
	.DB  0x6F,0x67,0x51,0x75,0x65,0x75,0x65,0xD
	.DB  0xA,0x0,0xD,0xA,0x3C,0x72,0x65,0x6D
	.DB  0x6F,0x76,0x65,0x44,0x61,0x74,0x61,0x4C
	.DB  0x6F,0x67,0x51,0x75,0x65,0x75,0x65,0x3E
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x52,0x65,0x6D,0x6F,0x76,0x65,0x64,0x20
	.DB  0x28,0x25,0x30,0x32,0x58,0x29,0x20,0x66
	.DB  0x72,0x6F,0x6D,0x20,0x64,0x61,0x74,0x61
	.DB  0x4C,0x6F,0x67,0x51,0x75,0x65,0x75,0x65
	.DB  0x5B,0x25,0x64,0x5D,0xD,0xA,0x0,0x3C
	.DB  0x72,0x65,0x6D,0x6F,0x76,0x65,0x44,0x61
	.DB  0x74,0x61,0x4C,0x6F,0x67,0x51,0x75,0x65
	.DB  0x75,0x65,0x3E,0x20,0x57,0x41,0x52,0x4E
	.DB  0x3A,0x20,0x6E,0x6F,0x74,0x20,0x66,0x6F
	.DB  0x75,0x6E,0x64,0x20,0x69,0x64,0x5B,0x30
	.DB  0x78,0x25,0x30,0x32,0x58,0x5D,0x20,0x69
	.DB  0x6E,0x20,0x64,0x61,0x74,0x61,0x4C,0x6F
	.DB  0x67,0x51,0x75,0x65,0x75,0x65,0xD,0xA
	.DB  0x0,0xD,0xA,0xD,0xA,0x3C,0x61,0x64
	.DB  0x64,0x45,0x76,0x65,0x6E,0x74,0x4C,0x6F
	.DB  0x67,0x51,0x75,0x65,0x75,0x65,0x3E,0x20
	.DB  0x57,0x41,0x52,0x4E,0x49,0x4E,0x47,0x20
	.DB  0x3A,0x20,0x65,0x76,0x65,0x6E,0x74,0x4C
	.DB  0x6F,0x67,0x51,0x75,0x65,0x75,0x65,0x20
	.DB  0x46,0x55,0x4C,0x4C,0xD,0xA,0xD,0xA
	.DB  0x0,0xD,0xA,0x3C,0x61,0x64,0x64,0x45
	.DB  0x76,0x65,0x6E,0x74,0x4C,0x6F,0x67,0x51
	.DB  0x75,0x65,0x75,0x65,0x3E,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x41,0x64
	.DB  0x64,0x65,0x64,0x20,0x28,0x25,0x30,0x32
	.DB  0x58,0x29,0x20,0x74,0x6F,0x20,0x65,0x76
	.DB  0x65,0x6E,0x74,0x4C,0x6F,0x67,0x51,0x75
	.DB  0x65,0x75,0x65,0x5B,0x25,0x64,0x5D,0x20
	.DB  0x43,0x6F,0x75,0x6E,0x74,0x20,0x3D,0x20
	.DB  0x25,0x64,0xD,0xA,0x0,0x3C,0x72,0x65
	.DB  0x61,0x64,0x45,0x76,0x65,0x6E,0x74,0x4C
	.DB  0x6F,0x67,0x51,0x75,0x65,0x75,0x65,0x3E
	.DB  0x20,0x57,0x41,0x52,0x4E,0x3A,0x20,0x65
	.DB  0x76,0x65,0x6E,0x74,0x4C,0x6F,0x67,0x51
	.DB  0x75,0x65,0x75,0x65,0x20,0x65,0x6D,0x70
	.DB  0x74,0x79,0x21,0x21,0xD,0xA,0x0,0x3C
	.DB  0x72,0x65,0x61,0x64,0x45,0x76,0x65,0x6E
	.DB  0x74,0x4C,0x6F,0x67,0x51,0x75,0x65,0x75
	.DB  0x65,0x3E,0x20,0x57,0x41,0x52,0x4E,0x3A
	.DB  0x20,0x6E,0x6F,0x74,0x20,0x66,0x6F,0x75
	.DB  0x6E,0x64,0x20,0x69,0x64,0x5B,0x30,0x78
	.DB  0x25,0x30,0x32,0x58,0x5D,0x20,0x69,0x6E
	.DB  0x20,0x65,0x76,0x65,0x6E,0x74,0x4C,0x6F
	.DB  0x67,0x51,0x75,0x65,0x75,0x65,0xD,0xA
	.DB  0x0,0xD,0xA,0x3C,0x72,0x65,0x6D,0x6F
	.DB  0x76,0x65,0x45,0x76,0x65,0x6E,0x74,0x4C
	.DB  0x6F,0x67,0x51,0x75,0x65,0x75,0x65,0x3E
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x52,0x65
	.DB  0x6D,0x6F,0x76,0x65,0x64,0x20,0x28,0x25
	.DB  0x30,0x32,0x58,0x29,0x20,0x66,0x72,0x6F
	.DB  0x6D,0x20,0x65,0x76,0x65,0x6E,0x74,0x4C
	.DB  0x6F,0x67,0x51,0x75,0x65,0x75,0x65,0x5B
	.DB  0x25,0x64,0x5D,0xD,0xA,0x0,0x3C,0x72
	.DB  0x65,0x6D,0x6F,0x76,0x65,0x45,0x76,0x65
	.DB  0x6E,0x74,0x4C,0x6F,0x67,0x51,0x75,0x65
	.DB  0x75,0x65,0x3E,0x20,0x57,0x41,0x52,0x4E
	.DB  0x3A,0x20,0x6E,0x6F,0x74,0x20,0x66,0x6F
	.DB  0x75,0x6E,0x64,0x20,0x69,0x64,0x5B,0x30
	.DB  0x78,0x25,0x30,0x32,0x58,0x5D,0x20,0x69
	.DB  0x6E,0x20,0x65,0x76,0x65,0x6E,0x74,0x4C
	.DB  0x6F,0x67,0x51,0x75,0x65,0x75,0x65,0xD
	.DB  0xA,0x0
_0x2C0003:
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  LOW(_servicePwd),HIGH(_servicePwd),LOW(_userPwd),HIGH(_userPwd),0x0,0x0
_0x2C022A:
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
_0x2C0000:
	.DB  0x4D,0x31,0x25,0x31,0x64,0x0,0x4D,0x30
	.DB  0x0,0x4D,0x41,0x25,0x31,0x64,0x0,0x4D
	.DB  0x32,0x25,0x31,0x64,0x0,0x4D,0x33,0x25
	.DB  0x31,0x64,0x0,0x4D,0x34,0x25,0x31,0x64
	.DB  0x0,0x50,0x31,0x0,0x4D,0x35,0x25,0x31
	.DB  0x64,0x0,0x50,0x30,0x0,0x3C,0x4D,0x45
	.DB  0x4E,0x55,0x5F,0x70,0x72,0x6F,0x63,0x65
	.DB  0x73,0x73,0x4B,0x65,0x79,0x3E,0x20,0x56
	.DB  0x50,0x25,0x73,0x2C,0x25,0x73,0x2C,0x25
	.DB  0x73,0x2C,0x0,0x52,0x65,0x61,0x6C,0x74
	.DB  0x69,0x6D,0x65,0x2C,0x0,0x44,0x61,0x74
	.DB  0x61,0x6C,0x6F,0x67,0x67,0x65,0x72,0x2C
	.DB  0x0,0x55,0x6E,0x6B,0x6E,0x6F,0x77,0x6E
	.DB  0x2C,0x0,0x45,0x6E,0x61,0x62,0x6C,0x65
	.DB  0x2C,0x0,0x44,0x69,0x73,0x61,0x62,0x6C
	.DB  0x65,0x2C,0x0,0x3C,0x4D,0x45,0x4E,0x55
	.DB  0x5F,0x70,0x72,0x6F,0x63,0x65,0x73,0x73
	.DB  0x4B,0x65,0x79,0x3E,0x20,0x56,0x4F,0x25
	.DB  0x73,0x0,0x3C,0x4D,0x45,0x4E,0x55,0x5F
	.DB  0x70,0x72,0x6F,0x63,0x65,0x73,0x73,0x4B
	.DB  0x65,0x79,0x3E,0x20,0x6D,0x61,0x6C,0x6C
	.DB  0x6F,0x63,0x28,0x43,0x4F,0x4E,0x46,0x5F
	.DB  0x52,0x45,0x41,0x44,0x5F,0x42,0x55,0x46
	.DB  0x46,0x45,0x52,0x29,0x20,0x66,0x61,0x69
	.DB  0x6C,0x65,0x64,0xD,0xA,0x0,0x3C,0x4D
	.DB  0x45,0x4E,0x55,0x5F,0x70,0x72,0x6F,0x63
	.DB  0x65,0x73,0x73,0x4B,0x65,0x79,0x3E,0x20
	.DB  0x45,0x54,0x48,0x5F,0x67,0x65,0x74,0x43
	.DB  0x6F,0x6E,0x66,0x69,0x67,0x28,0x29,0x20
	.DB  0x66,0x61,0x69,0x6C,0x65,0x64,0xD,0xA
	.DB  0x0,0x3C,0x4D,0x45,0x4E,0x55,0x5F,0x70
	.DB  0x72,0x6F,0x63,0x65,0x73,0x73,0x4B,0x65
	.DB  0x79,0x3E,0x20,0x45,0x54,0x48,0x5F,0x67
	.DB  0x65,0x74,0x43,0x6F,0x6E,0x66,0x69,0x67
	.DB  0x28,0x29,0x20,0x73,0x75,0x63,0x63,0x65
	.DB  0x73,0x73,0xD,0xA,0x0,0xD,0xA,0xD
	.DB  0xA,0x3C,0x4D,0x45,0x4E,0x55,0x5F,0x70
	.DB  0x72,0x6F,0x63,0x65,0x73,0x73,0x4B,0x65
	.DB  0x79,0x3E,0x20,0x72,0x65,0x61,0x64,0x5B
	.DB  0x25,0x64,0x5D,0x20,0x2D,0x2D,0x3E,0xD
	.DB  0xA,0x0,0x3C,0x4D,0x45,0x4E,0x55,0x5F
	.DB  0x70,0x72,0x6F,0x63,0x65,0x73,0x73,0x4B
	.DB  0x65,0x79,0x3E,0x20,0x67,0x65,0x74,0x4E
	.DB  0x65,0x74,0x77,0x6F,0x72,0x6B,0x49,0x6E
	.DB  0x66,0x6F,0x28,0x29,0x20,0x66,0x61,0x69
	.DB  0x6C,0x65,0x64,0xD,0xA,0x0,0x3C,0x4D
	.DB  0x45,0x4E,0x55,0x5F,0x70,0x72,0x6F,0x63
	.DB  0x65,0x73,0x73,0x4B,0x65,0x79,0x3E,0x20
	.DB  0x56,0x4E,0x25,0x75,0x2E,0x25,0x75,0x2E
	.DB  0x25,0x75,0x2E,0x25,0x75,0x2C,0x25,0x75
	.DB  0x2E,0x25,0x75,0x2E,0x25,0x75,0x2E,0x25
	.DB  0x75,0x2C,0x25,0x75,0x2E,0x25,0x75,0x2E
	.DB  0x25,0x75,0x2E,0x25,0x75,0x2C,0x25,0x75
	.DB  0x2E,0x25,0x75,0x2E,0x25,0x75,0x2E,0x25
	.DB  0x75,0x2C,0xD,0xA,0x0,0x56,0x4E,0x25
	.DB  0x75,0x2E,0x25,0x75,0x2E,0x25,0x75,0x2E
	.DB  0x25,0x75,0x2C,0x25,0x75,0x2E,0x25,0x75
	.DB  0x2E,0x25,0x75,0x2E,0x25,0x75,0x2C,0x25
	.DB  0x75,0x2E,0x25,0x75,0x2E,0x25,0x75,0x2E
	.DB  0x25,0x75,0x2C,0x25,0x75,0x2E,0x25,0x75
	.DB  0x2E,0x25,0x75,0x2E,0x25,0x75,0x2C,0x0
	.DB  0x3C,0x4D,0x45,0x4E,0x55,0x5F,0x70,0x72
	.DB  0x6F,0x63,0x65,0x73,0x73,0x4B,0x65,0x79
	.DB  0x3E,0x20,0x64,0x65,0x76,0x45,0x6E,0x5B
	.DB  0x25,0x64,0x5D,0x20,0x61,0x6C,0x6D,0x45
	.DB  0x6E,0x5B,0x25,0x64,0x5D,0x0,0x53,0x4F
	.DB  0x25,0x31,0x64,0x0,0x45,0x44,0x32,0x25
	.DB  0x31,0x64,0x0,0x45,0x44,0x33,0x25,0x31
	.DB  0x64,0x0,0x53,0x49,0x0,0x49,0x44,0x25
	.DB  0x31,0x58,0x25,0x31,0x64,0x0,0x4D,0x36
	.DB  0x25,0x31,0x64,0x0,0x3C,0x4D,0x45,0x4E
	.DB  0x55,0x5F,0x70,0x72,0x6F,0x63,0x65,0x73
	.DB  0x73,0x4B,0x65,0x79,0x3E,0x20,0x64,0x65
	.DB  0x76,0x45,0x6E,0x20,0x2D,0x3E,0x20,0x45
	.DB  0x44,0x25,0x31,0x64,0x25,0x31,0x64,0x0
	.DB  0x3C,0x4D,0x45,0x4E,0x55,0x5F,0x70,0x72
	.DB  0x6F,0x63,0x65,0x73,0x73,0x4B,0x65,0x79
	.DB  0x3E,0x20,0x61,0x6C,0x6D,0x45,0x6E,0x20
	.DB  0x2D,0x3E,0x20,0x45,0x44,0x25,0x31,0x64
	.DB  0x25,0x31,0x64,0x0,0x3C,0x4D,0x45,0x4E
	.DB  0x55,0x5F,0x70,0x72,0x6F,0x63,0x65,0x73
	.DB  0x73,0x4B,0x65,0x79,0x3E,0x20,0x73,0x65
	.DB  0x74,0x4F,0x70,0x65,0x72,0x61,0x74,0x69
	.DB  0x6E,0x67,0x43,0x6F,0x6E,0x66,0x69,0x67
	.DB  0x28,0x29,0x20,0x66,0x61,0x69,0x6C,0x65
	.DB  0x64,0xD,0xA,0x0,0x46,0x4C,0x0,0x46
	.DB  0x49,0x0,0x49,0x41,0x25,0x31,0x58,0x0
	.DB  0x53,0x4D,0x0,0x53,0x47,0x0,0x53,0x53
	.DB  0x0,0x53,0x46,0x25,0x75,0x2E,0x25,0x75
	.DB  0x2E,0x25,0x75,0x2E,0x25,0x75,0x2C,0x25
	.DB  0x75,0x2E,0x25,0x75,0x2E,0x25,0x75,0x2E
	.DB  0x25,0x75,0x2C,0x25,0x75,0x2E,0x25,0x75
	.DB  0x2E,0x25,0x75,0x2E,0x25,0x75,0x2C,0x25
	.DB  0x75,0x2E,0x25,0x75,0x2E,0x25,0x75,0x2E
	.DB  0x25,0x75,0x2C,0x0,0x3C,0x4D,0x45,0x4E
	.DB  0x55,0x5F,0x70,0x72,0x6F,0x63,0x65,0x73
	.DB  0x73,0x4B,0x65,0x79,0x3E,0x20,0x45,0x54
	.DB  0x48,0x5F,0x73,0x65,0x74,0x43,0x6F,0x6E
	.DB  0x66,0x69,0x67,0x28,0x29,0x20,0x66,0x61
	.DB  0x69,0x6C,0x65,0x64,0x20,0xD,0xA,0x0
	.DB  0x4D,0x55,0x25,0x31,0x64,0x0,0x50,0x44
	.DB  0x25,0x31,0x64,0x2A,0x0,0x50,0x41,0x25
	.DB  0x31,0x64,0x0,0x50,0x35,0x0,0x50,0x44
	.DB  0x25,0x31,0x64,0x25,0x31,0x64,0x0,0x3C
	.DB  0x4D,0x45,0x4E,0x55,0x5F,0x70,0x72,0x6F
	.DB  0x63,0x65,0x73,0x73,0x4B,0x65,0x79,0x3E
	.DB  0x20,0x6E,0x65,0x77,0x50,0x77,0x64,0x20
	.DB  0x26,0x20,0x63,0x6F,0x6E,0x66,0x50,0x77
	.DB  0x64,0x20,0x6E,0x6F,0x74,0x20,0x6D,0x61
	.DB  0x74,0x63,0x68,0xD,0xA,0x0,0x53,0x56
	.DB  0x0,0x56,0x44,0x25,0x31,0x64,0x25,0x31
	.DB  0x64,0x0,0x53,0x31,0x25,0x31,0x64,0x0
	.DB  0x53,0x32,0x25,0x31,0x64,0x0,0x52,0x43
	.DB  0x0,0x4D,0x37,0x25,0x31,0x64,0x0,0x56
	.DB  0x41,0x25,0x31,0x64,0x0,0x53,0x41,0x25
	.DB  0x31,0x64,0x0,0x50,0x4E,0x25,0x31,0x64
	.DB  0x0,0x43,0x43,0x25,0x31,0x64,0x0,0x4D
	.DB  0x38,0x25,0x31,0x64,0x0,0x57,0x50,0x0
	.DB  0x50,0x53,0x0,0x50,0x34,0x0,0x5B,0x45
	.DB  0x5D,0x0,0x5B,0x44,0x5D,0x0,0x45,0x6E
	.DB  0x61,0x62,0x6C,0x65,0x0,0x44,0x69,0x73
	.DB  0x61,0x62,0x6C,0x65,0x0,0x3C,0x73,0x68
	.DB  0x6F,0x77,0x50,0x72,0x6F,0x62,0x65,0x43
	.DB  0x6F,0x6E,0x66,0x69,0x67,0x3E,0x20,0x50
	.DB  0x43,0x25,0x31,0x64,0x25,0x31,0x64,0x25
	.DB  0x64,0x2C,0x25,0x73,0x2C,0x25,0x73,0x2C
	.DB  0x25,0x2E,0x31,0x66,0x2C,0x25,0x64,0x2C
	.DB  0x25,0x2E,0x31,0x66,0x2C,0x25,0x2E,0x31
	.DB  0x66,0x2C,0x25,0x64,0x2C,0x25,0x2E,0x31
	.DB  0x66,0x0,0xD,0xA,0x3C,0x67,0x65,0x74
	.DB  0x5F,0x63,0x75,0x72,0x72,0x65,0x6E,0x74
	.DB  0x5F,0x73,0x61,0x6D,0x70,0x6C,0x69,0x6E
	.DB  0x67,0x3E,0x20,0x72,0x65,0x61,0x6C,0x20
	.DB  0x76,0x61,0x6C,0x75,0x65,0x20,0x28,0x25
	.DB  0x6C,0x20,0x73,0x65,0x63,0x2E,0x29,0xD
	.DB  0xA,0x0,0x3C,0x67,0x65,0x74,0x5F,0x63
	.DB  0x75,0x72,0x72,0x65,0x6E,0x74,0x5F,0x73
	.DB  0x61,0x6D,0x70,0x6C,0x69,0x6E,0x67,0x3E
	.DB  0x20,0x25,0x64,0x20,0x68,0x72,0x2E,0xD
	.DB  0xA,0x0,0x3C,0x67,0x65,0x74,0x5F,0x63
	.DB  0x75,0x72,0x72,0x65,0x6E,0x74,0x5F,0x73
	.DB  0x61,0x6D,0x70,0x6C,0x69,0x6E,0x67,0x3E
	.DB  0x20,0x25,0x64,0x20,0x6D,0x69,0x6E,0x2E
	.DB  0xD,0xA,0x0,0x3C,0x67,0x65,0x74,0x5F
	.DB  0x63,0x75,0x72,0x72,0x65,0x6E,0x74,0x5F
	.DB  0x73,0x61,0x6D,0x70,0x6C,0x69,0x6E,0x67
	.DB  0x3E,0x20,0x25,0x64,0x20,0x73,0x65,0x63
	.DB  0x2E,0xD,0xA,0x0,0x3C,0x67,0x65,0x74
	.DB  0x5F,0x63,0x75,0x72,0x72,0x65,0x6E,0x74
	.DB  0x5F,0x73,0x61,0x6D,0x70,0x6C,0x69,0x6E
	.DB  0x67,0x3E,0x20,0x25,0x64,0x20,0x6D,0x69
	.DB  0x6E,0x2E,0x20,0x25,0x64,0x20,0x73,0x65
	.DB  0x63,0x2E,0x20,0x0,0x2D,0x2D,0x3E,0x20
	.DB  0x25,0x64,0x20,0x6D,0x69,0x6E,0x2E,0xD
	.DB  0xA,0x0,0x3C,0x67,0x65,0x74,0x5F,0x63
	.DB  0x75,0x72,0x72,0x65,0x6E,0x74,0x5F,0x73
	.DB  0x61,0x6D,0x70,0x6C,0x69,0x6E,0x67,0x3E
	.DB  0x20,0x25,0x64,0x20,0x68,0x72,0x2E,0x20
	.DB  0x25,0x64,0x20,0x6D,0x69,0x6E,0x2E,0x20
	.DB  0x25,0x64,0x20,0x73,0x65,0x63,0x2E,0x20
	.DB  0x0,0x2D,0x2D,0x3E,0x20,0x25,0x64,0x20
	.DB  0x68,0x72,0x2E,0xD,0xA,0x0,0x3C,0x67
	.DB  0x65,0x74,0x5F,0x63,0x75,0x72,0x72,0x65
	.DB  0x6E,0x74,0x5F,0x73,0x61,0x6D,0x70,0x6C
	.DB  0x69,0x6E,0x67,0x3E,0x20,0x43,0x61,0x6E
	.DB  0x27,0x74,0x20,0x53,0x68,0x6F,0x77,0x2E
	.DB  0xD,0xA,0x0,0x3C,0x67,0x65,0x74,0x5F
	.DB  0x63,0x75,0x72,0x72,0x65,0x6E,0x74,0x5F
	.DB  0x76,0x72,0x65,0x66,0x3E,0x20,0x76,0x72
	.DB  0x65,0x66,0x28,0x25,0x66,0x29,0x20,0x76
	.DB  0x61,0x6C,0x54,0x6D,0x70,0x20,0x3D,0x20
	.DB  0x25,0x73,0xD,0xA,0x0,0x3C,0x67,0x65
	.DB  0x74,0x5F,0x63,0x75,0x72,0x72,0x65,0x6E
	.DB  0x74,0x5F,0x76,0x72,0x65,0x66,0x3E,0x20
	.DB  0x62,0x75,0x66,0x20,0x2D,0x3E,0x20,0x0
	.DB  0x5B,0x25,0x63,0x5D,0x0,0x3C,0x67,0x65
	.DB  0x74,0x4E,0x65,0x74,0x77,0x6F,0x72,0x6B
	.DB  0x49,0x6E,0x66,0x6F,0x3E,0x20,0x4C,0x49
	.DB  0x50,0x20,0x3A,0x20,0x25,0x75,0x2E,0x25
	.DB  0x75,0x2E,0x25,0x75,0x2E,0x25,0x75,0xD
	.DB  0xA,0x0,0x3C,0x67,0x65,0x74,0x4E,0x65
	.DB  0x74,0x77,0x6F,0x72,0x6B,0x49,0x6E,0x66
	.DB  0x6F,0x3E,0x20,0x4D,0x53,0x4B,0x20,0x3A
	.DB  0x20,0x25,0x75,0x2E,0x25,0x75,0x2E,0x25
	.DB  0x75,0x2E,0x25,0x75,0xD,0xA,0x0,0x3C
	.DB  0x67,0x65,0x74,0x4E,0x65,0x74,0x77,0x6F
	.DB  0x72,0x6B,0x49,0x6E,0x66,0x6F,0x3E,0x20
	.DB  0x44,0x47,0x57,0x20,0x3A,0x20,0x25,0x75
	.DB  0x2E,0x25,0x75,0x2E,0x25,0x75,0x2E,0x25
	.DB  0x75,0xD,0xA,0x0,0x3C,0x67,0x65,0x74
	.DB  0x4E,0x65,0x74,0x77,0x6F,0x72,0x6B,0x49
	.DB  0x6E,0x66,0x6F,0x3E,0x20,0x53,0x49,0x50
	.DB  0x20,0x3A,0x20,0x25,0x75,0x2E,0x25,0x75
	.DB  0x2E,0x25,0x75,0x2E,0x25,0x75,0xD,0xA
	.DB  0x0,0x3C,0x73,0x65,0x74,0x5F,0x76,0x72
	.DB  0x65,0x66,0x3E,0x20,0x5B,0x25,0x64,0x5D
	.DB  0x5B,0x25,0x64,0x5D,0x5B,0x25,0x64,0x5D
	.DB  0x20,0x2D,0x3E,0x20,0x25,0x64,0x20,0x2D
	.DB  0x3E,0x20,0x25,0x66,0xD,0xA,0x0,0x3C
	.DB  0x72,0x65,0x63,0x6D,0x70,0x3E,0x20,0x73
	.DB  0x72,0x63,0x31,0x5B,0x25,0x30,0x32,0x58
	.DB  0x5D,0x20,0x73,0x72,0x63,0x32,0x5B,0x25
	.DB  0x30,0x32,0x58,0x5D,0x20,0x75,0x73,0x65
	.DB  0x72,0x5B,0x25,0x30,0x32,0x58,0x5D,0x20
	.DB  0x73,0x65,0x72,0x76,0x69,0x63,0x65,0x5B
	.DB  0x25,0x30,0x32,0x58,0x5D,0xD,0xA,0x0
_0x2E0003:
	.DB  0x9
_0x2E0000:
	.DB  0xD,0xA,0x3C,0x44,0x65,0x62,0x75,0x67
	.DB  0x3E,0x47,0x65,0x74,0x43,0x75,0x72,0x53
	.DB  0x65,0x6E,0x73,0x6F,0x72,0x3A,0x20,0xD
	.DB  0xA,0x0,0x43,0x68,0x61,0x6E,0x6E,0x65
	.DB  0x6C,0x20,0x49,0x44,0x3A,0x25,0x64,0x20
	.DB  0xD,0xA,0x0,0x63,0x75,0x72,0x72,0x65
	.DB  0x6E,0x74,0x20,0x73,0x65,0x6E,0x73,0x6F
	.DB  0x72,0x20,0x63,0x68,0x5B,0x25,0x64,0x5D
	.DB  0x20,0x2C,0x20,0x76,0x61,0x6C,0x75,0x65
	.DB  0x3A,0x25,0x30,0x2E,0x32,0x66,0xD,0xA
	.DB  0x0,0x43,0x68,0x61,0x6E,0x6E,0x65,0x6C
	.DB  0x20,0x49,0x44,0x20,0x69,0x73,0x20,0x69
	.DB  0x6E,0x20,0x72,0x61,0x6E,0x67,0x65,0x2E
	.DB  0xD,0xA,0x0,0xD,0xA,0x3C,0x44,0x65
	.DB  0x62,0x75,0x67,0x3E,0x47,0x65,0x74,0x43
	.DB  0x61,0x6C,0x3A,0x20,0xD,0xA,0x0,0x73
	.DB  0x74,0x64,0x52,0x65,0x66,0x5B,0x25,0x64
	.DB  0x5D,0x20,0x3A,0x20,0x25,0x30,0x2E,0x32
	.DB  0x66,0x20,0x2C,0x20,0x0,0x73,0x65,0x6E
	.DB  0x73,0x6F,0x72,0x52,0x65,0x66,0x5B,0x25
	.DB  0x64,0x5D,0x20,0x3A,0x20,0x25,0x30,0x2E
	.DB  0x32,0x66,0xD,0xA,0x0,0x43,0x61,0x6C
	.DB  0x54,0x79,0x70,0x65,0x20,0x3A,0x20,0x43
	.DB  0x41,0x4C,0x5F,0x44,0x45,0x46,0x41,0x55
	.DB  0x4C,0x54,0x0,0x43,0x61,0x6C,0x54,0x79
	.DB  0x70,0x65,0x20,0x3A,0x20,0x43,0x41,0x4C
	.DB  0x5F,0x45,0x58,0x54,0x4F,0x46,0x46,0x53
	.DB  0x45,0x54,0x0,0x43,0x61,0x6C,0x54,0x79
	.DB  0x70,0x65,0x20,0x3A,0x20,0x43,0x41,0x4C
	.DB  0x5F,0x45,0x58,0x54,0x4C,0x49,0x4E,0x45
	.DB  0x41,0x52,0x0,0x43,0x61,0x6C,0x54,0x79
	.DB  0x70,0x65,0x20,0x3A,0x20,0x43,0x41,0x4C
	.DB  0x5F,0x45,0x58,0x54,0x50,0x4F,0x4C,0x59
	.DB  0x4E,0x4F,0x4D,0x49,0x41,0x4C,0x0,0xD
	.DB  0xA,0x3C,0x44,0x65,0x62,0x75,0x67,0x3E
	.DB  0x53,0x65,0x74,0x43,0x61,0x6C,0x3A,0x20
	.DB  0xD,0xA,0x0,0x50,0x6F,0x69,0x6E,0x74
	.DB  0x20,0x49,0x44,0x3A,0x25,0x64,0x20,0xD
	.DB  0xA,0x0,0x70,0x6F,0x69,0x6E,0x74,0x56
	.DB  0x61,0x6C,0x75,0x65,0x28,0x6D,0x65,0x74
	.DB  0x65,0x72,0x52,0x65,0x66,0x29,0x20,0x3A
	.DB  0x25,0x30,0x2E,0x32,0x66,0x20,0xD,0xA
	.DB  0x0,0xD,0xA,0x3C,0x44,0x65,0x62,0x75
	.DB  0x67,0x3E,0x43,0x6F,0x6E,0x66,0x69,0x72
	.DB  0x6D,0x43,0x61,0x6C,0x3A,0x20,0xD,0xA
	.DB  0x0,0x67,0x65,0x74,0x20,0x79,0x65,0x61
	.DB  0x72,0x20,0x3D,0x20,0x25,0x64,0xD,0xA
	.DB  0x0,0x67,0x65,0x74,0x20,0x6D,0x6F,0x6E
	.DB  0x74,0x68,0x20,0x3D,0x20,0x25,0x64,0xD
	.DB  0xA,0x0,0x67,0x65,0x74,0x20,0x64,0x61
	.DB  0x74,0x65,0x20,0x3D,0x20,0x25,0x64,0xD
	.DB  0xA,0x0,0x67,0x65,0x74,0x20,0x68,0x6F
	.DB  0x75,0x72,0x20,0x3D,0x20,0x25,0x64,0xD
	.DB  0xA,0x0,0x67,0x65,0x74,0x20,0x6D,0x69
	.DB  0x6E,0x20,0x3D,0x20,0x25,0x64,0xD,0xA
	.DB  0x0,0x67,0x65,0x74,0x20,0x73,0x65,0x63
	.DB  0x20,0x3D,0x20,0x25,0x64,0xD,0xA,0x0
	.DB  0x67,0x65,0x74,0x20,0x74,0x69,0x6D,0x65
	.DB  0x7A,0x6F,0x6E,0x65,0x20,0x3D,0x20,0x25
	.DB  0x2B,0x64,0xD,0xA,0x0,0xD,0xA,0x3C
	.DB  0x44,0x45,0x42,0x55,0x47,0x3E,0x20,0x41
	.DB  0x6C,0x61,0x72,0x6D,0x20,0x53,0x74,0x61
	.DB  0x74,0x75,0x73,0x20,0x52,0x65,0x73,0x65
	.DB  0x74,0x2E,0x2E,0x21,0x21,0xD,0xA,0x0
	.DB  0x3C,0x44,0x45,0x42,0x55,0x47,0x5F,0x43
	.DB  0x6C,0x65,0x61,0x72,0x4C,0x6F,0x67,0x46
	.DB  0x69,0x6C,0x65,0x3E,0x20,0x52,0x65,0x2D
	.DB  0x69,0x6E,0x69,0x74,0x69,0x61,0x74,0x65
	.DB  0x20,0x6C,0x6F,0x67,0x20,0x66,0x69,0x6C
	.DB  0x65,0xD,0xA,0x0,0x3C,0x44,0x45,0x42
	.DB  0x55,0x47,0x5F,0x43,0x6C,0x65,0x61,0x72
	.DB  0x4C,0x6F,0x67,0x46,0x69,0x6C,0x65,0x3E
	.DB  0x20,0x4C,0x4F,0x47,0x5F,0x63,0x72,0x65
	.DB  0x61,0x74,0x65,0x46,0x69,0x6C,0x65,0x28
	.DB  0x25,0x73,0x29,0x20,0x66,0x61,0x69,0x6C
	.DB  0x65,0x64,0xD,0xA,0x0,0x3C,0x44,0x45
	.DB  0x42,0x55,0x47,0x5F,0x73,0x65,0x74,0x52
	.DB  0x65,0x61,0x6C,0x56,0x72,0x65,0x66,0x3E
	.DB  0x20,0x67,0x65,0x74,0x20,0x73,0x65,0x74
	.DB  0x20,0x56,0x72,0x65,0x66,0x3C,0x73,0x74
	.DB  0x72,0x69,0x6E,0x67,0x3E,0x20,0x25,0x73
	.DB  0xD,0xA,0x0,0x3C,0x44,0x45,0x42,0x55
	.DB  0x47,0x5F,0x73,0x65,0x74,0x52,0x65,0x61
	.DB  0x6C,0x56,0x72,0x65,0x66,0x3E,0x20,0x41
	.DB  0x66,0x74,0x65,0x72,0x20,0x63,0x6F,0x6E
	.DB  0x76,0x65,0x72,0x74,0x20,0x3D,0x20,0x25
	.DB  0x66,0xD,0xA,0x0,0x3C,0x44,0x45,0x42
	.DB  0x55,0x47,0x5F,0x73,0x65,0x6E,0x73,0x6F
	.DB  0x72,0x53,0x65,0x6C,0x65,0x63,0x74,0x3E
	.DB  0x20,0x54,0x68,0x69,0x73,0x20,0x54,0x45
	.DB  0x4D,0x50,0x5F,0x53,0x45,0x4C,0x20,0x6E
	.DB  0x6F,0x74,0x20,0x73,0x75,0x70,0x70,0x6F
	.DB  0x72,0x74,0xD,0xA,0xD,0xA,0x0,0x3C
	.DB  0x44,0x45,0x42,0x55,0x47,0x5F,0x73,0x65
	.DB  0x6E,0x73,0x6F,0x72,0x53,0x65,0x6C,0x65
	.DB  0x63,0x74,0x3E,0x20,0x44,0x65,0x73,0x65
	.DB  0x6C,0x65,0x63,0x74,0x20,0x73,0x65,0x6E
	.DB  0x73,0x6F,0x72,0xD,0xA,0xD,0xA,0x0
	.DB  0x3C,0x44,0x45,0x42,0x55,0x47,0x5F,0x73
	.DB  0x65,0x6E,0x73,0x6F,0x72,0x53,0x65,0x6C
	.DB  0x65,0x63,0x74,0x3E,0x20,0x53,0x65,0x6C
	.DB  0x65,0x63,0x74,0x65,0x64,0x20,0x73,0x65
	.DB  0x6E,0x73,0x6F,0x72,0x20,0x25,0x64,0xD
	.DB  0xA,0xD,0xA,0x0,0x3C,0x44,0x45,0x42
	.DB  0x55,0x47,0x5F,0x73,0x65,0x6E,0x73,0x6F
	.DB  0x72,0x53,0x65,0x6C,0x65,0x63,0x74,0x3E
	.DB  0x20,0x45,0x52,0x52,0x4F,0x52,0x20,0x3A
	.DB  0x20,0x53,0x65,0x6C,0x65,0x63,0x74,0x69
	.DB  0x6E,0x67,0x20,0x73,0x65,0x6E,0x73,0x6F
	.DB  0x72,0x20,0x5B,0x25,0x63,0x5D,0x5B,0x30
	.DB  0x78,0x25,0x30,0x32,0x58,0x5D,0xD,0xA
	.DB  0xD,0xA,0x0,0x3C,0x44,0x45,0x42,0x55
	.DB  0x47,0x5F,0x73,0x65,0x74,0x53,0x65,0x72
	.DB  0x69,0x61,0x6C,0x4E,0x75,0x6D,0x62,0x65
	.DB  0x72,0x3E,0x20,0x69,0x6E,0x76,0x61,0x6C
	.DB  0x69,0x64,0x20,0x73,0x65,0x74,0x74,0x69
	.DB  0x6E,0x67,0x20,0x73,0x74,0x72,0x69,0x6E
	.DB  0x67,0x20,0x28,0x25,0x63,0x29,0x5B,0x30
	.DB  0x78,0x25,0x30,0x32,0x5D,0xD,0xA,0x0
	.DB  0x3C,0x44,0x45,0x42,0x55,0x47,0x5F,0x73
	.DB  0x65,0x74,0x53,0x65,0x72,0x69,0x61,0x6C
	.DB  0x4E,0x75,0x6D,0x62,0x65,0x72,0x3E,0x20
	.DB  0x52,0x65,0x70,0x6C,0x61,0x63,0x69,0x6E
	.DB  0x67,0x20,0x44,0x45,0x56,0x49,0x43,0x45
	.DB  0x5F,0x53,0x45,0x52,0x49,0x41,0x4C,0x2E
	.DB  0x2E,0xD,0xA,0x0,0x3C,0x44,0x45,0x42
	.DB  0x55,0x47,0x5F,0x73,0x65,0x74,0x53,0x65
	.DB  0x72,0x69,0x61,0x6C,0x4E,0x75,0x6D,0x62
	.DB  0x65,0x72,0x3E,0x20,0x53,0x65,0x74,0x20
	.DB  0x53,0x74,0x72,0x69,0x6E,0x67,0x20,0x2D
	.DB  0x2D,0x3E,0x20,0x0,0x5B,0x25,0x63,0x0
	.DB  0x25,0x63,0x5D,0x0,0x3C,0x44,0x45,0x42
	.DB  0x55,0x47,0x5F,0x73,0x65,0x74,0x53,0x65
	.DB  0x72,0x69,0x61,0x6C,0x4E,0x75,0x6D,0x62
	.DB  0x65,0x72,0x3E,0x20,0x53,0x75,0x63,0x63
	.DB  0x65,0x73,0x73,0x21,0x21,0x20,0x44,0x45
	.DB  0x56,0x5F,0x53,0x45,0x52,0x49,0x41,0x4C
	.DB  0x20,0x3D,0x3D,0x3E,0x20,0x0,0x5B,0x25
	.DB  0x30,0x32,0x58,0x5D,0x0,0x3C,0x44,0x45
	.DB  0x42,0x55,0x47,0x5F,0x72,0x65,0x61,0x64
	.DB  0x53,0x65,0x72,0x69,0x61,0x6C,0x4E,0x75
	.DB  0x6D,0x62,0x65,0x72,0x3E,0x20,0x44,0x45
	.DB  0x56,0x5F,0x53,0x45,0x52,0x49,0x41,0x4C
	.DB  0x20,0x3D,0x3D,0x3E,0x20,0x0,0x47,0x65
	.DB  0x74,0x20,0x44,0x65,0x62,0x75,0x67,0x20
	.DB  0x52,0x65,0x71,0x2E,0x3A,0x0,0x25,0x30
	.DB  0x35,0x64,0x20,0x20,0x20,0x0,0x25,0x30
	.DB  0x32,0x78,0x20,0x0,0x2E,0x0
_0x300003:
	.DB  0x3
_0x320007:
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0
_0x340022:
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
_0x340000:
	.DB  0x3C,0x43,0x61,0x6C,0x20,0x53,0x74,0x64
	.DB  0x20,0x72,0x65,0x66,0x3E,0x63,0x68,0x5B
	.DB  0x25,0x64,0x5D,0x2C,0x66,0x6F,0x72,0x6D
	.DB  0x61,0x74,0x54,0x79,0x70,0x65,0x3A,0x25
	.DB  0x30,0x2E,0x32,0x66,0xD,0xA,0x0,0x73
	.DB  0x74,0x64,0x52,0x65,0x66,0x3A,0x25,0x30
	.DB  0x2E,0x32,0x66,0x2C,0x73,0x65,0x6E,0x73
	.DB  0x6F,0x72,0x52,0x65,0x66,0x3A,0x25,0x30
	.DB  0x2E,0x32,0x66,0xD,0xA,0x0,0x3C,0x63
	.DB  0x61,0x6C,0x69,0x62,0x72,0x61,0x74,0x69
	.DB  0x6F,0x6E,0x3E,0x43,0x61,0x6C,0x20,0x70
	.DB  0x72,0x6F,0x70,0x65,0x72,0x74,0x69,0x65
	.DB  0x73,0x3A,0x73,0x65,0x74,0x20,0x63,0x61
	.DB  0x6E,0x20,0x6E,0x6F,0x74,0x20,0x67,0x65
	.DB  0x74,0x20,0x76,0x61,0x6C,0x75,0x65,0x2E
	.DB  0x0,0x3C,0x63,0x61,0x6C,0x69,0x62,0x72
	.DB  0x61,0x74,0x69,0x6F,0x6E,0x3E,0x43,0x61
	.DB  0x6C,0x20,0x70,0x72,0x6F,0x70,0x65,0x72
	.DB  0x74,0x69,0x65,0x73,0x3A,0x67,0x65,0x74
	.DB  0x20,0x63,0x61,0x6E,0x20,0x6E,0x6F,0x74
	.DB  0x20,0x73,0x65,0x74,0x20,0x76,0x61,0x6C
	.DB  0x75,0x65,0x2E,0x0,0x3C,0x43,0x61,0x6C
	.DB  0x20,0x53,0x74,0x64,0x20,0x72,0x65,0x66
	.DB  0x3E,0x63,0x68,0x5B,0x25,0x64,0x5D,0x2C
	.DB  0x66,0x6F,0x72,0x6D,0x61,0x74,0x54,0x79
	.DB  0x70,0x65,0x3A,0x25,0x64,0xD,0xA,0x0
_0x2000060:
	.DB  0x1
_0x2000000:
	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
	.DB  0x0
_0x2040003:
	.DB  0x1
_0x2080000:
	.DB  0x2D,0x4E,0x41,0x4E,0x0

__GLOBAL_INI_TBL:
	.DW  0x04
	.DW  0x1D8A
	.DD  __HEAP_START_MARKER*2

	.DW  0x04
	.DW  _ETH_rst_timer_S0000001000
	.DD  _0x75*2

	.DW  0x2B
	.DW  _0x40009
	.DD  _0x40000*2

	.DW  0x26
	.DW  _0x40009+43
	.DD  _0x40000*2+43

	.DW  0x2B
	.DW  _0x40009+81
	.DD  _0x40000*2

	.DW  0x02
	.DW  _d_out
	.DD  _0x80003*2

	.DW  0x01
	.DW  _is_properties_config_update
	.DD  _0xE0003*2

	.DW  0x01
	.DW  _is_operating_config_update
	.DD  _0xE0004*2

	.DW  0x05
	.DW  _is_sensor_config_update
	.DD  _0xE0005*2

	.DW  0x10
	.DW  _is_din_config_update
	.DD  _0xE0006*2

	.DW  0x05
	.DW  _is_dout_config_update
	.DD  _0xE0007*2

	.DW  0x01
	.DW  _is_buzzer_config_update
	.DD  _0xE0008*2

	.DW  0x01
	.DW  _is_status_config_update
	.DD  _0xE0009*2

	.DW  0x01
	.DW  _is_env_config_update
	.DD  _0xE000A*2

	.DW  0x02
	.DW  _0x1200D0
	.DD  _0x120000*2+4883

	.DW  0x03
	.DW  0x07
	.DD  _0x18001D*2

	.DW  0x04
	.DW  0x0A
	.DD  _0x1C0005*2

	.DW  0x02
	.DW  _dinStatus
	.DD  _0x1E0003*2

	.DW  0x02
	.DW  _doutStatus
	.DD  _0x1E0004*2

	.DW  0x01
	.DW  _serverCommStatus
	.DD  _0x1E0005*2

	.DW  0x02
	.DW  _lastDinCheck_S00F0006000
	.DD  _0x1E003A*2

	.DW  0x10
	.DW  _dinAlarm
	.DD  _0x220003*2

	.DW  0x10
	.DW  _ainAlarm
	.DD  _0x220004*2

	.DW  0x01
	.DW  _lastCheck_S0110003000
	.DD  _0x2200A8*2

	.DW  0x01
	.DW  _lastCheck_S0110004000
	.DD  _0x2200B1*2

	.DW  0x02
	.DW  _lastCheck_S0110006000
	.DD  _0x2200C5*2

	.DW  0x05
	.DW  _lastCheck_S0110007000
	.DD  _0x2200CF*2

	.DW  0x04
	.DW  _muteAlarmExpired
	.DD  _0x2200DD*2

	.DW  0x01
	.DW  0x06
	.DD  _0x2200F6*2

	.DW  0x03
	.DW  _root_path
	.DD  _0x260003*2

	.DW  0x08
	.DW  _LOGFILE_DATA
	.DD  _0x280003*2

	.DW  0x09
	.DW  _LOGFILE_EVENT
	.DD  _0x280004*2

	.DW  0x09
	.DW  _LOGFILE_ERROR
	.DD  _0x280005*2

	.DW  0x10
	.DW  _LOG_INIT_STR
	.DD  _0x280006*2

	.DW  0x04
	.DW  _LOG_openFile
	.DD  _0x280007*2

	.DW  0x04
	.DW  _LOG_closeFile
	.DD  _0x280008*2

	.DW  0x01
	.DW  _hwCalId
	.DD  _0x2E0003*2

	.DW  0x01
	.DW  _n
	.DD  _0x300003*2

	.DW  0x01
	.DW  __seed_G100
	.DD  _0x2000060*2

	.DW  0x01
	.DW  _status_G102
	.DD  _0x2040003*2

_0xFFFFFFFF:
	.DW  0

__RESET:
	CLI
	CLR  R30
	OUT  EECR,R30

;INTERRUPT VECTORS ARE PLACED
;AT THE START OF FLASH
	LDI  R31,1
	OUT  MCUCR,R31
	OUT  MCUCR,R30
	STS  XMCRA,R30
	STS  XMCRB,R30

;DISABLE WATCHDOG
	LDI  R31,0x18
	WDR
	IN   R26,MCUSR
	CBR  R26,8
	OUT  MCUSR,R26
	STS  WDTCSR,R31
	STS  WDTCSR,R30

;CLEAR R2-R14
	LDI  R24,(14-2)+1
	LDI  R26,2
	CLR  R27
__CLEAR_REG:
	ST   X+,R30
	DEC  R24
	BRNE __CLEAR_REG

;CLEAR SRAM
	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
	LDI  R26,LOW(__SRAM_START)
	LDI  R27,HIGH(__SRAM_START)
__CLEAR_SRAM:
	ST   X+,R30
	SBIW R24,1
	BRNE __CLEAR_SRAM

;GLOBAL VARIABLES INITIALIZATION
	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
	LDI  R29,BYTE3(__GLOBAL_INI_TBL*2)
__GLOBAL_INI_NEXT:
	OUT  RAMPZ,R29
	ELPM R24,Z+
	ELPM R25,Z+
	SBIW R24,0
	BREQ __GLOBAL_INI_END
	ELPM R26,Z+
	ELPM R27,Z+
	ELPM R0,Z+
	ELPM R1,Z+
	ELPM R28,Z+
	ELPM R29,Z+
	MOVW R22,R30
	IN   R29,RAMPZ
	MOVW R30,R0
	OUT  RAMPZ,R28
__GLOBAL_INI_LOOP:
	ELPM R0,Z+
	ST   X+,R0
	SBIW R24,1
	BRNE __GLOBAL_INI_LOOP
	MOVW R30,R22
	RJMP __GLOBAL_INI_NEXT
__GLOBAL_INI_END:

;GPIOR0 INITIALIZATION
	LDI  R30,__GPIOR0_INIT
	OUT  GPIOR0,R30

;HARDWARE STACK POINTER INITIALIZATION
	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
	OUT  SPL,R30
	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
	OUT  SPH,R30

;DATA STACK POINTER INITIALIZATION
	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)

	JMP  _main

	.ESEG
	.ORG 0

	.DSEG
	.ORG 0xCF0

	.CSEG
;/*****************************************************
;Project : COMM-ETH : 0.01a
;Date    : 17/7/2012
;Author  : Tawan Srisang
;Company : Intelenics Co.,Ltd.
;Comments:
;Version Format : 1Major.2Minor.1Edition
;
;
;Chip type               : ATmega2560
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;*****************************************************/
;#include <mega2560.h>
	#ifndef __SLEEP_DEFINED__
	#define __SLEEP_DEFINED__
	.EQU __se_bit=0x01
	.EQU __sm_mask=0x0E
	.EQU __sm_powerdown=0x04
	.EQU __sm_powersave=0x06
	.EQU __sm_standby=0x0C
	.EQU __sm_ext_standby=0x0E
	.EQU __sm_adc_noise_red=0x02
	.SET power_ctrl_reg=smcr
	#endif
;#include <stdlib.h>
;#include <string.h>
;#include <delay.h>
;#include "ims_eth_header.h"
;#include "config.h"
;#include "timer.h"
;#include "ds1672.h"
;#include "sensor.h"
;#include "status.h"
;#include "alarm.h"
;#include "dataqueue.h"
;#include "eventqueue.h"
;#include "log.h"
;#include "logqueue.h"
;//#include "oled.h"
;//#include "menu.h"
;#include "io.h"
;#include "debug.h"
;#include "gaussian.h"
;#include "dht11.h"
;
;#include "uart.h"
;#include <stdio.h>
;
;#define MAX(a,b)                (((a) > (b)) ? (a) : (b))
;#define MIN(a,b)                (((a) < (b)) ? (a) : (b))
;//#define RANDOM(a,b)             ((rand() % (MAX(a,b) - MIN(a,b))) + MIN(a,b))
;
;#define PERIOD_CHECK_MEMORY     300
;
;// I2C Bus functions (for INT-AVXB-00-04)
;#asm
   .equ __i2c_port=0x0B ;PORTD
   .equ __sda_bit=1
   .equ __scl_bit=0
; 0000 0032 #endasm
;
;//unsigned char FIRMWARE_VERSION[] = "COMM-ETH-0.01a";
;
;int updateStatus(void);
;int eventCapture(void);
;int statusReport(void);
;int sensorDataReport(void);
;int eventReport(void);
;int sensorDataSave(void);
;int eventSave(void);
;int logReport(void);
;extern void updateSensorADC(int ch);
;extern int DHT11Read(ST_DHT11 *dhtDevice);
;
;/*============================================================*/
;void main(void)
; 0000 0043 {

	.CSEG
_main:
; 0000 0044     int                     err,i=0,k=0,res,last_status;
; 0000 0045 
; 0000 0046     TIMER                   sensor_report_timer[5];
; 0000 0047     TIMER                   status_report_timer;
; 0000 0048     TIMER                   check_reset_timer;
; 0000 0049     TIMER                   check_memory_timer;
; 0000 004A     TIMER                   clear_duplicate_timer = 0;
; 0000 004B     TIMER                   readSensorTimer = 0;
; 0000 004C     unsigned long int       timestamp_rd;
; 0000 004D 
; 0000 004E     char                    key_press = 0;
; 0000 004F 
; 0000 0050     float tmpA = 0.0;
; 0000 0051     float tmpB = 0.0;
; 0000 0052     float tmpC = 0.0;
; 0000 0053 
; 0000 0054     /*bongkot*/
; 0000 0055     int countSenserRead = 0;
; 0000 0056 
; 0000 0057     struct rtc_structure st_rtc;
; 0000 0058     //ST_DHT11 dhtDevice;
; 0000 0059     //int dhtRet = 0;
; 0000 005A 
; 0000 005B     // -------- System Initialize ----------- //
; 0000 005C     do{ err = initial_system();  }while(err);
	SBIW R28,63
	SBIW R28,26
	LDI  R24,27
	LDI  R26,LOW(26)
	LDI  R27,HIGH(26)
	LDI  R30,LOW(_0x3*2)
	LDI  R31,HIGH(_0x3*2)
	LDI  R22,BYTE3(_0x3*2)
	CALL __INITLOCB
;	err -> R16,R17
;	i -> R18,R19
;	k -> R20,R21
;	res -> Y+87
;	last_status -> Y+85
;	sensor_report_timer -> Y+65
;	status_report_timer -> Y+61
;	check_reset_timer -> Y+57
;	check_memory_timer -> Y+53
;	clear_duplicate_timer -> Y+49
;	readSensorTimer -> Y+45
;	timestamp_rd -> Y+41
;	key_press -> Y+40
;	tmpA -> Y+36
;	tmpB -> Y+32
;	tmpC -> Y+28
;	countSenserRead -> Y+26
;	st_rtc -> Y+0
	CALL SUBOPT_0x0
_0x5:
	CALL _initial_system
	MOVW R16,R30
	MOV  R0,R16
	OR   R0,R17
	BRNE _0x5
; 0000 005D 
; 0000 005E //    /*bongkot*/
; 0000 005F //    while(1){
; 0000 0060 //        #asm("wdr")
; 0000 0061 //        dhtRet = DHT11Read(&dhtDevice);
; 0000 0062 //        if(dhtRet == DHT11_SUCCESS){
; 0000 0063 //           printDebug("DHT11: Temp(%f), Humi(%f) \r\n",dhtDevice.temp,dhtDevice.humi);
; 0000 0064 //        }else if(dhtRet == DHT11_ERROR_TIMEOUT){      //DHT11_ERROR_TIMEOUT
; 0000 0065 //           printDebug("DHT11:Time out. \r\n");
; 0000 0066 //        }else if(dhtRet == DHT11_ERROR_CHECKSUM){      //DHT11_ERROR_TIMEOUT
; 0000 0067 //           printDebug("DHT11:Check sum error. \r\n");
; 0000 0068 //        }
; 0000 0069 //
; 0000 006A //        delay_ms(2000);
; 0000 006B //    }
; 0000 006C //
; 0000 006D     /*bongkot*/
; 0000 006E //    while(1){
; 0000 006F //        #asm("wdr")
; 0000 0070 //        for(countSenserRead=0;countSenserRead<5;countSenserRead++){
; 0000 0071 ////            if(TIMER_checkTimerExceed(readSensorTimer)){
; 0000 0072 ////                TIMER_setTimer(&readSensorTimer, 5);
; 0000 0073 ////                updateSensorADC(countSenserRead);                    // -- update adcData[ch] -- //
; 0000 0074 ////                //printDebug("[%d]ADC: %f, Volt: %f \r\n", i, adcData[i], (adcData[i]/1023)*2.56);
; 0000 0075 ////                //printDebug("[%d]ADC: %f, Volt: %f \r\n", i, adcData[countSenserRead], (adcData[countSenserRead]/1023)*3.30);
; 0000 0076 ////            }
; 0000 0077 //
; 0000 0078 //             updateSensorADC(countSenserRead);
; 0000 0079 ////             updateSensorADC(1);
; 0000 007A ////             delay_ms(100);
; 0000 007B ////             updateSensorADC(2);
; 0000 007C //             delay_ms(100);
; 0000 007D //        }
; 0000 007E //        //delay_ms(2000);
; 0000 007F //
; 0000 0080 //    }
; 0000 0081 
; 0000 0082     //ETH_CONF;
; 0000 0083 
; 0000 0084     ETH_switchMode((unsigned char) MODE_NORM);
	LDI  R26,LOW(128)
	CALL _ETH_switchMode
; 0000 0085 
; 0000 0086     /*bongkot*/
; 0000 0087 //    ETH_NORM;
; 0000 0088 //    ETH_reset();
; 0000 0089 //    ETH_OFF;
; 0000 008A //    delay_ms(2000);
; 0000 008B //    ETH_ON;
; 0000 008C 
; 0000 008D     // -- alarm indicator initialize -- //
; 0000 008E     buzzer_on = 0;          // -- buzzer off -- //
	CBI  0x1E,3
; 0000 008F     for(k=0;k<2;k++)        // -- MAX_DO_CHANNEL
	__GETWRN 20,21,0
_0xA:
	__CPWRN 20,21,2
	BRGE _0xB
; 0000 0090     {
; 0000 0091         /*bongkot edit logic*/
; 0000 0092         IO_dout(k,dout_config[k].stateOnEvent);     // -- Digital Output X OFF -- //
	CALL SUBOPT_0x1
	LD   R26,Z
	CALL _IO_dout
; 0000 0093         //IO_dout(k,!dout_config[k].stateOnEvent);     // -- Digital Output X OFF -- //
; 0000 0094     }
	__ADDWRN 20,21,1
	RJMP _0xA
_0xB:
; 0000 0095 
; 0000 0096     initDataLogQueue();
	CALL _initDataLogQueue
; 0000 0097     initEventLogQueue();
	CALL _initEventLogQueue
; 0000 0098     ETH_initWaitQueue();
	CALL _ETH_initWaitQueue
; 0000 0099 
; 0000 009A     printDebug("\r\n------ Initial Complete ------\r\n");
	__POINTD1FN _0x0,0
	CALL SUBOPT_0x2
; 0000 009B     printDebug("Contact : contact.tawan@gmail.com\r\n");
	__POINTD1FN _0x0,35
	CALL SUBOPT_0x2
; 0000 009C 
; 0000 009D 
; 0000 009E     //while(1){ printDebug("<main> TEMP_SEL = 0x%02X\r",TEMP_SEL);    delay_ms(100);   #asm("wdr")}
; 0000 009F 
; 0000 00A0     for(i=0;i<MAX_SENS_CHANNEL;i++){
	__GETWRN 18,19,0
_0xD:
	__CPWRN 18,19,5
	BRGE _0xE
; 0000 00A1         if(operating_config.sensorEnable[i]){
	CALL SUBOPT_0x3
	BREQ _0xF
; 0000 00A2             TIMER_setTimer(&sensor_report_timer[i], 5);
	CALL SUBOPT_0x4
; 0000 00A3         }
; 0000 00A4     }
_0xF:
	__ADDWRN 18,19,1
	RJMP _0xD
_0xE:
; 0000 00A5 
; 0000 00A6 //    gaussian(271.8683, 392.0240, 489.2156,
; 0000 00A7 //                 -90, -20, 50,
; 0000 00A8 //                 &tmpA, &tmpB, &tmpC);
; 0000 00A9 //
; 0000 00AA //    printDebug("<main> --A--> %f\r\n", tmpA);
; 0000 00AB //    printDebug("<main> --B--> %f\r\n", tmpB);
; 0000 00AC //    printDebug("<main> --C--> %f\r\n", tmpC);
; 0000 00AD 
; 0000 00AE     TIMER_setTimer(&status_report_timer, 7);
	CALL SUBOPT_0x5
; 0000 00AF     TIMER_setTimer(&check_reset_timer, 60);
	CALL SUBOPT_0x6
; 0000 00B0     TIMER_setTimer(&check_memory_timer, PERIOD_CHECK_MEMORY);
	CALL SUBOPT_0x7
; 0000 00B1 
; 0000 00B2     while(1){
_0x10:
; 0000 00B3 
; 0000 00B4         #asm("wdr")
	wdr
; 0000 00B5 
; 0000 00B6         // Reset at 05.00 in every day
; 0000 00B7         if(TIMER_checkTimerExceed(check_reset_timer))
	__GETD2S 57
	CALL _TIMER_checkTimerExceed
	SBIW R30,0
	BREQ _0x13
; 0000 00B8         {
; 0000 00B9             TIMER_setTimer(&check_reset_timer, 60);
	CALL SUBOPT_0x6
; 0000 00BA             RTC_getDateTime(&st_rtc, 7);
	MOVW R30,R28
	ST   -Y,R31
	ST   -Y,R30
	CALL SUBOPT_0x8
	CALL _RTC_getDateTime
; 0000 00BB //            printRTC(st_rtc);
; 0000 00BC             if(st_rtc.hour == 5) {
	CALL SUBOPT_0x9
	__CPD2N 0x5
	BRNE _0x14
; 0000 00BD                 if(st_rtc.min == 0) {
	CALL SUBOPT_0xA
	CALL __CPD10
	BRNE _0x15
; 0000 00BE                     while(1);
_0x16:
	RJMP _0x16
; 0000 00BF                 }
; 0000 00C0             }
_0x15:
; 0000 00C1         }
_0x14:
; 0000 00C2 
; 0000 00C3         // ----------- Received Debug Request ---------- //
; 0000 00C4         if(flag_PackageTerminate3){    debug_req();     }
_0x13:
	LDS  R30,_flag_PackageTerminate3
	CPI  R30,0
	BREQ _0x19
	CALL _debug_req
; 0000 00C5 
; 0000 00C6         // ----------- On Device Key Press ------------- //
; 0000 00C7 //        key_press = IO_keyCheck();
; 0000 00C8 //        if(key_press){
; 0000 00C9 //            MENU_processKey(key_press);
; 0000 00CA //        }
; 0000 00CB 
; 0000 00CC         // ----------- Ethernet Communication ---------- //
; 0000 00CD         ETH_receive();
_0x19:
	CALL _ETH_receive
; 0000 00CE         ETH_retransmit();
	CALL _ETH_retransmit
; 0000 00CF 
; 0000 00D0         // ----- check if configuration(s) has been updated ----- //
; 0000 00D1         if(is_properties_config_update){
	LDS  R30,_is_properties_config_update
	CPI  R30,0
	BREQ _0x1A
; 0000 00D2             getPropertiesConfig(&properties_config);
	CALL SUBOPT_0xB
; 0000 00D3             is_properties_config_update = 0;
; 0000 00D4         }
; 0000 00D5 
; 0000 00D6         if(is_operating_config_update){
_0x1A:
	LDS  R30,_is_operating_config_update
	CPI  R30,0
	BREQ _0x1B
; 0000 00D7             getOperatingConfig(&operating_config);
	CALL SUBOPT_0xC
; 0000 00D8             is_operating_config_update = 0;
; 0000 00D9         }
; 0000 00DA 
; 0000 00DB         for(i=0;i<MAX_SENS_CHANNEL;i++){
_0x1B:
	__GETWRN 18,19,0
_0x1D:
	__CPWRN 18,19,5
	BRGE _0x1E
; 0000 00DC             if(is_sensor_config_update[i]){
	LDI  R26,LOW(_is_sensor_config_update)
	LDI  R27,HIGH(_is_sensor_config_update)
	CALL SUBOPT_0xD
	BREQ _0x1F
; 0000 00DD                 err = getSensorConfig(i,&sensor_config[i]);
	ST   -Y,R19
	ST   -Y,R18
	CALL SUBOPT_0xE
	CALL _getSensorConfig
	MOVW R16,R30
; 0000 00DE                 if(err < 0){
	TST  R17
	BRPL _0x20
; 0000 00DF                     printDebug("<main> getSensorConfig(%d) error\r\n",i);
	__POINTD1FN _0x0,71
	CALL SUBOPT_0xF
	CALL SUBOPT_0x10
; 0000 00E0                     continue;
	RJMP _0x1C
; 0000 00E1                 }
; 0000 00E2                 is_sensor_config_update[i] = 0;
_0x20:
	LDI  R26,LOW(_is_sensor_config_update)
	LDI  R27,HIGH(_is_sensor_config_update)
	CALL SUBOPT_0x11
; 0000 00E3                 TIMER_setTimer(&sensor_report_timer[i], 5);
	CALL SUBOPT_0x4
; 0000 00E4             }
; 0000 00E5         }
_0x1F:
_0x1C:
	__ADDWRN 18,19,1
	RJMP _0x1D
_0x1E:
; 0000 00E6 
; 0000 00E7         if(is_buzzer_config_update){            // -- update buzzer configuration if needed -- //
	LDS  R30,_is_buzzer_config_update
	CPI  R30,0
	BREQ _0x21
; 0000 00E8             getBuzzerConfig(&buzz_config);
	CALL SUBOPT_0x12
; 0000 00E9             is_buzzer_config_update = 0;
; 0000 00EA         }
; 0000 00EB 
; 0000 00EC         for(i=0;i<USE_DIN;i++){
_0x21:
	__GETWRN 18,19,0
_0x23:
	__CPWRN 18,19,2
	BRGE _0x24
; 0000 00ED             if(is_din_config_update[i]){        // -- update digital input configuration if needed -- //
	LDI  R26,LOW(_is_din_config_update)
	LDI  R27,HIGH(_is_din_config_update)
	CALL SUBOPT_0xD
	BREQ _0x25
; 0000 00EE                 getAuxDinConfig(i,&din_config[i]);
	ST   -Y,R19
	ST   -Y,R18
	CALL SUBOPT_0x13
	MOVW R26,R30
	CALL _getAuxDinConfig
; 0000 00EF                 is_din_config_update[i] = 0;
	LDI  R26,LOW(_is_din_config_update)
	LDI  R27,HIGH(_is_din_config_update)
	CALL SUBOPT_0x11
; 0000 00F0             }
; 0000 00F1         }
_0x25:
	__ADDWRN 18,19,1
	RJMP _0x23
_0x24:
; 0000 00F2 
; 0000 00F3         for(i=0;i<USE_DOUT;i++){
	__GETWRN 18,19,0
_0x27:
	__CPWRN 18,19,2
	BRGE _0x28
; 0000 00F4             if(is_dout_config_update[i]){       // -- update digital output configuration if needed -- //
	LDI  R26,LOW(_is_dout_config_update)
	LDI  R27,HIGH(_is_dout_config_update)
	CALL SUBOPT_0xD
	BREQ _0x29
; 0000 00F5                 getAuxDoutConfig(i,&dout_config[i]);
	ST   -Y,R19
	ST   -Y,R18
	__MULBNWRU 18,19,38
	CALL SUBOPT_0x14
; 0000 00F6                 is_dout_config_update[i] = 0;
	CALL SUBOPT_0x11
; 0000 00F7             }
; 0000 00F8         }
_0x29:
	__ADDWRN 18,19,1
	RJMP _0x27
_0x28:
; 0000 00F9 
; 0000 00FA         if(is_status_config_update){
	LDS  R30,_is_status_config_update
	CPI  R30,0
	BREQ _0x2A
; 0000 00FB             getStatusReportConfig(&status_config);
	CALL SUBOPT_0x15
; 0000 00FC             is_status_config_update = 0;
; 0000 00FD 
; 0000 00FE             TIMER_setTimer(&status_report_timer, 7);
	CALL SUBOPT_0x5
; 0000 00FF         }
; 0000 0100 
; 0000 0101         if(is_env_config_update){
_0x2A:
	LDS  R30,_is_env_config_update
	CPI  R30,0
	BREQ _0x2B
; 0000 0102             getEnvAlarmConfig(&env_config);
	CALL SUBOPT_0x16
; 0000 0103             is_env_config_update = 0;
; 0000 0104         }
; 0000 0105 
; 0000 0106         /**
; 0000 0107            bongkot test data;
; 0000 0108         **/
; 0000 0109 //        operating_config.alarmEnable = 0;
; 0000 010A //        operating_config.deviceEnable = 1;
; 0000 010B //        operating_config.mode = 0;
; 0000 010C //        operating_config.sensorEnable[0] = 1;
; 0000 010D //        operating_config.sensorEnable[1] = 1;
; 0000 010E //        operating_config.sensorEnable[2] = 1;
; 0000 010F //        operating_config.sensorEnable[3] = 1;
; 0000 0110 //        operating_config.sensorEnable[4] = 1;
; 0000 0111 
; 0000 0112 
; 0000 0113         if(operating_config.deviceEnable)                       // ----- device enable ------ //
_0x2B:
	__GETB1MN _operating_config,1
	CPI  R30,0
	BRNE PC+3
	JMP _0x2C
; 0000 0114         {
; 0000 0115             // -------------- Sensor Association -------------- //
; 0000 0116             for(i=0;i<MAX_SENS_CHANNEL;i++)
	__GETWRN 18,19,0
_0x2E:
	__CPWRN 18,19,5
	BRLT PC+3
	JMP _0x2F
; 0000 0117             {
; 0000 0118                 if(operating_config.sensorEnable[i])            // .. sensor enable .. //
	CALL SUBOPT_0x3
	BREQ _0x30
; 0000 0119                 {
; 0000 011A                     //** test **//
; 0000 011B //                    if(TIMER_checkTimerExceed(readSensorTimer))
; 0000 011C //                    {
; 0000 011D //                        TIMER_setTimer(&readSensorTimer, 5);
; 0000 011E //                        updateSensorADC(i);                    // -- update adcData[ch] -- //
; 0000 011F //                        printDebug("[%d]ADC: %f, Volt: %f \r\n", i, adcData[i], (adcData[i]/1023)*2.56);
; 0000 0120 //                    }
; 0000 0121                     //-- test --//
; 0000 0122 
; 0000 0123 //                    printDebug("<main> sensorRead\r\n");
; 0000 0124                     err = sensorRead(i,&sensor[i]);
	CALL SUBOPT_0x17
	CALL _sensorRead
	MOVW R16,R30
; 0000 0125                     if(err < 0)                                 // . sensor value error . //
	TST  R17
	BRMI _0x2D
; 0000 0126                     {
; 0000 0127                         continue;
; 0000 0128                     }
; 0000 0129                     else                                        // . sensor value valid . //
; 0000 012A                     {
; 0000 012B                         // --==== More detail in config (Re-Occurrance) ====-- //
; 0000 012C                         if(TIMER_checkTimerExceed(sensor_report_timer[i]))
	CALL SUBOPT_0x18
	CALL SUBOPT_0x19
	CALL SUBOPT_0x1A
	BREQ _0x33
; 0000 012D                         {
; 0000 012E                             TIMER_setTimer(&sensor_report_timer[i], sensor_config[i].samplingRate);
	CALL SUBOPT_0x18
	CALL SUBOPT_0x1B
	CALL SUBOPT_0xE
	CALL SUBOPT_0x1C
	CALL SUBOPT_0x1D
; 0000 012F 
; 0000 0130                             timestamp_rd = DS1672_read();
	CALL _DS1672_read
	__PUTD1S 41
; 0000 0131                             err = addDataQueue(timestamp_rd, i, sensor[i].value);
	CALL __PUTPARD1
	CALL SUBOPT_0x17
	CALL __GETD1P
	MOVW R26,R30
	MOVW R24,R22
	CALL _addDataQueue
	MOVW R16,R30
; 0000 0132                             if(err<0){
	TST  R17
	BRPL _0x34
; 0000 0133                                 printDebug("<main> addSensorDataQueue(%d,%.1f) failed\r\n",i,sensor[i].value);
	__POINTD1FN _0x0,106
	CALL SUBOPT_0xF
	__MULBNWRU 18,19,5
	CALL SUBOPT_0x1E
	CALL SUBOPT_0x1F
; 0000 0134                                 continue;   // -- continue other sensor
; 0000 0135                             }
; 0000 0136                         }
_0x34:
; 0000 0137                         else{
_0x33:
; 0000 0138                             //printDebug("<main> [%d] %ld:%ld\r\n",i,baseCounter,sensor_report_timer[i]);
; 0000 0139                         }
; 0000 013A                     }
; 0000 013B 
; 0000 013C                 }
; 0000 013D                 else                                            // .. sensor disable .. //
_0x30:
; 0000 013E                 {
; 0000 013F                 }
; 0000 0140             } // -- iterate each probe -- //
_0x2D:
	__ADDWRN 18,19,1
	RJMP _0x2E
_0x2F:
; 0000 0141 
; 0000 0142             #asm("wdr")
	wdr
; 0000 0143             // --------------- Status Management --------------- //
; 0000 0144            // printDebug("<main> updateStatus()\r\n");
; 0000 0145             last_status = updateStatus();
	RCALL _updateStatus
	__PUTW1SX 85
; 0000 0146 
; 0000 0147             // --------------- Alarm Management --------------- //
; 0000 0148             if(operating_config.alarmEnable)                    // .. alarm enable .. //
	__GETB1MN _operating_config,2
	CPI  R30,0
	BRNE PC+3
	JMP _0x37
; 0000 0149             {
; 0000 014A                 // -- check alarm all -- //
; 0000 014B                 if(last_status < 0)                             // .. status update falied .. //
	__GETB2SX 86
	TST  R26
	BRPL _0x38
; 0000 014C                 {
; 0000 014D                     printDebug("<main> updateStatus() failed\r\n");
	__POINTD1FN _0x0,150
	CALL SUBOPT_0x2
; 0000 014E                 }
; 0000 014F                 else if((last_status > 0) && !muteMode)         // .. found some status error and alarm not muted .. //
	RJMP _0x39
_0x38:
	__GETW2SX 85
	CALL __CPW02
	BRGE _0x3B
	LDS  R30,_muteMode
	CPI  R30,0
	BREQ _0x3C
_0x3B:
	RJMP _0x3A
_0x3C:
; 0000 0150                 {
; 0000 0151                     // -- Buzzer Alarm -- //
; 0000 0152                     if(buzz_config.enable == 0x01 )             // -- buzzer enabled -- //
	LDS  R26,_buzz_config
	CPI  R26,LOW(0x1)
	BRNE _0x3D
; 0000 0153                     {
; 0000 0154                         // -- check alarm source binded to Buzzer -- //
; 0000 0155                         res = checkAlarm(buzz_config.eventSource, buzz_config.eventSourceNumber);       // -- alarm.h -- //
	__POINTW1MN _buzz_config,2
	ST   -Y,R31
	ST   -Y,R30
	__GETB2MN _buzz_config,1
	CLR  R27
	CALL SUBOPT_0x20
; 0000 0156                         if(res){
	BREQ _0x3E
; 0000 0157                             buzzer_on = 1;          // -- buzzer on -- //
	SBI  0x1E,3
; 0000 0158                         }
; 0000 0159                         else{
	RJMP _0x41
_0x3E:
; 0000 015A                             buzzer_on = 0;          // -- buzzer off -- //
	CBI  0x1E,3
; 0000 015B                         }
_0x41:
; 0000 015C                     }
; 0000 015D                     else                                        // -- buzzer disabled -- //
	RJMP _0x44
_0x3D:
; 0000 015E                     {
; 0000 015F                         buzzer_on = 0;                  // -- buzzer off -- //
	CBI  0x1E,3
; 0000 0160                     }
_0x44:
; 0000 0161 
; 0000 0162                     // -- Digital Output Alarm (iterate each channel) -- //
; 0000 0163                     for(k=0;k<USE_DOUT;k++)
	__GETWRN 20,21,0
_0x48:
	__CPWRN 20,21,2
	BRGE _0x49
; 0000 0164                     {
; 0000 0165                         if(dout_config[k].channelEnable == 0x01)            // -- digital output enabled -- //
	CALL SUBOPT_0x21
	SUBI R30,LOW(-_dout_config)
	SBCI R31,HIGH(-_dout_config)
	LD   R26,Z
	CPI  R26,LOW(0x1)
	BRNE _0x4A
; 0000 0166                         {
; 0000 0167                             // -- check alarm Digital Output -- //
; 0000 0168 //                            printDebug("<main> dout[%d] alarm check -- \r\n",k);
; 0000 0169                             res = checkAlarm(dout_config[k].eventSource, dout_config[k].eventSourceNumber);       // -- alarm.h -- //
	CALL SUBOPT_0x21
	__ADDW1MN _dout_config,3
	ST   -Y,R31
	ST   -Y,R30
	CALL SUBOPT_0x21
	__ADDW1MN _dout_config,2
	LD   R26,Z
	LDI  R27,0
	CALL SUBOPT_0x20
; 0000 016A                             if(res){
	BREQ _0x4B
; 0000 016B                                 /*bongkot edit logic*/
; 0000 016C                                 IO_dout(k,!dout_config[k].stateOnEvent);     // -- Digital Output X ON -- //
	CALL SUBOPT_0x1
	LD   R30,Z
	CALL __LNEGB1
	MOV  R26,R30
	RJMP _0x103
; 0000 016D                                 //IO_dout(k,dout_config[k].stateOnEvent);     // -- Digital Output X ON -- //
; 0000 016E                             }
; 0000 016F                             else{
_0x4B:
; 0000 0170                                 /*bongkot edit logic*/
; 0000 0171                                 IO_dout(k,dout_config[k].stateOnEvent);    // -- Digital Output X OFF -- //
	CALL SUBOPT_0x1
	LD   R26,Z
_0x103:
	CALL _IO_dout
; 0000 0172                                 //IO_dout(k,!dout_config[k].stateOnEvent);    // -- Digital Output X OFF -- //
; 0000 0173                             }
; 0000 0174                         }
; 0000 0175                         else                                                // -- digital output disabled -- //
	RJMP _0x4D
_0x4A:
; 0000 0176                         {
; 0000 0177                             /*bongkot edit logic*/
; 0000 0178                             IO_dout(k,dout_config[k].stateOnEvent);        // -- Digital Output X OFF -- //
	CALL SUBOPT_0x1
	LD   R26,Z
	CALL _IO_dout
; 0000 0179                             //IO_dout(k,!dout_config[k].stateOnEvent);        // -- Digital Output X OFF -- //
; 0000 017A                         }
_0x4D:
; 0000 017B                     }
	__ADDWRN 20,21,1
	RJMP _0x48
_0x49:
; 0000 017C                 }
; 0000 017D                 else                                            // .. no event .. //
	RJMP _0x4E
_0x3A:
; 0000 017E                 {
; 0000 017F                     // -- no alarm -- // ^_^
; 0000 0180                     buzzer_on = 0;                  // -- buzzer off -- //
	CBI  0x1E,3
; 0000 0181                     for(k=0;k<USE_DOUT;k++)         // -- MAX_DO_CHANNEL
	__GETWRN 20,21,0
_0x52:
	__CPWRN 20,21,2
	BRGE _0x53
; 0000 0182                     {
; 0000 0183                         /*bongkot edit logic*/
; 0000 0184                         IO_dout(k,dout_config[k].stateOnEvent);     // -- Digital Output X OFF -- //
	CALL SUBOPT_0x1
	LD   R26,Z
	CALL _IO_dout
; 0000 0185                         //IO_dout(k,!dout_config[k].stateOnEvent);     // -- Digital Output X OFF -- //
; 0000 0186                     }
	__ADDWRN 20,21,1
	RJMP _0x52
_0x53:
; 0000 0187                 }
_0x4E:
_0x39:
; 0000 0188 
; 0000 0189                 res = eventCapture();                           // -- send event packet if needed -- //
	RCALL _eventCapture
	CALL SUBOPT_0x22
; 0000 018A             }
; 0000 018B             else                                                // .. alarm disable .. //
	RJMP _0x54
_0x37:
; 0000 018C             {
; 0000 018D             //    printDebug("<main> alarmDisable()\r\n");
; 0000 018E                 // -- no alarm -- // ;-P
; 0000 018F                 buzzer_on = 0;                      // -- buzzer off -- //
	CBI  0x1E,3
; 0000 0190                 for(k=0;k<USE_DOUT;k++)             // -- MAX_DO_CHANNEL
	__GETWRN 20,21,0
_0x58:
	__CPWRN 20,21,2
	BRGE _0x59
; 0000 0191                 {
; 0000 0192                     /*bongkot edit logic*/
; 0000 0193                     IO_dout(k,dout_config[k].stateOnEvent);    // -- Digital Output X OFF -- //
	CALL SUBOPT_0x1
	LD   R26,Z
	CALL _IO_dout
; 0000 0194                     //IO_dout(k,!dout_config[k].stateOnEvent);    // -- Digital Output X OFF -- //
; 0000 0195                 }
	__ADDWRN 20,21,1
	RJMP _0x58
_0x59:
; 0000 0196             }
_0x54:
; 0000 0197 
; 0000 0198             // -- check mute expired -- //
; 0000 0199             if(muteMode){
	LDS  R30,_muteMode
	CPI  R30,0
	BREQ _0x5A
; 0000 019A                // printDebug("<main> ALARM_checkMuteExpired()\r\n");
; 0000 019B                 if(ALARM_checkMuteExpired()){
	CALL _ALARM_checkMuteExpired
	SBIW R30,0
	BREQ _0x5B
; 0000 019C                     muteAlarmExpired = 0xFFFFFFFF;
	CALL SUBOPT_0x23
	CALL SUBOPT_0x24
; 0000 019D                     muteMode = 0;
	LDI  R30,LOW(0)
	STS  _muteMode,R30
; 0000 019E                 }
; 0000 019F             }
_0x5B:
; 0000 01A0 
; 0000 01A1             // ---------------- Operating Mode ---------------- //
; 0000 01A2 //            operating_config.mode = MODE_REALTIME;      //test
; 0000 01A3             if(operating_config.mode == MODE_REALTIME)          // .. realtime mode .. //
_0x5A:
	LDS  R26,_operating_config
	CPI  R26,LOW(0x10)
	BREQ PC+3
	JMP _0x5C
; 0000 01A4             {
; 0000 01A5                 if(!duplicateListClear)
	LDS  R30,_duplicateListClear
	CPI  R30,0
	BRNE _0x5D
; 0000 01A6                 {
; 0000 01A7                     res = TIMER_checkTimerExceed(clear_duplicate_timer);
	__GETD2S 49
	CALL _TIMER_checkTimerExceed
	CALL SUBOPT_0x22
; 0000 01A8                     if(res != 0){
	__GETW1SX 87
	SBIW R30,0
	BREQ _0x5E
; 0000 01A9                         TIMER_setTimer(&clear_duplicate_timer, 10);
	MOVW R30,R28
	ADIW R30,49
	CALL SUBOPT_0x25
; 0000 01AA                         ETH_clearDuplicateRequestCmd();
	CALL _ETH_clearDuplicateRequestCmd
; 0000 01AB                     }
; 0000 01AC 
; 0000 01AD                     sensorDataSave();
_0x5E:
	RCALL _sensorDataSave
; 0000 01AE                     eventSave();
	RCALL _eventSave
; 0000 01AF                 }
; 0000 01B0                 else
	RJMP _0x5F
_0x5D:
; 0000 01B1                 {
; 0000 01B2                     if(TIMER_checkTimerExceed(status_report_timer))
	__GETD2SX 61
	CALL _TIMER_checkTimerExceed
	SBIW R30,0
	BREQ _0x60
; 0000 01B3                     {
; 0000 01B4                         TIMER_setTimer(&status_report_timer, status_config.intv);
	MOVW R30,R28
	ADIW R30,61
	ST   -Y,R31
	ST   -Y,R30
	__GETW2MN _status_config,1
	CLR  R24
	CLR  R25
	CALL _TIMER_setTimer
; 0000 01B5 
; 0000 01B6                         statusReport();
	RCALL _statusReport
; 0000 01B7                     }
; 0000 01B8 
; 0000 01B9                     // -- report log only when no realtime data not ready -- //
; 0000 01BA                     if( (sensorDataReport() == 0) && (eventReport() == 0) && (sdFreeSpace > 0) )
_0x60:
	RCALL _sensorDataReport
	SBIW R30,0
	BRNE _0x62
	RCALL _eventReport
	SBIW R30,0
	BRNE _0x62
	CALL SUBOPT_0x26
	CALL __CPD02
	BRLO _0x63
_0x62:
	RJMP _0x61
_0x63:
; 0000 01BB                     {
; 0000 01BC                         logReport();
	RCALL _logReport
; 0000 01BD                     }
; 0000 01BE                 }
_0x61:
_0x5F:
; 0000 01BF             }
; 0000 01C0             else if(operating_config.mode == MODE_DATALOGGER)   // .. datalogger mode .. //
	RJMP _0x64
_0x5C:
	LDS  R26,_operating_config
	CPI  R26,LOW(0x20)
	BRNE _0x65
; 0000 01C1             {
; 0000 01C2                // printDebug("<main> sensorDataSave()\r\n");
; 0000 01C3                 sensorDataSave();
	RCALL _sensorDataSave
; 0000 01C4               //  printDebug("<main> eventSave()\r\n");
; 0000 01C5                 eventSave();
	RCALL _eventSave
; 0000 01C6             }
; 0000 01C7             else                                                // .. unknown mode .. //
	RJMP _0x66
_0x65:
; 0000 01C8             {
; 0000 01C9                 printDebug("<main> operating mode error!! [0x%02X]\r\n",operating_config.mode);
	__POINTD1FN _0x0,181
	CALL __PUTPARD1
	LDS  R30,_operating_config
	CALL SUBOPT_0x27
; 0000 01CA             }
_0x66:
_0x64:
; 0000 01CB 
; 0000 01CC             #asm("wdr")
	wdr
; 0000 01CD             if(timer_1sec_flag)
	SBIS 0x1E,2
	RJMP _0x67
; 0000 01CE             {
; 0000 01CF               //  printDebug("<main> timer_1sec_flag\r\n");
; 0000 01D0                 if(TIMER_checkTimerExceed(check_memory_timer) && (memoryStatus != ERROR))
	__GETD2S 53
	CALL _TIMER_checkTimerExceed
	SBIW R30,0
	BREQ _0x69
	LDS  R26,_memoryStatus
	CPI  R26,LOW(0x1)
	BRNE _0x6A
_0x69:
	RJMP _0x68
_0x6A:
; 0000 01D1                 {
; 0000 01D2               //      printDebug("<main> Check Memory \r\n");
; 0000 01D3                     TIMER_setTimer(&check_memory_timer, PERIOD_CHECK_MEMORY);
	CALL SUBOPT_0x7
; 0000 01D4 
; 0000 01D5                     res = SD_readMemoryRemain(&sdFreeSpace);
	LDI  R26,LOW(_sdFreeSpace)
	LDI  R27,HIGH(_sdFreeSpace)
	CALL _SD_readMemoryRemain
	CALL SUBOPT_0x22
; 0000 01D6                     if(res < 0){
	__GETB2SX 88
	TST  R26
	BRPL _0x6B
; 0000 01D7                         printDebug("<main> SD_readMemoryRemain() failed\r\n");
	__POINTD1FN _0x0,222
	CALL SUBOPT_0x2
; 0000 01D8                     }
; 0000 01D9                 }
_0x6B:
; 0000 01DA 
; 0000 01DB //                if(currentPage == P_MONITOR)
; 0000 01DC //                {
; 0000 01DD //              //      printDebug("<main> OLED_showSensorValue\r\n");
; 0000 01DE //                    OLED_showSensorValue();
; 0000 01DF //
; 0000 01E0 //                    for(i=0;i<2;i++){
; 0000 01E1 //                        OLED_showInputStatus(i,dinStatus[i]);
; 0000 01E2 //                    }
; 0000 01E3 //
; 0000 01E4 //                    for(i=0;i<2;i++){
; 0000 01E5 //                        OLED_showOutputStatus(i,doutStatus[i]);
; 0000 01E6 //                    }
; 0000 01E7 //
; 0000 01E8 //               //     printDebug("<main> OLED_showDateTime\r\n");
; 0000 01E9 //                    OLED_showDateTime(properties_config.timeZone);
; 0000 01EA //
; 0000 01EB //              //      printDebug("<main> OLED_showAlarmStatus\r\n");
; 0000 01EC //                    OLED_showAlarmStatus();
; 0000 01ED //                }
; 0000 01EE 
; 0000 01EF               //  printDebug("<main> powerSrcStatus\r\n");
; 0000 01F0 //                switch(powerSrcStatus){
; 0000 01F1 //                    case PWR_NORMAL     :   OLED_showPowerStatus(PWR_NORMAL,0);                     break;
; 0000 01F2 //                    case PWR_DOWN       :   OLED_showPowerStatus(PWR_DOWN,batteryVolt);             break;
; 0000 01F3 //                    default             :   break;
; 0000 01F4 //                }
; 0000 01F5 //
; 0000 01F6 //            //    printDebug("<main> serverCommStatus\r\n");
; 0000 01F7 //                switch(serverCommStatus){
; 0000 01F8 //                    case COMM_NORMAL    :   OLED_showServerCommStatus(OLED_SERVER_CONNECT);         break;
; 0000 01F9 //                    case COMM_LOST      :   OLED_showServerCommStatus(OLED_SERVER_DISCONNECT);      break;
; 0000 01FA //                    default             :   OLED_showServerCommStatus(OLED_SERVER_UNKNOWN);         break;
; 0000 01FB //                }
; 0000 01FC //
; 0000 01FD //            //    printDebug("<main> lanStatus\r\n");
; 0000 01FE //                switch(lanStatus){
; 0000 01FF //                    case COMM_LAN_CONNECT       :   OLED_showLanStatus(OLED_LAN_CONNECT);           break;
; 0000 0200 //                    case COMM_LAN_DISCONNECT    :   OLED_showLanStatus(OLED_LAN_DISCONNECT);        break;
; 0000 0201 //                    default                     :   break;
; 0000 0202 //                }
; 0000 0203 //
; 0000 0204 //            //    printDebug("<main> OLED_showBuzzerStatus\r\n");
; 0000 0205 //                if(muteMode){
; 0000 0206 //                    OLED_showBuzzerStatus(OLED_BUZZER_MUTE);
; 0000 0207 //                }
; 0000 0208 //                else if(buzz_config.enable == 0x01){
; 0000 0209 //                    OLED_showBuzzerStatus(OLED_BUZZER_ENABLE);
; 0000 020A //                }
; 0000 020B //                else{
; 0000 020C //                    OLED_showBuzzerStatus(OLED_BUZZER_DISABLE);
; 0000 020D //                }
; 0000 020E //
; 0000 020F //           //     printDebug("<main> memoryStatus\r\n");
; 0000 0210 //                switch(memoryStatus){
; 0000 0211 //                    case MEM_NORMAL         :   OLED_showMemoryStatus(OLED_MEMORY_NORMAL);          break;
; 0000 0212 //                    case MEM_LOW            :   OLED_showMemoryStatus(OLED_MEMORY_LOW);             break;
; 0000 0213 //                    case MEM_ERROR          :   OLED_showMemoryStatus(OLED_MEMORY_ERROR);           break;
; 0000 0214 //                    default                 :   break;
; 0000 0215 //                }
; 0000 0216 
; 0000 0217                 timer_1sec_flag = 0;
_0x68:
	CBI  0x1E,2
; 0000 0218             }
; 0000 0219         } // -- device enable -- //
_0x67:
; 0000 021A         else                                                    // ----- device disable ----- //
	RJMP _0x6E
_0x2C:
; 0000 021B         {
; 0000 021C             // -- no alarm -- // ;-P
; 0000 021D             buzzer_on = 0;                      // -- buzzer off -- //
	CBI  0x1E,3
; 0000 021E             for(k=0;k<USE_DOUT;k++)             // -- MAX_DO_CHANNEL
	__GETWRN 20,21,0
_0x72:
	__CPWRN 20,21,2
	BRGE _0x73
; 0000 021F             {
; 0000 0220                 /*bongkot edit logic*/
; 0000 0221                 IO_dout(k,dout_config[k].stateOnEvent);    // -- Digital Output X OFF -- //
	CALL SUBOPT_0x1
	LD   R26,Z
	CALL _IO_dout
; 0000 0222                 //IO_dout(k,!dout_config[k].stateOnEvent);    // -- Digital Output X OFF -- //
; 0000 0223             }
	__ADDWRN 20,21,1
	RJMP _0x72
_0x73:
; 0000 0224         }
_0x6E:
; 0000 0225 
; 0000 0226         #asm("wdr")
	wdr
; 0000 0227     }
	RJMP _0x10
; 0000 0228 
; 0000 0229 }
_0x74:
	RJMP _0x74
;/*============================================================*/
;
;/**************************************************************/
;/****************** Status & Event Management *****************/
;/**************************************************************/
;/*============================================================*/
;int updateStatus(void)   // -- manipulate function in status.c -- //
; 0000 0231 {
_updateStatus:
; 0000 0232     int                 res=0, i=0, err=0;
; 0000 0233     static TIMER        ETH_rst_timer=0xFFFFFFFF;

	.DSEG

	.CSEG
; 0000 0234 
; 0000 0235     // --------------- Update Sensor's Event --------------- //
; 0000 0236     for(i=0;i<MAX_SENS_CHANNEL;i++)
	CALL SUBOPT_0x28
;	res -> R16,R17
;	i -> R18,R19
;	err -> R20,R21
	__GETWRN 18,19,0
_0x77:
	__CPWRN 18,19,5
	BRGE _0x78
; 0000 0237     {
; 0000 0238         if(operating_config.sensorEnable[i])        // .. sensor enable .. //
	CALL SUBOPT_0x3
	BREQ _0x79
; 0000 0239         {
; 0000 023A             // ----------- Update Probe Status ------------------------- //
; 0000 023B             err =   updateSensorStatus(i);
	MOVW R26,R18
	CALL _updateSensorStatus
	MOVW R20,R30
; 0000 023C             if(err >= 0){
	TST  R21
	BRMI _0x7A
; 0000 023D                 res |=  err;
	__ORWRR 16,17,20,21
; 0000 023E                 if(sensor_config[i].alarmEnable && !err)        // . sensor alarm enable . //
	CALL SUBOPT_0x29
	BREQ _0x7C
	MOV  R0,R20
	OR   R0,R21
	BREQ _0x7D
_0x7C:
	RJMP _0x7B
_0x7D:
; 0000 023F                 {
; 0000 0240                     // ----------- Update Temperature Status ------------------- //
; 0000 0241                     err =   updateDataStatus(i);
	MOVW R26,R18
	CALL _updateDataStatus
	MOVW R20,R30
; 0000 0242                     res |=  err;
	__ORWRR 16,17,20,21
; 0000 0243                 }
; 0000 0244             }
_0x7B:
; 0000 0245         }
_0x7A:
; 0000 0246     }
_0x79:
	__ADDWRN 18,19,1
	RJMP _0x77
_0x78:
; 0000 0247 
; 0000 0248     // --- Update Battery Status --- //
; 0000 0249     err =   updateBatteryStatus();
	CALL _updateBatteryStatus
	MOVW R20,R30
; 0000 024A     res |=  err;
	__ORWRR 16,17,20,21
; 0000 024B     // --- Update Digital Input Status --- //
; 0000 024C     err =   updateDinStatus();
	CALL _updateDinStatus
	MOVW R20,R30
; 0000 024D     res |=  err;
	__ORWRR 16,17,20,21
; 0000 024E     // --- Update Digital Output Status --- //
; 0000 024F     err =   updateDoutStatus();
	CALL _updateDoutStatus
	MOVW R20,R30
; 0000 0250     res |=  err;
	__ORWRR 16,17,20,21
; 0000 0251     // --- Update Analog Input Status --- //
; 0000 0252     // --- Update Communication Status --- //
; 0000 0253     err =   updateCommStatus();
	CALL _updateCommStatus
	MOVW R20,R30
; 0000 0254     if(err){
	MOV  R0,R20
	OR   R0,R21
	BREQ _0x7E
; 0000 0255 
; 0000 0256         if((ETH_rst_timer == 0xFFFFFFFF) || (ETH_rst_timer == 0)){
	CALL SUBOPT_0x2A
	CALL SUBOPT_0x2B
	BREQ _0x80
	CALL SUBOPT_0x2A
	CALL __CPD02
	BRNE _0x7F
_0x80:
; 0000 0257             TIMER_setTimer(&ETH_rst_timer,15);
	LDI  R30,LOW(_ETH_rst_timer_S0000001000)
	LDI  R31,HIGH(_ETH_rst_timer_S0000001000)
	CALL SUBOPT_0x2C
; 0000 0258             printDebug("<updateStatus> ETH_rst_timer time left = %ld(%lX)\r\n",(ETH_rst_timer-baseCounter),(ETH_rst_timer-baseCounter));
	__POINTD1FN _0x0,260
	CALL SUBOPT_0x2D
	CALL SUBOPT_0x2D
	CALL SUBOPT_0x1F
; 0000 0259         }
; 0000 025A 
; 0000 025B         if(TIMER_checkTimerExceed(ETH_rst_timer) == 1){
_0x7F:
	CALL SUBOPT_0x2A
	CALL _TIMER_checkTimerExceed
	CPI  R30,LOW(0x1)
	LDI  R26,HIGH(0x1)
	CPC  R31,R26
	BRNE _0x82
; 0000 025C             ETH_NORM;
	LDS  R30,258
	ANDI R30,0x7F
	STS  258,R30
; 0000 025D             ETH_reset();
	CALL _ETH_reset
; 0000 025E             ETH_rst_timer = 0xFFFFFFFF;
	CALL SUBOPT_0x23
	STS  _ETH_rst_timer_S0000001000,R30
	STS  _ETH_rst_timer_S0000001000+1,R31
	STS  _ETH_rst_timer_S0000001000+2,R22
	STS  _ETH_rst_timer_S0000001000+3,R23
; 0000 025F         }
; 0000 0260     }
_0x82:
; 0000 0261     res |=  err;
_0x7E:
	__ORWRR 16,17,20,21
; 0000 0262     // --- Update Memory Card Status --- //
; 0000 0263     err =   updateMemoryStatus();
	CALL _updateMemoryStatus
	MOVW R20,R30
; 0000 0264     res |=  err;
	__ORWRR 16,17,20,21
; 0000 0265 
; 0000 0266     return res;
	MOVW R30,R16
	CALL __LOADLOCR6
	ADIW R28,6
	RET
; 0000 0267 }
;/*============================================================*/
;int eventCapture(void)
; 0000 026A {
_eventCapture:
; 0000 026B     int                 res=0, i=0, err=0;
; 0000 026C     unsigned long int   timestamp_rd;
; 0000 026D     unsigned char       statusCode;
; 0000 026E 
; 0000 026F     // --------------- Check for Maintenance Event --------------- //
; 0000 0270     err =   checkSendMIPAlarm(&statusCode);
	SBIW R28,5
	CALL SUBOPT_0x28
;	res -> R16,R17
;	i -> R18,R19
;	err -> R20,R21
;	timestamp_rd -> Y+7
;	statusCode -> Y+6
	MOVW R26,R28
	ADIW R26,6
	CALL _checkSendMIPAlarm
	CALL SUBOPT_0x2E
; 0000 0271     res |=  err;
; 0000 0272     if(err){
	BREQ _0x83
; 0000 0273         timestamp_rd    = DS1672_read();
	CALL SUBOPT_0x2F
; 0000 0274         if(statusCode)
	BREQ _0x84
; 0000 0275         {
; 0000 0276             printDebug("\r\n<eventCapture> !!!!!!!!!!! Monitor Mode !!!!!\r\n");
	__POINTD1FN _0x0,312
	RJMP _0x104
; 0000 0277             //printOLED("AL12%1d",i+1);
; 0000 0278         }
; 0000 0279         else
_0x84:
; 0000 027A         {
; 0000 027B             printDebug("\r\n<eventCapture> !!!!!!!!!!! Maintenance In Progress !!!!!\r\n");
	__POINTD1FN _0x0,362
_0x104:
	CALL __PUTPARD1
	CALL SUBOPT_0x30
; 0000 027C             //printOLED("AL02%1d",i+1);
; 0000 027D         }
; 0000 027E         err = addEventQueue(timestamp_rd,EVENT_MTNC,statusCode);
	CALL SUBOPT_0x31
	LDI  R30,LOW(16)
	CALL SUBOPT_0x32
; 0000 027F         if(err < 0){
	BRPL _0x86
; 0000 0280             printDebug("<eventCapture> addEventQueue() failed\r\n");
	CALL SUBOPT_0x33
; 0000 0281         }
; 0000 0282     }
_0x86:
; 0000 0283 
; 0000 0284     /*
; 0000 0285     // -- Analog Input Event -- //
; 0000 0286     // -- reserved -- //
; 0000 0287     */
; 0000 0288     // --------------- Check for Power Down Event --------------- //
; 0000 0289     err =   checkSendPowerAlarm(&statusCode);
_0x83:
	MOVW R26,R28
	ADIW R26,6
	CALL _checkSendPowerAlarm
	CALL SUBOPT_0x2E
; 0000 028A     res |=  err;
; 0000 028B     if(err){
	BREQ _0x87
; 0000 028C         timestamp_rd    = DS1672_read();
	CALL SUBOPT_0x2F
; 0000 028D         if(statusCode)
	BREQ _0x88
; 0000 028E         {
; 0000 028F             printDebug("\r\n<eventCapture> !!!!!!!!!!! Main Power Down !!!!!\r\n");
	__POINTD1FN _0x0,463
	RJMP _0x105
; 0000 0290             //printOLED("AL12%1d",i+1);
; 0000 0291         }
; 0000 0292         else
_0x88:
; 0000 0293         {
; 0000 0294             printDebug("\r\n<eventCapture> !!!!!!!!!!! Main Power Up !!!!!\r\n");
	__POINTD1FN _0x0,516
_0x105:
	CALL __PUTPARD1
	CALL SUBOPT_0x30
; 0000 0295             //printOLED("AL02%1d",i+1);
; 0000 0296         }
; 0000 0297         err = addEventQueue(timestamp_rd,EVENT_PWR,statusCode);
	CALL SUBOPT_0x31
	LDI  R30,LOW(80)
	CALL SUBOPT_0x32
; 0000 0298         if(err < 0){
	BRPL _0x8A
; 0000 0299             printDebug("<eventCapture> addEventQueue() failed\r\n");
	CALL SUBOPT_0x33
; 0000 029A         }
; 0000 029B     }
_0x8A:
; 0000 029C 
; 0000 029D     // --------------- Check for Battery Event --------------- //
; 0000 029E     err =   checkSendBatteryAlarm(&statusCode);
_0x87:
	MOVW R26,R28
	ADIW R26,6
	CALL _checkSendBatteryAlarm
	CALL SUBOPT_0x2E
; 0000 029F     res |=  err;
; 0000 02A0     if(err){
	BREQ _0x8B
; 0000 02A1         timestamp_rd    = DS1672_read();
	CALL SUBOPT_0x2F
; 0000 02A2         if(statusCode)
	BREQ _0x8C
; 0000 02A3         {
; 0000 02A4             printDebug("\r\n<eventCapture> !!!!!!!!!!! Battery Low !!!!!\r\n");
	__POINTD1FN _0x0,567
	RJMP _0x106
; 0000 02A5             //printOLED("AL12%1d",i+1);
; 0000 02A6         }
; 0000 02A7         else
_0x8C:
; 0000 02A8         {
; 0000 02A9             printDebug("\r\n<eventCapture> !!!!!!!!!!! Battery OK !!!!!\r\n");
	__POINTD1FN _0x0,616
_0x106:
	CALL __PUTPARD1
	CALL SUBOPT_0x30
; 0000 02AA             //printOLED("AL02%1d",i+1);
; 0000 02AB         }
; 0000 02AC         err = addEventQueue(timestamp_rd,EVENT_BAT,statusCode);
	CALL SUBOPT_0x31
	LDI  R30,LOW(81)
	CALL SUBOPT_0x32
; 0000 02AD         if(err < 0){
	BRPL _0x8E
; 0000 02AE             printDebug("<eventCapture> addEventQueue() failed\r\n");
	CALL SUBOPT_0x33
; 0000 02AF         }
; 0000 02B0     }
_0x8E:
; 0000 02B1 
; 0000 02B2     // --------------- Check for Memory Event --------------- //
; 0000 02B3     err =   checkSendMemoryAlarm(&statusCode);
_0x8B:
	MOVW R26,R28
	ADIW R26,6
	CALL _checkSendMemoryAlarm
	CALL SUBOPT_0x2E
; 0000 02B4     res |=  err;
; 0000 02B5     if(err){
	BREQ _0x8F
; 0000 02B6         timestamp_rd    = DS1672_read();
	CALL _DS1672_read
	__PUTD1S 7
; 0000 02B7         if(statusCode == ES_LOWMEMORY)
	LDD  R26,Y+6
	CPI  R26,LOW(0x1)
	BRNE _0x90
; 0000 02B8         {
; 0000 02B9             printDebug("\r\n<eventCapture> !!!!!!!!!!! Memory Low !!!!!\r\n");
	__POINTD1FN _0x0,664
	RJMP _0x107
; 0000 02BA             //printOLED("AL12%1d",i+1);
; 0000 02BB         }
; 0000 02BC         else if(statusCode == ES_MEMORYERROR)
_0x90:
	LDD  R26,Y+6
	CPI  R26,LOW(0x2)
	BRNE _0x92
; 0000 02BD         {
; 0000 02BE             printDebug("\r\n<eventCapture> !!!!!!!!!!! Memory Error !!!!!\r\n");
	__POINTD1FN _0x0,712
	RJMP _0x107
; 0000 02BF             //printOLED("AL12%1d",i+1);
; 0000 02C0         }
; 0000 02C1         else
_0x92:
; 0000 02C2         {
; 0000 02C3             printDebug("\r\n<eventCapture> !!!!!!!!!!! Memory OK !!!!!\r\n");
	__POINTD1FN _0x0,762
_0x107:
	CALL __PUTPARD1
	CALL SUBOPT_0x30
; 0000 02C4             //printOLED("AL02%1d",i+1);
; 0000 02C5         }
; 0000 02C6         err = addEventQueue(timestamp_rd,EVENT_MEM,statusCode);
	CALL SUBOPT_0x31
	LDI  R30,LOW(112)
	CALL SUBOPT_0x32
; 0000 02C7         if(err < 0){
	BRPL _0x94
; 0000 02C8             printDebug("<eventCapture> addEventQueue() failed\r\n");
	CALL SUBOPT_0x33
; 0000 02C9         }
; 0000 02CA     }
_0x94:
; 0000 02CB 
; 0000 02CC     // --------------- Check for Digital Input Event --------------- //
; 0000 02CD     for(i=0;i<USE_DIN;i++)
_0x8F:
	__GETWRN 18,19,0
_0x96:
	__CPWRN 18,19,2
	BRGE _0x97
; 0000 02CE     {
; 0000 02CF         if(din_config[i].channelEnable)
	CALL SUBOPT_0x13
	LD   R30,Z
	CPI  R30,0
	BREQ _0x98
; 0000 02D0         {
; 0000 02D1             err =   checkSendDinAlarm(i,&statusCode);
	CALL SUBOPT_0x34
	CALL _checkSendDinAlarm
	CALL SUBOPT_0x2E
; 0000 02D2             res |=  err;
; 0000 02D3             if(err){
	BREQ _0x99
; 0000 02D4                 timestamp_rd    = DS1672_read();
	CALL SUBOPT_0x2F
; 0000 02D5                 if(statusCode)
	BREQ _0x9A
; 0000 02D6                 {
; 0000 02D7                     printDebug("\r\n<eventCapture> !!!!!!!!!!! Din %d Rising !!!!!\r\n", i+1);
	__POINTD1FN _0x0,809
	RJMP _0x108
; 0000 02D8                     //printOLED("AL12%1d",i+1);
; 0000 02D9                 }
; 0000 02DA                 else
_0x9A:
; 0000 02DB                 {
; 0000 02DC                     printDebug("\r\n<eventCapture> !!!!!!!!!!! Din %d Falling !!!!!\r\n", i+1);
	__POINTD1FN _0x0,860
_0x108:
	CALL __PUTPARD1
	CALL SUBOPT_0x35
; 0000 02DD                     //printOLED("AL02%1d",i+1);
; 0000 02DE                 }
; 0000 02DF                 err = addEventQueue(timestamp_rd,EVENT_DIN(i),statusCode);
	CALL SUBOPT_0x31
	MOV  R30,R18
	ORI  R30,LOW(0xC0)
	CALL SUBOPT_0x32
; 0000 02E0                 if(err < 0){
	BRPL _0x9C
; 0000 02E1                     printDebug("<eventCapture> addEventQueue() failed\r\n");
	CALL SUBOPT_0x33
; 0000 02E2                 }
; 0000 02E3             }
_0x9C:
; 0000 02E4         }// -- din channel Enable -- //
_0x99:
; 0000 02E5     }// -- for loop -- //
_0x98:
	__ADDWRN 18,19,1
	RJMP _0x96
_0x97:
; 0000 02E6 
; 0000 02E7     // --------------- Check for Sensor's Event --------------- //
; 0000 02E8     for(i=0;i<MAX_SENS_CHANNEL;i++)
	__GETWRN 18,19,0
_0x9E:
	__CPWRN 18,19,5
	BRLT PC+3
	JMP _0x9F
; 0000 02E9     {
; 0000 02EA         if(operating_config.sensorEnable[i])        // .. sensor enable .. //
	CALL SUBOPT_0x3
	BRNE PC+3
	JMP _0xA0
; 0000 02EB         {
; 0000 02EC             // ----------- Check Probe Alarm ------------------------- //
; 0000 02ED             err =   checkSendSensorAlarm(i,&statusCode);
	CALL SUBOPT_0x34
	CALL _checkSendSensorAlarm
	CALL SUBOPT_0x2E
; 0000 02EE             res |=  err;
; 0000 02EF             if(err){
	BREQ _0xA1
; 0000 02F0                 timestamp_rd    = DS1672_read();
	CALL SUBOPT_0x2F
; 0000 02F1                 if(statusCode)
	BREQ _0xA2
; 0000 02F2                 {
; 0000 02F3                     printDebug("\r\n<eventCapture> !!!!!!!!!!! PROBE %d DISCONNECT !!!!!\r\n", i+1);
	__POINTD1FN _0x0,912
	RJMP _0x109
; 0000 02F4                     //printOLED("AL12%1d",i+1);
; 0000 02F5                 }
; 0000 02F6                 else
_0xA2:
; 0000 02F7                 {
; 0000 02F8                     printDebug("\r\n<eventCapture> !!!!!!!!!!! PROBE %d CONNECT !!!!!\r\n", i+1);
	__POINTD1FN _0x0,969
_0x109:
	CALL __PUTPARD1
	CALL SUBOPT_0x35
; 0000 02F9                     //printOLED("AL02%1d",i+1);
; 0000 02FA                 }
; 0000 02FB 
; 0000 02FC                 err = addEventQueue(timestamp_rd,EVENT_SEN(i),statusCode);
	CALL SUBOPT_0x31
	MOV  R30,R18
	ORI  R30,LOW(0xF0)
	CALL SUBOPT_0x32
; 0000 02FD                 if(err < 0){
	BRPL _0xA4
; 0000 02FE                     printDebug("<eventCapture> addEventQueue() failed\r\n");
	CALL SUBOPT_0x33
; 0000 02FF                 }
; 0000 0300             }// -- check sensor alarm -- //
_0xA4:
; 0000 0301             else
	RJMP _0xA5
_0xA1:
; 0000 0302             {
; 0000 0303                 if(sensor_config[i].alarmEnable)        // . sensor alarm enable . //
	CALL SUBOPT_0x29
	BREQ _0xA6
; 0000 0304                 {
; 0000 0305                     // ----------- Check Temperature Alarm ------------------- //
; 0000 0306                     err =   checkSendDataAlarm(i,&statusCode);
	CALL SUBOPT_0x34
	CALL _checkSendDataAlarm
	CALL SUBOPT_0x2E
; 0000 0307                     res |=  err;
; 0000 0308                     if(err){
	BREQ _0xA7
; 0000 0309                         timestamp_rd    = DS1672_read();
	CALL SUBOPT_0x2F
; 0000 030A                         if(statusCode)
	BREQ _0xA8
; 0000 030B                         {
; 0000 030C                             printDebug("\r\n<eventCapture> !!!!!!!!!!! PROBE %d Temperature ERROR !!!!!\r\n", i+1);
	__POINTD1FN _0x0,1023
	RJMP _0x10A
; 0000 030D                             //printOLED("AL12%1d",i+1);
; 0000 030E                         }
; 0000 030F                         else
_0xA8:
; 0000 0310                         {
; 0000 0311                             printDebug("\r\n<eventCapture> !!!!!!!!!!! PROBE %d Temperature OK !!!!!\r\n", i+1);
	__POINTD1FN _0x0,1087
_0x10A:
	CALL __PUTPARD1
	CALL SUBOPT_0x35
; 0000 0312                             //printOLED("AL02%1d",i+1);
; 0000 0313                         }
; 0000 0314                         err = addEventQueue(timestamp_rd,EVENT_DAT(i),statusCode);
	CALL SUBOPT_0x31
	MOV  R30,R18
	ORI  R30,LOW(0xE0)
	CALL SUBOPT_0x32
; 0000 0315                         if(err < 0){
	BRPL _0xAA
; 0000 0316                             printDebug("<eventCapture> addEventQueue() failed\r\n");
	CALL SUBOPT_0x33
; 0000 0317                         }
; 0000 0318                     }
_0xAA:
; 0000 0319                 }// -- sensor.alarmEnable -- //
_0xA7:
; 0000 031A             }// -- check data alarm -- //
_0xA6:
_0xA5:
; 0000 031B         }// -- sensor Enable -- //
; 0000 031C     }// -- for loop -- //
_0xA0:
	__ADDWRN 18,19,1
	RJMP _0x9E
_0x9F:
; 0000 031D 
; 0000 031E 
; 0000 031F     return res;
	MOVW R30,R16
	CALL __LOADLOCR6
	ADIW R28,11
	RET
; 0000 0320 }
;/*============================================================*/
;
;/**************************************************************/
;/***************** Realtime Report Management *****************/
;/**************************************************************/
;/*============================================================*/
;int statusReport(void)
; 0000 0328 {
_statusReport:
; 0000 0329     int                     res = 0;
; 0000 032A     unsigned long int       timestamp_rd;
; 0000 032B     unsigned char           *param;
; 0000 032C     int                     paramLen = 0;
; 0000 032D 
; 0000 032E     unsigned short          deviceState;
; 0000 032F 
; 0000 0330     switch (status_config.accm)
	SBIW R28,6
	CALL SUBOPT_0x36
;	res -> R16,R17
;	timestamp_rd -> Y+8
;	*param -> R18,R19
;	paramLen -> R20,R21
;	deviceState -> Y+6
	__GETWRN 20,21,0
	LDS  R30,_status_config
	CALL SUBOPT_0x37
; 0000 0331     {
; 0000 0332         case REPORT_SINGLE      :   printDebug("<statusReport> REPORT_SINGLE mode not supported yet\r\n");
	BRNE _0xAE
	__POINTD1FN _0x0,1148
	CALL SUBOPT_0x2
; 0000 0333                                     return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E0087
; 0000 0334         case REPORT_MULTIPLE    :   printDebug("<statusReport> REPORT_MULTIPLE mode not supported yet\r\n");
_0xAE:
	CPI  R30,LOW(0x20)
	LDI  R26,HIGH(0x20)
	CPC  R31,R26
	BRNE _0xAF
	__POINTD1FN _0x0,1202
	CALL SUBOPT_0x2
; 0000 0335                                     return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E0087
; 0000 0336         case REPORT_ALL         :   param = (unsigned char *) malloc(sizeof(char) * 11);
_0xAF:
	CPI  R30,LOW(0x30)
	LDI  R26,HIGH(0x30)
	CPC  R31,R26
	BREQ PC+3
	JMP _0xB3
	CALL SUBOPT_0x38
	CALL _malloc
	MOVW R18,R30
; 0000 0337                                     if(param == NULL){
	MOV  R0,R18
	OR   R0,R19
	BRNE _0xB1
; 0000 0338                                         printDebug("<statusReport> malloc failed (%d bytes)\r\n",paramLen);
	__POINTD1FN _0x0,1258
	CALL SUBOPT_0x39
; 0000 0339                                         return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E0087
; 0000 033A                                     }
; 0000 033B 
; 0000 033C                                     res = getDeviceState(&deviceState);
_0xB1:
	MOVW R26,R28
	ADIW R26,6
	CALL _getDeviceState
	MOVW R16,R30
; 0000 033D                                     if(res<0){
	TST  R17
	BRPL _0xB2
; 0000 033E                                         printDebug("<statusReport> getDeviceState() failed\r\n");
	__POINTD1FN _0x0,1300
	CALL SUBOPT_0x2
; 0000 033F                                         free ( param );
	MOVW R26,R18
	CALL _free
; 0000 0340                                         return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E0087
; 0000 0341                                     }
; 0000 0342 
; 0000 0343                                     param[paramLen++] = (deviceState >> 8) & 0x00FF;
_0xB2:
	CALL SUBOPT_0x3A
	LDD  R30,Y+7
	ANDI R31,HIGH(0x0)
	ST   X,R30
; 0000 0344                                     param[paramLen++] = (deviceState & 0x00FF);
	CALL SUBOPT_0x3A
	LDD  R30,Y+6
	ST   X,R30
; 0000 0345                                     param[paramLen++] = powerSrcStatus;
	CALL SUBOPT_0x3B
	LDS  R26,_powerSrcStatus
	STD  Z+0,R26
; 0000 0346 
; 0000 0347 
; 0000 0348                                     memcpy(&param[paramLen],&batteryVolt,sizeof(batteryVolt));
	MOVW R30,R20
	ADD  R30,R18
	ADC  R31,R19
	ST   -Y,R31
	ST   -Y,R30
	LDI  R30,LOW(_batteryVolt)
	LDI  R31,HIGH(_batteryVolt)
	CALL SUBOPT_0x3C
; 0000 0349                                     paramLen         += sizeof(batteryVolt);
	__ADDWRN 20,21,4
; 0000 034A 
; 0000 034B                                     param[paramLen++] = dinStatus[0];
	CALL SUBOPT_0x3B
	LDS  R26,_dinStatus
	STD  Z+0,R26
; 0000 034C                                     param[paramLen++] = dinStatus[1];
	CALL SUBOPT_0x3B
	__GETB2MN _dinStatus,1
	STD  Z+0,R26
; 0000 034D                                     param[paramLen++] = doutStatus[0];
	CALL SUBOPT_0x3B
	LDS  R26,_doutStatus
	STD  Z+0,R26
; 0000 034E                                     param[paramLen++] = doutStatus[1];
	CALL SUBOPT_0x3B
	__GETB2MN _doutStatus,1
	STD  Z+0,R26
; 0000 034F 
; 0000 0350                                     break;
	RJMP _0xAD
; 0000 0351         default                 :   printDebug("<statusReport> status report accm unknown [0x%02X]\r\n",status_config.accm);
_0xB3:
	__POINTD1FN _0x0,1341
	CALL __PUTPARD1
	LDS  R30,_status_config
	CALL SUBOPT_0x27
; 0000 0352                                     return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E0087
; 0000 0353     }
_0xAD:
; 0000 0354 
; 0000 0355     timestamp_rd = DS1672_read();
	CALL SUBOPT_0x3D
; 0000 0356 
; 0000 0357     res = ETH_sendStatusReportCmd(timestamp_rd,status_config.accm,param,paramLen);
	CALL SUBOPT_0x3E
	CALL __PUTPARD1
	LDS  R30,_status_config
	ST   -Y,R30
	ST   -Y,R19
	ST   -Y,R18
	MOVW R26,R20
	CALL _ETH_sendStatusReportCmd
	MOVW R16,R30
; 0000 0358     if(res < 0)
	TST  R17
	BRPL _0xB4
; 0000 0359     {
; 0000 035A         printDebug("<statusReport> ETH_sendStatusReportCmd() failed\r\n");
	__POINTD1FN _0x0,1394
	CALL SUBOPT_0x2
; 0000 035B     }
; 0000 035C 
; 0000 035D     free ( param );
_0xB4:
	MOVW R26,R18
	CALL _free
; 0000 035E }
_0x20E0087:
	CALL __LOADLOCR6
	ADIW R28,12
	RET
;/*============================================================*/
;int sensorDataReport(void)
; 0000 0361 {
_sensorDataReport:
; 0000 0362     int                     count = 0;
; 0000 0363     int                     res;
; 0000 0364     unsigned long int       timestamp;
; 0000 0365     unsigned int            channel;
; 0000 0366     float                   value;
; 0000 0367 
; 0000 0368     // -- for debug -- //
; 0000 0369     //struct rtc_structure    dt;
; 0000 036A     // --------------- //
; 0000 036B     //printDebug("<sensorDataReport> ------------------------- \r\n");
; 0000 036C 
; 0000 036D     while (count < MAX_DATA_QUEUE)
	SBIW R28,8
	CALL SUBOPT_0x36
;	count -> R16,R17
;	res -> R18,R19
;	timestamp -> Y+10
;	channel -> R20,R21
;	value -> Y+6
_0xB5:
	__CPWRN 16,17,10
	BRLT PC+3
	JMP _0xB7
; 0000 036E     {
; 0000 036F         res = fetchDataQueue(&timestamp, &channel, &value);
	CALL SUBOPT_0x3F
	IN   R30,SPL
	IN   R31,SPH
	SBIW R30,1
	ST   -Y,R31
	ST   -Y,R30
	PUSH R21
	PUSH R20
	MOVW R26,R28
	ADIW R26,10
	CALL _fetchDataQueue
	POP  R20
	POP  R21
	MOVW R18,R30
; 0000 0370         if(res < 0)
	TST  R19
	BRMI _0xB7
; 0000 0371         {
; 0000 0372             break;
; 0000 0373         }
; 0000 0374         else
; 0000 0375         {
; 0000 0376             printDebug("<sensorDataReport> [%ld][%d][%.2f]\r\n",timestamp,channel,value);
	__POINTD1FN _0x0,1444
	CALL SUBOPT_0x40
	MOVW R30,R20
	CALL SUBOPT_0x41
; 0000 0377             /*
; 0000 0378             binary_to_date(timestamp, &dt);
; 0000 0379             printRTC(dt);
; 0000 037A             printDebug("timestamp [%ld]\r\n",   timestamp);
; 0000 037B             printDebug("channel   [%d]\r\n",    channel);
; 0000 037C             printDebug("value     [%.2f]\r\n",  value);
; 0000 037D             */
; 0000 037E 
; 0000 037F             if( (timestamp == 0) || (timestamp == 0xFFFFFFFF) || (channel > (MAX_SENS_CHANNEL-1)) )
	CALL SUBOPT_0x42
	CALL __CPD02
	BREQ _0xBB
	CALL SUBOPT_0x43
	BREQ _0xBB
	__CPWRN 20,21,5
	BRLO _0xBA
_0xBB:
; 0000 0380             {
; 0000 0381                 printDebug("\r\n<sensorDataReport> === ERROR INFOMATION IN TEMP QUEUE ===\r\n");
	__POINTD1FN _0x0,1481
	CALL SUBOPT_0x2
; 0000 0382                 continue;
	RJMP _0xB5
; 0000 0383             }
; 0000 0384 
; 0000 0385 
; 0000 0386             res = ETH_sendDataReportCmd(TYP_RLT,timestamp,channel,value);
_0xBA:
	LDI  R30,LOW(0)
	CALL SUBOPT_0x44
	ST   -Y,R21
	ST   -Y,R20
	CALL SUBOPT_0x45
	MOVW R18,R30
; 0000 0387             if(res < 0)
	TST  R19
	BRPL _0xBD
; 0000 0388             {
; 0000 0389                 printDebug("<sensorDataReport> ETH_sendDataReportCmd() failed\r\n");
	__POINTD1FN _0x0,1543
	CALL SUBOPT_0x2
; 0000 038A                 // --- Keep in Log --- //
; 0000 038B                 continue;
	RJMP _0xB5
; 0000 038C             }
; 0000 038D             count++;
_0xBD:
	__ADDWRN 16,17,1
; 0000 038E         }
; 0000 038F 
; 0000 0390     }
	RJMP _0xB5
_0xB7:
; 0000 0391 
; 0000 0392     return count;
	MOVW R30,R16
	CALL __LOADLOCR6
	ADIW R28,14
	RET
; 0000 0393 }
;/*============================================================*/
;int eventReport(void)
; 0000 0396 {
_eventReport:
; 0000 0397     int                     count = 0;
; 0000 0398     int                     res;
; 0000 0399     unsigned long int       timestamp;
; 0000 039A     unsigned char           eventID;
; 0000 039B     unsigned char           eventStatus;
; 0000 039C 
; 0000 039D     // -- for debug -- //
; 0000 039E     //struct rtc_structure    dt;
; 0000 039F     // --------------- //
; 0000 03A0     //printDebug("<eventReport> ------------------------- \r\n");
; 0000 03A1 
; 0000 03A2     while (count < MAX_EVENT_QUEUE)
	SBIW R28,4
	CALL SUBOPT_0x36
;	count -> R16,R17
;	res -> R18,R19
;	timestamp -> Y+6
;	eventID -> R21
;	eventStatus -> R20
_0xBE:
	__CPWRN 16,17,20
	BRLT PC+3
	JMP _0xC0
; 0000 03A3     {
; 0000 03A4         res = fetchEventQueue(&timestamp, &eventID, &eventStatus);
	CALL SUBOPT_0x46
	IN   R30,SPL
	IN   R31,SPH
	ST   -Y,R31
	ST   -Y,R30
	PUSH R21
	IN   R26,SPL
	IN   R27,SPH
	PUSH R20
	CALL _fetchEventQueue
	POP  R20
	POP  R21
	MOVW R18,R30
; 0000 03A5         if(res < 0)
	TST  R19
	BRMI _0xC0
; 0000 03A6         {
; 0000 03A7             break;
; 0000 03A8         }
; 0000 03A9         else
; 0000 03AA         {
; 0000 03AB 
; 0000 03AC             printDebug("<eventReport> [%ld][0x%02X][0x%02X]\r\n",timestamp,eventID,eventStatus);
	__POINTD1FN _0x0,1595
	CALL SUBOPT_0x47
	CALL SUBOPT_0x48
; 0000 03AD             /*
; 0000 03AE             binary_to_date(timestamp, &dt);
; 0000 03AF             printRTC(dt);
; 0000 03B0             */
; 0000 03B1 
; 0000 03B2             if( (timestamp == 0) || (timestamp == 0xFFFFFFFF) )
	CALL SUBOPT_0x49
	CALL __CPD02
	BREQ _0xC4
	CALL SUBOPT_0x49
	CALL SUBOPT_0x2B
	BRNE _0xC3
_0xC4:
; 0000 03B3             {
; 0000 03B4                 printDebug("\r\n<eventReport> === ERROR INFOMATION IN TEMP QUEUE ===\r\n");
	__POINTD1FN _0x0,1633
	CALL SUBOPT_0x2
; 0000 03B5                 continue;
	RJMP _0xBE
; 0000 03B6             }
; 0000 03B7 
; 0000 03B8 
; 0000 03B9             res = ETH_sendEventReportCmd(TYP_RLT,timestamp,eventID,eventStatus);
_0xC3:
	LDI  R30,LOW(0)
	ST   -Y,R30
	CALL SUBOPT_0x31
	ST   -Y,R21
	MOV  R26,R20
	CALL _ETH_sendEventReportCmd
	MOVW R18,R30
; 0000 03BA             if(res < 0)
	TST  R19
	BRPL _0xC6
; 0000 03BB             {
; 0000 03BC                 printDebug("<eventReport> ETH_sendEventReportCmd() failed\r\n");
	__POINTD1FN _0x0,1690
	CALL SUBOPT_0x2
; 0000 03BD                 // --- Keep in Log --- //
; 0000 03BE                 continue;
	RJMP _0xBE
; 0000 03BF             }
; 0000 03C0             count++;
_0xC6:
	__ADDWRN 16,17,1
; 0000 03C1         }
; 0000 03C2     }
	RJMP _0xBE
_0xC0:
; 0000 03C3 
; 0000 03C4     return count;
	MOVW R30,R16
	CALL __LOADLOCR6
	ADIW R28,10
	RET
; 0000 03C5 }
;/*============================================================*/
;
;/**************************************************************/
;/*********************** Log Management ***********************/
;/**************************************************************/
;/*============================================================*/
;int sensorDataSave(void)
; 0000 03CD {
_sensorDataSave:
; 0000 03CE     FIL                     file;
; 0000 03CF     char                    isFileOpen = 0;
; 0000 03D0     int                     count = 0;
; 0000 03D1     int                     res;
; 0000 03D2     unsigned long int       timestamp;
; 0000 03D3     unsigned int            channel;
; 0000 03D4     float                   value;
; 0000 03D5 
; 0000 03D6 
; 0000 03D7     // -- for debug -- //
; 0000 03D8     //struct rtc_structure    dt;
; 0000 03D9     // --------------- //
; 0000 03DA 
; 0000 03DB     while (count < MAX_DATA_QUEUE)
	SBIW R28,42
	SUBI R29,2
	CALL __SAVELOCR6
;	file -> Y+16
;	isFileOpen -> R17
;	count -> R18,R19
;	res -> R20,R21
;	timestamp -> Y+12
;	channel -> Y+10
;	value -> Y+6
	LDI  R17,0
	__GETWRN 18,19,0
_0xC7:
	__CPWRN 18,19,10
	BRLT PC+3
	JMP _0xC9
; 0000 03DC     {
; 0000 03DD         res = fetchDataQueue(&timestamp, &channel, &value);
	CALL SUBOPT_0x4A
	CALL SUBOPT_0x4A
	MOVW R26,R28
	ADIW R26,10
	CALL _fetchDataQueue
	MOVW R20,R30
; 0000 03DE         if(res < 0)    //queue empty
	TST  R21
	BRPL _0xCA
; 0000 03DF         {
; 0000 03E0             break;
	RJMP _0xC9
; 0000 03E1         }
; 0000 03E2         else          //there are data in queue
_0xCA:
; 0000 03E3         {
; 0000 03E4             printDebug("<sensorDataSave> time[%ld],ch[%d],val[%.2f]\r\n",timestamp,channel,value);
	__POINTD1FN _0x0,1738
	CALL SUBOPT_0x4B
	LDD  R30,Y+18
	LDD  R31,Y+18+1
	CALL SUBOPT_0x41
; 0000 03E5             /*
; 0000 03E6             binary_to_date(timestamp, &dt);
; 0000 03E7             printRTC(dt);
; 0000 03E8             */
; 0000 03E9 
; 0000 03EA             if( (timestamp == 0) || (timestamp == 0xFFFFFFFF) || (channel > (MAX_SENS_CHANNEL-1)) )
	CALL SUBOPT_0x9
	CALL __CPD02
	BREQ _0xCD
	CALL SUBOPT_0x4C
	BREQ _0xCD
	LDD  R26,Y+10
	LDD  R27,Y+10+1
	SBIW R26,5
	BRLO _0xCC
_0xCD:
; 0000 03EB             {
; 0000 03EC                 printDebug("\r\n<sensorDataSave> === ERROR INFOMATION IN TEMP QUEUE ===\r\n");
	__POINTD1FN _0x0,1784
	CALL SUBOPT_0x2
; 0000 03ED                 continue;
	RJMP _0xC7
; 0000 03EE             }
; 0000 03EF 
; 0000 03F0             //if(sdStatus == OK && logStatus == OK)
; 0000 03F1             if(!isFileOpen)
_0xCC:
	CPI  R17,0
	BRNE _0xCF
; 0000 03F2             {
; 0000 03F3                 res = LOG_openFile(&file,LOGFILE_DATA);
	CALL SUBOPT_0x4D
	CALL SUBOPT_0x4E
	MOVW R20,R30
; 0000 03F4                 if(res < 0)
	TST  R21
	BRPL _0xD0
; 0000 03F5                 {
; 0000 03F6                     printDebug("<sensorDataSave> LOG_openFile(%s) failed, couldn't save log\r\n",LOGFILE_DATA);
	__POINTD1FN _0x0,1844
	CALL SUBOPT_0x4F
; 0000 03F7                     continue;
	RJMP _0xC7
; 0000 03F8                 }
; 0000 03F9                 isFileOpen = 1;
_0xD0:
	LDI  R17,LOW(1)
; 0000 03FA             }
; 0000 03FB 
; 0000 03FC             res = LOG_insertData(&file,timestamp,channel,value);
_0xCF:
	CALL SUBOPT_0x4D
	CALL SUBOPT_0x50
	CALL __PUTPARD1
	LDD  R30,Y+16
	LDD  R31,Y+16+1
	ST   -Y,R31
	ST   -Y,R30
	CALL SUBOPT_0x51
	MOVW R20,R30
; 0000 03FD             if(res < 0)
	TST  R21
	BRPL _0xD1
; 0000 03FE             {
; 0000 03FF                 printDebug("<sensorDataSave> LOG_insertData() failed\r\n");
	__POINTD1FN _0x0,1906
	CALL SUBOPT_0x2
; 0000 0400                 continue;
	RJMP _0xC7
; 0000 0401             }
; 0000 0402             count++;
_0xD1:
	__ADDWRN 18,19,1
; 0000 0403         }
; 0000 0404     }
	RJMP _0xC7
_0xC9:
; 0000 0405 
; 0000 0406     if(isFileOpen)
	CPI  R17,0
	BREQ _0xD2
; 0000 0407     {
; 0000 0408         res = LOG_closeFile(&file);
	MOVW R26,R28
	ADIW R26,16
	CALL SUBOPT_0x52
; 0000 0409         if(res < 0)
	BRPL _0xD3
; 0000 040A         {
; 0000 040B             printDebug("<sensorDataSave> LOG_closeFile() failed\r\n");
	__POINTD1FN _0x0,1949
	CALL SUBOPT_0x2
; 0000 040C             return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E0086
; 0000 040D         }
; 0000 040E     }
_0xD3:
; 0000 040F 
; 0000 0410     if(count > 0){
_0xD2:
	CLR  R0
	CP   R0,R18
	CPC  R0,R19
	BRGE _0xD4
; 0000 0411         //isDataLogEmpty  = 0;
; 0000 0412         printDebug("<sensorDataSave> Data Log is not empty\r\n");
	__POINTD1FN _0x0,1991
	CALL SUBOPT_0x2
; 0000 0413     }
; 0000 0414 
; 0000 0415     return count;
_0xD4:
	MOVW R30,R18
_0x20E0086:
	CALL __LOADLOCR6
	ADIW R28,48
	SUBI R29,-2
	RET
; 0000 0416 }
;/*============================================================*/
;int eventSave(void)
; 0000 0419 {
_eventSave:
; 0000 041A     FIL                     file;
; 0000 041B     char                    isFileOpen = 0;
; 0000 041C     int                     count = 0;
; 0000 041D     int                     res;
; 0000 041E     unsigned long int       timestamp;
; 0000 041F     unsigned char           eventID;
; 0000 0420     unsigned char           eventStatus;
; 0000 0421 
; 0000 0422     // -- for debug -- //
; 0000 0423     //struct rtc_structure    dt;
; 0000 0424     // --------------- //
; 0000 0425 
; 0000 0426     while (count < MAX_EVENT_QUEUE)
	SBIW R28,37
	SUBI R29,2
	CALL __SAVELOCR6
;	file -> Y+11
;	isFileOpen -> R17
;	count -> R18,R19
;	res -> R20,R21
;	timestamp -> Y+7
;	eventID -> R16
;	eventStatus -> Y+6
	LDI  R17,0
	__GETWRN 18,19,0
_0xD5:
	__CPWRN 18,19,20
	BRLT PC+3
	JMP _0xD7
; 0000 0427     {
; 0000 0428         res = fetchEventQueue(&timestamp, &eventID, &eventStatus);
	CALL SUBOPT_0x53
	IN   R30,SPL
	IN   R31,SPH
	ST   -Y,R31
	ST   -Y,R30
	PUSH R16
	MOVW R26,R28
	ADIW R26,10
	CALL _fetchEventQueue
	POP  R16
	MOVW R20,R30
; 0000 0429         if(res < 0)
	TST  R21
	BRPL _0xD8
; 0000 042A         {
; 0000 042B             break;
	RJMP _0xD7
; 0000 042C         }
; 0000 042D         else
_0xD8:
; 0000 042E         {
; 0000 042F             printDebug("<eventSave> time[%ld],id[0x%02X],stat[0x%02X]\r\n",timestamp,eventID,eventStatus);
	__POINTD1FN _0x0,2032
	CALL __PUTPARD1
	CALL SUBOPT_0x54
	MOV  R30,R16
	CALL SUBOPT_0x55
	LDD  R30,Y+18
	CALL SUBOPT_0x55
	CALL SUBOPT_0x56
; 0000 0430             /*
; 0000 0431             binary_to_date(timestamp, &dt);
; 0000 0432             printRTC(dt);
; 0000 0433             */
; 0000 0434 
; 0000 0435             if( (timestamp == 0) || (timestamp == 0xFFFFFFFF) )
	CALL SUBOPT_0x57
	CALL __CPD02
	BREQ _0xDB
	CALL SUBOPT_0x57
	CALL SUBOPT_0x2B
	BRNE _0xDA
_0xDB:
; 0000 0436             {
; 0000 0437                 printDebug("\r\n<eventSave> === ERROR INFOMATION IN TEMP QUEUE ===\r\n");
	__POINTD1FN _0x0,2080
	CALL SUBOPT_0x2
; 0000 0438                 continue;
	RJMP _0xD5
; 0000 0439             }
; 0000 043A 
; 0000 043B             //if(sdStatus == OK && logStatus == OK)
; 0000 043C             if(!isFileOpen)
_0xDA:
	CPI  R17,0
	BRNE _0xDD
; 0000 043D             {
; 0000 043E                 res = LOG_openFile(&file,LOGFILE_EVENT);
	CALL SUBOPT_0x58
	CALL SUBOPT_0x59
	MOVW R20,R30
; 0000 043F                 if(res < 0)
	TST  R21
	BRPL _0xDE
; 0000 0440                 {
; 0000 0441                     printDebug("<eventSave> LOG_openFile(%s) failed, couldn't save log\r\n",LOGFILE_EVENT);
	__POINTD1FN _0x0,2135
	CALL SUBOPT_0x5A
; 0000 0442                     continue;
	RJMP _0xD5
; 0000 0443                 }
; 0000 0444                 isFileOpen = 1;
_0xDE:
	LDI  R17,LOW(1)
; 0000 0445             }
; 0000 0446 
; 0000 0447             res = LOG_insertEvent(&file,timestamp,eventID,eventStatus);
_0xDD:
	CALL SUBOPT_0x58
	CALL SUBOPT_0x5B
	CALL __PUTPARD1
	ST   -Y,R16
	LDD  R26,Y+13
	CALL _LOG_insertEvent
	MOVW R20,R30
; 0000 0448             if(res < 0)
	TST  R21
	BRPL _0xDF
; 0000 0449             {
; 0000 044A                 printDebug("<eventSave> LOG_insertEvent() failed\r\n");
	__POINTD1FN _0x0,2192
	CALL SUBOPT_0x2
; 0000 044B                 continue;
	RJMP _0xD5
; 0000 044C             }
; 0000 044D             count++;
_0xDF:
	__ADDWRN 18,19,1
; 0000 044E         }
; 0000 044F     }
	RJMP _0xD5
_0xD7:
; 0000 0450 
; 0000 0451     if(isFileOpen)
	CPI  R17,0
	BREQ _0xE0
; 0000 0452     {
; 0000 0453         res = LOG_closeFile(&file);
	MOVW R26,R28
	ADIW R26,11
	CALL SUBOPT_0x52
; 0000 0454         if(res < 0)
	BRPL _0xE1
; 0000 0455         {
; 0000 0456             printDebug("<eventSave> LOG_closeFile() failed\r\n");
	__POINTD1FN _0x0,2231
	CALL SUBOPT_0x2
; 0000 0457             return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E0085
; 0000 0458         }
; 0000 0459     }
_0xE1:
; 0000 045A 
; 0000 045B     if(count > 0){
_0xE0:
	CLR  R0
	CP   R0,R18
	CPC  R0,R19
	BRGE _0xE2
; 0000 045C         //isEventLogEmpty    = 0;
; 0000 045D         printDebug("<eventSave> Event Log is not empty\r\n");
	__POINTD1FN _0x0,2268
	CALL SUBOPT_0x2
; 0000 045E     }
; 0000 045F 
; 0000 0460     return count;
_0xE2:
	MOVW R30,R18
_0x20E0085:
	CALL __LOADLOCR6
	ADIW R28,43
	SUBI R29,-2
	RET
; 0000 0461 }
;/*============================================================*/
;int logReport(void)
; 0000 0464 {
_logReport:
; 0000 0465     FIL                     file;
; 0000 0466     int                     res;
; 0000 0467     unsigned long int       index;
; 0000 0468     unsigned long int       timestamp;
; 0000 0469     unsigned int            channel;
; 0000 046A     float                   value;
; 0000 046B     unsigned char           id;
; 0000 046C     unsigned char           status;
; 0000 046D 
; 0000 046E     // -- send data log if any exist -- //
; 0000 046F     if((!isDataLogEmpty) && (logDataWait.frameID == 0x00))   // -- if no logDataWaitFrameID, look for some data log to send -- //
	SBIW R28,44
	SUBI R29,2
	CALL __SAVELOCR6
;	file -> Y+18
;	res -> R16,R17
;	index -> Y+14
;	timestamp -> Y+10
;	channel -> R18,R19
;	value -> Y+6
;	id -> R21
;	status -> R20
	LDS  R30,_isDataLogEmpty
	CPI  R30,0
	BRNE _0xE4
	LDS  R26,_logDataWait
	CPI  R26,LOW(0x0)
	BREQ _0xE5
_0xE4:
	RJMP _0xE3
_0xE5:
; 0000 0470     {
; 0000 0471         printDebug("<logReport> Check Data Log Exist\r\n");
	__POINTD1FN _0x0,2305
	CALL SUBOPT_0x2
; 0000 0472         res = LOG_openFile(&file,LOGFILE_DATA);
	CALL SUBOPT_0x5C
	CALL SUBOPT_0x4E
	MOVW R16,R30
; 0000 0473         if(res < 0)
	TST  R17
	BRPL _0xE6
; 0000 0474         {
; 0000 0475             printDebug("<logReport> LOG_openFile(%s) failed\r\n",LOGFILE_DATA);
	__POINTD1FN _0x0,2340
	CALL SUBOPT_0x4F
; 0000 0476         }
; 0000 0477         else
	RJMP _0xE7
_0xE6:
; 0000 0478         {
; 0000 0479             res = LOG_readData(&file,&timestamp,&channel,&value,&index);
	CALL SUBOPT_0x5C
	CALL SUBOPT_0x4A
	IN   R30,SPL
	IN   R31,SPH
	SBIW R30,1
	ST   -Y,R31
	ST   -Y,R30
	PUSH R19
	PUSH R18
	CALL SUBOPT_0x4A
	MOVW R26,R28
	ADIW R26,22
	CALL _LOG_readData
	POP  R18
	POP  R19
	MOVW R16,R30
; 0000 047A             if(res < 0)
	TST  R17
	BRPL _0xE8
; 0000 047B             {
; 0000 047C                 printDebug("<logReport> LOG_readData(%s) failed\r\n",LOGFILE_DATA);
	__POINTD1FN _0x0,2378
	CALL SUBOPT_0x4F
; 0000 047D             }
; 0000 047E             else if(res == 0)
	RJMP _0xE9
_0xE8:
	MOV  R0,R16
	OR   R0,R17
	BRNE _0xEA
; 0000 047F             {
; 0000 0480                 //isDataLogEmpty      = 1;
; 0000 0481                 printDebug("<logReport> LOG_readData() Log empty\r\n");
	__POINTD1FN _0x0,2416
	CALL SUBOPT_0x2
; 0000 0482             }
; 0000 0483             else
	RJMP _0xEB
_0xEA:
; 0000 0484             {
; 0000 0485                 if( (timestamp == 0) || (timestamp == 0xFFFFFFFF) || (channel > (MAX_SENS_CHANNEL-1)) )
	CALL SUBOPT_0x5D
	BREQ _0xED
	CALL SUBOPT_0x43
	BREQ _0xED
	__CPWRN 18,19,5
	BRLO _0xEC
_0xED:
; 0000 0486                 {
; 0000 0487                     printDebug("\r\n<logReport> === ERROR INFOMATION IN %s ===\r\n",LOGFILE_DATA);
	__POINTD1FN _0x0,2455
	CALL SUBOPT_0x4F
; 0000 0488                 }
; 0000 0489                 else
	RJMP _0xEF
_0xEC:
; 0000 048A                 {
; 0000 048B                     printDebug("<logReport> DataLog found time[%ld],ch[%d],val[%.2f]\r\n",timestamp,channel,value);
	__POINTD1FN _0x0,2502
	CALL SUBOPT_0x40
	MOVW R30,R18
	CALL SUBOPT_0x41
; 0000 048C                     res = ETH_sendDataReportCmd(TYP_LOG,timestamp,channel,value);
	LDI  R30,LOW(1)
	CALL SUBOPT_0x44
	ST   -Y,R19
	ST   -Y,R18
	CALL SUBOPT_0x45
	MOVW R16,R30
; 0000 048D                     if(res < 0)
	TST  R17
	BRPL _0xF0
; 0000 048E                     {
; 0000 048F                         logDataWait.frameID    = 0;
	CALL SUBOPT_0x5E
; 0000 0490                         logDataWait.logID      = 0;
; 0000 0491                         printDebug("<logReport> ETH_sendDataReportCmd() failed\r\n");
	__POINTD1FN _0x0,2557
	CALL SUBOPT_0x2
; 0000 0492                     }
; 0000 0493                     else
	RJMP _0xF1
_0xF0:
; 0000 0494                     {
; 0000 0495                         logDataWait.logID       = index;
	CALL SUBOPT_0x50
	__PUTD1MN _logDataWait,1
; 0000 0496                         printDebug("<logReport> DataLog sent frameID[0x%02X] logID[0x%02X]\r\n",logDataWait.frameID,logDataWait.logID);
	__POINTD1FN _0x0,2602
	CALL __PUTPARD1
	LDS  R30,_logDataWait
	CALL SUBOPT_0x55
	CALL SUBOPT_0x5F
	CALL SUBOPT_0x1F
; 0000 0497                     }
_0xF1:
; 0000 0498                 }
_0xEF:
; 0000 0499             }
_0xEB:
_0xE9:
; 0000 049A 
; 0000 049B             res = LOG_closeFile(&file);
	CALL SUBOPT_0x60
; 0000 049C             if(res < 0)
	BRPL _0xF2
; 0000 049D             {
; 0000 049E                 printDebug("<logReport> LOG_closeFile() failed\r\n");
	__POINTD1FN _0x0,2659
	CALL SUBOPT_0x2
; 0000 049F             }
; 0000 04A0         }
_0xF2:
_0xE7:
; 0000 04A1     }
; 0000 04A2 
; 0000 04A3     // -- send event log if any exist -- //
; 0000 04A4     if((!isEventLogEmpty) && (logEventWait.frameID == 0x00))  // -- if no logEventWaitFrameID, look for some event log to send -- //
_0xE3:
	LDS  R30,_isEventLogEmpty
	CPI  R30,0
	BRNE _0xF4
	LDS  R26,_logEventWait
	CPI  R26,LOW(0x0)
	BREQ _0xF5
_0xF4:
	RJMP _0xF3
_0xF5:
; 0000 04A5     {
; 0000 04A6         printDebug("<logReport> Check Event Log Exist\r\n");
	__POINTD1FN _0x0,2696
	CALL SUBOPT_0x2
; 0000 04A7         res = LOG_openFile(&file,LOGFILE_EVENT);
	CALL SUBOPT_0x5C
	CALL SUBOPT_0x59
	MOVW R16,R30
; 0000 04A8         if(res < 0)
	TST  R17
	BRPL _0xF6
; 0000 04A9         {
; 0000 04AA             printDebug("<logReport> LOG_openFile(%s) failed\r\n",LOGFILE_EVENT);
	__POINTD1FN _0x0,2340
	RJMP _0x10B
; 0000 04AB         }
; 0000 04AC         else
_0xF6:
; 0000 04AD         {
; 0000 04AE             res = LOG_readEvent(&file,&timestamp,&id,&status,&index);
	CALL SUBOPT_0x5C
	CALL SUBOPT_0x4A
	IN   R30,SPL
	IN   R31,SPH
	ST   -Y,R31
	ST   -Y,R30
	PUSH R21
	IN   R30,SPL
	IN   R31,SPH
	ST   -Y,R31
	ST   -Y,R30
	PUSH R20
	MOVW R26,R28
	ADIW R26,22
	CALL _LOG_readEvent
	POP  R20
	POP  R21
	MOVW R16,R30
; 0000 04AF             if(res < 0)
	TST  R17
	BRPL _0xF8
; 0000 04B0             {
; 0000 04B1                 printDebug("<logReport> LOG_readEvent() failed\r\n");
	__POINTD1FN _0x0,2732
	CALL SUBOPT_0x2
; 0000 04B2             }
; 0000 04B3             else if(res == 0)
	RJMP _0xF9
_0xF8:
	MOV  R0,R16
	OR   R0,R17
	BRNE _0xFA
; 0000 04B4             {
; 0000 04B5                 //isEventLogEmpty     = 1;
; 0000 04B6                 printDebug("<logReport> LOG_readEvent() Log empty\r\n");
	__POINTD1FN _0x0,2769
	CALL SUBOPT_0x2
; 0000 04B7             }
; 0000 04B8             else
	RJMP _0xFB
_0xFA:
; 0000 04B9             {
; 0000 04BA                 if( (timestamp == 0) || (timestamp == 0xFFFFFFFF) )
	CALL SUBOPT_0x5D
	BREQ _0xFD
	CALL SUBOPT_0x43
	BRNE _0xFC
_0xFD:
; 0000 04BB                 {
; 0000 04BC                     printDebug("\r\n<logReport> === ERROR INFOMATION IN %s ===\r\n",LOGFILE_EVENT);
	__POINTD1FN _0x0,2455
	CALL SUBOPT_0x5A
; 0000 04BD                 }
; 0000 04BE                 else
	RJMP _0xFF
_0xFC:
; 0000 04BF                 {
; 0000 04C0                     printDebug("<logReport> EventLog found time[%ld],id[0x%02X],stat[0x%02X]\r\n",timestamp,id,status);
	__POINTD1FN _0x0,2809
	CALL SUBOPT_0x40
	CALL SUBOPT_0x48
; 0000 04C1                     res = ETH_sendEventReportCmd(TYP_LOG,timestamp,id,status);
	LDI  R30,LOW(1)
	CALL SUBOPT_0x44
	ST   -Y,R21
	MOV  R26,R20
	CALL _ETH_sendEventReportCmd
	MOVW R16,R30
; 0000 04C2                     if(res < 0)
	TST  R17
	BRPL _0x100
; 0000 04C3                     {
; 0000 04C4                         logEventWait.frameID    = 0;
	CALL SUBOPT_0x61
; 0000 04C5                         logEventWait.logID      = 0;
; 0000 04C6                         printDebug("<logReport> ETH_sendEventReportCmd() failed\r\n");
	__POINTD1FN _0x0,2872
	CALL SUBOPT_0x2
; 0000 04C7                     }
; 0000 04C8                     else
	RJMP _0x101
_0x100:
; 0000 04C9                     {
; 0000 04CA                         logEventWait.logID      = index;
	CALL SUBOPT_0x50
	__PUTD1MN _logEventWait,1
; 0000 04CB                         printDebug("<logReport> EventLog sent frameID[0x%02X] logID[0x%02X]\r\n",logEventWait.frameID,logEventWait.logID);
	__POINTD1FN _0x0,2918
	CALL __PUTPARD1
	LDS  R30,_logEventWait
	CALL SUBOPT_0x55
	CALL SUBOPT_0x62
	CALL SUBOPT_0x1F
; 0000 04CC                     }
_0x101:
; 0000 04CD                 }
_0xFF:
; 0000 04CE             }
_0xFB:
_0xF9:
; 0000 04CF 
; 0000 04D0             res = LOG_closeFile(&file);
	CALL SUBOPT_0x60
; 0000 04D1             if(res < 0)
	BRPL _0x102
; 0000 04D2             {
; 0000 04D3                 printDebug("<logReport> LOG_closeFile(%s) failed\r\n",LOGFILE_EVENT);
	__POINTD1FN _0x0,2976
_0x10B:
	CALL __PUTPARD1
	CALL SUBOPT_0x63
	CALL SUBOPT_0x10
; 0000 04D4             }
; 0000 04D5         }
_0x102:
; 0000 04D6     }
; 0000 04D7 
; 0000 04D8     return 0;
_0xF3:
	CALL SUBOPT_0x64
	ADIW R28,50
	SUBI R29,-2
	RET
; 0000 04D9 }
;/*============================================================*/
;#include <delay.h>
;#include <stdlib.h>
;#include <i2c.h>
;#include "initial_sys.h"
;#include "uart.h"
;#include "timer.h"
	#ifndef __SLEEP_DEFINED__
	#define __SLEEP_DEFINED__
	.EQU __se_bit=0x01
	.EQU __sm_mask=0x0E
	.EQU __sm_powerdown=0x04
	.EQU __sm_powersave=0x06
	.EQU __sm_standby=0x0C
	.EQU __sm_ext_standby=0x0E
	.EQU __sm_adc_noise_red=0x02
	.SET power_ctrl_reg=smcr
	#endif
;#include "io.h"
;#include "ds1672.h"
;#include "config.h"
;#include "oled.h"
;#include "adc.h"
;#include "debug.h"
;#include "log.h"
;#include "sdcard.h"
;
;/*============================================================*/
;int initial_system(void)
; 0001 0012 {

	.CSEG
_initial_system:
; 0001 0013     int res=0;
; 0001 0014 
; 0001 0015     // Crystal Oscillator division factor: 1
; 0001 0016     #pragma optsize-
; 0001 0017     CLKPR=0x80;
	ST   -Y,R17
	ST   -Y,R16
;	res -> R16,R17
	__GETWRN 16,17,0
	LDI  R30,LOW(128)
	STS  97,R30
; 0001 0018     CLKPR=0x00;
	LDI  R30,LOW(0)
	STS  97,R30
; 0001 0019     #ifdef _OPTIMIZE_SIZE_
; 0001 001A     #pragma optsize+
; 0001 001B     #endif
; 0001 001C 
; 0001 001D     init_uart();
	CALL _init_uart
; 0001 001E 
; 0001 001F     if(MCUSR & (1<<PORF)){
	IN   R30,0x34
	SBRS R30,0
	RJMP _0x20003
; 0001 0020         printDebug("\r\nPower-on Reset\r\n");
	__POINTD1FN _0x20000,0
	CALL SUBOPT_0x2
; 0001 0021         MCUSR &= ~(1<<PORF);
	IN   R30,0x34
	ANDI R30,0xFE
	OUT  0x34,R30
; 0001 0022     }
; 0001 0023     if(MCUSR & (1<<EXTRF)){
_0x20003:
	IN   R30,0x34
	SBRS R30,1
	RJMP _0x20004
; 0001 0024         printDebug("\r\nExternal Reset\r\n");
	__POINTD1FN _0x20000,19
	CALL SUBOPT_0x2
; 0001 0025         MCUSR &= ~(1<<EXTRF);
	IN   R30,0x34
	ANDI R30,0xFD
	OUT  0x34,R30
; 0001 0026     }
; 0001 0027     if(MCUSR & (1<<BORF)){
_0x20004:
	IN   R30,0x34
	SBRS R30,2
	RJMP _0x20005
; 0001 0028         printDebug("\r\nBrown-out Reset\r\n");
	__POINTD1FN _0x20000,38
	CALL SUBOPT_0x2
; 0001 0029         MCUSR &= ~(1<<BORF);
	IN   R30,0x34
	ANDI R30,0xFB
	OUT  0x34,R30
; 0001 002A     }
; 0001 002B     if(MCUSR & (1<<WDRF)){
_0x20005:
	IN   R30,0x34
	SBRS R30,3
	RJMP _0x20006
; 0001 002C         printDebug("\r\nWatchdog Reset\r\n");
	__POINTD1FN _0x20000,58
	CALL SUBOPT_0x2
; 0001 002D         MCUSR &= ~(1<<WDRF);
	IN   R30,0x34
	ANDI R30,0XF7
	OUT  0x34,R30
; 0001 002E     }
; 0001 002F     if(MCUSR & (1<<JTRF)){
_0x20006:
	IN   R30,0x34
	SBRS R30,4
	RJMP _0x20007
; 0001 0030         printDebug("\r\nJTAG Reset\r\n");
	__POINTD1FN _0x20000,77
	CALL SUBOPT_0x2
; 0001 0031         MCUSR &= ~(1<<JTRF);
	IN   R30,0x34
	ANDI R30,0xEF
	OUT  0x34,R30
; 0001 0032     }
; 0001 0033 
; 0001 0034     // -------- Peripheral Initialize ----------- //
; 0001 0035     init_io();
_0x20007:
	CALL _init_io
; 0001 0036     init_i2c();
	RCALL _init_i2c
; 0001 0037     init_spi();
	RCALL _init_spi
; 0001 0038     init_adc();
	CALL _init_adc
; 0001 0039     init_timer();
	CALL _init_timer
; 0001 003A     init_common();
	RCALL _init_common
; 0001 003B 
; 0001 003C     enable_interrupt(2);
	CALL SUBOPT_0x65
	CALL _enable_interrupt
; 0001 003D 
; 0001 003E     delay_ms(500);
	LDI  R26,LOW(500)
	LDI  R27,HIGH(500)
	CALL _delay_ms
; 0001 003F 
; 0001 0040     // -------- Module Initialize ----------- //
; 0001 0041     BUZZER = 0;                 // BUZZER Off.
	CBI  0xE,7
; 0001 0042     init_RTC();         delay_ms(100);
	CALL _init_RTC
	CALL SUBOPT_0x66
; 0001 0043     init_oled();        delay_ms(100);
	CALL _init_oled
	CALL SUBOPT_0x66
; 0001 0044     adc_init_read();            //getting first ADC to initial
	CALL _adc_init_read
; 0001 0045 
; 0001 0046     enable_interrupt(1);        // -- adc_sampling
	CALL SUBOPT_0x67
	CALL _enable_interrupt
; 0001 0047     enable_interrupt(3);        // -- 1 sec timer
	CALL SUBOPT_0x68
	CALL _enable_interrupt
; 0001 0048     enable_interrupt(4);        // -- 0.5 sec timer
	CALL SUBOPT_0x69
	CALL _enable_interrupt
; 0001 0049 
; 0001 004A     getAllConfig();
	CALL _getAllConfig
; 0001 004B     // -- Initialize Complete -- //
; 0001 004C     /*bongkot*/
; 0001 004D     //playBeep();
; 0001 004E     showLedInitComplete();
	RCALL _showLedInitComplete
; 0001 004F     showDebugInitComplete();
	RCALL _showDebugInitComplete
; 0001 0050 
; 0001 0051     if(SD_init() == 0)
	CALL _SD_init
	SBIW R30,0
	BRNE _0x2000A
; 0001 0052     {
; 0001 0053         if(LOG_init() < 0)
	CALL _LOG_init
	TST  R31
	BRPL _0x2000B
; 0001 0054         {
; 0001 0055             // -- log status = error -- //
; 0001 0056             printDebug("<initial_system> LOG_init() failed\r\n");
	__POINTD1FN _0x20000,92
	CALL SUBOPT_0x2
; 0001 0057         }
; 0001 0058 
; 0001 0059         // -- log status = ok -- //
; 0001 005A     }
_0x2000B:
; 0001 005B     else
	RJMP _0x2000C
_0x2000A:
; 0001 005C     {
; 0001 005D         // -- sd status = error -- //
; 0001 005E         printDebug("<initial_system> SD_init() failed\r\n");
	__POINTD1FN _0x20000,129
	CALL SUBOPT_0x2
; 0001 005F     }
_0x2000C:
; 0001 0060 
; 0001 0061     srand((unsigned int)raw_rtc + (unsigned int)(read_adc(8) * 13));        // set random seed
	LDI  R26,LOW(8)
	CALL _read_adc
	LDI  R26,LOW(13)
	LDI  R27,HIGH(13)
	CALL __MULW12U
	LDS  R26,_raw_rtc
	LDS  R27,_raw_rtc+1
	ADD  R26,R30
	ADC  R27,R31
	CALL _srand
; 0001 0062 
; 0001 0063     // -------- Configuration Initialize ----------- //
; 0001 0064 //    readConfig();
; 0001 0065 //    initAlarm();        //delay_ms(100);
; 0001 0066 //
; 0001 0067 //    if(init_logfile() < 0){
; 0001 0068 //        printDebug("init_logdata() failed\r\n");
; 0001 0069 //        return -1;
; 0001 006A //    }
; 0001 006B 
; 0001 006C 
; 0001 006D     return res;
	MOVW R30,R16
	JMP  _0x20E0080
; 0001 006E }
;/*============================================================*/
;void init_i2c(void)
; 0001 0071 {
_init_i2c:
; 0001 0072     // I2C Bus initialization
; 0001 0073     i2c_init();
	CALL _i2c_init
; 0001 0074 }
	RET
;/*============================================================*/
;void init_spi(void)
; 0001 0077 {
_init_spi:
; 0001 0078     // SPI initialization
; 0001 0079     // SPI Type: Master
; 0001 007A     // SPI Clock Rate: 2000.000 kHz
; 0001 007B     // SPI Clock Phase: Cycle Start
; 0001 007C     // SPI Clock Polarity: Low
; 0001 007D     // SPI Data Order: MSB First
; 0001 007E     SPCR=0x50;
	LDI  R30,LOW(80)
	OUT  0x2C,R30
; 0001 007F     SPSR=0x00;
	LDI  R30,LOW(0)
	OUT  0x2D,R30
; 0001 0080 }
	RET
;/*============================================================*/
;void init_common(void)
; 0001 0083 {
_init_common:
; 0001 0084     // External Interrupt(s) initialization
; 0001 0085     // INT0: Off, INT1: Off, INT2: Off, INT3: Off, INT4: Off, INT5: Off, INT6: Off, INT7: Off
; 0001 0086     EICRA=0x00;
	LDI  R30,LOW(0)
	STS  105,R30
; 0001 0087     EICRB=0x00;
	STS  106,R30
; 0001 0088     EIMSK=0x00;
	OUT  0x1D,R30
; 0001 0089 
; 0001 008A     PCMSK0=0x00;
	STS  107,R30
; 0001 008B     PCMSK1=0x00;
	STS  108,R30
; 0001 008C     PCMSK2=0x00;
	STS  109,R30
; 0001 008D     PCICR=0x00;
	STS  104,R30
; 0001 008E 
; 0001 008F     // Analog Comparator initialization
; 0001 0090     // Analog Comparator: Off
; 0001 0091     // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0001 0092     ACSR=0x80;
	LDI  R30,LOW(128)
	OUT  0x30,R30
; 0001 0093     ADCSRB=0x00;
	LDI  R30,LOW(0)
	STS  123,R30
; 0001 0094     DIDR1=0x00;
	STS  127,R30
; 0001 0095 
; 0001 0096     // TWI initialization
; 0001 0097     // TWI disabled
; 0001 0098     TWCR=0x00;
	STS  188,R30
; 0001 0099 }
	RET
;/*============================================================*/
;void playBeep(void)
; 0001 009C {
; 0001 009D     BUZZER = 1;                                     // Buzzer ON Starting
; 0001 009E     delay_ms(200);
; 0001 009F     BUZZER = 0;
; 0001 00A0 }
;/*============================================================*/
;void showDebugInitComplete(void)
; 0001 00A3 {
_showDebugInitComplete:
; 0001 00A4     struct rtc_structure time;
; 0001 00A5     struct prop_cnfg_st properties_config;
; 0001 00A6 
; 0001 00A7     printDebug("Initial Device Completed at - ");
	SBIW R28,63
	SBIW R28,63
	SBIW R28,61
;	time -> Y+161
;	properties_config -> Y+0
	__POINTD1FN _0x20000,165
	CALL SUBOPT_0x2
; 0001 00A8     RTC_getDateTime(&time,properties_config.timeZone);
	MOVW R30,R28
	SUBI R30,LOW(-(161))
	SBCI R31,HIGH(-(161))
	ST   -Y,R31
	ST   -Y,R30
	MOVW R26,R28
	SUBI R26,LOW(-162)
	SBCI R27,HIGH(-162)
	LD   R30,X
	LDI  R31,0
	SBRC R30,7
	SER  R31
	MOVW R26,R30
	CALL _RTC_getDateTime
; 0001 00A9     printDebug("%04d-%02d-%02d %02d:%02d:%02d\r\n",
; 0001 00AA             time.year,time.month,time.date,time.hour,time.min,time.sec);
	__POINTD1FN _0x20000,196
	CALL __PUTPARD1
	__GETD1SX 165
	CALL __PUTPARD1
	MOVW R30,R28
	SUBI R30,LOW(-(169))
	SBCI R31,HIGH(-(169))
	ADIW R30,4
	CALL SUBOPT_0x6A
	MOVW R30,R28
	SUBI R30,LOW(-(173))
	SBCI R31,HIGH(-(173))
	ADIW R30,8
	CALL SUBOPT_0x6A
	MOVW R30,R28
	SUBI R30,LOW(-(177))
	SBCI R31,HIGH(-(177))
	ADIW R30,12
	CALL SUBOPT_0x6A
	MOVW R30,R28
	SUBI R30,LOW(-(181))
	SBCI R31,HIGH(-(181))
	ADIW R30,16
	CALL SUBOPT_0x6A
	MOVW R30,R28
	SUBI R30,LOW(-(185))
	SBCI R31,HIGH(-(185))
	ADIW R30,20
	CALL SUBOPT_0x6A
	LDI  R24,24
	CALL _printDebug
	ADIW R28,28
; 0001 00AB }
	ADIW R28,63
	ADIW R28,63
	ADIW R28,61
	RET
;/*============================================================*/
;void showLedInitComplete(void)
; 0001 00AE {
_showLedInitComplete:
; 0001 00AF     LED_ON(BIT_LED_ALARM);
	LDS  R30,258
	ANDI R30,0xBF
	CALL SUBOPT_0x6B
; 0001 00B0     delay_ms(200);
; 0001 00B1 
; 0001 00B2     LED_ON(BIT_LED_LINK);
	ANDI R30,0xDF
	CALL SUBOPT_0x6B
; 0001 00B3     delay_ms(200);
; 0001 00B4 
; 0001 00B5     LED_ON(BIT_LED_TEMP);
	ANDI R30,0xEF
	CALL SUBOPT_0x6B
; 0001 00B6     delay_ms(200);
; 0001 00B7 
; 0001 00B8     LED_ON(BIT_LED_PWR);
	ANDI R30,0XF7
	CALL SUBOPT_0x6B
; 0001 00B9     delay_ms(200);
; 0001 00BA 
; 0001 00BB     LED_OFF(BIT_LED_PWR|BIT_LED_TEMP|BIT_LED_LINK|BIT_LED_ALARM);
	ORI  R30,LOW(0x78)
	CALL SUBOPT_0x6B
; 0001 00BC     delay_ms(200);
; 0001 00BD 
; 0001 00BE     LED_ON(BIT_LED_PWR);
	ANDI R30,0XF7
	STS  258,R30
; 0001 00BF     delay_ms(50);
	CALL SUBOPT_0x6C
	CALL _delay_ms
; 0001 00C0 }
	RET
;/*============================================================*/
;
;#include <mega2560.h>
	#ifndef __SLEEP_DEFINED__
	#define __SLEEP_DEFINED__
	.EQU __se_bit=0x01
	.EQU __sm_mask=0x0E
	.EQU __sm_powerdown=0x04
	.EQU __sm_powersave=0x06
	.EQU __sm_standby=0x0C
	.EQU __sm_ext_standby=0x0E
	.EQU __sm_adc_noise_red=0x02
	.SET power_ctrl_reg=smcr
	#endif
;#include <stdio.h>
;#include <string.h>
;#include <ctype.h>
;#include <delay.h>
;#include "uart.h"
;#include "io.h"
;#include "ethcomm.h"
;
;/*============================================================*/
;char flag_PackageTerminate3 = 0;
;
;flash unsigned char charHeader = '$';
;flash unsigned char charTerminate = '#';
;
;bit                 flag_oled_ack      = 0;
;
;unsigned char       rxPackageIndex3;
;unsigned char       rxPackage3[64];
;unsigned char       rxPackageIndexCount3;
;/*============================================================*/
;// USART0 Receiver buffer
;char rx_buffer0[RX_BUFFER_SIZE0];
;
;unsigned int rx_wr_index0,rx_rd_index0,rx_counter0;
;
;// This flag is set on USART0 Receiver buffer overflow
;bit rx_buffer_overflow0;
;
;unsigned char       configRd[CONF_READ_BUFFER];      // for reading config
;int                 configLen=0;
;
;char                config_start    = 0;
;char                config_ready    = 0;    // 1 = failed, 2 = success
;char                config_end      = 0;
;char                config_response = 0;
;
;// USART0 Receiver interrupt service routine
;interrupt [USART0_RXC] void usart0_rx_isr(void)
; 0002 0028 {

	.CSEG
_usart0_rx_isr:
	CALL SUBOPT_0x6D
; 0002 0029     char status,data;
; 0002 002A     status=UCSR0A;
;	status -> R17
;	data -> R16
	LDS  R17,192
; 0002 002B     data=UDR0;
	LDS  R16,198
; 0002 002C 
; 0002 002D     if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
	MOV  R30,R17
	ANDI R30,LOW(0x1C)
	BREQ PC+3
	JMP _0x40003
; 0002 002E     {
; 0002 002F         if(ETH_current_mode != MODE_CONF)
	LDS  R30,_ETH_current_mode
	CPI  R30,0
	BREQ _0x40004
; 0002 0030         {
; 0002 0031             //putchar3(data);
; 0002 0032             rx_buffer0[rx_wr_index0++]  =   data;
	LDI  R26,LOW(_rx_wr_index0)
	LDI  R27,HIGH(_rx_wr_index0)
	CALL SUBOPT_0x6E
	SBIW R30,1
	SUBI R30,LOW(-_rx_buffer0)
	SBCI R31,HIGH(-_rx_buffer0)
	ST   Z,R16
; 0002 0033 
; 0002 0034             if (rx_wr_index0 == RX_BUFFER_SIZE0)
	LDS  R26,_rx_wr_index0
	LDS  R27,_rx_wr_index0+1
	CPI  R26,LOW(0x1F4)
	LDI  R30,HIGH(0x1F4)
	CPC  R27,R30
	BRNE _0x40005
; 0002 0035             {
; 0002 0036                 rx_wr_index0=0;
	LDI  R30,LOW(0)
	STS  _rx_wr_index0,R30
	STS  _rx_wr_index0+1,R30
; 0002 0037             }
; 0002 0038             if (++rx_counter0 == RX_BUFFER_SIZE0)
_0x40005:
	LDI  R26,LOW(_rx_counter0)
	LDI  R27,HIGH(_rx_counter0)
	CALL SUBOPT_0x6E
	CPI  R30,LOW(0x1F4)
	LDI  R26,HIGH(0x1F4)
	CPC  R31,R26
	BRNE _0x40006
; 0002 0039             {
; 0002 003A                 rx_counter0=0;
	LDI  R30,LOW(0)
	STS  _rx_counter0,R30
	STS  _rx_counter0+1,R30
; 0002 003B                 rx_buffer_overflow0=1;
	SBI  0x1E,1
; 0002 003C                 send_uart(3,"\r\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n" );
	LDI  R30,LOW(3)
	ST   -Y,R30
	__POINTW2MN _0x40009,0
	RCALL _send_uart
; 0002 003D                 send_uart(3,    "!!!!!!! Eth Buffer Overflow !!!!!!!!!"     );
	LDI  R30,LOW(3)
	ST   -Y,R30
	__POINTW2MN _0x40009,43
	RCALL _send_uart
; 0002 003E                 send_uart(3,"\r\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n" );
	LDI  R30,LOW(3)
	ST   -Y,R30
	__POINTW2MN _0x40009,81
	RCALL _send_uart
; 0002 003F             }
; 0002 0040         }
_0x40006:
; 0002 0041         else{
	RJMP _0x4000A
_0x40004:
; 0002 0042             putchar3(data);
	MOV  R26,R16
	RCALL _putchar3
; 0002 0043 
; 0002 0044             if (configLen == CONF_READ_BUFFER)
	LDS  R26,_configLen
	LDS  R27,_configLen+1
	CPI  R26,LOW(0x145)
	LDI  R30,HIGH(0x145)
	CPC  R27,R30
	BRNE _0x4000B
; 0002 0045             {
; 0002 0046                 configLen=0;
	LDI  R30,LOW(0)
	STS  _configLen,R30
	STS  _configLen+1,R30
; 0002 0047             }
; 0002 0048 
; 0002 0049             if((data == '<') && (config_start == 0)){
_0x4000B:
	CPI  R16,60
	BRNE _0x4000D
	LDS  R26,_config_start
	CPI  R26,LOW(0x0)
	BREQ _0x4000E
_0x4000D:
	RJMP _0x4000C
_0x4000E:
; 0002 004A                 config_start            = 1;
	LDI  R30,LOW(1)
	STS  _config_start,R30
; 0002 004B                 config_response         = 0;
	LDI  R30,LOW(0)
	STS  _config_response,R30
; 0002 004C                 config_ready            = 0;
	STS  _config_ready,R30
; 0002 004D             }
; 0002 004E             else if((data == 0x0D) && (config_end == 0) && (config_start == 1) && (config_response != 0)){
	RJMP _0x4000F
_0x4000C:
	CPI  R16,13
	BRNE _0x40011
	LDS  R26,_config_end
	CPI  R26,LOW(0x0)
	BRNE _0x40011
	LDS  R26,_config_start
	CPI  R26,LOW(0x1)
	BRNE _0x40011
	LDS  R26,_config_response
	CPI  R26,LOW(0x0)
	BRNE _0x40012
_0x40011:
	RJMP _0x40010
_0x40012:
; 0002 004F                 config_end  = 0x0D;
	LDI  R30,LOW(13)
	STS  _config_end,R30
; 0002 0050             }
; 0002 0051             else if((data == 0x0A) && (config_end == 0x0D) && (config_start == 1) && (config_response != 0)){
	RJMP _0x40013
_0x40010:
	CPI  R16,10
	BRNE _0x40015
	LDS  R26,_config_end
	CPI  R26,LOW(0xD)
	BRNE _0x40015
	LDS  R26,_config_start
	CPI  R26,LOW(0x1)
	BRNE _0x40015
	LDS  R26,_config_response
	CPI  R26,LOW(0x0)
	BRNE _0x40016
_0x40015:
	RJMP _0x40014
_0x40016:
; 0002 0052                 config_end              = 0x0A;
	LDI  R30,LOW(10)
	STS  _config_end,R30
; 0002 0053                 config_ready            = 1;
	LDI  R30,LOW(1)
	STS  _config_ready,R30
; 0002 0054             }
; 0002 0055             else if((data == 'E') && (config_start == 1) && (config_response == 0)){
	RJMP _0x40017
_0x40014:
	CPI  R16,69
	BRNE _0x40019
	LDS  R26,_config_start
	CPI  R26,LOW(0x1)
	BRNE _0x40019
	LDS  R26,_config_response
	CPI  R26,LOW(0x0)
	BREQ _0x4001A
_0x40019:
	RJMP _0x40018
_0x4001A:
; 0002 0056                 config_response         = 'E';
	LDI  R30,LOW(69)
	STS  _config_response,R30
; 0002 0057             }
; 0002 0058             else if((data == 'S') && (config_start == 1) && (config_response == 0)){
	RJMP _0x4001B
_0x40018:
	CPI  R16,83
	BRNE _0x4001D
	LDS  R26,_config_start
	CPI  R26,LOW(0x1)
	BRNE _0x4001D
	LDS  R26,_config_response
	CPI  R26,LOW(0x0)
	BREQ _0x4001E
_0x4001D:
	RJMP _0x4001C
_0x4001E:
; 0002 0059                 config_response         = 'S';
	LDI  R30,LOW(83)
	STS  _config_response,R30
; 0002 005A             }
; 0002 005B             else if((config_start == 1) && (config_response != 0)){
	RJMP _0x4001F
_0x4001C:
	LDS  R26,_config_start
	CPI  R26,LOW(0x1)
	BRNE _0x40021
	LDS  R26,_config_response
	CPI  R26,LOW(0x0)
	BRNE _0x40022
_0x40021:
	RJMP _0x40020
_0x40022:
; 0002 005C                 configRd[configLen++]   =   data;
	LDI  R26,LOW(_configLen)
	LDI  R27,HIGH(_configLen)
	CALL SUBOPT_0x6E
	SBIW R30,1
	SUBI R30,LOW(-_configRd)
	SBCI R31,HIGH(-_configRd)
	ST   Z,R16
; 0002 005D             }
; 0002 005E         }
_0x40020:
_0x4001F:
_0x4001B:
_0x40017:
_0x40013:
_0x4000F:
_0x4000A:
; 0002 005F     }
; 0002 0060 }
_0x40003:
	RJMP _0x40053

	.DSEG
_0x40009:
	.BYTE 0x7C
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART0 Receiver buffer
;#define _ALTERNATE_GETCHAR_
;
;#pragma used+
;char getchar(void)
; 0002 0068 {

	.CSEG
; 0002 0069     char data;
; 0002 006A     while (rx_counter0==0);
;	data -> R17
; 0002 006B     data=rx_buffer0[rx_rd_index0++];
; 0002 006C  //   #if RX_BUFFER_SIZE0 != 256
; 0002 006D     if (rx_rd_index0 == RX_BUFFER_SIZE0)
; 0002 006E         rx_rd_index0=0;
; 0002 006F //    #endif
; 0002 0070     #asm("cli")
; 0002 0071     --rx_counter0;
; 0002 0072     #asm("sei")
; 0002 0073     return data;
; 0002 0074 }
;#pragma used-
;// Write a character to the USART0 Transmitter
;#pragma used+
;void putchar0(char c)
; 0002 0079 {
_putchar0:
; 0002 007A     while ((UCSR0A & DATA_REGISTER_EMPTY)==0);
	ST   -Y,R26
;	c -> Y+0
_0x40027:
	LDS  R30,192
	ANDI R30,LOW(0x20)
	BREQ _0x40027
; 0002 007B     UDR0=c;
	LD   R30,Y
	STS  198,R30
; 0002 007C }
	RJMP _0x20E0084
;#pragma used-
;#endif
;
;int read_uart0(char *readbuf, int maxread,int interchar)
; 0002 0081 {
_read_uart0:
; 0002 0082     char data;
; 0002 0083     int len=0;
; 0002 0084 
; 0002 0085     while (rx_counter0 > 0)
	CALL SUBOPT_0x6F
;	*readbuf -> Y+8
;	maxread -> Y+6
;	interchar -> Y+4
;	data -> R17
;	len -> R18,R19
	__GETWRN 18,19,0
_0x4002A:
	LDS  R26,_rx_counter0
	LDS  R27,_rx_counter0+1
	CALL __CPW02
	BRLO PC+3
	JMP _0x4002C
; 0002 0086     {
; 0002 0087         data=rx_buffer0[rx_rd_index0++];
	LDI  R26,LOW(_rx_rd_index0)
	LDI  R27,HIGH(_rx_rd_index0)
	CALL SUBOPT_0x6E
	SBIW R30,1
	SUBI R30,LOW(-_rx_buffer0)
	SBCI R31,HIGH(-_rx_buffer0)
	LD   R17,Z
; 0002 0088         if (rx_rd_index0 == RX_BUFFER_SIZE0){
	LDS  R26,_rx_rd_index0
	LDS  R27,_rx_rd_index0+1
	CPI  R26,LOW(0x1F4)
	LDI  R30,HIGH(0x1F4)
	CPC  R27,R30
	BRNE _0x4002D
; 0002 0089             rx_rd_index0=0;
	LDI  R30,LOW(0)
	STS  _rx_rd_index0,R30
	STS  _rx_rd_index0+1,R30
; 0002 008A         }
; 0002 008B         UCSR0B &= 0x7F;          // -- disable uart0 interrupt -- //
_0x4002D:
	LDS  R30,193
	ANDI R30,0x7F
	STS  193,R30
; 0002 008C 
; 0002 008D         --rx_counter0;
	LDI  R26,LOW(_rx_counter0)
	LDI  R27,HIGH(_rx_counter0)
	LD   R30,X+
	LD   R31,X+
	SBIW R30,1
	ST   -X,R31
	ST   -X,R30
; 0002 008E 
; 0002 008F         UCSR0B |= 0x80;          // -- enable uart0 interrupt -- //
	LDS  R30,193
	ORI  R30,0x80
	STS  193,R30
; 0002 0090 
; 0002 0091         memcpy(readbuf++,&data,1);
	CALL SUBOPT_0x70
	ST   -Y,R31
	ST   -Y,R30
	IN   R30,SPL
	IN   R31,SPH
	ST   -Y,R31
	ST   -Y,R30
	PUSH R17
	CALL SUBOPT_0x67
	CALL _memcpy
	POP  R17
; 0002 0092         len++;
	__ADDWRN 18,19,1
; 0002 0093 
; 0002 0094         if(len == maxread){
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	CP   R30,R18
	CPC  R31,R19
	BREQ _0x4002C
; 0002 0095             break;
; 0002 0096         }
; 0002 0097         delay_ms(interchar);
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	CALL _delay_ms
; 0002 0098     }
	RJMP _0x4002A
_0x4002C:
; 0002 0099     return len;
	MOVW R30,R18
	CALL __LOADLOCR4
	RJMP _0x20E0083
; 0002 009A }
;
;int write_uart0(char writebuf[], int len)
; 0002 009D {
_write_uart0:
; 0002 009E     int i;
; 0002 009F     for(i=0;i<len;i++){
	CALL SUBOPT_0x71
;	writebuf -> Y+4
;	len -> Y+2
;	i -> R16,R17
	__GETWRN 16,17,0
_0x40030:
	LDD  R30,Y+2
	LDD  R31,Y+2+1
	CP   R16,R30
	CPC  R17,R31
	BRGE _0x40031
; 0002 00A0         putchar0(writebuf[i]);
	MOVW R30,R16
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	ADD  R26,R30
	ADC  R27,R31
	LD   R26,X
	RCALL _putchar0
; 0002 00A1     }
	__ADDWRN 16,17,1
	RJMP _0x40030
_0x40031:
; 0002 00A2     return i;
	MOVW R30,R16
	LDD  R17,Y+1
	LDD  R16,Y+0
	ADIW R28,6
	RET
; 0002 00A3 }
;/*============================================================*/
;// USART1 Receiver interrupt service routine
;interrupt [USART1_RXC] void usart1_rx_isr(void)
; 0002 00A7 {
_usart1_rx_isr:
	ST   -Y,R30
	IN   R30,SREG
	ST   -Y,R30
; 0002 00A8     char status,data;
; 0002 00A9     status=UCSR1A;
	ST   -Y,R17
	ST   -Y,R16
;	status -> R17
;	data -> R16
	LDS  R17,200
; 0002 00AA     data=UDR1;
	LDS  R16,206
; 0002 00AB 
; 0002 00AC     if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
	MOV  R30,R17
	ANDI R30,LOW(0x1C)
; 0002 00AD     {
; 0002 00AE         if(data);
; 0002 00AF     }
; 0002 00B0 }
	RJMP _0x40054
;
;/*============================================================*/
;// USART2 Receiver interrupt service routine
;interrupt [USART2_RXC] void usart2_rx_isr(void)
; 0002 00B5 {
_usart2_rx_isr:
	ST   -Y,R30
	IN   R30,SREG
	ST   -Y,R30
; 0002 00B6     char status,data;
; 0002 00B7     status=UCSR2A;
	ST   -Y,R17
	ST   -Y,R16
;	status -> R17
;	data -> R16
	LDS  R17,208
; 0002 00B8     data=UDR2;
	LDS  R16,214
; 0002 00B9     if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
	MOV  R30,R17
	ANDI R30,LOW(0x1C)
	BRNE _0x40034
; 0002 00BA     {
; 0002 00BB         if(data=='K'){
	CPI  R16,75
	BRNE _0x40035
; 0002 00BC             flag_oled_ack = 1;
	SBI  0x1E,0
; 0002 00BD         }
; 0002 00BE         else{
_0x40035:
; 0002 00BF             //putchar3(data);
; 0002 00C0         }
; 0002 00C1     }
; 0002 00C2 }
_0x40034:
_0x40054:
	LD   R16,Y+
	LD   R17,Y+
	LD   R30,Y+
	OUT  SREG,R30
	LD   R30,Y+
	RETI
;
;// Write a character to the USART2 Transmitter
;#pragma used+
;void putchar2(char c)
; 0002 00C7 {
_putchar2:
; 0002 00C8     while ((UCSR2A & DATA_REGISTER_EMPTY)==0);
	ST   -Y,R26
;	c -> Y+0
_0x40039:
	LDS  R30,208
	ANDI R30,LOW(0x20)
	BREQ _0x40039
; 0002 00C9     UDR2=c;
	LD   R30,Y
	STS  214,R30
; 0002 00CA }
	RJMP _0x20E0084
;#pragma used-
;
;
;/*============================================================*/
;// USART3 Receiver interrupt service routine
;interrupt [USART3_RXC] void usart3_rx_isr(void)
; 0002 00D1 {
_usart3_rx_isr:
	CALL SUBOPT_0x6D
; 0002 00D2     char status,data;
; 0002 00D3     status=UCSR3A;
;	status -> R17
;	data -> R16
	LDS  R17,304
; 0002 00D4     data=UDR3;
	LDS  R16,310
; 0002 00D5     //putchar3(data);
; 0002 00D6     //putchar0(data);
; 0002 00D7     if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
	MOV  R30,R17
	ANDI R30,LOW(0x1C)
	BRNE _0x4003C
; 0002 00D8     {
; 0002 00D9         putchar3(data);
	MOV  R26,R16
	RCALL _putchar3
; 0002 00DA //        putchar0(data);
; 0002 00DB         // Detect Package Header
; 0002 00DC         if(data == charHeader)
	CPI  R16,36
	BRNE _0x4003D
; 0002 00DD         {
; 0002 00DE             rxPackageIndex3 = 0;
	CLR  R5
; 0002 00DF         }
; 0002 00E0 
; 0002 00E1         rxPackage3[rxPackageIndex3++] = data;
_0x4003D:
	MOV  R30,R5
	INC  R5
	LDI  R31,0
	SUBI R30,LOW(-_rxPackage3)
	SBCI R31,HIGH(-_rxPackage3)
	ST   Z,R16
; 0002 00E2 
; 0002 00E3         if(rxPackageIndex3 >= 64) rxPackageIndex3 = 0;
	LDI  R30,LOW(64)
	CP   R5,R30
	BRLO _0x4003E
	CLR  R5
; 0002 00E4 
; 0002 00E5         if(data == charTerminate)
_0x4003E:
	CPI  R16,35
	BRNE _0x4003F
; 0002 00E6         {
; 0002 00E7             rxPackageIndexCount3 = rxPackageIndex3-1;
	MOV  R30,R5
	SUBI R30,LOW(1)
	MOV  R4,R30
; 0002 00E8             rxPackageIndex3 = 0;
	CLR  R5
; 0002 00E9             flag_PackageTerminate3 = 1;
	LDI  R30,LOW(1)
	STS  _flag_PackageTerminate3,R30
; 0002 00EA         }
; 0002 00EB     }
_0x4003F:
; 0002 00EC }
_0x4003C:
_0x40053:
	LD   R16,Y+
	LD   R17,Y+
	LD   R30,Y+
	OUT  SREG,R30
	LD   R30,Y+
	OUT  EIND,R30
	LD   R30,Y+
	OUT  RAMPZ,R30
	LD   R31,Y+
	LD   R30,Y+
	LD   R27,Y+
	LD   R26,Y+
	LD   R25,Y+
	LD   R24,Y+
	LD   R23,Y+
	LD   R22,Y+
	LD   R15,Y+
	LD   R1,Y+
	LD   R0,Y+
	RETI
;
;/*============================================================*/
;// Write a character to the USART3 Transmitter
;#pragma used+
;void putchar3(char c)
; 0002 00F2 {
_putchar3:
; 0002 00F3     while ((UCSR3A & DATA_REGISTER_EMPTY)==0);
	ST   -Y,R26
;	c -> Y+0
_0x40040:
	LDS  R30,304
	ANDI R30,LOW(0x20)
	BREQ _0x40040
; 0002 00F4     UDR3=c;
	LD   R30,Y
	STS  310,R30
; 0002 00F5 }
_0x20E0084:
	ADIW R28,1
	RET
;#pragma used-
;
;/*============================================================*/
;void send_uart(char port,char *buffer)
; 0002 00FA {
_send_uart:
; 0002 00FB     char i = 0;
; 0002 00FC 
; 0002 00FD     switch (port)
	ST   -Y,R27
	ST   -Y,R26
	ST   -Y,R17
;	port -> Y+3
;	*buffer -> Y+1
;	i -> R17
	LDI  R17,0
	LDD  R30,Y+3
	LDI  R31,0
; 0002 00FE     {
; 0002 00FF         case 0: puts(buffer);
	SBIW R30,0
	BRNE _0x40046
	LDD  R26,Y+1
	LDD  R27,Y+1+1
	CALL _puts
; 0002 0100                 break;
	RJMP _0x40045
; 0002 0101 
; 0002 0102         case 1: while(buffer[i] != 0)
_0x40046:
	CPI  R30,LOW(0x1)
	LDI  R26,HIGH(0x1)
	CPC  R31,R26
	BRNE _0x40047
_0x40048:
	CALL SUBOPT_0x72
	BREQ _0x4004A
; 0002 0103                 {
; 0002 0104                     //putchar1(buffer[i]);
; 0002 0105                     i++;
	SUBI R17,-1
; 0002 0106                 }
	RJMP _0x40048
_0x4004A:
; 0002 0107                 break;
	RJMP _0x40045
; 0002 0108 
; 0002 0109         case 2: while(buffer[i] != 0)
_0x40047:
	CPI  R30,LOW(0x2)
	LDI  R26,HIGH(0x2)
	CPC  R31,R26
	BRNE _0x4004B
_0x4004C:
	CALL SUBOPT_0x72
	BREQ _0x4004E
; 0002 010A                 {
; 0002 010B                     putchar2(buffer[i]);
	CALL SUBOPT_0x73
	RCALL _putchar2
; 0002 010C                     i++;
	SUBI R17,-1
; 0002 010D                 }
	RJMP _0x4004C
_0x4004E:
; 0002 010E                 break;
	RJMP _0x40045
; 0002 010F 
; 0002 0110         case 3: while(buffer[i] != 0)
_0x4004B:
	CPI  R30,LOW(0x3)
	LDI  R26,HIGH(0x3)
	CPC  R31,R26
	BRNE _0x40045
_0x40050:
	CALL SUBOPT_0x72
	BREQ _0x40052
; 0002 0111                 {
; 0002 0112                     putchar3(buffer[i]);
	CALL SUBOPT_0x73
	RCALL _putchar3
; 0002 0113                     i++;
	SUBI R17,-1
; 0002 0114                 }
	RJMP _0x40050
_0x40052:
; 0002 0115                 break;
; 0002 0116     }
_0x40045:
; 0002 0117 }
	LDD  R17,Y+0
	JMP  _0x20E0081
;
;/*============================================================*/
;void init_uart(void)
; 0002 011B {
_init_uart:
; 0002 011C //    // USART0 initialization
; 0002 011D //    // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0002 011E //    // USART0 Receiver: On
; 0002 011F //    // USART0 Transmitter: On
; 0002 0120 //    // USART0 Mode: Asynchronous
; 0002 0121 //    // USART0 Baud Rate: 38400
; 0002 0122 //    UCSR0A=0x00;
; 0002 0123 //    UCSR0B=0x98;
; 0002 0124 //    UCSR0C=0x06;
; 0002 0125 //    UBRR0H=0x00;
; 0002 0126 //    UBRR0L=0x0C;
; 0002 0127 
; 0002 0128     // USART0 initialization
; 0002 0129     // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0002 012A     // USART0 Receiver: On
; 0002 012B     // USART0 Transmitter: On
; 0002 012C     // USART0 Mode: Asynchronous
; 0002 012D     // USART0 Baud Rate: 9600
; 0002 012E     UCSR0A=0x00;
	LDI  R30,LOW(0)
	STS  192,R30
; 0002 012F     UCSR0B=0x98;
	LDI  R30,LOW(152)
	STS  193,R30
; 0002 0130     UCSR0C=0x06;
	LDI  R30,LOW(6)
	STS  194,R30
; 0002 0131     UBRR0H=0x00;
	LDI  R30,LOW(0)
	STS  197,R30
; 0002 0132     UBRR0L=0x33;
	LDI  R30,LOW(51)
	STS  196,R30
; 0002 0133 
; 0002 0134     // USART1 initialization
; 0002 0135     // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0002 0136     // USART1 Receiver: On
; 0002 0137     // USART1 Transmitter: On
; 0002 0138     // USART1 Mode: Asynchronous
; 0002 0139     // USART1 Baud Rate: 38400
; 0002 013A     UCSR1A=0x00;
	LDI  R30,LOW(0)
	STS  200,R30
; 0002 013B     UCSR1B=0x98;
	LDI  R30,LOW(152)
	STS  201,R30
; 0002 013C     UCSR1C=0x06;
	LDI  R30,LOW(6)
	STS  202,R30
; 0002 013D     UBRR1H=0x00;
	LDI  R30,LOW(0)
	STS  205,R30
; 0002 013E     UBRR1L=0x0C;
	LDI  R30,LOW(12)
	STS  204,R30
; 0002 013F 
; 0002 0140 //    // USART2 initialization
; 0002 0141 //    // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0002 0142 //    // USART2 Receiver: On
; 0002 0143 //    // USART2 Transmitter: On
; 0002 0144 //    // USART2 Mode: Asynchronous
; 0002 0145 //    // USART2 Baud Rate: 115200 (Double Speed Mode)
; 0002 0146 //    UCSR2A=0x02;
; 0002 0147 //    UCSR2B=0x98;
; 0002 0148 //    UCSR2C=0x06;
; 0002 0149 //    UBRR2H=0x00;
; 0002 014A //    UBRR2L=0x08;
; 0002 014B 
; 0002 014C     // USART2 initialization
; 0002 014D     // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0002 014E     // USART2 Receiver: On
; 0002 014F     // USART2 Transmitter: On
; 0002 0150     // USART2 Mode: Asynchronous
; 0002 0151     // USART2 Baud Rate: 38400
; 0002 0152     UCSR2A=0x00;
	LDI  R30,LOW(0)
	STS  208,R30
; 0002 0153     UCSR2B=0x98;
	LDI  R30,LOW(152)
	STS  209,R30
; 0002 0154     UCSR2C=0x06;
	LDI  R30,LOW(6)
	STS  210,R30
; 0002 0155     UBRR2H=0x00;
	LDI  R30,LOW(0)
	STS  213,R30
; 0002 0156     UBRR2L=0x0C;
	LDI  R30,LOW(12)
	STS  212,R30
; 0002 0157 
; 0002 0158     // USART3 initialization
; 0002 0159     // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0002 015A     // USART3 Receiver: On
; 0002 015B     // USART3 Transmitter: On
; 0002 015C     // USART3 Mode: Asynchronous
; 0002 015D     // USART3 Baud Rate: 38400
; 0002 015E     UCSR3A=0x00;
	LDI  R30,LOW(0)
	STS  304,R30
; 0002 015F     UCSR3B=0x98;
	LDI  R30,LOW(152)
	STS  305,R30
; 0002 0160     UCSR3C=0x06;
	LDI  R30,LOW(6)
	STS  306,R30
; 0002 0161     UBRR3H=0x00;
	LDI  R30,LOW(0)
	STS  309,R30
; 0002 0162     UBRR3L=0x0C;
	LDI  R30,LOW(12)
	STS  308,R30
; 0002 0163 }
	RET
;
;/*============================================================*/
;
;#include "timer.h"
	#ifndef __SLEEP_DEFINED__
	#define __SLEEP_DEFINED__
	.EQU __se_bit=0x01
	.EQU __sm_mask=0x0E
	.EQU __sm_powerdown=0x04
	.EQU __sm_powersave=0x06
	.EQU __sm_standby=0x0C
	.EQU __sm_ext_standby=0x0E
	.EQU __sm_adc_noise_red=0x02
	.SET power_ctrl_reg=smcr
	#endif
;#include "ds1672.h"
;#include "adc.h"
;#include "io.h"
;#include "debug.h"
;#include "memcard.h"
;
;TIMER       baseCounter         = 0;    // -- increase continually by 1 second timer. use for timer comparison -- //
;bit         timer_1sec_flag     = 0;    // -- 1 second trigger flag for main loop -- //
;
;bit         buzzer_on           = 0;    // -- buzzer control [0:1] => [on:off] -- //
;
;/**************************************************************/
;/******************* Software Timer Support *******************/
;/**************************************************************/
;/*============================================================*/
;TIMER TIMER_checkTimeLeft(TIMER time)
; 0003 0012 {

	.CSEG
; 0003 0013     if(baseCounter < time){
;	time -> Y+0
; 0003 0014         return ( time - baseCounter );
; 0003 0015     }
; 0003 0016     else{
; 0003 0017         return 0;
; 0003 0018     }
; 0003 0019 }
;/*============================================================*/
;int TIMER_checkTimerExceed(TIMER keeper)
; 0003 001C {
_TIMER_checkTimerExceed:
; 0003 001D     if(keeper == 0){
	CALL SUBOPT_0x74
;	keeper -> Y+0
	BRNE _0x60005
; 0003 001E         return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	JMP  _0x20E0081
; 0003 001F     }
; 0003 0020 
; 0003 0021     if((unsigned long int)baseCounter < (unsigned long int)keeper){
_0x60005:
	CALL SUBOPT_0x75
	CALL SUBOPT_0x76
	CALL __CPD21
	BRSH _0x60006
; 0003 0022         return 0;
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
	JMP  _0x20E0081
; 0003 0023     }
; 0003 0024     else{                             // -- time exceed -- //
_0x60006:
; 0003 0025         return 1;
	LDI  R30,LOW(1)
	LDI  R31,HIGH(1)
	JMP  _0x20E0081
; 0003 0026     }
; 0003 0027 }
;/*============================================================*/
;int TIMER_setTimer(TIMER *keeper, unsigned long int period)
; 0003 002A {
_TIMER_setTimer:
; 0003 002B     unsigned long int t;
; 0003 002C 
; 0003 002D     if(period == 0){
	CALL __PUTPARD2
	SBIW R28,4
;	*keeper -> Y+8
;	period -> Y+4
;	t -> Y+0
	CALL SUBOPT_0x77
	CALL __CPD10
	BRNE _0x60008
; 0003 002E         printDebug("<TIMER_setTimer> ERR: period = 0\r\n");
	__POINTD1FN _0x60000,0
	CALL SUBOPT_0x2
; 0003 002F         *keeper = 0xFFFFFFFF;
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	CALL SUBOPT_0x23
	CALL __PUTDP1
; 0003 0030         return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E0083
; 0003 0031     }
; 0003 0032 
; 0003 0033     t = baseCounter + period;
_0x60008:
	CALL SUBOPT_0x77
	CALL SUBOPT_0x76
	CALL SUBOPT_0x78
; 0003 0034 
; 0003 0035     *keeper = t;
	CALL SUBOPT_0x75
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	CALL __PUTDP1
; 0003 0036 
; 0003 0037     if(t <= baseCounter){
	CALL SUBOPT_0x79
	CALL SUBOPT_0x7A
	CALL __CPD12
	BRLO _0x60009
; 0003 0038         printDebug("<TIMER_setTimer> baseCounter[%ld] + period[%ld] = %ld OVERFLOW!!\r\n",baseCounter,period,t);
	__POINTD1FN _0x60000,35
	CALL __PUTPARD1
	CALL SUBOPT_0x79
	CALL SUBOPT_0x7B
	CALL SUBOPT_0x7B
	CALL __PUTPARD1
	CALL SUBOPT_0x56
; 0003 0039         *keeper = 0;
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	CALL SUBOPT_0x7C
; 0003 003A         return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E0083
; 0003 003B     }
; 0003 003C     else{
_0x60009:
; 0003 003D         return 0;
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
; 0003 003E     }
; 0003 003F }
_0x20E0083:
	ADIW R28,10
	RET
;/*============================================================*/
;
;/**************************************************************/
;/********************** Hardware Support **********************/
;/**************************************************************/
;/*============================================================*/
;// Watchdog timeout interrupt service routine
;interrupt [WDT] void wdt_timeout_isr(void)
; 0003 0048 {
_wdt_timeout_isr:
	CALL SUBOPT_0x7D
; 0003 0049     // Place your code here
; 0003 004A     printDebug("<WDT> WatchDog Timer Reset!!\r\n");
	__POINTD1FN _0x60000,102
	CALL SUBOPT_0x2
; 0003 004B     return;
	RJMP _0x6002A
; 0003 004C }
;/*============================================================*/
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0003 0050 {
_timer0_ovf_isr:
	ST   -Y,R30
; 0003 0051     // Reinitialize Timer 0 value
; 0003 0052     TCNT0=0x64;
	LDI  R30,LOW(100)
	OUT  0x26,R30
; 0003 0053     // Place your code here
; 0003 0054 
; 0003 0055 }
	RJMP _0x60029
;/*============================================================*/
;// Timer1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0003 0059 {
_timer1_ovf_isr:
	ST   -Y,R30
; 0003 005A     // Reinitialize Timer1 value
; 0003 005B //    TCNT1H=0xFF64 >> 8;
; 0003 005C //    TCNT1L=0xFF64 & 0xff;
; 0003 005D     TCNT1H=0xFE79 >> 8;
	CALL SUBOPT_0x7E
; 0003 005E     TCNT1L=0xFE79 & 0xff;
; 0003 005F 
; 0003 0060     //adc_sampling();
; 0003 0061 }
	RJMP _0x60029
;/*============================================================*/
;// Timer2 overflow interrupt service routine    (100Hz)
;interrupt [TIM2_OVF] void timer2_ovf_isr(void)
; 0003 0065 {
_timer2_ovf_isr:
	CALL SUBOPT_0x7D
; 0003 0066     // Reinitialize Timer2 value
; 0003 0067     TCNT2=0xb2;
	LDI  R30,LOW(178)
	STS  178,R30
; 0003 0068 
; 0003 0069     /* card access low level timing function */
; 0003 006A     disk_timerproc();
	CALL _disk_timerproc
; 0003 006B 
; 0003 006C }
_0x6002A:
	LD   R30,Y+
	OUT  SREG,R30
	LD   R30,Y+
	OUT  EIND,R30
	LD   R30,Y+
	OUT  RAMPZ,R30
	LD   R31,Y+
	LD   R30,Y+
	LD   R27,Y+
	LD   R26,Y+
	LD   R25,Y+
	LD   R24,Y+
	LD   R23,Y+
	LD   R22,Y+
	LD   R15,Y+
	LD   R1,Y+
	LD   R0,Y+
	RETI
;/*============================================================*/
;// Timer1 overflow interrupt service routine  (1 second)
;interrupt [TIM3_OVF] void timer3_ovf_isr(void)
; 0003 0070 {
_timer3_ovf_isr:
	ST   -Y,R22
	ST   -Y,R23
	ST   -Y,R26
	ST   -Y,R27
	ST   -Y,R30
	ST   -Y,R31
	IN   R30,SREG
	ST   -Y,R30
; 0003 0071     // Reinitialize Timer1 value
; 0003 0072     TCNT3H=0x85ED >> 8;
	CALL SUBOPT_0x7F
; 0003 0073     TCNT3L=0x85ED & 0xff;
; 0003 0074 
; 0003 0075     // Place your code here
; 0003 0076     timer_1sec_flag = 1;
	SBI  0x1E,2
; 0003 0077 
; 0003 0078     baseCounter++;
	LDI  R26,LOW(_baseCounter)
	LDI  R27,HIGH(_baseCounter)
	CALL SUBOPT_0x80
; 0003 0079 
; 0003 007A     raw_rtc++;                          // -- update backup RTC
	LDI  R26,LOW(_raw_rtc)
	LDI  R27,HIGH(_raw_rtc)
	CALL SUBOPT_0x80
; 0003 007B 
; 0003 007C     //printDebug("<%d>\r\n",baseCounter);
; 0003 007D }
	LD   R30,Y+
	OUT  SREG,R30
	LD   R31,Y+
	LD   R30,Y+
	LD   R27,Y+
	LD   R26,Y+
	LD   R23,Y+
	LD   R22,Y+
	RETI
;/*============================================================*/
;// Timer4 overflow interrupt service routine (0.5 sec)
;interrupt [TIM4_OVF] void timer4_ovf_isr(void)
; 0003 0081 {
_timer4_ovf_isr:
	ST   -Y,R30
; 0003 0082     static bit toggle = 0;
; 0003 0083     // Reinitialize Timer4 value
; 0003 0084     TCNT4H=0x85ED >> 8;
	CALL SUBOPT_0x81
; 0003 0085     TCNT4L=0x85ED & 0xff;
; 0003 0086 
; 0003 0087     // Place your code here
; 0003 0088     toggle = !toggle;
	SBIS 0x1E,4
	RJMP _0x6000D
	CBI  0x1E,4
	RJMP _0x6000E
_0x6000D:
	SBI  0x1E,4
_0x6000E:
; 0003 0089 
; 0003 008A     if(buzzer_on){
	SBIS 0x1E,3
	RJMP _0x6000F
; 0003 008B         if(toggle)  {   BUZZER = 1; }
	SBIS 0x1E,4
	RJMP _0x60010
	SBI  0xE,7
; 0003 008C         else        {   BUZZER = 0; }
	RJMP _0x60013
_0x60010:
	CBI  0xE,7
_0x60013:
; 0003 008D     }
; 0003 008E     else{
	RJMP _0x60016
_0x6000F:
; 0003 008F         BUZZER = 0;
	CBI  0xE,7
; 0003 0090     }
_0x60016:
; 0003 0091 
; 0003 0092 }
_0x60029:
	LD   R30,Y+
	RETI
;
;//// Timer5 overflow interrupt service routine
;//interrupt [TIM5_OVF] void timer5_ovf_isr(void)
;//{
;//// Place your code here
;//
;//}
;/*============================================================*/
;void init_timer(void)
; 0003 009C {
_init_timer:
; 0003 009D 
; 0003 009E     // Timer/Counter 0 initialization
; 0003 009F     // Clock source: System Clock
; 0003 00A0     // Clock value: 7.813 kHz
; 0003 00A1     // Mode: Normal top=0xFF
; 0003 00A2     // OC0A output: Disconnected
; 0003 00A3     // OC0B output: Disconnected
; 0003 00A4     TCCR0A=0x00;
	LDI  R30,LOW(0)
	OUT  0x24,R30
; 0003 00A5     TCCR0B=0x05;
	LDI  R30,LOW(5)
	OUT  0x25,R30
; 0003 00A6     TCNT0=0x64;
	LDI  R30,LOW(100)
	OUT  0x26,R30
; 0003 00A7     OCR0A=0x00;
	LDI  R30,LOW(0)
	OUT  0x27,R30
; 0003 00A8     OCR0B=0x00;
	OUT  0x28,R30
; 0003 00A9 
; 0003 00AA     // Timer/Counter 1 initialization
; 0003 00AB     // Clock source: System Clock
; 0003 00AC     // Clock value: 7.813 kHz
; 0003 00AD     // Mode: Normal top=0xFFFF
; 0003 00AE     // OC1A output: Discon.
; 0003 00AF     // OC1B output: Discon.
; 0003 00B0     // OC1C output: Discon.
; 0003 00B1     // Noise Canceler: Off
; 0003 00B2     // Input Capture on Falling Edge
; 0003 00B3     // Timer1 Overflow Interrupt: On
; 0003 00B4     // Input Capture Interrupt: Off
; 0003 00B5     // Compare A Match Interrupt: Off
; 0003 00B6     // Compare B Match Interrupt: Off
; 0003 00B7     // Compare C Match Interrupt: Off
; 0003 00B8     TCCR1A=0x00;
	STS  128,R30
; 0003 00B9     TCCR1B=0x05;
	LDI  R30,LOW(5)
	STS  129,R30
; 0003 00BA     //TCNT1H=0xFF;
; 0003 00BB     //TCNT1L=0x64;
; 0003 00BC     TCNT1H=0xFE;
	CALL SUBOPT_0x7E
; 0003 00BD     TCNT1L=0x79;
; 0003 00BE     ICR1H=0x00;
	LDI  R30,LOW(0)
	STS  135,R30
; 0003 00BF     ICR1L=0x00;
	STS  134,R30
; 0003 00C0     OCR1AH=0x00;
	STS  137,R30
; 0003 00C1     OCR1AL=0x00;
	STS  136,R30
; 0003 00C2     OCR1BH=0x00;
	STS  139,R30
; 0003 00C3     OCR1BL=0x00;
	STS  138,R30
; 0003 00C4     OCR1CH=0x00;
	STS  141,R30
; 0003 00C5     OCR1CL=0x00;
	STS  140,R30
; 0003 00C6 
; 0003 00C7     // Timer/Counter 2 initialization
; 0003 00C8     // Clock source: System Clock
; 0003 00C9     // Clock value: 7.813 kHz
; 0003 00CA     // Mode: Normal top=0xFF
; 0003 00CB     // OC2A output: Disconnected
; 0003 00CC     // OC2B output: Disconnected
; 0003 00CD     ASSR=0x00;
	STS  182,R30
; 0003 00CE     TCCR2A=0x00;
	STS  176,R30
; 0003 00CF     TCCR2B=0x07;
	LDI  R30,LOW(7)
	STS  177,R30
; 0003 00D0     TCNT2=0xb2;
	LDI  R30,LOW(178)
	STS  178,R30
; 0003 00D1     OCR2A=0x00;
	LDI  R30,LOW(0)
	STS  179,R30
; 0003 00D2     OCR2B=0x00;
	STS  180,R30
; 0003 00D3 
; 0003 00D4     // Timer/Counter 3 initialization
; 0003 00D5     // Clock source: System Clock
; 0003 00D6     // Clock value: 31.250 kHz
; 0003 00D7     // Mode: Normal top=0xFFFF
; 0003 00D8     // OC3A output: Discon.
; 0003 00D9     // OC3B output: Discon.
; 0003 00DA     // OC3C output: Discon.
; 0003 00DB     // Noise Canceler: Off
; 0003 00DC     // Input Capture on Falling Edge
; 0003 00DD     // Timer3 Overflow Interrupt: On
; 0003 00DE     // Input Capture Interrupt: Off
; 0003 00DF     // Compare A Match Interrupt: Off
; 0003 00E0     // Compare B Match Interrupt: Off
; 0003 00E1     // Compare C Match Interrupt: Off
; 0003 00E2     TCCR3A=0x00;
	STS  144,R30
; 0003 00E3     TCCR3B=0x04;
	LDI  R30,LOW(4)
	STS  145,R30
; 0003 00E4     TCNT3H=0x85;
	CALL SUBOPT_0x7F
; 0003 00E5     TCNT3L=0xED;
; 0003 00E6     ICR3H=0x00;
	LDI  R30,LOW(0)
	STS  151,R30
; 0003 00E7     ICR3L=0x00;
	STS  150,R30
; 0003 00E8     OCR3AH=0x00;
	STS  153,R30
; 0003 00E9     OCR3AL=0x00;
	STS  152,R30
; 0003 00EA     OCR3BH=0x00;
	STS  155,R30
; 0003 00EB     OCR3BL=0x00;
	STS  154,R30
; 0003 00EC     OCR3CH=0x00;
	STS  157,R30
; 0003 00ED     OCR3CL=0x00;
	STS  156,R30
; 0003 00EE 
; 0003 00EF     // Timer/Counter 4 initialization
; 0003 00F0     // Clock source: System Clock
; 0003 00F1     // Clock value: 125.000 kHz
; 0003 00F2     // Mode: Normal top=0xFFFF
; 0003 00F3     // OC4A output: Discon.
; 0003 00F4     // OC4B output: Discon.
; 0003 00F5     // OC4C output: Discon.
; 0003 00F6     // Noise Canceler: Off
; 0003 00F7     // Input Capture on Falling Edge
; 0003 00F8     // Timer4 Overflow Interrupt: On
; 0003 00F9     // Input Capture Interrupt: Off
; 0003 00FA     // Compare A Match Interrupt: Off
; 0003 00FB     // Compare B Match Interrupt: Off
; 0003 00FC     // Compare C Match Interrupt: Off
; 0003 00FD     TCCR4A=0x00;
	STS  160,R30
; 0003 00FE     TCCR4B=0x03;
	LDI  R30,LOW(3)
	STS  161,R30
; 0003 00FF     TCNT4H=0x85;
	CALL SUBOPT_0x81
; 0003 0100     TCNT4L=0xED;
; 0003 0101     ICR4H=0x00;
	LDI  R30,LOW(0)
	STS  167,R30
; 0003 0102     ICR4L=0x00;
	STS  166,R30
; 0003 0103     OCR4AH=0x00;
	STS  169,R30
; 0003 0104     OCR4AL=0x00;
	STS  168,R30
; 0003 0105     OCR4BH=0x00;
	STS  171,R30
; 0003 0106     OCR4BL=0x00;
	STS  170,R30
; 0003 0107     OCR4CH=0x00;
	STS  173,R30
; 0003 0108     OCR4CL=0x00;
	STS  172,R30
; 0003 0109 
; 0003 010A     // Timer/Counter 5 initialization
; 0003 010B     // Clock source: System Clock
; 0003 010C     // Clock value: Timer5 Stopped
; 0003 010D     // Mode: Normal top=0xFFFF
; 0003 010E     // OC5A output: Discon.
; 0003 010F     // OC5B output: Discon.
; 0003 0110     // OC5C output: Discon.
; 0003 0111     // Noise Canceler: Off
; 0003 0112     // Input Capture on Falling Edge
; 0003 0113     // Timer5 Overflow Interrupt: Off
; 0003 0114     // Input Capture Interrupt: Off
; 0003 0115     // Compare A Match Interrupt: Off
; 0003 0116     // Compare B Match Interrupt: Off
; 0003 0117     // Compare C Match Interrupt: Off
; 0003 0118     TCCR5A=0x00;
	STS  288,R30
; 0003 0119     TCCR5B=0x00;
	CALL SUBOPT_0x82
; 0003 011A     TCNT5H=0x00;
; 0003 011B     TCNT5L=0x00;
; 0003 011C     ICR5H=0x00;
	LDI  R30,LOW(0)
	STS  295,R30
; 0003 011D     ICR5L=0x00;
	STS  294,R30
; 0003 011E     OCR5AH=0x00;
	STS  297,R30
; 0003 011F     OCR5AL=0x00;
	STS  296,R30
; 0003 0120     OCR5BH=0x00;
	STS  299,R30
; 0003 0121     OCR5BL=0x00;
	STS  298,R30
; 0003 0122     OCR5CH=0x00;
	STS  301,R30
; 0003 0123     OCR5CL=0x00;
	STS  300,R30
; 0003 0124 
; 0003 0125     // Watchdog Timer initialization
; 0003 0126     // Watchdog Timer Prescaler: OSC/1024k
; 0003 0127     // Watchdog Timer interrupt: On
; 0003 0128     #pragma optsize-
; 0003 0129     #asm("wdr")
	wdr
; 0003 012A     WDTCSR=0x79;
	LDI  R30,LOW(121)
	STS  96,R30
; 0003 012B     WDTCSR=0x69;
	LDI  R30,LOW(105)
	STS  96,R30
; 0003 012C 
; 0003 012D     #ifdef _OPTIMIZE_SIZE_
; 0003 012E     #pragma optsize+
; 0003 012F     #endif
; 0003 0130 
; 0003 0131 
; 0003 0132     // Timer/Counter 0 Interrupt(s) initialization
; 0003 0133     TIMSK0=0x00;
	LDI  R30,LOW(0)
	STS  110,R30
; 0003 0134 
; 0003 0135     // Timer/Counter 1 Interrupt(s) initialization
; 0003 0136     TIMSK1=0x00;
	STS  111,R30
; 0003 0137 
; 0003 0138     // Timer/Counter 2 Interrupt(s) initialization
; 0003 0139     TIMSK2=0x00;
	STS  112,R30
; 0003 013A 
; 0003 013B     // Timer/Counter 3 Interrupt(s) initialization
; 0003 013C     TIMSK3=0x00;
	STS  113,R30
; 0003 013D 
; 0003 013E     // Timer/Counter 4 Interrupt(s) initialization
; 0003 013F     TIMSK4=0x00;
	STS  114,R30
; 0003 0140 
; 0003 0141     // Timer/Counter 5 Interrupt(s) initialization
; 0003 0142     TIMSK5=0x00;
	STS  115,R30
; 0003 0143 }
	RET
;/*============================================================*/
;void enable_interrupt(int ch)
; 0003 0146 {
_enable_interrupt:
; 0003 0147 
; 0003 0148     // -------------- enable timer ---------------  //
; 0003 0149 
; 0003 014A     switch(ch){
	CALL SUBOPT_0x83
;	ch -> Y+0
; 0003 014B         case 0: // Timer/Counter 0 Interrupt(s) initialization
	SBIW R30,0
	BREQ _0x6001B
; 0003 014C                 //TIMSK0=0x01;
; 0003 014D                 break;
; 0003 014E         case 1: // Timer/Counter 1 Interrupt(s) initialization
	CPI  R30,LOW(0x1)
	LDI  R26,HIGH(0x1)
	CPC  R31,R26
	BRNE _0x6001D
; 0003 014F                 TIMSK1=0x01;
	LDI  R30,LOW(1)
	STS  111,R30
; 0003 0150                 break;
	RJMP _0x6001B
; 0003 0151         case 2: // Timer/Counter 2 Interrupt(s) initialization
_0x6001D:
	CPI  R30,LOW(0x2)
	LDI  R26,HIGH(0x2)
	CPC  R31,R26
	BRNE _0x6001E
; 0003 0152                 TIMSK2=0x01;
	LDI  R30,LOW(1)
	STS  112,R30
; 0003 0153                 break;
	RJMP _0x6001B
; 0003 0154         case 3: // Timer/Counter 3 Interrupt(s) initialization
_0x6001E:
	CPI  R30,LOW(0x3)
	LDI  R26,HIGH(0x3)
	CPC  R31,R26
	BRNE _0x6001F
; 0003 0155                 TIMSK3=0x01;
	LDI  R30,LOW(1)
	STS  113,R30
; 0003 0156                 break;
	RJMP _0x6001B
; 0003 0157         case 4: // Timer/Counter 4 Interrupt(s) initialization
_0x6001F:
	CPI  R30,LOW(0x4)
	LDI  R26,HIGH(0x4)
	CPC  R31,R26
	BRNE _0x6001B
; 0003 0158                 TIMSK4=0x01;
	LDI  R30,LOW(1)
	STS  114,R30
; 0003 0159                 break;
; 0003 015A     }
_0x6001B:
; 0003 015B     // Global enable interrupts
; 0003 015C     #asm("sei")
	sei
; 0003 015D }
	ADIW R28,2
	RET
;/*============================================================*/
;void disable_interrupt(int ch)
; 0003 0160 {
; 0003 0161 
; 0003 0162     // -------------- enable timer ---------------  //
; 0003 0163 
; 0003 0164     switch(ch){
;	ch -> Y+0
; 0003 0165         case 0: // Timer/Counter 0 Interrupt(s) initialization
; 0003 0166                 //TIMSK0=0x00;
; 0003 0167                 break;
; 0003 0168         case 1: // Timer/Counter 1 Interrupt(s) initialization
; 0003 0169                 TIMSK1=0x00;
; 0003 016A                 break;
; 0003 016B         case 2: // Timer/Counter 2 Interrupt(s) initialization
; 0003 016C                 TIMSK2=0x00;
; 0003 016D                 break;
; 0003 016E         case 3: // Timer/Counter 3 Interrupt(s) initialization
; 0003 016F                 TIMSK3=0x00;
; 0003 0170                 break;
; 0003 0171         case 4: // Timer/Counter 4 Interrupt(s) initialization
; 0003 0172                 TIMSK4=0x00;
; 0003 0173                 break;
; 0003 0174     }
; 0003 0175     // Global enable interrupts
; 0003 0176     #asm("sei")
; 0003 0177 }
;/*============================================================*/
;#include <mega2560.h>
	#ifndef __SLEEP_DEFINED__
	#define __SLEEP_DEFINED__
	.EQU __se_bit=0x01
	.EQU __sm_mask=0x0E
	.EQU __sm_powerdown=0x04
	.EQU __sm_powersave=0x06
	.EQU __sm_standby=0x0C
	.EQU __sm_ext_standby=0x0E
	.EQU __sm_adc_noise_red=0x02
	.SET power_ctrl_reg=smcr
	#endif
;#include <delay.h>
;#include "io.h"
;#include "debug.h"
;
;unsigned char   d_out[USE_DOUT] = {0xFF,0xFF};

	.DSEG
;
;/*============================================================*/
;void init_io(void)
; 0004 000A {

	.CSEG
_init_io:
; 0004 000B     // Input/Output Ports initialization
; 0004 000C     // Port A initialization
; 0004 000D     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=Out Func1=In Func0=In
; 0004 000E     // State7=T State6=T State5=T State4=T State3=T State2=0 State1=T State0=T
; 0004 000F     PORTA=0x00;
	LDI  R30,LOW(0)
	OUT  0x2,R30
; 0004 0010     DDRA=0x04;
	LDI  R30,LOW(4)
	OUT  0x1,R30
; 0004 0011 
; 0004 0012     // Port B initialization
; 0004 0013     // Func7=Out Func6=Out Func5=Out Func4=Out Func3=In Func2=Out Func1=Out Func0=Out
; 0004 0014     // State7=1 State6=1 State5=1 State4=1 State3=P State2=1 State1=1 State0=1
; 0004 0015     PORTB=0xFF;
	LDI  R30,LOW(255)
	OUT  0x5,R30
; 0004 0016     DDRB=0xF7;
	LDI  R30,LOW(247)
	OUT  0x4,R30
; 0004 0017 
; 0004 0018     // Port C initialization
; 0004 0019     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0004 001A     // State7=P State6=P State5=T State4=T State3=T State2=T State1=T State0=T
; 0004 001B     PORTC=0xC0;
	LDI  R30,LOW(192)
	OUT  0x8,R30
; 0004 001C     DDRC=0x00;
	LDI  R30,LOW(0)
	OUT  0x7,R30
; 0004 001D 
; 0004 001E     // Port C initialization
; 0004 001F     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0004 0020     // State7=P State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0004 0021     //PORTC=0x80;
; 0004 0022     //DDRC=0x00;
; 0004 0023 
; 0004 0024     // Port D initialization
; 0004 0025     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0004 0026     // State7=P State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0004 0027     PORTD=0x80;
	LDI  R30,LOW(128)
	OUT  0xB,R30
; 0004 0028     DDRD=0x00;
	LDI  R30,LOW(0)
	OUT  0xA,R30
; 0004 0029 
; 0004 002A     // Port E initialization
; 0004 002B     // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=In Func0=In
; 0004 002C     // State7=1 State6=1 State5=1 State4=1 State3=1 State2=P State1=T State0=T
; 0004 002D     PORTE=0xFC;
	LDI  R30,LOW(252)
	OUT  0xE,R30
; 0004 002E     DDRE=0xFC;
	OUT  0xD,R30
; 0004 002F 
; 0004 0030     // Port F initialization
; 0004 0031     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0004 0032     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0004 0033     PORTF=0x00;
	LDI  R30,LOW(0)
	OUT  0x11,R30
; 0004 0034     DDRF=0x00;
	OUT  0x10,R30
; 0004 0035 
; 0004 0036     // Port G initialization
; 0004 0037     // Func5=Out Func4=Out Func3=In Func2=In Func1=In Func0=In
; 0004 0038     // State5=1 State4=1 State3=T State2=T State1=T State0=T
; 0004 0039     //PORTG=0x20;
; 0004 003A     //DDRG=0x20;
; 0004 003B     PORTG=0x30;
	LDI  R30,LOW(48)
	OUT  0x14,R30
; 0004 003C     DDRG=0x30;
	OUT  0x13,R30
; 0004 003D 
; 0004 003E     // Port H initialization
; 0004 003F     // Func7=In Func6=Out Func5=Out Func4=Out Func3=Out Func2=In Func1=In Func0=In
; 0004 0040     // State7=P State6=1 State5=1 State4=1 State3=1 State2=T State1=T State0=T
; 0004 0041     PORTH=0xF8;
	LDI  R30,LOW(248)
	STS  258,R30
; 0004 0042     DDRH=0xF8;
	STS  257,R30
; 0004 0043 
; 0004 0044 //    // Port J initialization
; 0004 0045 //    // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0004 0046 //    // State7=P State6=P State5=P State4=P State3=P State2=P State1=T State0=T
; 0004 0047 //    PORTJ=0xFC;
; 0004 0048 //    DDRJ=0x00;
; 0004 0049 
; 0004 004A     // Port J initialization
; 0004 004B     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0004 004C     // State7=P State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0004 004D     PORTJ=0x80;
	LDI  R30,LOW(128)
	STS  261,R30
; 0004 004E     DDRJ=0x00;
	LDI  R30,LOW(0)
	STS  260,R30
; 0004 004F 
; 0004 0050     if((TEMP_SEL == TEMP_TYPE_K) || (TEMP_SEL == TEMP_RESERVED)){
	CALL SUBOPT_0x84
	BREQ _0x80005
	CALL SUBOPT_0x84
	CPI  R30,LOW(0x3)
	BRNE _0x80004
_0x80005:
; 0004 0051         // Port K initialization
; 0004 0052         // Func7=In Func6=In Func5=In Func4=In Func3=Out Func2=Out Func1=Out Func0=In
; 0004 0053         // State7=P State6=T State5=T State4=P State3=0 State2=0 State1=0 State0=T
; 0004 0054         PORTK=0x90;
	LDI  R30,LOW(144)
	STS  264,R30
; 0004 0055         DDRK=0x0E;
	LDI  R30,LOW(14)
	RJMP _0x8003D
; 0004 0056     }
; 0004 0057     else if((TEMP_SEL == TEMP_TMEC) || (TEMP_SEL == TEMP_PT100)){
_0x80004:
	CALL SUBOPT_0x85
	BREQ _0x80009
	CALL SUBOPT_0x84
	CPI  R30,LOW(0x2)
	BRNE _0x80008
_0x80009:
; 0004 0058         // Port K initialization
; 0004 0059         // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0004 005A         // State7=P State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0004 005B         PORTK=0x80;
	LDI  R30,LOW(128)
	STS  264,R30
; 0004 005C         DDRK=0x00;
	LDI  R30,LOW(0)
_0x8003D:
	STS  263,R30
; 0004 005D     }
; 0004 005E 
; 0004 005F     // Port L initialization
; 0004 0060     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0004 0061     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0004 0062     PORTL=0x00;
_0x80008:
	LDI  R30,LOW(0)
	STS  267,R30
; 0004 0063     DDRL=0x00;
	STS  266,R30
; 0004 0064 
; 0004 0065 }
	RET
;/*============================================================*/
;void IO_dout(int ch, char state)
; 0004 0068 {
_IO_dout:
; 0004 0069 //    /*bongkot edit output is actived high(1)*/
; 0004 006A //    //triger state input function
; 0004 006B //    state = !state;
; 0004 006C //    /* end edit*/
; 0004 006D 
; 0004 006E     switch(ch){
	ST   -Y,R26
;	ch -> Y+1
;	state -> Y+0
	LDD  R30,Y+1
	LDD  R31,Y+1+1
; 0004 006F         case 0  :   DOUT1       =   !state;
	SBIW R30,0
	BRNE _0x8000E
	LD   R30,Y
	CPI  R30,0
	BREQ _0x8000F
	CBI  0xE,3
	RJMP _0x80010
_0x8000F:
	SBI  0xE,3
_0x80010:
; 0004 0070                     d_out[0]    =   state;
	LD   R30,Y
	STS  _d_out,R30
; 0004 0071                     //printDebug("<IO_dout> dout0 %d\r\n",d_out[0]);
; 0004 0072                     break;
	RJMP _0x8000D
; 0004 0073         case 1  :   DOUT2       =   !state;
_0x8000E:
	CPI  R30,LOW(0x1)
	LDI  R26,HIGH(0x1)
	CPC  R31,R26
	BRNE _0x80014
	LD   R30,Y
	CPI  R30,0
	BREQ _0x80012
	CBI  0xE,4
	RJMP _0x80013
_0x80012:
	SBI  0xE,4
_0x80013:
; 0004 0074                     d_out[1]    =   state;
	LD   R30,Y
	__PUTB1MN _d_out,1
; 0004 0075                     //printDebug("<IO_dout> dout1 %d\r\n",d_out[1]);
; 0004 0076                     break;
; 0004 0077         default :   break;
_0x80014:
; 0004 0078     }
_0x8000D:
; 0004 0079 }
	RJMP _0x20E0082
;/*============================================================*/
;char IO_keyCheck(void)
; 0004 007C {
; 0004 007D     static char flag_hold_MODE   = 0;
; 0004 007E     static char flag_hold_UP     = 0;
; 0004 007F     static char flag_hold_DOWN   = 0;
; 0004 0080     static char flag_hold_OK     = 0;
; 0004 0081 
; 0004 0082     if( KEY_PRESS_CHK_MODE && !flag_hold_MODE )
; 0004 0083     {
; 0004 0084         delay_ms(KEY_DELAY);
; 0004 0085 
; 0004 0086         if( KEY_PRESS_CHK_MODE && !flag_hold_MODE )
; 0004 0087         {
; 0004 0088             flag_hold_MODE = 1;
; 0004 0089             return 0;
; 0004 008A         }
; 0004 008B     }
; 0004 008C     else if( KEY_RELEASE_CHK_MODE && flag_hold_MODE)
; 0004 008D     {
; 0004 008E         printDebug("<IO_keyCheck> key MODE\r\n");
; 0004 008F         flag_hold_MODE = 0;
; 0004 0090         return KEY_MODE;
; 0004 0091     }
; 0004 0092 
; 0004 0093     if( KEY_PRESS_CHK_UP && !flag_hold_UP )
; 0004 0094     {
; 0004 0095         delay_ms(KEY_DELAY);
; 0004 0096 
; 0004 0097         if( KEY_PRESS_CHK_UP && !flag_hold_UP )
; 0004 0098         {
; 0004 0099             flag_hold_UP = 1;
; 0004 009A             return 0;
; 0004 009B         }
; 0004 009C     }
; 0004 009D     else if( KEY_RELEASE_CHK_UP && flag_hold_UP)
; 0004 009E     {
; 0004 009F         printDebug("<IO_keyCheck> key UP\r\n");
; 0004 00A0         flag_hold_UP = 0;
; 0004 00A1         return KEY_UP;
; 0004 00A2     }
; 0004 00A3 
; 0004 00A4     if( KEY_PRESS_CHK_DOWN && !flag_hold_DOWN )
; 0004 00A5     {
; 0004 00A6         delay_ms(KEY_DELAY);
; 0004 00A7 
; 0004 00A8         if( KEY_PRESS_CHK_DOWN && !flag_hold_DOWN )
; 0004 00A9         {
; 0004 00AA             flag_hold_DOWN = 1;
; 0004 00AB             return 0;
; 0004 00AC         }
; 0004 00AD     }
; 0004 00AE     else if( KEY_RELEASE_CHK_DOWN && flag_hold_DOWN)
; 0004 00AF     {
; 0004 00B0         printDebug("<IO_keyCheck> key DOWN\r\n");
; 0004 00B1         flag_hold_DOWN = 0;
; 0004 00B2         return KEY_DOWN;
; 0004 00B3     }
; 0004 00B4 
; 0004 00B5     if( KEY_PRESS_CHK_OK && !flag_hold_OK )
; 0004 00B6     {
; 0004 00B7         delay_ms(KEY_DELAY);
; 0004 00B8 
; 0004 00B9         if( KEY_PRESS_CHK_OK && !flag_hold_OK )
; 0004 00BA         {
; 0004 00BB             flag_hold_OK = 1;
; 0004 00BC             return 0;
; 0004 00BD         }
; 0004 00BE     }
; 0004 00BF     else if( KEY_RELEASE_CHK_OK && flag_hold_OK)
; 0004 00C0     {
; 0004 00C1         printDebug("<IO_keyCheck> key OK\r\n");
; 0004 00C2         flag_hold_OK = 0;
; 0004 00C3         return KEY_OK;
; 0004 00C4     }
; 0004 00C5 
; 0004 00C6     return 0;
; 0004 00C7 }
;
;#include <mega2560.h>
	#ifndef __SLEEP_DEFINED__
	#define __SLEEP_DEFINED__
	.EQU __se_bit=0x01
	.EQU __sm_mask=0x0E
	.EQU __sm_powerdown=0x04
	.EQU __sm_powersave=0x06
	.EQU __sm_standby=0x0C
	.EQU __sm_ext_standby=0x0E
	.EQU __sm_adc_noise_red=0x02
	.SET power_ctrl_reg=smcr
	#endif
;#include <delay.h>
;#include <stdio.h>
;#include <stdlib.h>
;#include <string.h>
;#include "adc.h"
;#include "debug.h"
;
;float           adcData[5];
;float           adcBatt;
;
;eeprom float    eep_vref_val = 2.56;
;
;/*============================================================*/
;unsigned int read_adc(unsigned char adc_input)
; 0005 0010 {

	.CSEG
_read_adc:
; 0005 0011     unsigned int adc_data = 0x0000;
; 0005 0012 
; 0005 0013     ADMUX  &= ADC_VREF_TYPE;
	ST   -Y,R26
	CALL SUBOPT_0x86
;	adc_input -> Y+2
;	adc_data -> R16,R17
	LDS  R30,124
	ANDI R30,LOW(0x40)
	STS  124,R30
; 0005 0014     ADCSRB &= 0xf7;
	LDS  R30,123
	ANDI R30,0XF7
	STS  123,R30
; 0005 0015 
; 0005 0016     ADMUX  |= (adc_input & 0x07) | (ADC_VREF_TYPE & 0xff);
	LDI  R26,LOW(124)
	LDI  R27,HIGH(124)
	MOV  R0,R26
	LD   R26,X
	LDD  R30,Y+2
	ANDI R30,LOW(0x7)
	ORI  R30,0x40
	OR   R30,R26
	MOV  R26,R0
	ST   X,R30
; 0005 0017 
; 0005 0018     if(adc_input > 7)
	LDD  R26,Y+2
	CPI  R26,LOW(0x8)
	BRLO _0xA0003
; 0005 0019     {
; 0005 001A         ADCSRB |= 0x08;
	LDS  R30,123
	ORI  R30,8
	RJMP _0xA0020
; 0005 001B     }
; 0005 001C     else
_0xA0003:
; 0005 001D     {
; 0005 001E         ADCSRB &= 0xf7;
	LDS  R30,123
	ANDI R30,0XF7
_0xA0020:
	STS  123,R30
; 0005 001F     }
; 0005 0020 
; 0005 0021     // Delay needed for the stabilization of the ADC input voltage
; 0005 0022     delay_us(20);
	__DELAY_USB 53
; 0005 0023 
; 0005 0024     // Start the AD conversion
; 0005 0025     ADCSRA  |= 0x80; //ENABLE ADC
	LDS  R30,122
	ORI  R30,0x80
	STS  122,R30
; 0005 0026     ADCSRA  |= 0x40;
	LDS  R30,122
	ORI  R30,0x40
	STS  122,R30
; 0005 0027 
; 0005 0028     // Wait for the AD conversion to complete
; 0005 0029     //while ( ((ADCSRA & 0x10)==0) || ((ADCSRA & 0x40) == 0x40));
; 0005 002A     while ( (ADCSRA & 0x10)==0);
_0xA0005:
	LDS  R30,122
	ANDI R30,LOW(0x10)
	BREQ _0xA0005
; 0005 002B     adc_data = ADCL;
	LDS  R16,120
	CLR  R17
; 0005 002C     adc_data |= (ADCH & 0x00ff) << 8;
	LDS  R30,121
	CALL SUBOPT_0x87
	MOV  R31,R30
	LDI  R30,0
	__ORWRR 16,17,30,31
; 0005 002D 
; 0005 002E     ADCSRA  |=0x10;
	LDS  R30,122
	ORI  R30,0x10
	STS  122,R30
; 0005 002F 
; 0005 0030     delay_us(50);
	__DELAY_USB 133
; 0005 0031 
; 0005 0032     return adc_data;
	MOVW R30,R16
	LDD  R17,Y+1
	LDD  R16,Y+0
_0x20E0082:
	ADIW R28,3
	RET
; 0005 0033 }
;/*============================================================*/
;unsigned char adc_sampling(void)
; 0005 0036 {
; 0005 0037     static int      i = 0;
; 0005 0038     static char     batt_read_flag = 0;
; 0005 0039 
; 0005 003A     if((TEMP_SEL == TEMP_TYPE_K) || (TEMP_SEL == TEMP_RESERVED)){
; 0005 003B         /*
; 0005 003C         printDebug("<%d>",i);
; 0005 003D         SENSOR_SELECT(i);
; 0005 003E         delay_ms(20);
; 0005 003F         adcData[i] = (float)((adcData[i] * 9.0) + (float)(read_adc(8) * 1.0))/10;           // Temp Sensor Low-Pass Filter
; 0005 0040         if(++i >= 5){   i = 0;  }
; 0005 0041         */
; 0005 0042     }
; 0005 0043     else if((TEMP_SEL == TEMP_TMEC) || (TEMP_SEL == TEMP_PT100)){
; 0005 0044 //        for( i=0 ; i<5 ; i++ ){
; 0005 0045 //            adcData[i] = (float)((adcData[i] * 9.9) + (float)(read_adc(8+i) * 0.1))/10;     // Temp Sensor Low-Pass Filter
; 0005 0046 //        }
; 0005 0047     }
; 0005 0048 
; 0005 0049 //    if(++batt_read_flag > 25){
; 0005 004A //        adcBatt = (float)((adcBatt * 9.9) + (float)(read_adc(14) * 0.1))/10;                // Battery Read
; 0005 004B //        batt_read_flag = 0;
; 0005 004C //    }
; 0005 004D 
; 0005 004E     return 0;
; 0005 004F }
;/*============================================================*/
;float readBattery(void)
; 0005 0052 {
_readBattery:
; 0005 0053     float   vBATT;
; 0005 0054 
; 0005 0055     adcBatt = (float)((adcBatt * 9.9) + (float)(read_adc(14) * 0.1))/10;                // Battery Read
	SBIW R28,4
;	vBATT -> Y+0
	CALL SUBOPT_0x88
	__GETD1N 0x411E6666
	CALL __MULF12
	PUSH R23
	PUSH R22
	PUSH R31
	PUSH R30
	LDI  R26,LOW(14)
	RCALL _read_adc
	CALL SUBOPT_0x89
	__GETD2N 0x3DCCCCCD
	CALL __MULF12
	POP  R26
	POP  R27
	POP  R24
	POP  R25
	CALL SUBOPT_0x8A
	CALL SUBOPT_0x8B
	CALL __DIVF21
	STS  _adcBatt,R30
	STS  _adcBatt+1,R31
	STS  _adcBatt+2,R22
	STS  _adcBatt+3,R23
; 0005 0056 
; 0005 0057     vBATT   = adcBatt*ADC_CONV_FAC*1.8;                                // from voltage divider 120k & 150k
	LDI  R26,LOW(_eep_vref_val)
	LDI  R27,HIGH(_eep_vref_val)
	CALL __EEPROMRDD
	MOVW R26,R30
	MOVW R24,R22
	CALL SUBOPT_0x8C
	CALL SUBOPT_0x88
	CALL __MULF12
	__GETD2N 0x3FE66666
	CALL __MULF12
	CALL SUBOPT_0x8D
; 0005 0058     //printDebug("                                                     -- volt[%f]\r\n", vBATT);    // padding line
; 0005 0059 
; 0005 005A     return vBATT;
	CALL SUBOPT_0x75
_0x20E0081:
	ADIW R28,4
	RET
; 0005 005B }
;/*============================================================*/
;void adc_init_read(void)
; 0005 005E {
_adc_init_read:
; 0005 005F     int i;
; 0005 0060     printDebug("Initializing ADC.. ");
	ST   -Y,R17
	ST   -Y,R16
;	i -> R16,R17
	__POINTD1FN _0xA0000,0
	CALL SUBOPT_0x2
; 0005 0061 
; 0005 0062     if((TEMP_SEL == TEMP_TYPE_K) || (TEMP_SEL == TEMP_RESERVED)){
	CALL SUBOPT_0x84
	BREQ _0xA0010
	CALL SUBOPT_0x84
	CPI  R30,LOW(0x3)
	BRNE _0xA000F
_0xA0010:
; 0005 0063         for(i=0;i<5;i++){ \
; 0005 0064             SENSOR_SELECT(i);
	__GETWRN 16,17,0
_0xA0013:
	__CPWRN 16,17,5
	BRGE _0xA0014
	CALL SUBOPT_0x8E
	MOV  R30,R16
	LSL  R30
	OR   R30,R26
	MOV  R26,R0
	ST   X,R30
; 0005 0065             delay_ms(20);
	CALL SUBOPT_0x8F
; 0005 0066             adcData[i] = read_adc(8);
	MOVW R30,R16
	CALL SUBOPT_0x90
	ADD  R30,R26
	ADC  R31,R27
	PUSH R31
	PUSH R30
	LDI  R26,LOW(8)
	RCALL _read_adc
	POP  R26
	POP  R27
	CALL SUBOPT_0x91
; 0005 0067         }
	__ADDWRN 16,17,1
	RJMP _0xA0013
_0xA0014:
; 0005 0068     }
; 0005 0069     else if((TEMP_SEL == TEMP_TMEC) || (TEMP_SEL == TEMP_PT100)){
	RJMP _0xA0015
_0xA000F:
	CALL SUBOPT_0x85
	BREQ _0xA0017
	CALL SUBOPT_0x84
	CPI  R30,LOW(0x2)
	BRNE _0xA0016
_0xA0017:
; 0005 006A         adcData[0] = read_adc(8);
	LDI  R26,LOW(8)
	RCALL _read_adc
	LDI  R26,LOW(_adcData)
	LDI  R27,HIGH(_adcData)
	CALL SUBOPT_0x91
; 0005 006B         adcData[1] = read_adc(9);
	LDI  R26,LOW(9)
	RCALL _read_adc
	__POINTW2MN _adcData,4
	CALL SUBOPT_0x91
; 0005 006C         adcData[2] = read_adc(10);
	LDI  R26,LOW(10)
	RCALL _read_adc
	__POINTW2MN _adcData,8
	CALL SUBOPT_0x91
; 0005 006D         adcData[3] = read_adc(11);
	LDI  R26,LOW(11)
	RCALL _read_adc
	__POINTW2MN _adcData,12
	CALL SUBOPT_0x91
; 0005 006E         adcData[4] = read_adc(12);
	LDI  R26,LOW(12)
	RCALL _read_adc
	__POINTW2MN _adcData,16
	CALL SUBOPT_0x91
; 0005 006F     }
; 0005 0070 
; 0005 0071     adcBatt = read_adc(14);
_0xA0016:
_0xA0015:
	LDI  R26,LOW(14)
	RCALL _read_adc
	LDI  R26,LOW(_adcBatt)
	LDI  R27,HIGH(_adcBatt)
	CALL SUBOPT_0x91
; 0005 0072 
; 0005 0073     printDebug("OK\r\n");
	__POINTD1FN _0xA0000,20
	CALL SUBOPT_0x2
; 0005 0074 }
_0x20E0080:
	LD   R16,Y+
	LD   R17,Y+
	RET
;/*============================================================*/
;void init_adc(void)
; 0005 0077 {
_init_adc:
; 0005 0078     // ADC initialization
; 0005 0079     // ADC Clock frequency: 1000.000 kHz
; 0005 007A     // ADC Voltage Reference: 2.56V, cap. on AREF
; 0005 007B     // ADC Auto Trigger Source: Free Running
; 0005 007C     // Digital input buffers on ADC0: On, ADC1: On, ADC2: On, ADC3: On
; 0005 007D     // ADC4: On, ADC5: On, ADC6: On, ADC7: On
; 0005 007E     DIDR0=0x00;
	LDI  R30,LOW(0)
	STS  126,R30
; 0005 007F 
; 0005 0080 
; 0005 0081     if((TEMP_SEL == TEMP_TYPE_K) || (TEMP_SEL == TEMP_RESERVED)){
	CALL SUBOPT_0x84
	BREQ _0xA001A
	CALL SUBOPT_0x84
	CPI  R30,LOW(0x3)
	BRNE _0xA0019
_0xA001A:
; 0005 0082         // Digital input buffers on ADC8: Off, ADC9: On, ADC10: On, ADC11: On
; 0005 0083         // ADC12: On, ADC13: Off, ADC14: Off, ADC15: On
; 0005 0084         DIDR2=0x61;
	LDI  R30,LOW(97)
	RJMP _0xA0021
; 0005 0085     }
; 0005 0086     else if((TEMP_SEL == TEMP_TMEC) || (TEMP_SEL == TEMP_PT100)){
_0xA0019:
	CALL SUBOPT_0x85
	BREQ _0xA001E
	CALL SUBOPT_0x84
	CPI  R30,LOW(0x2)
	BRNE _0xA001D
_0xA001E:
; 0005 0087         // Digital input buffers on ADC8: Off, ADC9: Off, ADC10: Off, ADC11: Off
; 0005 0088         // ADC12: Off, ADC13: Off, ADC14: Off, ADC15: On
; 0005 0089         DIDR2=0x7F;
	LDI  R30,LOW(127)
_0xA0021:
	STS  125,R30
; 0005 008A     }
; 0005 008B 
; 0005 008C     ADMUX   = ADC_VREF_TYPE;
_0xA001D:
	LDI  R30,LOW(64)
	STS  124,R30
; 0005 008D     ADCSRA  = (1<<7) |          // ADEN:    ADC enable
; 0005 008E               (0<<6) |          // ADSC:    ADC Start Conversion
; 0005 008F               (0<<5) |          // ADATE:   ADC Auto Trigger Enable
; 0005 0090               (0<<4) |          // ADIF:    ADC Interrupt Flag
; 0005 0091               (0<<3) |          // ADIE:    ADC Interrupt
; 0005 0092               (1<<2) |          //-----
; 0005 0093               (1<<1) |          //- ADPS2-0: ADC Prescaler Select Bits      (011 = clk/8) (110 = clk/64)
; 0005 0094               (0<<0);           //-----
	LDI  R30,LOW(134)
	STS  122,R30
; 0005 0095 
; 0005 0096     ADCSRB  = 0;
	LDI  R30,LOW(0)
	STS  123,R30
; 0005 0097 
; 0005 0098     //adc_init_read();
; 0005 0099 }
	RET
;/*============================================================*/
;#include <i2c.h>
;#include <delay.h>
;#include <string.h>
;#include <stdlib.h>
;#include <stdio.h>
;#include "ds1672.h"
;
;/*============================================================*/
;unsigned long raw_rtc;
;/*============================================================*/
;int DS1672_trickerChargeEnable(void) /* ----- enable the trickle-charger ------ */
; 0006 000C {

	.CSEG
_DS1672_trickerChargeEnable:
; 0006 000D     #asm("cli")
	cli
; 0006 000E     i2c_start();
	CALL SUBOPT_0x92
; 0006 000F     i2c_write(ADDRTC);
; 0006 0010     i2c_write(5);
	LDI  R26,LOW(5)
	CALL _i2c_write
; 0006 0011     i2c_write(0xA6);            /* enable the trickle-charger : No diode, 2k ohm resistor */
	LDI  R26,LOW(166)
	CALL SUBOPT_0x93
; 0006 0012     i2c_stop();
; 0006 0013     #asm("sei")
	sei
; 0006 0014 
; 0006 0015     /* 10ms delay to complete the write operation */
; 0006 0016     delay_ms(10);
	CALL SUBOPT_0x94
; 0006 0017 
; 0006 0018     return 0;
	RET
; 0006 0019 }
;/*============================================================*/
;unsigned long int DS1672_read(void)
; 0006 001C {
_DS1672_read:
; 0006 001D     unsigned long int z;
; 0006 001E     unsigned char rtc_reg1, rtc_reg2, rtc_reg3, rtc_reg4;
; 0006 001F 
; 0006 0020     #asm("cli")
	SBIW R28,4
	CALL __SAVELOCR4
;	z -> Y+4
;	rtc_reg1 -> R17
;	rtc_reg2 -> R16
;	rtc_reg3 -> R19
;	rtc_reg4 -> R18
	cli
; 0006 0021     i2c_start();
	CALL SUBOPT_0x92
; 0006 0022     i2c_write(ADDRTC);                      /* write slave address, write 1672 */
; 0006 0023     i2c_write(0x00);                        /* write register address, 1st clock register */
	LDI  R26,LOW(0)
	CALL _i2c_write
; 0006 0024     i2c_start();
	CALL _i2c_start
; 0006 0025     i2c_write(ADDRTC | 1);                  /* write slave address, read 1672 */
	LDI  R26,LOW(209)
	CALL _i2c_write
; 0006 0026     rtc_reg1 = i2c_read(ACK);                 /* starts w/last address stored in register pointer */
	LDI  R26,LOW(1)
	CALL _i2c_read
	MOV  R17,R30
; 0006 0027     rtc_reg2 = i2c_read(ACK);
	LDI  R26,LOW(1)
	CALL _i2c_read
	MOV  R16,R30
; 0006 0028     rtc_reg3 = i2c_read(ACK);
	LDI  R26,LOW(1)
	CALL _i2c_read
	MOV  R19,R30
; 0006 0029     rtc_reg4 = i2c_read(NACK);
	LDI  R26,LOW(0)
	CALL _i2c_read
	MOV  R18,R30
; 0006 002A     i2c_stop();
	CALL _i2c_stop
; 0006 002B     #asm("sei")
	sei
; 0006 002C 
; 0006 002D     z = rtc_reg4;
	MOV  R30,R18
	CLR  R31
	CLR  R22
	CLR  R23
	CALL SUBOPT_0x95
; 0006 002E     z <<= 8;
	CALL SUBOPT_0x96
	CALL SUBOPT_0x97
; 0006 002F     z += rtc_reg3;
	MOV  R30,R19
	CALL SUBOPT_0x98
; 0006 0030     z <<= 8;
; 0006 0031     z += rtc_reg2;
	MOV  R30,R16
	CALL SUBOPT_0x98
; 0006 0032     z <<= 8;
; 0006 0033     z += rtc_reg1;
	CALL SUBOPT_0x99
	CALL SUBOPT_0x96
	CALL SUBOPT_0x9A
	CALL SUBOPT_0x9B
; 0006 0034 
; 0006 0035     //printDebug("\r\nDS1672_read -> 0x%02X%02X%02X%02X\r\n",rtc_reg4,rtc_reg3,rtc_reg2,rtc_reg1);
; 0006 0036     //printDebug("rawtime [%ld]\r\n", z);
; 0006 0037 
; 0006 0038     return z;
	CALL __LOADLOCR4
	ADIW R28,8
	RET
; 0006 0039 }
;/*============================================================*/
;int binary_to_date(unsigned long x, struct rtc_structure *rtcCov) /* ------ convert binary time to date format ------ */
; 0006 003C {
_binary_to_date:
; 0006 003D     unsigned long yrs = 99, mon = 99, day = 99, tmp, jday, hrs, min, sec;
; 0006 003E     unsigned long j, n;
; 0006 003F     unsigned int dow;     // day of week
; 0006 0040 
; 0006 0041     j = x / 60;                             /* whole minutes since 1/1/70 */
	ST   -Y,R27
	ST   -Y,R26
	SBIW R28,40
	LDI  R24,12
	LDI  R26,LOW(28)
	LDI  R27,HIGH(28)
	LDI  R30,LOW(_0xC0003*2)
	LDI  R31,HIGH(_0xC0003*2)
	LDI  R22,BYTE3(_0xC0003*2)
	CALL __INITLOCB
	ST   -Y,R17
	ST   -Y,R16
;	x -> Y+44
;	*rtcCov -> Y+42
;	yrs -> Y+38
;	mon -> Y+34
;	day -> Y+30
;	tmp -> Y+26
;	jday -> Y+22
;	hrs -> Y+18
;	min -> Y+14
;	sec -> Y+10
;	j -> Y+6
;	n -> Y+2
;	dow -> R16,R17
	__GETD2S 44
	CALL SUBOPT_0x9C
	CALL SUBOPT_0x9D
; 0006 0042     sec = x - (60 * j);                     /* leftover seconds */
	CALL SUBOPT_0x9E
	__GETD2S 44
	CALL __SUBD21
	__PUTD2S 10
; 0006 0043     n = j / 60;
	CALL SUBOPT_0x49
	CALL SUBOPT_0x9C
	CALL SUBOPT_0x9F
; 0006 0044     min = j - (60 * n);
	CALL SUBOPT_0xA0
	CALL SUBOPT_0x9E
	CALL SUBOPT_0x49
	CALL __SUBD21
	__PUTD2S 14
; 0006 0045     j = n / 24;
	CALL SUBOPT_0xA1
	__GETD1N 0x18
	CALL __DIVD21U
	CALL SUBOPT_0x9D
; 0006 0046     hrs = n - (24 * j);
	__GETD2N 0x18
	CALL __MULD12U
	CALL SUBOPT_0xA1
	CALL __SUBD21
	__PUTD2S 18
; 0006 0047     j = j + (365 + 366);                    /* whole days since 1/1/68 */
	CALL SUBOPT_0xA2
	__ADDD1N 731
	CALL SUBOPT_0xA3
; 0006 0048 
; 0006 0049     dow = (j % 7)+1;                        /* since 1/1/68 is Monday */
	CALL SUBOPT_0x49
	__GETD1N 0x7
	CALL __MODD21U
	ADIW R30,1
	MOVW R16,R30
; 0006 004A                                             /* 1-7 => Sun - Sat */
; 0006 004B     day = j / ((4 * 365) + 1);
	CALL SUBOPT_0xA4
	CALL __DIVD21U
	CALL SUBOPT_0xA5
; 0006 004C     tmp = j % ((4 * 365) + 1);
	CALL SUBOPT_0xA4
	CALL __MODD21U
	__PUTD1S 26
; 0006 004D     if(tmp >= (31 + 29))                    /* if past 2/29 */
	CALL SUBOPT_0xA6
	CALL SUBOPT_0xA7
	BRLO _0xC0004
; 0006 004E     day++;                                  /* add a leap day */
	CALL SUBOPT_0xA8
	CALL SUBOPT_0xA9
	CALL SUBOPT_0xA5
; 0006 004F     yrs = (j - day) / 365;                  /* whole years since 1968 */
_0xC0004:
	CALL SUBOPT_0xAA
	CALL SUBOPT_0xA2
	CALL __SUBD12
	MOVW R26,R30
	MOVW R24,R22
	__GETD1N 0x16D
	CALL __DIVD21U
	__PUTD1S 38
; 0006 0050     jday = j - (yrs * 365) - day;           /* days since 1/1 of current year */
	CALL SUBOPT_0xAB
	CALL SUBOPT_0xAC
	CALL SUBOPT_0x49
	CALL SUBOPT_0xAD
	CALL SUBOPT_0xAA
	CALL __SUBD12
	CALL SUBOPT_0xAE
; 0006 0051     if(tmp <= 365 && tmp >= 60)             /* if past 2/29 and a leap year then */
	CALL SUBOPT_0xA6
	__CPD2N 0x16E
	BRSH _0xC0006
	CALL SUBOPT_0xA6
	CALL SUBOPT_0xA7
	BRSH _0xC0007
_0xC0006:
	RJMP _0xC0005
_0xC0007:
; 0006 0052     jday++;                                 /* add a leap day */
	CALL SUBOPT_0xAF
	CALL SUBOPT_0xA9
	CALL SUBOPT_0xAE
; 0006 0053     yrs += 1968;                            /* calculate year */
_0xC0005:
	CALL SUBOPT_0xAB
	__ADDD1N 1968
	__PUTD1S 38
; 0006 0054     for(mon = 12; mon > 0; mon--)
	__GETD1N 0xC
	__PUTD1S 34
_0xC0009:
	__GETD2S 34
	CALL __CPD02
	BRLO PC+3
	JMP _0xC000A
; 0006 0055     {
; 0006 0056         switch(mon)
	CALL SUBOPT_0xB0
; 0006 0057         {
; 0006 0058             case 1:     tmp = 0;
	CALL SUBOPT_0xB1
	BRNE _0xC000E
	LDI  R30,LOW(0)
	__CLRD1S 26
; 0006 0059                         break;
	RJMP _0xC000D
; 0006 005A             case 2:     tmp = 31;
_0xC000E:
	CALL SUBOPT_0xB2
	BRNE _0xC000F
	__GETD1N 0x1F
	RJMP _0xC004D
; 0006 005B                         break;
; 0006 005C             case 3:     tmp = 59;
_0xC000F:
	CALL SUBOPT_0xB3
	BRNE _0xC0010
	__GETD1N 0x3B
	RJMP _0xC004D
; 0006 005D                         break;
; 0006 005E             case 4:     tmp = 90;
_0xC0010:
	CALL SUBOPT_0xB4
	BRNE _0xC0011
	__GETD1N 0x5A
	RJMP _0xC004D
; 0006 005F                         break;
; 0006 0060             case 5:     tmp = 120;
_0xC0011:
	CALL SUBOPT_0xB5
	BRNE _0xC0012
	__GETD1N 0x78
	RJMP _0xC004D
; 0006 0061                         break;
; 0006 0062             case 6:     tmp = 151;
_0xC0012:
	CALL SUBOPT_0xB6
	BRNE _0xC0013
	__GETD1N 0x97
	RJMP _0xC004D
; 0006 0063                         break;
; 0006 0064             case 7:     tmp = 181;
_0xC0013:
	CALL SUBOPT_0xB7
	BRNE _0xC0014
	__GETD1N 0xB5
	RJMP _0xC004D
; 0006 0065                         break;
; 0006 0066             case 8:     tmp = 212;
_0xC0014:
	CALL SUBOPT_0xB8
	BRNE _0xC0015
	__GETD1N 0xD4
	RJMP _0xC004D
; 0006 0067                         break;
; 0006 0068             case 9:     tmp = 243;
_0xC0015:
	CALL SUBOPT_0xB9
	BRNE _0xC0016
	__GETD1N 0xF3
	RJMP _0xC004D
; 0006 0069                         break;
; 0006 006A             case 10:    tmp = 273;
_0xC0016:
	CALL SUBOPT_0xBA
	BRNE _0xC0017
	__GETD1N 0x111
	RJMP _0xC004D
; 0006 006B                         break;
; 0006 006C             case 11:    tmp = 304;
_0xC0017:
	CALL SUBOPT_0xBB
	BRNE _0xC0018
	__GETD1N 0x130
	RJMP _0xC004D
; 0006 006D                         break;
; 0006 006E             case 12:    tmp = 334;
_0xC0018:
	CALL SUBOPT_0xBC
	BRNE _0xC000D
	__GETD1N 0x14E
_0xC004D:
	__PUTD1S 26
; 0006 006F                         break;
; 0006 0070         }
_0xC000D:
; 0006 0071         if((mon > 2) && !(yrs % 4))         /* adjust for leap year */
	__GETD2S 34
	CALL SUBOPT_0xBD
	BRLO _0xC001B
	CALL SUBOPT_0xAB
	ANDI R30,LOW(0x3)
	BREQ _0xC001C
_0xC001B:
	RJMP _0xC001A
_0xC001C:
; 0006 0072         tmp++;
	CALL SUBOPT_0xBE
	CALL SUBOPT_0xA9
	__PUTD1S 26
; 0006 0073         if(jday >= tmp) break;
_0xC001A:
	CALL SUBOPT_0xBE
	CALL SUBOPT_0xBF
	CALL __CPD21
	BRSH _0xC000A
; 0006 0074     }
	CALL SUBOPT_0xB0
	SBIW R30,1
	SBCI R22,0
	SBCI R23,0
	__PUTD1S 34
	RJMP _0xC0009
_0xC000A:
; 0006 0075     day = jday - tmp + 1;                   /* calculate day in month */
	CALL SUBOPT_0xA6
	CALL SUBOPT_0xAF
	CALL __SUBD12
	CALL SUBOPT_0xC0
	CALL SUBOPT_0xA5
; 0006 0076 
; 0006 0077     rtcCov->year    = yrs;
	CALL SUBOPT_0xAB
	LDD  R26,Y+42
	LDD  R27,Y+42+1
	CALL __PUTDP1
; 0006 0078     rtcCov->month   = mon;
	CALL SUBOPT_0xB0
	__PUTD1SNS 42,4
; 0006 0079     rtcCov->date    = day;
	CALL SUBOPT_0xA8
	__PUTD1SNS 42,8
; 0006 007A     rtcCov->hour    = hrs;
	CALL SUBOPT_0xC1
	__PUTD1SNS 42,12
; 0006 007B     rtcCov->min     = min;
	CALL SUBOPT_0x50
	__PUTD1SNS 42,16
; 0006 007C     rtcCov->sec     = sec;
	CALL SUBOPT_0xC2
	__PUTD1SNS 42,20
; 0006 007D     rtcCov->day     = dow;
	MOVW R30,R16
	__PUTW1SNS 42,24
; 0006 007E 
; 0006 007F     return 0;
	CALL SUBOPT_0xC3
	ADIW R28,48
	RET
; 0006 0080 }
;/*============================================================*/
;unsigned long int date_to_binary(struct rtc_structure rtcSrc)
; 0006 0083 {
_date_to_binary:
; 0006 0084     /* ---- convert date to elapsed days in binary ---- */
; 0006 0085     unsigned long x;                                        // total second
; 0006 0086 
; 0006 0087     /* the following is broken down for clarity */
; 0006 0088     x = (unsigned long)365 * (rtcSrc.year - 1970);          /* calculate number of days for previous years */
	SBIW R28,4
;	rtcSrc -> Y+4
;	x -> Y+0
	CALL SUBOPT_0x77
	__SUBD1N 1970
	CALL SUBOPT_0xAC
	CALL SUBOPT_0x8D
; 0006 0089     x += ((rtcSrc.year - 1969) >> 2);                       /* add a day for each leap year */
	CALL SUBOPT_0x77
	__SUBD1N 1969
	CALL __LSRD1
	CALL __LSRD1
	CALL SUBOPT_0xC4
; 0006 008A     if((rtcSrc.month > 2) && (rtcSrc.year % 4 == 0))        /* add a day if current year is leap and past Feb 29th */
	CALL SUBOPT_0xC5
	CALL SUBOPT_0xBD
	BRLO _0xC001F
	LDD  R30,Y+4
	ANDI R30,LOW(0x3)
	BREQ _0xC0020
_0xC001F:
	RJMP _0xC001E
_0xC0020:
; 0006 008B         x++;
	CALL SUBOPT_0x75
	CALL SUBOPT_0xA9
	CALL SUBOPT_0x8D
; 0006 008C 
; 0006 008D     switch(rtcSrc.month)
_0xC001E:
	CALL SUBOPT_0x3E
; 0006 008E     {
; 0006 008F         case 1:     x += 0;
	CALL SUBOPT_0xB1
	BRNE _0xC0024
	CALL SUBOPT_0x75
	RJMP _0xC004E
; 0006 0090                     break;
; 0006 0091         case 2:     x += 31;
_0xC0024:
	CALL SUBOPT_0xB2
	BRNE _0xC0025
	CALL SUBOPT_0x75
	__ADDD1N 31
	RJMP _0xC004E
; 0006 0092                     break;
; 0006 0093         case 3:     x += 59;
_0xC0025:
	CALL SUBOPT_0xB3
	BRNE _0xC0026
	CALL SUBOPT_0x75
	__ADDD1N 59
	RJMP _0xC004E
; 0006 0094                     break;
; 0006 0095         case 4:     x += 90;
_0xC0026:
	CALL SUBOPT_0xB4
	BRNE _0xC0027
	CALL SUBOPT_0x75
	__ADDD1N 90
	RJMP _0xC004E
; 0006 0096                     break;
; 0006 0097         case 5:     x += 120;
_0xC0027:
	CALL SUBOPT_0xB5
	BRNE _0xC0028
	CALL SUBOPT_0x75
	__ADDD1N 120
	RJMP _0xC004E
; 0006 0098                     break;
; 0006 0099         case 6:     x += 151;
_0xC0028:
	CALL SUBOPT_0xB6
	BRNE _0xC0029
	CALL SUBOPT_0x75
	__ADDD1N 151
	RJMP _0xC004E
; 0006 009A                     break;
; 0006 009B         case 7:     x += 181;
_0xC0029:
	CALL SUBOPT_0xB7
	BRNE _0xC002A
	CALL SUBOPT_0x75
	__ADDD1N 181
	RJMP _0xC004E
; 0006 009C                     break;
; 0006 009D         case 8:     x += 212;
_0xC002A:
	CALL SUBOPT_0xB8
	BRNE _0xC002B
	CALL SUBOPT_0x75
	__ADDD1N 212
	RJMP _0xC004E
; 0006 009E                     break;
; 0006 009F         case 9:     x += 243;
_0xC002B:
	CALL SUBOPT_0xB9
	BRNE _0xC002C
	CALL SUBOPT_0x75
	__ADDD1N 243
	RJMP _0xC004E
; 0006 00A0                     break;
; 0006 00A1         case 10:    x += 273;
_0xC002C:
	CALL SUBOPT_0xBA
	BRNE _0xC002D
	CALL SUBOPT_0x75
	__ADDD1N 273
	RJMP _0xC004E
; 0006 00A2                     break;
; 0006 00A3         case 11:    x += 304;
_0xC002D:
	CALL SUBOPT_0xBB
	BRNE _0xC002E
	CALL SUBOPT_0x75
	__ADDD1N 304
	RJMP _0xC004E
; 0006 00A4                     break;
; 0006 00A5         case 12:    x += 334;
_0xC002E:
	CALL SUBOPT_0xBC
	BRNE _0xC0023
	CALL SUBOPT_0x75
	__ADDD1N 334
_0xC004E:
	CALL __PUTD1S0
; 0006 00A6                     break;
; 0006 00A7     }
_0xC0023:
; 0006 00A8 
; 0006 00A9     x += rtcSrc.date - 1;                       /* finally, add the days into the current month */
	CALL SUBOPT_0xC6
	CALL SUBOPT_0xC7
	CALL SUBOPT_0xC4
; 0006 00AA     x = x * 86400;                              /* and calculate the number of seconds in all those days (1 day = 86400 second)*/
	CALL SUBOPT_0x75
	__GETD2N 0x15180
	CALL __MULD12U
	CALL SUBOPT_0x8D
; 0006 00AB     x += (unsigned long)rtcSrc.hour * 1800;     /* add the number of seconds in the hours */
	CALL SUBOPT_0xC8
; 0006 00AC     x += (unsigned long)rtcSrc.hour * 1800;     /* add the number of seconds in the hours */
	CALL SUBOPT_0xC8
; 0006 00AD     x += (unsigned long)rtcSrc.min * 60;        /* ditto the minutes */
	CALL SUBOPT_0xC9
	CALL SUBOPT_0x9E
	CALL SUBOPT_0xC4
; 0006 00AE     x += rtcSrc.sec;                            /* finally, the seconds */
	CALL SUBOPT_0xCA
	CALL SUBOPT_0xC4
; 0006 00AF 
; 0006 00B0     return(x);
	CALL SUBOPT_0x75
	ADIW R28,30
	RET
; 0006 00B1 }
;/*============================================================*/
;int RTC_setBinary(unsigned long int rtc_bin)
; 0006 00B4 {
_RTC_setBinary:
; 0006 00B5     unsigned long int rtc_current;
; 0006 00B6     unsigned long int rtc_diff;
; 0006 00B7     unsigned char a, b, c, d;
; 0006 00B8 
; 0006 00B9     rtc_current = DS1672_read();
	CALL __PUTPARD2
	SBIW R28,8
	CALL __SAVELOCR4
;	rtc_bin -> Y+12
;	rtc_current -> Y+8
;	rtc_diff -> Y+4
;	a -> R17
;	b -> R16
;	c -> R19
;	d -> R18
	CALL SUBOPT_0x3D
; 0006 00BA 
; 0006 00BB     if(rtc_current > rtc_bin){
	CALL SUBOPT_0xCB
	BRSH _0xC0030
; 0006 00BC         rtc_diff = (unsigned long int) (rtc_current - rtc_bin);
	CALL SUBOPT_0xCC
; 0006 00BD     }
; 0006 00BE     else if(rtc_bin > rtc_current){
	RJMP _0xC0031
_0xC0030:
	CALL SUBOPT_0xCD
	BRSH _0xC0032
; 0006 00BF         rtc_diff = (unsigned long int) (rtc_bin - rtc_current);
	CALL SUBOPT_0xCE
; 0006 00C0     }
; 0006 00C1     else{
	RJMP _0xC0033
_0xC0032:
; 0006 00C2         // set value and current value are equal
; 0006 00C3         //printDebug("\r\nset time and current time are equal\r\n");
; 0006 00C4         rtc_diff = 0;
	LDI  R30,LOW(0)
	__CLRD1S 4
; 0006 00C5     }
_0xC0033:
_0xC0031:
; 0006 00C6 
; 0006 00C7     if((rtc_diff >= 0) && (rtc_diff < 10)){
	CALL SUBOPT_0x96
	CALL __CPD20
	BRLO _0xC0035
	CALL SUBOPT_0xCF
	BRLO _0xC0036
_0xC0035:
	RJMP _0xC0034
_0xC0036:
; 0006 00C8         //printDebug("\r\nset time is too close to current time, not set!!!\r\n");
; 0006 00C9         //printDebug("\r\nset time is too close to current time, not set!!! c[%ld] s[%ld]\r\n", rtc_current, rtc_bin);
; 0006 00CA         return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E007F
; 0006 00CB     }
; 0006 00CC 
; 0006 00CD     printDebug("c_time[%ld] & s_time[%ld] => diff[%ld]\r\n",rtc_current,rtc_bin,rtc_diff);
_0xC0034:
	CALL SUBOPT_0xD0
	CALL SUBOPT_0xD1
	CALL SUBOPT_0x56
; 0006 00CE 
; 0006 00CF     a = (rtc_bin & 0xff);
	CALL SUBOPT_0xD2
; 0006 00D0     b = ((rtc_bin >> 8) & 0xff);
; 0006 00D1     c = ((rtc_bin >> 16) & 0xff);
; 0006 00D2     d = ((rtc_bin >> 24) & 0xff);
; 0006 00D3 
; 0006 00D4     #asm("cli")
	cli
; 0006 00D5     i2c_start();
	CALL SUBOPT_0x92
; 0006 00D6     i2c_write(ADDRTC);          /* write slave address, write 1672 */
; 0006 00D7     i2c_write(0x00);            /* write register address, 1st clock register */
	CALL SUBOPT_0xD3
; 0006 00D8     i2c_write(a);
; 0006 00D9     i2c_write(b);
; 0006 00DA     i2c_write(c);
; 0006 00DB     i2c_write(d);
; 0006 00DC     i2c_stop();
; 0006 00DD     #asm("sei")
	sei
; 0006 00DE 
; 0006 00DF     printDebug(">> RTC_setBinary RTC Sync.\r\n");
	__POINTD1FN _0xC0000,41
	CALL SUBOPT_0x2
; 0006 00E0 
; 0006 00E1     /* 10ms delay to complete the write operation */
; 0006 00E2     delay_ms(10);
	CALL SUBOPT_0x94
; 0006 00E3 
; 0006 00E4     return 0;
_0x20E007F:
	CALL __LOADLOCR4
	ADIW R28,16
	RET
; 0006 00E5 }
;/*============================================================*/
;int RTC_setDateTime(struct rtc_structure rtcSrc,int timezone)
; 0006 00E8 {
_RTC_setDateTime:
; 0006 00E9     unsigned long int rtc_bin;
; 0006 00EA     unsigned long int rtc_current;
; 0006 00EB     unsigned long int rtc_diff;
; 0006 00EC     unsigned char a, b, c, d;
; 0006 00ED 
; 0006 00EE     if((timezone > 14) || (timezone < -12)){
	CALL SUBOPT_0xD4
;	rtcSrc -> Y+18
;	timezone -> Y+16
;	rtc_bin -> Y+12
;	rtc_current -> Y+8
;	rtc_diff -> Y+4
;	a -> R17
;	b -> R16
;	c -> R19
;	d -> R18
	LDD  R26,Y+16
	LDD  R27,Y+16+1
	SBIW R26,15
	BRGE _0xC0038
	LDD  R26,Y+16
	LDD  R27,Y+16+1
	CPI  R26,LOW(0xFFF4)
	LDI  R30,HIGH(0xFFF4)
	CPC  R27,R30
	BRGE _0xC0037
_0xC0038:
; 0006 00EF         printDebug("<RTC_setDateTime> Timezone out of range (%+d)\r\n",timezone);
	__POINTD1FN _0xC0000,70
	CALL __PUTPARD1
	LDD  R30,Y+20
	LDD  R31,Y+20+1
	CALL SUBOPT_0xD5
; 0006 00F0         return -2;
	LDI  R30,LOW(65534)
	LDI  R31,HIGH(65534)
	RJMP _0x20E007E
; 0006 00F1     }
; 0006 00F2 
; 0006 00F3     rtc_bin = date_to_binary(rtcSrc);
_0xC0037:
	MOVW R30,R28
	ADIW R30,18
	LDI  R26,26
	CALL __PUTPARL
	RCALL _date_to_binary
	CALL SUBOPT_0xD6
; 0006 00F4 
; 0006 00F5     rtc_bin = rtc_bin + (int)(timezone * 60 * 60 * -1);
	LDD  R30,Y+16
	LDD  R31,Y+16+1
	CALL SUBOPT_0xD7
	CALL SUBOPT_0xD7
	LDI  R26,LOW(65535)
	LDI  R27,HIGH(65535)
	CALL __MULW12
	CALL SUBOPT_0x9
	CALL SUBOPT_0x9A
	CALL SUBOPT_0xD8
; 0006 00F6 
; 0006 00F7     raw_rtc = rtc_bin;
	CALL SUBOPT_0xD9
; 0006 00F8 
; 0006 00F9     rtc_current = DS1672_read();
	CALL SUBOPT_0x3D
; 0006 00FA 
; 0006 00FB     if(rtc_current > rtc_bin){
	CALL SUBOPT_0xCB
	BRSH _0xC003A
; 0006 00FC         rtc_diff = (unsigned long int) (rtc_current - rtc_bin);
	CALL SUBOPT_0xCC
; 0006 00FD     }
; 0006 00FE     else if(rtc_bin > rtc_current){
	RJMP _0xC003B
_0xC003A:
	CALL SUBOPT_0xCD
	BRSH _0xC003C
; 0006 00FF         rtc_diff = (unsigned long int) (rtc_bin - rtc_current);
	CALL SUBOPT_0xCE
; 0006 0100     }
; 0006 0101     else{
	RJMP _0xC003D
_0xC003C:
; 0006 0102         // set value and current value are equal
; 0006 0103         rtc_diff = 0;
	LDI  R30,LOW(0)
	__CLRD1S 4
; 0006 0104     }
_0xC003D:
_0xC003B:
; 0006 0105 
; 0006 0106     if((rtc_diff >= 0) && (rtc_diff < 10)){
	CALL SUBOPT_0x96
	CALL __CPD20
	BRLO _0xC003F
	CALL SUBOPT_0xCF
	BRLO _0xC0040
_0xC003F:
	RJMP _0xC003E
_0xC0040:
; 0006 0107         //printDebug("\r\nset time is too close to current time, not set!!! c[%ld] s[%ld]\r\n", rtc_current, rtc_bin);
; 0006 0108         return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E007E
; 0006 0109     }
; 0006 010A 
; 0006 010B     printDebug("c_time[%ld] & s_time[%ld] => diff[%ld]\r\n",rtc_current,rtc_bin,rtc_diff);
_0xC003E:
	CALL SUBOPT_0xD0
	CALL SUBOPT_0xD1
	CALL SUBOPT_0x56
; 0006 010C 
; 0006 010D     a = (rtc_bin & 0xff);
	CALL SUBOPT_0xD2
; 0006 010E     b = ((rtc_bin >> 8) & 0xff);
; 0006 010F     c = ((rtc_bin >> 16) & 0xff);
; 0006 0110     d = ((rtc_bin >> 24) & 0xff);
; 0006 0111 
; 0006 0112     #asm("cli")
	cli
; 0006 0113     i2c_start();
	CALL SUBOPT_0x92
; 0006 0114     i2c_write(ADDRTC);          /* write slave address, write 1672 */
; 0006 0115     i2c_write(0x00);            /* write register address, 1st clock register */
	CALL SUBOPT_0xD3
; 0006 0116     i2c_write(a);
; 0006 0117     i2c_write(b);
; 0006 0118     i2c_write(c);
; 0006 0119     i2c_write(d);
; 0006 011A     i2c_stop();
; 0006 011B     #asm("sei")
	sei
; 0006 011C 
; 0006 011D     /* 10ms delay to complete the write operation */
; 0006 011E     delay_ms(10);
	CALL SUBOPT_0x94
; 0006 011F 
; 0006 0120     return 0;
_0x20E007E:
	CALL __LOADLOCR4
	ADIW R28,44
	RET
; 0006 0121 }
;/*============================================================*/
;int RTC_getDateTime(struct rtc_structure *rtcPtr, int timezone)
; 0006 0124 {
_RTC_getDateTime:
; 0006 0125     unsigned long r_rtc;
; 0006 0126     int flag;
; 0006 0127 
; 0006 0128     r_rtc = DS1672_read();
	CALL SUBOPT_0xDA
	ST   -Y,R16
;	*rtcPtr -> Y+8
;	timezone -> Y+6
;	r_rtc -> Y+2
;	flag -> R16,R17
	RCALL _DS1672_read
	CALL SUBOPT_0xDB
; 0006 0129     if(r_rtc == 0xFFFFFFFF){
	CALL SUBOPT_0x2B
	BRNE _0xC0041
; 0006 012A         flag    = RTC_BACKUP;
	__GETWRN 16,17,1
; 0006 012B         r_rtc   = raw_rtc;
	LDS  R30,_raw_rtc
	LDS  R31,_raw_rtc+1
	LDS  R22,_raw_rtc+2
	LDS  R23,_raw_rtc+3
	CALL SUBOPT_0x9F
; 0006 012C     }
; 0006 012D     else{
	RJMP _0xC0042
_0xC0041:
; 0006 012E         flag    = RTC_REAL;
	__GETWRN 16,17,0
; 0006 012F         raw_rtc = r_rtc;
	CALL SUBOPT_0xA0
	CALL SUBOPT_0xD9
; 0006 0130     }
_0xC0042:
; 0006 0131 
; 0006 0132     r_rtc = r_rtc + (int)(timezone * 60 * 60);
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	CALL SUBOPT_0xD7
	CALL SUBOPT_0xD7
	CALL SUBOPT_0xA1
	CALL SUBOPT_0x9A
	CALL SUBOPT_0x9F
; 0006 0133 
; 0006 0134     binary_to_date(r_rtc,rtcPtr);
	CALL SUBOPT_0xA0
	CALL __PUTPARD1
	LDD  R26,Y+12
	LDD  R27,Y+12+1
	RCALL _binary_to_date
; 0006 0135 
; 0006 0136     return flag;
	MOVW R30,R16
	LDD  R17,Y+1
	LDD  R16,Y+0
	ADIW R28,10
	RET
; 0006 0137 }
;/*============================================================*/
;void printRTC(struct rtc_structure time)
; 0006 013A {
_printRTC:
; 0006 013B     switch(time.day){
;	time -> Y+0
	LDD  R30,Y+24
	LDD  R31,Y+24+1
; 0006 013C         case DAY_MON: printDebug("Mon. "); break;
	CPI  R30,LOW(0x1)
	LDI  R26,HIGH(0x1)
	CPC  R31,R26
	BRNE _0xC0046
	__POINTD1FN _0xC0000,118
	RJMP _0xC004F
; 0006 013D         case DAY_TUE: printDebug("Tue. "); break;
_0xC0046:
	CPI  R30,LOW(0x2)
	LDI  R26,HIGH(0x2)
	CPC  R31,R26
	BRNE _0xC0047
	__POINTD1FN _0xC0000,124
	RJMP _0xC004F
; 0006 013E         case DAY_WED: printDebug("Wed. "); break;
_0xC0047:
	CPI  R30,LOW(0x3)
	LDI  R26,HIGH(0x3)
	CPC  R31,R26
	BRNE _0xC0048
	__POINTD1FN _0xC0000,130
	RJMP _0xC004F
; 0006 013F         case DAY_THU: printDebug("Thu. "); break;
_0xC0048:
	CPI  R30,LOW(0x4)
	LDI  R26,HIGH(0x4)
	CPC  R31,R26
	BRNE _0xC0049
	__POINTD1FN _0xC0000,136
	RJMP _0xC004F
; 0006 0140         case DAY_FRI: printDebug("Fri. "); break;
_0xC0049:
	CPI  R30,LOW(0x5)
	LDI  R26,HIGH(0x5)
	CPC  R31,R26
	BRNE _0xC004A
	__POINTD1FN _0xC0000,142
	RJMP _0xC004F
; 0006 0141         case DAY_SAT: printDebug("Sat. "); break;
_0xC004A:
	CPI  R30,LOW(0x6)
	LDI  R26,HIGH(0x6)
	CPC  R31,R26
	BRNE _0xC004B
	__POINTD1FN _0xC0000,148
	RJMP _0xC004F
; 0006 0142         case DAY_SUN: printDebug("Sun. "); break;
_0xC004B:
	CPI  R30,LOW(0x7)
	LDI  R26,HIGH(0x7)
	CPC  R31,R26
	BRNE _0xC0045
	__POINTD1FN _0xC0000,154
_0xC004F:
	CALL __PUTPARD1
	CALL SUBOPT_0x30
; 0006 0143     }
_0xC0045:
; 0006 0144 
; 0006 0145     printDebug(
; 0006 0146         "[%d]%04d-%02d-%02d %02d:%02d:%02d\r\n",
; 0006 0147         time.day,
; 0006 0148         time.year,
; 0006 0149         time.month,
; 0006 014A         time.date,
; 0006 014B         time.hour,
; 0006 014C         time.min,
; 0006 014D         time.sec
; 0006 014E     );
	__POINTD1FN _0xC0000,160
	CALL SUBOPT_0xDC
	CALL SUBOPT_0xDD
	CALL SUBOPT_0x3E
	CALL SUBOPT_0x4B
	CALL SUBOPT_0xCA
	CALL __PUTPARD1
	__GETD1S 32
	CALL SUBOPT_0xDE
	__GETD1S 48
	CALL __PUTPARD1
	LDI  R24,28
	CALL _printDebug
	ADIW R28,32
; 0006 014F     return;
	RJMP _0x20E007D
; 0006 0150 }
;/*============================================================*/
;void init_RTC(void)
; 0006 0153 {
_init_RTC:
; 0006 0154     struct rtc_structure rtcTest;
; 0006 0155 
; 0006 0156     raw_rtc = 0;            /* initial default time_value in RAM */
	SBIW R28,26
;	rtcTest -> Y+0
	LDI  R30,LOW(0)
	STS  _raw_rtc,R30
	STS  _raw_rtc+1,R30
	STS  _raw_rtc+2,R30
	STS  _raw_rtc+3,R30
; 0006 0157 
; 0006 0158     #asm("cli")
	cli
; 0006 0159     i2c_start();
	CALL SUBOPT_0x92
; 0006 015A     i2c_write(ADDRTC);
; 0006 015B     i2c_write(0x04);
	LDI  R26,LOW(4)
	CALL _i2c_write
; 0006 015C     i2c_write(0x00);         /* enable the oscillator */
	LDI  R26,LOW(0)
	CALL SUBOPT_0x93
; 0006 015D     i2c_stop();
; 0006 015E     #asm("sei")
	sei
; 0006 015F 
; 0006 0160     DS1672_trickerChargeEnable();
	RCALL _DS1672_trickerChargeEnable
; 0006 0161 
; 0006 0162     RTC_getDateTime(&rtcTest,0);
	MOVW R30,R28
	CALL SUBOPT_0xDF
	RCALL _RTC_getDateTime
; 0006 0163 
; 0006 0164     printDebug("Running with System Clock @ ");
	__POINTD1FN _0xC0000,196
	CALL SUBOPT_0x2
; 0006 0165 
; 0006 0166     printRTC(rtcTest);
	MOVW R30,R28
	LDI  R26,26
	CALL __PUTPARL
	RCALL _printRTC
; 0006 0167 }
_0x20E007D:
	ADIW R28,26
	RET
;#include <stdlib.h>
;#include <stdio.h>
;#include <string.h>
;#include "config.h"
;#include "debug.h"
;
;char is_properties_config_update                = 1;

	.DSEG
;char is_operating_config_update                 = 1;
;char is_sensor_config_update[MAX_SENS_CHANNEL]  = {1,1,1,1,1};
;char is_din_config_update[MAX_DI_CHANNEL]       = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
;char is_dout_config_update[MAX_DO_CHANNEL]      = {1,1,1,1,1};//,1,1,1,1,1,1,1,1,1,1,1};
;char is_buzzer_config_update                    = 1;
;char is_status_config_update                    = 1;
;char is_env_config_update                       = 1;
;
;struct prop_cnfg_st properties_config;
;struct oper_cnfg_st operating_config;
;struct oper_cnfg_st operating_config;
;struct sens_cnfg_st sensor_config[MAX_SENS_CHANNEL];
;struct din_cnfg_st  din_config[MAX_DI_CHANNEL];
;struct dout_cnfg_st dout_config[MAX_DO_CHANNEL];
;struct buzz_cnfg_st buzz_config;
;struct stat_cnfg_st status_config;
;struct alm_cnfg_st  env_config;
;
;//flash char FIRMWARE_VERSION[] = "iNT-ETH-0.24b";
;//iNT-ETH-DC-0.01a
;flash char FIRMWARE_VERSION[] = "iNT-ETH-DC-0.01a";
;/*============================================================*/
;
;/**************************************************************/
;/*************** Read Configuration from EEPROM ***************/
;/**************************************************************/
;/*============================================================*/
;int getPropertiesConfig(struct prop_cnfg_st *readConfig)
; 0007 0024 {

	.CSEG
_getPropertiesConfig:
; 0007 0025     int i;
; 0007 0026 
; 0007 0027     //printDebug("<getPropertiesConfig>..\r\n");
; 0007 0028 
; 0007 0029     if( config_prop_flag != 0x01){
	CALL SUBOPT_0x71
;	*readConfig -> Y+2
;	i -> R16,R17
	LDI  R26,LOW(_config_prop_flag)
	LDI  R27,HIGH(_config_prop_flag)
	CALL __EEPROMRDB
	CPI  R30,LOW(0x1)
	BREQ _0xE000B
; 0007 002A         printDebug("<getPropertiesConfig> no configuration, use default\r\n");
	__POINTD1FN _0xE0000,0
	CALL SUBOPT_0x2
; 0007 002B         memset(readConfig,0x00,sizeof(struct prop_cnfg_st));
	LDD  R30,Y+2
	LDD  R31,Y+2+1
	CALL SUBOPT_0xE0
	CALL SUBOPT_0xE1
	CALL _memset
; 0007 002C         readConfig->timeZone   = 7;
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	SUBI R26,LOW(-160)
	SBCI R27,HIGH(-160)
	LDI  R30,LOW(7)
	ST   X,R30
; 0007 002D     }
; 0007 002E     else{
	RJMP _0xE000C
_0xE000B:
; 0007 002F 
; 0007 0030         for(i=0;i<DEVTYPE_LENGTH;i++)
	__GETWRN 16,17,0
_0xE000E:
	__CPWRN 16,17,20
	BRGE _0xE000F
; 0007 0031         {
; 0007 0032             readConfig->deviceType[i]   = config_prop.deviceType[i];
	MOVW R30,R16
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	ADD  R30,R26
	ADC  R31,R27
	MOVW R0,R30
	LDI  R26,LOW(_config_prop)
	LDI  R27,HIGH(_config_prop)
	CALL SUBOPT_0xE2
	MOVW R26,R0
	ST   X,R30
; 0007 0033         }
	__ADDWRN 16,17,1
	RJMP _0xE000E
_0xE000F:
; 0007 0034 
; 0007 0035         /*
; 0007 0036         for(i=0;i<FW_LENGTH;i++)
; 0007 0037         {
; 0007 0038             //printDebug("%c",config_prop.firmwareVersion[i]);
; 0007 0039             readConfig->firmwareVersion[i]   = config_prop.firmwareVersion[i];
; 0007 003A         }
; 0007 003B         */
; 0007 003C         memcpyf(readConfig->firmwareVersion,FIRMWARE_VERSION,strlenf(FIRMWARE_VERSION));
	LDD  R30,Y+2
	LDD  R31,Y+2+1
	ADIW R30,20
	ST   -Y,R31
	ST   -Y,R30
	__POINTD1FN _FIRMWARE_VERSION,0
	CALL __PUTPARD1
	LDI  R26,LOW(_FIRMWARE_VERSION*2)
	LDI  R27,HIGH(_FIRMWARE_VERSION*2)
	LDI  R24,BYTE3(_FIRMWARE_VERSION*2)
	CALL _strlenf
	MOVW R26,R30
	CALL _memcpyf
; 0007 003D 
; 0007 003E         for(i=0;i<NAME_LENGTH;i++)
	__GETWRN 16,17,0
_0xE0011:
	__CPWRN 16,17,40
	BRGE _0xE0012
; 0007 003F         {
; 0007 0040             readConfig->deviceName[i]   = config_prop.deviceName[i];
	LDD  R30,Y+2
	LDD  R31,Y+2+1
	ADIW R30,40
	ADD  R30,R16
	ADC  R31,R17
	MOVW R0,R30
	__POINTW1MN _config_prop,40
	CALL SUBOPT_0xE3
; 0007 0041         }
	__ADDWRN 16,17,1
	RJMP _0xE0011
_0xE0012:
; 0007 0042 
; 0007 0043         for(i=0;i<ID_LENGTH;i++)
	__GETWRN 16,17,0
_0xE0014:
	__CPWRN 16,17,20
	BRGE _0xE0015
; 0007 0044         {
; 0007 0045             readConfig->deviceID[i]   = config_prop.deviceID[i];
	CALL SUBOPT_0xE4
	MOVW R0,R30
	__POINTW1MN _config_prop,80
	CALL SUBOPT_0xE3
; 0007 0046         }
	__ADDWRN 16,17,1
	RJMP _0xE0014
_0xE0015:
; 0007 0047 
; 0007 0048         for(i=0;i<NAME_LENGTH;i++)
	__GETWRN 16,17,0
_0xE0017:
	__CPWRN 16,17,40
	BRGE _0xE0018
; 0007 0049         {
; 0007 004A             readConfig->hostName[i]   = config_prop.hostName[i];
	CALL SUBOPT_0xE5
	MOVW R0,R30
	__POINTW1MN _config_prop,100
	CALL SUBOPT_0xE3
; 0007 004B         }
	__ADDWRN 16,17,1
	RJMP _0xE0017
_0xE0018:
; 0007 004C 
; 0007 004D         for(i=0;i<ID_LENGTH;i++)
	__GETWRN 16,17,0
_0xE001A:
	__CPWRN 16,17,20
	BRGE _0xE001B
; 0007 004E         {
; 0007 004F             readConfig->hostID[i]   = config_prop.hostID[i];
	CALL SUBOPT_0xE6
	MOVW R0,R30
	__POINTW1MN _config_prop,140
	CALL SUBOPT_0xE3
; 0007 0050         }
	__ADDWRN 16,17,1
	RJMP _0xE001A
_0xE001B:
; 0007 0051 
; 0007 0052         readConfig->timeZone   = config_prop.timeZone;
	__POINTW2MN _config_prop,160
	CALL __EEPROMRDB
	__PUTB1SN 2,160
; 0007 0053     }
_0xE000C:
; 0007 0054     return 0;
	CALL SUBOPT_0xC3
	ADIW R28,4
	RET
; 0007 0055 }
;/*============================================================*/
;int getOperatingConfig(struct oper_cnfg_st *readConfig)
; 0007 0058 {
_getOperatingConfig:
; 0007 0059     int i;
; 0007 005A 
; 0007 005B     if( config_oper_flag != 0x01){
	CALL SUBOPT_0x71
;	*readConfig -> Y+2
;	i -> R16,R17
	LDI  R26,LOW(_config_oper_flag)
	LDI  R27,HIGH(_config_oper_flag)
	CALL __EEPROMRDB
	CPI  R30,LOW(0x1)
	BREQ _0xE001C
; 0007 005C         printDebug("<getOperatingConfig> no configuration, use default\r\n");
	__POINTD1FN _0xE0000,54
	CALL SUBOPT_0x2
; 0007 005D 
; 0007 005E         readConfig->mode                    =   MODE_DATALOGGER;
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	LDI  R30,LOW(32)
	CALL SUBOPT_0xE7
; 0007 005F         readConfig->deviceEnable            =   0x00;
	LDI  R30,LOW(0)
	CALL SUBOPT_0xE8
; 0007 0060         readConfig->alarmEnable             =   0x00;
; 0007 0061 
; 0007 0062         for(i=0;i<MAX_SENS_CHANNEL;i++)
_0xE001E:
	__CPWRN 16,17,5
	BRGE _0xE001F
; 0007 0063         {
; 0007 0064             readConfig->sensorEnable[i]     =   0x00;
	CALL SUBOPT_0xE9
	LDI  R26,LOW(0)
	STD  Z+0,R26
; 0007 0065         }
	__ADDWRN 16,17,1
	RJMP _0xE001E
_0xE001F:
; 0007 0066 
; 0007 0067         /* // -- for test -- //
; 0007 0068         readConfig->mode                    =   MODE_REALTIME;
; 0007 0069         readConfig->deviceEnable            =   0x01;
; 0007 006A         readConfig->alarmEnable             =   0x01;
; 0007 006B 
; 0007 006C         for(i=0;i<MAX_SENS_CHANNEL;i++)
; 0007 006D         {
; 0007 006E             if(i==0){
; 0007 006F                 readConfig->sensorEnable[i]     =   0x01;
; 0007 0070             }
; 0007 0071             else{
; 0007 0072                 readConfig->sensorEnable[i]     =   0x00;
; 0007 0073             }
; 0007 0074         }
; 0007 0075         */
; 0007 0076     }
; 0007 0077     else{
	RJMP _0xE0020
_0xE001C:
; 0007 0078         readConfig->mode                    =   config_oper.mode;
	LDI  R26,LOW(_config_oper)
	LDI  R27,HIGH(_config_oper)
	CALL SUBOPT_0xEA
; 0007 0079         readConfig->deviceEnable            =   config_oper.deviceEnable;
	__POINTW2MN _config_oper,1
	CALL SUBOPT_0xEB
; 0007 007A         readConfig->alarmEnable             =   config_oper.alarmEnable;
	__POINTW2MN _config_oper,2
	CALL SUBOPT_0xEC
; 0007 007B 
; 0007 007C         for(i=0;i<MAX_SENS_CHANNEL;i++)
	__GETWRN 16,17,0
_0xE0022:
	__CPWRN 16,17,5
	BRGE _0xE0023
; 0007 007D         {
; 0007 007E             readConfig->sensorEnable[i]     =   config_oper.sensorEnable[i];
	CALL SUBOPT_0xE9
	MOVW R0,R30
	__POINTW1MN _config_oper,3
	CALL SUBOPT_0xE3
; 0007 007F         }
	__ADDWRN 16,17,1
	RJMP _0xE0022
_0xE0023:
; 0007 0080     }
_0xE0020:
; 0007 0081 
; 0007 0082 
; 0007 0083     printDebug("<getOperatingConfig> mode            >> 0x%02X\r\n",readConfig->mode);
	__POINTD1FN _0xE0000,107
	CALL SUBOPT_0xED
; 0007 0084     printDebug("<getOperatingConfig> deviceEnable    >> 0x%02X\r\n",readConfig->deviceEnable);
	__POINTD1FN _0xE0000,156
	CALL SUBOPT_0xEE
	LDD  R30,Z+1
	CALL SUBOPT_0x27
; 0007 0085     printDebug("<getOperatingConfig> alarmEnable     >> 0x%02X\r\n",readConfig->alarmEnable);
	__POINTD1FN _0xE0000,205
	CALL SUBOPT_0xEE
	LDD  R30,Z+2
	CALL SUBOPT_0x27
; 0007 0086     printDebug("<getOperatingConfig> sensorEnable    >> ");
	__POINTD1FN _0xE0000,254
	CALL SUBOPT_0x2
; 0007 0087 
; 0007 0088     for(i=0;i<MAX_SENS_CHANNEL;i++)
	__GETWRN 16,17,0
_0xE0025:
	__CPWRN 16,17,5
	BRGE _0xE0026
; 0007 0089     {
; 0007 008A         printDebug("[0x%02X]",readConfig->sensorEnable[i]);
	CALL SUBOPT_0xEF
	CALL SUBOPT_0xF0
; 0007 008B     }
	__ADDWRN 16,17,1
	RJMP _0xE0025
_0xE0026:
; 0007 008C     printDebug("\r\n");
	CALL SUBOPT_0xF1
; 0007 008D 
; 0007 008E     return 0;
	CALL SUBOPT_0xC3
	RJMP _0x20E0078
; 0007 008F }
;/*============================================================*/
;int getSensorConfig(int ch, struct sens_cnfg_st *readConfig)
; 0007 0092 {
_getSensorConfig:
; 0007 0093     if((ch < 0) || (ch >= MAX_SENS_CHANNEL)){
	CALL SUBOPT_0xF2
;	ch -> Y+2
;	*readConfig -> Y+0
	BRMI _0xE0028
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	SBIW R26,5
	BRLT _0xE0027
_0xE0028:
; 0007 0094         printDebug("<getSensorConfig> sensor channel out of range (%d)\r\n",ch);
	__POINTD1FN _0xE0000,304
	CALL SUBOPT_0xEE
	CALL SUBOPT_0xD5
; 0007 0095         return -1;
	RJMP _0x20E0079
; 0007 0096     }
; 0007 0097 
; 0007 0098     if( config_sens_flag[ch] != 0x01){
_0xE0027:
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	SUBI R26,LOW(-_config_sens_flag)
	SBCI R27,HIGH(-_config_sens_flag)
	CALL __EEPROMRDB
	CPI  R30,LOW(0x1)
	BRNE PC+3
	JMP _0xE002A
; 0007 0099         printDebug("<getSensorConfig> no configuration, use default\r\n");
	__POINTD1FN _0xE0000,357
	CALL SUBOPT_0x2
; 0007 009A         readConfig->samplingRate        =   300;
	LD   R26,Y
	LDD  R27,Y+1
	LDI  R30,LOW(300)
	LDI  R31,HIGH(300)
	CALL SUBOPT_0xF3
; 0007 009B         readConfig->reOccurrence        =   0x8000;
	ADIW R26,2
	LDI  R30,LOW(32768)
	LDI  R31,HIGH(32768)
	CALL SUBOPT_0xF3
; 0007 009C         readConfig->timeStartHour       =   0;
	ADIW R26,4
	CALL SUBOPT_0xF4
; 0007 009D         readConfig->timeStartMin        =   0;
	ADIW R26,5
	CALL SUBOPT_0xF4
; 0007 009E         readConfig->timeStopHour        =   0;
	ADIW R26,6
	CALL SUBOPT_0xF4
; 0007 009F         readConfig->timeStopMin         =   0;
	ADIW R26,7
	CALL SUBOPT_0xF4
; 0007 00A0 
; 0007 00A1         readConfig->alarmEnable         =   0x00;
	ADIW R26,8
	CALL SUBOPT_0xF4
; 0007 00A2         readConfig->lowerLimit          =   10.0;
	ADIW R26,9
	CALL SUBOPT_0x8B
	CALL __PUTDP1
; 0007 00A3         readConfig->lowerDelay          =   20;
	LD   R26,Y
	LDD  R27,Y+1
	ADIW R26,13
	LDI  R30,LOW(20)
	LDI  R31,HIGH(20)
	CALL SUBOPT_0xF3
; 0007 00A4         readConfig->lowerExtreme        =   0.0;
	ADIW R26,15
	CALL SUBOPT_0x7C
; 0007 00A5         readConfig->upperLimit          =   180.0;
	LD   R26,Y
	LDD  R27,Y+1
	ADIW R26,19
	__GETD1N 0x43340000
	CALL __PUTDP1
; 0007 00A6         readConfig->upperDelay          =   20;
	LD   R26,Y
	LDD  R27,Y+1
	ADIW R26,23
	LDI  R30,LOW(20)
	LDI  R31,HIGH(20)
	CALL SUBOPT_0xF3
; 0007 00A7         readConfig->upperExtreme        =   200.0;
	ADIW R26,25
	__GETD1N 0x43480000
	CALL __PUTDP1
; 0007 00A8         /*
; 0007 00A9         readConfig->alarmEnable         =   0x00;
; 0007 00AA         readConfig->lowerLimit          =   0.0;
; 0007 00AB         readConfig->lowerDelay          =   10;
; 0007 00AC         readConfig->lowerExtreme        =   0.0;
; 0007 00AD         readConfig->upperLimit          =   0.0;
; 0007 00AE         readConfig->upperDelay          =   10;
; 0007 00AF         readConfig->upperExtreme        =   0.0;
; 0007 00B0         */
; 0007 00B1     }
; 0007 00B2     else{
	RJMP _0xE002B
_0xE002A:
; 0007 00B3         readConfig->samplingRate        =   config_sens[ch].samplingRate;
	CALL SUBOPT_0xF5
	SUBI R30,LOW(-_config_sens)
	SBCI R31,HIGH(-_config_sens)
	MOVW R26,R30
	CALL __EEPROMRDW
	LD   R26,Y
	LDD  R27,Y+1
	ST   X+,R30
	ST   X,R31
; 0007 00B4         readConfig->reOccurrence        =   config_sens[ch].reOccurrence;
	CALL SUBOPT_0xF5
	__ADDW1MN _config_sens,2
	MOVW R26,R30
	CALL __EEPROMRDW
	__PUTW1SNS 0,2
; 0007 00B5         readConfig->timeStartHour       =   config_sens[ch].timeStartHour;
	CALL SUBOPT_0xF5
	__ADDW1MN _config_sens,4
	MOVW R26,R30
	CALL __EEPROMRDB
	__PUTB1SNS 0,4
; 0007 00B6         readConfig->timeStartMin        =   config_sens[ch].timeStartMin;
	CALL SUBOPT_0xF5
	__ADDW1MN _config_sens,5
	MOVW R26,R30
	CALL __EEPROMRDB
	__PUTB1SNS 0,5
; 0007 00B7         readConfig->timeStopHour        =   config_sens[ch].timeStopHour;
	CALL SUBOPT_0xF5
	__ADDW1MN _config_sens,6
	MOVW R26,R30
	CALL __EEPROMRDB
	__PUTB1SNS 0,6
; 0007 00B8         readConfig->timeStopMin         =   config_sens[ch].timeStopMin;
	CALL SUBOPT_0xF5
	__ADDW1MN _config_sens,7
	MOVW R26,R30
	CALL __EEPROMRDB
	__PUTB1SNS 0,7
; 0007 00B9 
; 0007 00BA         readConfig->alarmEnable         =   config_sens[ch].alarmEnable;
	CALL SUBOPT_0xF5
	__ADDW1MN _config_sens,8
	MOVW R26,R30
	CALL __EEPROMRDB
	__PUTB1SNS 0,8
; 0007 00BB         readConfig->lowerLimit          =   config_sens[ch].lowerLimit;
	CALL SUBOPT_0xF5
	CALL SUBOPT_0xF6
	__PUTD1SNS 0,9
; 0007 00BC         readConfig->lowerDelay          =   config_sens[ch].lowerDelay;
	CALL SUBOPT_0xF5
	CALL SUBOPT_0xF7
	__PUTW1SNS 0,13
; 0007 00BD         readConfig->lowerExtreme        =   config_sens[ch].lowerExtreme;
	CALL SUBOPT_0xF5
	CALL SUBOPT_0xF8
	__PUTD1SNS 0,15
; 0007 00BE         readConfig->upperLimit          =   config_sens[ch].upperLimit;
	CALL SUBOPT_0xF5
	CALL SUBOPT_0xF9
	__PUTD1SNS 0,19
; 0007 00BF         readConfig->upperDelay          =   config_sens[ch].upperDelay;
	CALL SUBOPT_0xF5
	CALL SUBOPT_0xFA
	__PUTW1SNS 0,23
; 0007 00C0         readConfig->upperExtreme        =   config_sens[ch].upperExtreme;
	CALL SUBOPT_0xF5
	CALL SUBOPT_0xFB
	__PUTD1SNS 0,25
; 0007 00C1     }
_0xE002B:
; 0007 00C2     return 0;
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
	RJMP _0x20E0078
; 0007 00C3 }
;/*============================================================*/
;int getAuxDinConfig(int ch, struct din_cnfg_st *readConfig)
; 0007 00C6 {
_getAuxDinConfig:
; 0007 00C7     if((ch < 0) || (ch >= MAX_DI_CHANNEL)){
	CALL SUBOPT_0xF2
;	ch -> Y+2
;	*readConfig -> Y+0
	BRMI _0xE002D
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	SBIW R26,16
	BRLT _0xE002C
_0xE002D:
; 0007 00C8         printDebug("<getAuxDinConfig> digital input channel out of range (%d)\r\n",ch);
	__POINTD1FN _0xE0000,407
	CALL SUBOPT_0xEE
	CALL SUBOPT_0xD5
; 0007 00C9         return -1;
	RJMP _0x20E0079
; 0007 00CA     }
; 0007 00CB 
; 0007 00CC     if( config_din_flag[ch] != 0x01){
_0xE002C:
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	SUBI R26,LOW(-_config_din_flag)
	SBCI R27,HIGH(-_config_din_flag)
	CALL __EEPROMRDB
	CPI  R30,LOW(0x1)
	BREQ _0xE002F
; 0007 00CD         printDebug("<getAuxDinConfig> no configuration, use default\r\n");
	__POINTD1FN _0xE0000,467
	CALL SUBOPT_0x2
; 0007 00CE 
; 0007 00CF         readConfig->channelEnable       =   0x00;
	LD   R26,Y
	LDD  R27,Y+1
	CALL SUBOPT_0xF4
; 0007 00D0         readConfig->alarmDelay          =   0;
	ADIW R26,1
	CALL SUBOPT_0xFC
; 0007 00D1 
; 0007 00D2         /* // -- for test -- //
; 0007 00D3         if(ch < 2)  readConfig->channelEnable       =   0x01;
; 0007 00D4         else        readConfig->channelEnable       =   0x00;
; 0007 00D5 
; 0007 00D6         readConfig->alarmDelay          =   0;
; 0007 00D7         */
; 0007 00D8     }
; 0007 00D9     else{
	RJMP _0xE0030
_0xE002F:
; 0007 00DA         readConfig->channelEnable       =   config_din[ch].channelEnable;
	CALL SUBOPT_0xFD
	SUBI R30,LOW(-_config_din)
	SBCI R31,HIGH(-_config_din)
	CALL SUBOPT_0xFE
; 0007 00DB         readConfig->alarmDelay          =   config_din[ch].alarmDelay;
	CALL SUBOPT_0xFD
	__ADDW1MN _config_din,1
	MOVW R26,R30
	CALL SUBOPT_0xFF
; 0007 00DC     }
_0xE0030:
; 0007 00DD     return 0;
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
	RJMP _0x20E0078
; 0007 00DE }
;/*============================================================*/
;int getAuxDoutConfig(int ch, struct dout_cnfg_st *readConfig)
; 0007 00E1 {
_getAuxDoutConfig:
; 0007 00E2     int i;
; 0007 00E3 
; 0007 00E4     if((ch < 0) || (ch >= MAX_DO_CHANNEL)){
	CALL SUBOPT_0x71
;	ch -> Y+4
;	*readConfig -> Y+2
;	i -> R16,R17
	LDD  R26,Y+5
	TST  R26
	BRMI _0xE0032
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	SBIW R26,5
	BRLT _0xE0031
_0xE0032:
; 0007 00E5         printDebug("<getAuxDoutConfig> digital output channel out of range (%d)\r\n",ch);
	__POINTD1FN _0xE0000,517
	CALL SUBOPT_0x100
; 0007 00E6         return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E007B
; 0007 00E7     }
; 0007 00E8 
; 0007 00E9     if( config_dout_flag[ch] != 0x01){
_0xE0031:
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	SUBI R26,LOW(-_config_dout_flag)
	SBCI R27,HIGH(-_config_dout_flag)
	CALL __EEPROMRDB
	CPI  R30,LOW(0x1)
	BREQ _0xE0034
; 0007 00EA         printDebug("<getAuxDoutConfig> no configuration, use default\r\n");
	__POINTD1FN _0xE0000,579
	CALL SUBOPT_0x2
; 0007 00EB         readConfig->channelEnable       =   0x00;
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	LDI  R30,LOW(0)
	CALL SUBOPT_0xE7
; 0007 00EC         readConfig->stateOnEvent        =   0x01;
	LDI  R30,LOW(1)
	CALL SUBOPT_0xE8
; 0007 00ED         readConfig->eventSourceNumber   =   0;
; 0007 00EE 
; 0007 00EF         for(i=0;i<MAX_EVENT_SOURCE;i++){
_0xE0036:
	__CPWRN 16,17,35
	BRGE _0xE0037
; 0007 00F0             readConfig->eventSource[i]  =   0x00;
	CALL SUBOPT_0xE9
	LDI  R26,LOW(0)
	STD  Z+0,R26
; 0007 00F1         }
	__ADDWRN 16,17,1
	RJMP _0xE0036
_0xE0037:
; 0007 00F2     }
; 0007 00F3     else{
	RJMP _0xE0038
_0xE0034:
; 0007 00F4         readConfig->channelEnable       =   config_dout[ch].channelEnable;
	CALL SUBOPT_0x101
	SUBI R30,LOW(-_config_dout)
	SBCI R31,HIGH(-_config_dout)
	MOVW R26,R30
	CALL SUBOPT_0xEA
; 0007 00F5         readConfig->stateOnEvent        =   config_dout[ch].stateOnEvent;
	CALL SUBOPT_0x101
	__ADDW1MN _config_dout,1
	MOVW R26,R30
	CALL SUBOPT_0xEB
; 0007 00F6         readConfig->eventSourceNumber   =   config_dout[ch].eventSourceNumber;
	CALL SUBOPT_0x101
	__ADDW1MN _config_dout,2
	MOVW R26,R30
	CALL SUBOPT_0xEC
; 0007 00F7 
; 0007 00F8         printDebug("<getAuxDoutConfig> -- CH %d -- \r\n",ch);
	__POINTD1FN _0xE0000,630
	CALL SUBOPT_0x100
; 0007 00F9         printDebug("<getAuxDoutConfig> enable         [0x%02X]\r\n",config_dout[ch].channelEnable);
	__POINTD1FN _0xE0000,664
	CALL SUBOPT_0x102
	CALL SUBOPT_0x103
; 0007 00FA         printDebug("<getAuxDoutConfig> stateOnEvent   [0x%02X]\r\n",config_dout[ch].stateOnEvent);
	__POINTD1FN _0xE0000,709
	CALL SUBOPT_0x102
	CALL SUBOPT_0x104
; 0007 00FB         printDebug("<getAuxDoutConfig> numberEvSrc    [%d]->",config_dout[ch].eventSourceNumber);
	__POINTD1FN _0xE0000,754
	CALL SUBOPT_0x102
	CALL SUBOPT_0x105
	CALL SUBOPT_0x27
; 0007 00FC         for(i=0;i<config_dout[ch].eventSourceNumber;i++){
	__GETWRN 16,17,0
_0xE003A:
	CALL SUBOPT_0x101
	CALL SUBOPT_0x105
	CALL SUBOPT_0x106
	BRGE _0xE003B
; 0007 00FD             readConfig->eventSource[i]  =   config_dout[ch].eventSource[i];
	CALL SUBOPT_0xE9
	__PUTW1R 23,24
	CALL SUBOPT_0x101
	CALL SUBOPT_0x107
	CALL __EEPROMRDB
	__GETW2R 23,24
	ST   X,R30
; 0007 00FE             printDebug("[0x%02X]",readConfig->eventSource[i]);
	CALL SUBOPT_0xEF
	CALL SUBOPT_0xF0
; 0007 00FF         }
	__ADDWRN 16,17,1
	RJMP _0xE003A
_0xE003B:
; 0007 0100         for(i=config_dout[ch].eventSourceNumber;i<MAX_EVENT_SOURCE;i++){
	CALL SUBOPT_0x101
	CALL SUBOPT_0x105
	MOV  R16,R30
	CLR  R17
_0xE003D:
	__CPWRN 16,17,35
	BRGE _0xE003E
; 0007 0101             readConfig->eventSource[i]  =   0x00;
	CALL SUBOPT_0xE9
	LDI  R26,LOW(0)
	STD  Z+0,R26
; 0007 0102             //printDebug("[0x%02X]",readConfig->eventSource[i]);
; 0007 0103         }
	__ADDWRN 16,17,1
	RJMP _0xE003D
_0xE003E:
; 0007 0104         printDebug("\r\n");
	CALL SUBOPT_0xF1
; 0007 0105 
; 0007 0106     }
_0xE0038:
; 0007 0107     return 0;
	RJMP _0x20E007C
; 0007 0108 }
;/*============================================================*/
;int getAuxAinConfig(int ch, struct ain_cnfg_st *readConfig)
; 0007 010B {
_getAuxAinConfig:
; 0007 010C     if((ch < 0) || (ch >= MAX_AI_CHANNEL)){
	CALL SUBOPT_0xF2
;	ch -> Y+2
;	*readConfig -> Y+0
	BRMI _0xE0040
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	SBIW R26,16
	BRLT _0xE003F
_0xE0040:
; 0007 010D         printDebug("<getAuxAinConfig> analog input channel out of range (%d)\r\n",ch);
	__POINTD1FN _0xE0000,795
	CALL SUBOPT_0xEE
	CALL SUBOPT_0xD5
; 0007 010E         return -1;
	RJMP _0x20E0079
; 0007 010F     }
; 0007 0110 
; 0007 0111     if( config_ain_flag[ch] != 0x01){
_0xE003F:
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	SUBI R26,LOW(-_config_ain_flag)
	SBCI R27,HIGH(-_config_ain_flag)
	CALL __EEPROMRDB
	CPI  R30,LOW(0x1)
	BREQ _0xE0042
; 0007 0112         printDebug("<getAuxAinConfig> no configuration, use default\r\n");
	__POINTD1FN _0xE0000,854
	CALL SUBOPT_0x2
; 0007 0113         readConfig->channelEnable       =   0x00;
	LD   R26,Y
	LDD  R27,Y+1
	CALL SUBOPT_0xF4
; 0007 0114         readConfig->alarmLevel          =   0;
	ADIW R26,1
	CALL SUBOPT_0x7C
; 0007 0115     }
; 0007 0116     else{
	RJMP _0xE0043
_0xE0042:
; 0007 0117         readConfig->channelEnable       =   config_ain[ch].channelEnable;
	CALL SUBOPT_0x108
	SUBI R30,LOW(-_config_ain)
	SBCI R31,HIGH(-_config_ain)
	CALL SUBOPT_0xFE
; 0007 0118         readConfig->alarmLevel          =   config_ain[ch].alarmLevel;
	CALL SUBOPT_0x108
	__ADDW1MN _config_ain,1
	MOVW R26,R30
	CALL __EEPROMRDD
	__PUTD1SNS 0,1
; 0007 0119     }
_0xE0043:
; 0007 011A     return 0;
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
	RJMP _0x20E0078
; 0007 011B }
;/*============================================================*/
;int getAuxAoutConfig(int ch, struct aout_cnfg_st *readConfig)
; 0007 011E {
_getAuxAoutConfig:
; 0007 011F     int i;
; 0007 0120 
; 0007 0121     if((ch < 0) || (ch >= MAX_AO_CHANNEL)){
	CALL SUBOPT_0x71
;	ch -> Y+4
;	*readConfig -> Y+2
;	i -> R16,R17
	LDD  R26,Y+5
	TST  R26
	BRMI _0xE0045
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	SBIW R26,16
	BRLT _0xE0044
_0xE0045:
; 0007 0122         printDebug("<getAuxAoutConfig> analog output channel out of range (%d)\r\n",ch);
	__POINTD1FN _0xE0000,904
	CALL SUBOPT_0x100
; 0007 0123         return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E007B
; 0007 0124     }
; 0007 0125 
; 0007 0126     if( config_aout_flag[ch] != 0x01){
_0xE0044:
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	SUBI R26,LOW(-_config_aout_flag)
	SBCI R27,HIGH(-_config_aout_flag)
	CALL __EEPROMRDB
	CPI  R30,LOW(0x1)
	BREQ _0xE0047
; 0007 0127         printDebug("<getAuxAoutConfig> no configuration, use default\r\n");
	__POINTD1FN _0xE0000,965
	CALL SUBOPT_0x2
; 0007 0128         readConfig->channelEnable       =   0x00;
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	LDI  R30,LOW(0)
	CALL SUBOPT_0xE7
; 0007 0129         readConfig->levelOnEvent        =   0.0;
	CALL SUBOPT_0x7C
; 0007 012A         readConfig->eventSourceNumber   =   0;
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	ADIW R26,5
	LDI  R30,LOW(0)
	ST   X,R30
; 0007 012B 
; 0007 012C         for(i=0;i<MAX_EVENT_SOURCE;i++){
	__GETWRN 16,17,0
_0xE0049:
	__CPWRN 16,17,35
	BRGE _0xE004A
; 0007 012D             readConfig->eventSource[i]  =   0x00;
	CALL SUBOPT_0x109
	LDI  R26,LOW(0)
	STD  Z+0,R26
; 0007 012E         }
	__ADDWRN 16,17,1
	RJMP _0xE0049
_0xE004A:
; 0007 012F     }
; 0007 0130     else{
	RJMP _0xE004B
_0xE0047:
; 0007 0131         readConfig->channelEnable       =   config_aout[ch].channelEnable;
	CALL SUBOPT_0x10A
	SUBI R30,LOW(-_config_aout)
	SBCI R31,HIGH(-_config_aout)
	MOVW R26,R30
	CALL SUBOPT_0xEA
; 0007 0132         readConfig->levelOnEvent        =   config_aout[ch].levelOnEvent;
	CALL SUBOPT_0x10A
	__ADDW1MN _config_aout,1
	MOVW R26,R30
	CALL __EEPROMRDD
	__PUTD1SNS 2,1
; 0007 0133         readConfig->eventSourceNumber   =   config_aout[ch].eventSourceNumber;
	CALL SUBOPT_0x10A
	CALL SUBOPT_0x10B
	__PUTB1SNS 2,5
; 0007 0134 
; 0007 0135         for(i=0;i<config_aout[ch].eventSourceNumber;i++){
	__GETWRN 16,17,0
_0xE004D:
	CALL SUBOPT_0x10A
	CALL SUBOPT_0x10B
	CALL SUBOPT_0x106
	BRGE _0xE004E
; 0007 0136             readConfig->eventSource[i]  =   config_aout[ch].eventSource[i];
	CALL SUBOPT_0x109
	__PUTW1R 23,24
	CALL SUBOPT_0x10A
	CALL SUBOPT_0x10C
	CALL __EEPROMRDB
	__GETW2R 23,24
	ST   X,R30
; 0007 0137         }
	__ADDWRN 16,17,1
	RJMP _0xE004D
_0xE004E:
; 0007 0138         for(i=config_aout[ch].eventSourceNumber;i<MAX_EVENT_SOURCE;i++){
	CALL SUBOPT_0x10A
	CALL SUBOPT_0x10B
	MOV  R16,R30
	CLR  R17
_0xE0050:
	__CPWRN 16,17,35
	BRGE _0xE0051
; 0007 0139             readConfig->eventSource[i]  =   0x00;
	CALL SUBOPT_0x109
	LDI  R26,LOW(0)
	STD  Z+0,R26
; 0007 013A         }
	__ADDWRN 16,17,1
	RJMP _0xE0050
_0xE0051:
; 0007 013B     }
_0xE004B:
; 0007 013C     return 0;
_0x20E007C:
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
_0x20E007B:
	LDD  R17,Y+1
	LDD  R16,Y+0
	ADIW R28,6
	RET
; 0007 013D }
;/*============================================================*/
;int getBuzzerConfig(struct buzz_cnfg_st *readConfig)
; 0007 0140 {
_getBuzzerConfig:
; 0007 0141     char errSrc[4] = {0xC7,0xCF,0xD7,0xDF};
; 0007 0142     int i;
; 0007 0143 
; 0007 0144     if( config_buzz_flag != 0x01){
	ST   -Y,R27
	ST   -Y,R26
	SBIW R28,4
	LDI  R30,LOW(199)
	ST   Y,R30
	LDI  R30,LOW(207)
	STD  Y+1,R30
	LDI  R30,LOW(215)
	STD  Y+2,R30
	LDI  R30,LOW(223)
	STD  Y+3,R30
	ST   -Y,R17
	ST   -Y,R16
;	*readConfig -> Y+6
;	errSrc -> Y+2
;	i -> R16,R17
	LDI  R26,LOW(_config_buzz_flag)
	LDI  R27,HIGH(_config_buzz_flag)
	CALL __EEPROMRDB
	CPI  R30,LOW(0x1)
	BREQ _0xE0052
; 0007 0145         printDebug("<getBuzzerConfig> no configuration, use default\r\n");
	__POINTD1FN _0xE0000,1016
	CALL SUBOPT_0x2
; 0007 0146         readConfig->enable              =   0x01;
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	LDI  R30,LOW(1)
	ST   X,R30
; 0007 0147         readConfig->eventSourceNumber   =   sizeof(errSrc);
	ADIW R26,1
	LDI  R30,LOW(4)
	ST   X,R30
; 0007 0148 
; 0007 0149         //printDebug("<getBuzzerConfig> eventSourceNumber = %d ->",readConfig->eventSourceNumber);
; 0007 014A         for(i=0;i<sizeof(errSrc);i++){
	__GETWRN 16,17,0
_0xE0054:
	__CPWRN 16,17,4
	BRGE _0xE0055
; 0007 014B             if(i<sizeof(errSrc)){
	__CPWRN 16,17,4
	BRGE _0xE0056
; 0007 014C                 readConfig->eventSource[i]  =   errSrc[i];
	CALL SUBOPT_0x10D
	MOVW R0,R30
	MOVW R26,R28
	ADIW R26,2
	ADD  R26,R16
	ADC  R27,R17
	LD   R30,X
	MOVW R26,R0
	ST   X,R30
; 0007 014D                 //printDebug("[0x%02X]",readConfig->eventSource[i]);
; 0007 014E             }
; 0007 014F             else{
	RJMP _0xE0057
_0xE0056:
; 0007 0150                 readConfig->eventSource[i]  =   0x00;
	CALL SUBOPT_0x10D
	LDI  R26,LOW(0)
	STD  Z+0,R26
; 0007 0151             }
_0xE0057:
; 0007 0152         }
	__ADDWRN 16,17,1
	RJMP _0xE0054
_0xE0055:
; 0007 0153         //printDebug("\r\n");
; 0007 0154     }
; 0007 0155     else{
	RJMP _0xE0058
_0xE0052:
; 0007 0156         readConfig->enable              =   config_buzz.enable;
	LDI  R26,LOW(_config_buzz)
	LDI  R27,HIGH(_config_buzz)
	CALL __EEPROMRDB
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	ST   X,R30
; 0007 0157         readConfig->eventSourceNumber   =   config_buzz.eventSourceNumber;
	CALL SUBOPT_0x10E
	__PUTB1SNS 6,1
; 0007 0158 
; 0007 0159         for(i=0;i<config_buzz.eventSourceNumber;i++){
	__GETWRN 16,17,0
_0xE005A:
	CALL SUBOPT_0x10E
	CALL SUBOPT_0x106
	BRGE _0xE005B
; 0007 015A             readConfig->eventSource[i]  =   config_buzz.eventSource[i];
	CALL SUBOPT_0x10D
	MOVW R0,R30
	__POINTW1MN _config_buzz,2
	CALL SUBOPT_0xE3
; 0007 015B         }
	__ADDWRN 16,17,1
	RJMP _0xE005A
_0xE005B:
; 0007 015C         for(i=config_buzz.eventSourceNumber;i<MAX_EVENT_SOURCE;i++){
	CALL SUBOPT_0x10E
	MOV  R16,R30
	CLR  R17
_0xE005D:
	__CPWRN 16,17,35
	BRGE _0xE005E
; 0007 015D             readConfig->eventSource[i]  =   0x00;
	CALL SUBOPT_0x10D
	LDI  R26,LOW(0)
	STD  Z+0,R26
; 0007 015E         }
	__ADDWRN 16,17,1
	RJMP _0xE005D
_0xE005E:
; 0007 015F     }
_0xE0058:
; 0007 0160 
; 0007 0161     printDebug("<getBuzzerConfig> enable            >>[0x%02X]\r\n",    readConfig->enable);
	__POINTD1FN _0xE0000,1066
	CALL SUBOPT_0x10F
	LD   R30,X
	CALL SUBOPT_0x27
; 0007 0162     printDebug("<getBuzzerConfig> eventSourceNumber >>[%d]\r\n",         readConfig->eventSourceNumber);
	__POINTD1FN _0xE0000,1115
	CALL SUBOPT_0x110
	LDD  R30,Z+1
	CALL SUBOPT_0x27
; 0007 0163     printDebug("<getBuzzerConfig> eventSource       >>");
	__POINTD1FN _0xE0000,1160
	CALL SUBOPT_0x2
; 0007 0164     for(i=0;i<MAX_EVENT_SOURCE;i++){
	__GETWRN 16,17,0
_0xE0060:
	__CPWRN 16,17,35
	BRGE _0xE0061
; 0007 0165         printDebug("[0x%02X]",readConfig->eventSource[i]);
	CALL SUBOPT_0x111
	CALL SUBOPT_0x110
	CALL SUBOPT_0x112
	CALL SUBOPT_0x27
; 0007 0166     }
	__ADDWRN 16,17,1
	RJMP _0xE0060
_0xE0061:
; 0007 0167     printDebug("\r\n");
	CALL SUBOPT_0xF1
; 0007 0168 
; 0007 0169     return 0;
	CALL SUBOPT_0xC3
	ADIW R28,8
	RET
; 0007 016A }
;/*============================================================*/
;int getEnvAlarmConfig(struct alm_cnfg_st *readConfig)
; 0007 016D {
_getEnvAlarmConfig:
; 0007 016E     if( config_alm_flag != 0x01 ){
	ST   -Y,R27
	ST   -Y,R26
;	*readConfig -> Y+0
	LDI  R26,LOW(_config_alm_flag)
	LDI  R27,HIGH(_config_alm_flag)
	CALL __EEPROMRDB
	CPI  R30,LOW(0x1)
	BREQ _0xE0062
; 0007 016F         printDebug("<getEnvAlarmConfig> no configuration, use default\r\n");
	__POINTD1FN _0xE0000,1199
	CALL SUBOPT_0x2
; 0007 0170         readConfig->gsmRSSILevel         =   0;
	LD   R26,Y
	LDD  R27,Y+1
	CALL SUBOPT_0x7C
; 0007 0171         readConfig->gsmCreditBalance     =   0;
	LD   R26,Y
	LDD  R27,Y+1
	ADIW R26,4
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
	CALL SUBOPT_0xF3
; 0007 0172         readConfig->batteryLevel         =   0;
	ADIW R26,6
	CALL SUBOPT_0x7C
; 0007 0173         readConfig->commSignalLevel      =   0;
	LD   R26,Y
	LDD  R27,Y+1
	ADIW R26,10
	CALL SUBOPT_0x7C
; 0007 0174         readConfig->commLostDelay        =   0;
	LD   R26,Y
	LDD  R27,Y+1
	ADIW R26,14
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
	CALL SUBOPT_0xF3
; 0007 0175         readConfig->memoryMin            =   0;
	ADIW R26,16
	CALL SUBOPT_0xFC
; 0007 0176     }
; 0007 0177     else{
	RJMP _0xE0063
_0xE0062:
; 0007 0178         readConfig->gsmRSSILevel         =   config_alm.gsmRSSILevel;
	LDI  R26,LOW(_config_alm)
	LDI  R27,HIGH(_config_alm)
	CALL __EEPROMRDD
	LD   R26,Y
	LDD  R27,Y+1
	CALL __PUTDP1
; 0007 0179         readConfig->gsmCreditBalance     =   config_alm.gsmCreditBalance;
	__POINTW2MN _config_alm,4
	CALL __EEPROMRDW
	__PUTW1SNS 0,4
; 0007 017A         readConfig->batteryLevel         =   config_alm.batteryLevel;
	__POINTW2MN _config_alm,6
	CALL __EEPROMRDD
	__PUTD1SNS 0,6
; 0007 017B         readConfig->commSignalLevel      =   config_alm.commSignalLevel;
	__POINTW2MN _config_alm,10
	CALL __EEPROMRDD
	__PUTD1SNS 0,10
; 0007 017C         readConfig->commLostDelay        =   config_alm.commLostDelay;
	__POINTW2MN _config_alm,14
	CALL __EEPROMRDW
	__PUTW1SNS 0,14
; 0007 017D         readConfig->memoryMin            =   config_alm.memoryMin;
	__POINTW2MN _config_alm,16
	CALL __EEPROMRDW
	__PUTW1SNS 0,16
; 0007 017E     }
_0xE0063:
; 0007 017F 
; 0007 0180     printDebug("<getEnvAlarmConfig> gsmRSSILevel         [%f]\r\n",readConfig->gsmRSSILevel);
	__POINTD1FN _0xE0000,1251
	CALL SUBOPT_0x113
	CALL SUBOPT_0x114
; 0007 0181     printDebug("<getEnvAlarmConfig> gsmCreditBalance     [%d]\r\n",readConfig->gsmCreditBalance);
	__POINTD1FN _0xE0000,1299
	CALL SUBOPT_0x113
	ADIW R26,4
	CALL SUBOPT_0x115
; 0007 0182     printDebug("<getEnvAlarmConfig> batteryLevel         [%f]\r\n",readConfig->batteryLevel);
	__POINTD1FN _0xE0000,1347
	CALL SUBOPT_0x116
	CALL SUBOPT_0x117
; 0007 0183     printDebug("<getEnvAlarmConfig> commSignalLevel      [%f]\r\n",readConfig->commSignalLevel);
	__POINTD1FN _0xE0000,1395
	CALL SUBOPT_0x116
	CALL SUBOPT_0x118
; 0007 0184     printDebug("<getEnvAlarmConfig> commLostDelay        [%d]\r\n",readConfig->commLostDelay);
	__POINTD1FN _0xE0000,1443
	CALL SUBOPT_0x113
	ADIW R26,14
	CALL SUBOPT_0x115
; 0007 0185     printDebug("<getEnvAlarmConfig> memoryMin            [%u]\r\n",readConfig->memoryMin,);
	__POINTD1FN _0xE0000,1491
	CALL SUBOPT_0x113
	ADIW R26,16
	RJMP _0x20E007A
; 0007 0186 
; 0007 0187     return 0;
; 0007 0188 }
;/*============================================================*/
;int getStatusReportConfig(struct stat_cnfg_st *readConfig)
; 0007 018B {
_getStatusReportConfig:
; 0007 018C     if( config_stat_flag != 0x01 ){
	ST   -Y,R27
	ST   -Y,R26
;	*readConfig -> Y+0
	LDI  R26,LOW(_config_stat_flag)
	LDI  R27,HIGH(_config_stat_flag)
	CALL __EEPROMRDB
	CPI  R30,LOW(0x1)
	BREQ _0xE0064
; 0007 018D         printDebug("<getStatusReportConfig> no configuration, use default\r\n");
	__POINTD1FN _0xE0000,1539
	CALL SUBOPT_0x2
; 0007 018E         readConfig->accm                =   0x30;
	LD   R26,Y
	LDD  R27,Y+1
	LDI  R30,LOW(48)
	ST   X,R30
; 0007 018F         readConfig->intv                =   60;
	ADIW R26,1
	LDI  R30,LOW(60)
	LDI  R31,HIGH(60)
	ST   X+,R30
	ST   X,R31
; 0007 0190     }
; 0007 0191     else{
	RJMP _0xE0065
_0xE0064:
; 0007 0192         readConfig->accm                =   config_stat.accm;
	LDI  R26,LOW(_config_stat)
	LDI  R27,HIGH(_config_stat)
	CALL __EEPROMRDB
	LD   R26,Y
	LDD  R27,Y+1
	ST   X,R30
; 0007 0193         readConfig->intv                =   config_stat.intv;
	__POINTW2MN _config_stat,1
	CALL SUBOPT_0xFF
; 0007 0194     }
_0xE0065:
; 0007 0195 
; 0007 0196     printDebug("<getStatusReportConfig> accm        [0x%02X]\r\n",readConfig->accm);
	__POINTD1FN _0xE0000,1595
	CALL SUBOPT_0x113
	LD   R30,X
	CALL SUBOPT_0x27
; 0007 0197     printDebug("<getStatusReportConfig> intv        [%d]\r\n",readConfig->intv);
	__POINTD1FN _0xE0000,1642
	CALL SUBOPT_0x113
	ADIW R26,1
_0x20E007A:
	CALL __GETW1P
	CALL SUBOPT_0xDD
	CALL SUBOPT_0x10
; 0007 0198 
; 0007 0199     return 0;
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
	ADIW R28,2
	RET
; 0007 019A }
;/*============================================================*/
;
;/**************************************************************/
;/**************** Write Configuration to EEPROM ***************/
;/**************************************************************/
;/*============================================================*/
;int setPropertiesConfig(struct prop_cnfg_st *newConfig)
; 0007 01A2 {
_setPropertiesConfig:
; 0007 01A3     int i;
; 0007 01A4 
; 0007 01A5     for(i=0;i<DEVTYPE_LENGTH;i++)
	CALL SUBOPT_0x71
;	*newConfig -> Y+2
;	i -> R16,R17
	__GETWRN 16,17,0
_0xE0067:
	__CPWRN 16,17,20
	BRGE _0xE0068
; 0007 01A6     {
; 0007 01A7         config_prop.deviceType[i]       = newConfig->deviceType[i];
	MOVW R30,R16
	SUBI R30,LOW(-_config_prop)
	SBCI R31,HIGH(-_config_prop)
	MOVW R0,R30
	MOVW R30,R16
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	CALL SUBOPT_0x119
	CALL __EEPROMWRB
; 0007 01A8     }
	__ADDWRN 16,17,1
	RJMP _0xE0067
_0xE0068:
; 0007 01A9 
; 0007 01AA     /*
; 0007 01AB     for(i=0;i<FW_LENGTH;i++)
; 0007 01AC     {
; 0007 01AD         config_prop.firmwareVersion[i]  = newConfig->firmwareVersion[i];    //printDebug("%c",config_prop.firmwareVersion[i]);
; 0007 01AE     }
; 0007 01AF     */
; 0007 01B0 
; 0007 01B1     for(i=0;i<NAME_LENGTH;i++)
	__GETWRN 16,17,0
_0xE006A:
	__CPWRN 16,17,40
	BRGE _0xE006B
; 0007 01B2     {
; 0007 01B3         config_prop.deviceName[i]       = newConfig->deviceName[i];
	__POINTW1MN _config_prop,40
	ADD  R30,R16
	ADC  R31,R17
	MOVW R26,R30
	LDD  R30,Y+2
	LDD  R31,Y+2+1
	ADIW R30,40
	ADD  R30,R16
	ADC  R31,R17
	LD   R30,Z
	CALL __EEPROMWRB
; 0007 01B4     }
	__ADDWRN 16,17,1
	RJMP _0xE006A
_0xE006B:
; 0007 01B5 
; 0007 01B6     for(i=0;i<ID_LENGTH;i++)
	__GETWRN 16,17,0
_0xE006D:
	__CPWRN 16,17,20
	BRGE _0xE006E
; 0007 01B7     {
; 0007 01B8         config_prop.deviceID[i]         = newConfig->deviceID[i];
	__POINTW1MN _config_prop,80
	ADD  R30,R16
	ADC  R31,R17
	MOVW R26,R30
	CALL SUBOPT_0xE4
	LD   R30,Z
	CALL __EEPROMWRB
; 0007 01B9     }
	__ADDWRN 16,17,1
	RJMP _0xE006D
_0xE006E:
; 0007 01BA 
; 0007 01BB     for(i=0;i<NAME_LENGTH;i++)
	__GETWRN 16,17,0
_0xE0070:
	__CPWRN 16,17,40
	BRGE _0xE0071
; 0007 01BC     {
; 0007 01BD         config_prop.hostName[i]         = newConfig->hostName[i];
	__POINTW1MN _config_prop,100
	ADD  R30,R16
	ADC  R31,R17
	MOVW R26,R30
	CALL SUBOPT_0xE5
	LD   R30,Z
	CALL __EEPROMWRB
; 0007 01BE     }
	__ADDWRN 16,17,1
	RJMP _0xE0070
_0xE0071:
; 0007 01BF 
; 0007 01C0     for(i=0;i<ID_LENGTH;i++)
	__GETWRN 16,17,0
_0xE0073:
	__CPWRN 16,17,20
	BRGE _0xE0074
; 0007 01C1     {
; 0007 01C2         config_prop.hostID[i]           = newConfig->hostID[i];
	__POINTW1MN _config_prop,140
	ADD  R30,R16
	ADC  R31,R17
	MOVW R26,R30
	CALL SUBOPT_0xE6
	LD   R30,Z
	CALL __EEPROMWRB
; 0007 01C3     }
	__ADDWRN 16,17,1
	RJMP _0xE0073
_0xE0074:
; 0007 01C4 
; 0007 01C5     config_prop.timeZone                = newConfig->timeZone;
	__POINTW1MN _config_prop,160
	MOVW R0,R30
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	SUBI R26,LOW(-160)
	SBCI R27,HIGH(-160)
	CALL SUBOPT_0x11A
; 0007 01C6 
; 0007 01C7     config_prop_flag                    = 0x01;
	LDI  R26,LOW(_config_prop_flag)
	LDI  R27,HIGH(_config_prop_flag)
	CALL SUBOPT_0x11B
; 0007 01C8 
; 0007 01C9     is_properties_config_update          = 1;
	STS  _is_properties_config_update,R30
; 0007 01CA 
; 0007 01CB     return 0;
	CALL SUBOPT_0xC3
	RJMP _0x20E0078
; 0007 01CC }
;/*============================================================*/
;int setOperatingConfig(struct oper_cnfg_st *newConfig)
; 0007 01CF {
_setOperatingConfig:
; 0007 01D0     int i;
; 0007 01D1 
; 0007 01D2     if( (newConfig->mode != MODE_REALTIME) && (newConfig->mode != MODE_DATALOGGER) ){
	CALL SUBOPT_0x71
;	*newConfig -> Y+2
;	i -> R16,R17
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	LD   R26,X
	CPI  R26,LOW(0x10)
	BREQ _0xE0076
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	LD   R26,X
	CPI  R26,LOW(0x20)
	BRNE _0xE0077
_0xE0076:
	RJMP _0xE0075
_0xE0077:
; 0007 01D3         printDebug("<setOperatingConfig> Error: operating mode invalid [0x%02X]\r\n", newConfig->mode);
	__POINTD1FN _0xE0000,1685
	CALL SUBOPT_0xED
; 0007 01D4         return -1;
	CALL SUBOPT_0x11C
	RJMP _0x20E0078
; 0007 01D5     }
; 0007 01D6 
; 0007 01D7     config_oper.mode                    =   newConfig->mode;
_0xE0075:
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	LD   R30,X
	LDI  R26,LOW(_config_oper)
	LDI  R27,HIGH(_config_oper)
	CALL __EEPROMWRB
; 0007 01D8     config_oper.deviceEnable            =   newConfig->deviceEnable;
	__POINTW2MN _config_oper,1
	LDD  R30,Y+2
	LDD  R31,Y+2+1
	LDD  R30,Z+1
	CALL __EEPROMWRB
; 0007 01D9     config_oper.alarmEnable             =   newConfig->alarmEnable;
	__POINTW2MN _config_oper,2
	LDD  R30,Y+2
	LDD  R31,Y+2+1
	LDD  R30,Z+2
	CALL __EEPROMWRB
; 0007 01DA 
; 0007 01DB     printDebug("\r\n mode            >> 0x%02X",config_oper.mode);
	__POINTD1FN _0xE0000,1747
	CALL __PUTPARD1
	LDI  R26,LOW(_config_oper)
	LDI  R27,HIGH(_config_oper)
	CALL SUBOPT_0x11D
; 0007 01DC     printDebug("\r\n deviceEnable    >> 0x%02X",config_oper.deviceEnable);
	__POINTD1FN _0xE0000,1776
	CALL __PUTPARD1
	__POINTW2MN _config_oper,1
	CALL SUBOPT_0x11D
; 0007 01DD     printDebug("\r\n alarmEnable     >> 0x%02X",config_oper.alarmEnable);
	CALL SUBOPT_0x11E
	__POINTW2MN _config_oper,2
	CALL SUBOPT_0x11D
; 0007 01DE     printDebug("\r\n sensorEnable    >> ");
	__POINTD1FN _0xE0000,1834
	CALL SUBOPT_0x2
; 0007 01DF 
; 0007 01E0     for(i=0;i<MAX_SENS_CHANNEL;i++)
	__GETWRN 16,17,0
_0xE0079:
	__CPWRN 16,17,5
	BRGE _0xE007A
; 0007 01E1     {
; 0007 01E2         config_oper.sensorEnable[i]     =   newConfig->sensorEnable[i];
	__POINTW1MN _config_oper,3
	ADD  R30,R16
	ADC  R31,R17
	MOVW R26,R30
	CALL SUBOPT_0xE9
	LD   R30,Z
	CALL __EEPROMWRB
; 0007 01E3         printDebug("[0x%02X]",config_oper.sensorEnable[i]);
	CALL SUBOPT_0x111
	CALL __PUTPARD1
	__POINTW1MN _config_oper,3
	ADD  R30,R16
	ADC  R31,R17
	MOVW R26,R30
	CALL SUBOPT_0x11D
; 0007 01E4     }
	__ADDWRN 16,17,1
	RJMP _0xE0079
_0xE007A:
; 0007 01E5     printDebug("\r\n");
	CALL SUBOPT_0xF1
; 0007 01E6 
; 0007 01E7     config_oper_flag                    =   0x01;
	LDI  R26,LOW(_config_oper_flag)
	LDI  R27,HIGH(_config_oper_flag)
	CALL SUBOPT_0x11B
; 0007 01E8 
; 0007 01E9     is_operating_config_update          =   1;
	STS  _is_operating_config_update,R30
; 0007 01EA 
; 0007 01EB     return 0;
	CALL SUBOPT_0xC3
	RJMP _0x20E0078
; 0007 01EC }
;/*============================================================*/
;int setSensorConfig(int ch, struct sens_cnfg_st *newConfig)
; 0007 01EF {
_setSensorConfig:
; 0007 01F0     if((ch < 0) || (ch >= MAX_SENS_CHANNEL)){
	CALL SUBOPT_0xF2
;	ch -> Y+2
;	*newConfig -> Y+0
	BRMI _0xE007C
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	SBIW R26,5
	BRLT _0xE007B
_0xE007C:
; 0007 01F1         printDebug("<setSensorConfig> ERR: channel out of range\r\n");
	__POINTD1FN _0xE0000,1857
	RJMP _0x20E0077
; 0007 01F2         return -1;
; 0007 01F3     }
; 0007 01F4     if(newConfig->samplingRate == 0){
_0xE007B:
	CALL SUBOPT_0x11F
	SBIW R30,0
	BRNE _0xE007E
; 0007 01F5         printDebug("<setSensorConfig> ERR: samplingRate couldn't be set to 0\r\n");
	__POINTD1FN _0xE0000,1903
_0x20E0077:
	CALL __PUTPARD1
	CALL SUBOPT_0x30
; 0007 01F6         return -1;
_0x20E0079:
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
_0x20E0078:
	ADIW R28,4
	RET
; 0007 01F7     }
; 0007 01F8 
; 0007 01F9     if(newConfig->samplingRate < 60){
_0xE007E:
	CALL SUBOPT_0x11F
	SBIW R30,60
	BRSH _0xE007F
; 0007 01FA         newConfig->samplingRate         =   60;
	LD   R26,Y
	LDD  R27,Y+1
	LDI  R30,LOW(60)
	LDI  R31,HIGH(60)
	ST   X+,R30
	ST   X,R31
; 0007 01FB     }
; 0007 01FC 
; 0007 01FD     config_sens[ch].samplingRate        =   newConfig->samplingRate;
_0xE007F:
	CALL SUBOPT_0xF5
	SUBI R30,LOW(-_config_sens)
	SBCI R31,HIGH(-_config_sens)
	MOVW R0,R30
	CALL SUBOPT_0x11F
	CALL SUBOPT_0x120
; 0007 01FE     config_sens[ch].reOccurrence        =   newConfig->reOccurrence;
	__ADDW1MN _config_sens,2
	MOVW R0,R30
	LD   R26,Y
	LDD  R27,Y+1
	ADIW R26,2
	CALL SUBOPT_0x121
; 0007 01FF     config_sens[ch].timeStartHour       =   newConfig->timeStartHour;
	__ADDW1MN _config_sens,4
	MOVW R26,R30
	LD   R30,Y
	LDD  R31,Y+1
	LDD  R30,Z+4
	CALL SUBOPT_0x122
; 0007 0200     config_sens[ch].timeStartMin        =   newConfig->timeStartMin;
	__ADDW1MN _config_sens,5
	MOVW R26,R30
	LD   R30,Y
	LDD  R31,Y+1
	LDD  R30,Z+5
	CALL SUBOPT_0x122
; 0007 0201     config_sens[ch].timeStopHour        =   newConfig->timeStopHour;
	__ADDW1MN _config_sens,6
	MOVW R26,R30
	LD   R30,Y
	LDD  R31,Y+1
	LDD  R30,Z+6
	CALL SUBOPT_0x122
; 0007 0202     config_sens[ch].timeStopMin         =   newConfig->timeStopMin;
	__ADDW1MN _config_sens,7
	MOVW R26,R30
	LD   R30,Y
	LDD  R31,Y+1
	LDD  R30,Z+7
	CALL SUBOPT_0x122
; 0007 0203 
; 0007 0204     config_sens[ch].alarmEnable         =   newConfig->alarmEnable;
	__ADDW1MN _config_sens,8
	MOVW R26,R30
	LD   R30,Y
	LDD  R31,Y+1
	LDD  R30,Z+8
	CALL SUBOPT_0x122
; 0007 0205     config_sens[ch].lowerLimit          =   newConfig->lowerLimit;
	__ADDW1MN _config_sens,9
	MOVW R0,R30
	LD   R26,Y
	LDD  R27,Y+1
	ADIW R26,9
	CALL SUBOPT_0x123
; 0007 0206     config_sens[ch].lowerDelay          =   newConfig->lowerDelay;
	__ADDW1MN _config_sens,13
	MOVW R0,R30
	LD   R26,Y
	LDD  R27,Y+1
	ADIW R26,13
	CALL SUBOPT_0x121
; 0007 0207     config_sens[ch].lowerExtreme        =   newConfig->lowerExtreme;
	__ADDW1MN _config_sens,15
	MOVW R0,R30
	LD   R26,Y
	LDD  R27,Y+1
	ADIW R26,15
	CALL SUBOPT_0x123
; 0007 0208     config_sens[ch].upperLimit          =   newConfig->upperLimit;
	__ADDW1MN _config_sens,19
	MOVW R0,R30
	LD   R26,Y
	LDD  R27,Y+1
	ADIW R26,19
	CALL SUBOPT_0x123
; 0007 0209     config_sens[ch].upperDelay          =   newConfig->upperDelay;
	__ADDW1MN _config_sens,23
	MOVW R0,R30
	LD   R26,Y
	LDD  R27,Y+1
	ADIW R26,23
	CALL SUBOPT_0x121
; 0007 020A     config_sens[ch].upperExtreme        =   newConfig->upperExtreme;
	__ADDW1MN _config_sens,25
	MOVW R0,R30
	LD   R26,Y
	LDD  R27,Y+1
	ADIW R26,25
	CALL SUBOPT_0x124
; 0007 020B 
; 0007 020C     printDebug("\r\n samplingRate    >> 0x%04X",config_sens[ch].samplingRate);
	__POINTD1FN _0xE0000,1962
	CALL SUBOPT_0x125
	SUBI R30,LOW(-_config_sens)
	SBCI R31,HIGH(-_config_sens)
	CALL SUBOPT_0x126
	CALL SUBOPT_0x10
; 0007 020D     printDebug("\r\n reOccurrence    >> 0x%04X",config_sens[ch].reOccurrence);
	__POINTD1FN _0xE0000,1991
	CALL SUBOPT_0x125
	__ADDW1MN _config_sens,2
	CALL SUBOPT_0x126
	CALL SUBOPT_0x10
; 0007 020E     printDebug("\r\n timeStartHour   >> 0x%02X",config_sens[ch].timeStartHour);
	__POINTD1FN _0xE0000,2020
	CALL SUBOPT_0x125
	__ADDW1MN _config_sens,4
	MOVW R26,R30
	CALL SUBOPT_0x11D
; 0007 020F     printDebug("\r\n timeStartMin    >> 0x%02X",config_sens[ch].timeStartMin);
	__POINTD1FN _0xE0000,2049
	CALL SUBOPT_0x125
	__ADDW1MN _config_sens,5
	MOVW R26,R30
	CALL SUBOPT_0x11D
; 0007 0210     printDebug("\r\n timeStopHour    >> 0x%02X",config_sens[ch].timeStopHour);
	__POINTD1FN _0xE0000,2078
	CALL SUBOPT_0x125
	__ADDW1MN _config_sens,6
	MOVW R26,R30
	CALL SUBOPT_0x11D
; 0007 0211     printDebug("\r\n timeStopMin     >> 0x%02X",config_sens[ch].timeStopMin);
	__POINTD1FN _0xE0000,2107
	CALL SUBOPT_0x125
	__ADDW1MN _config_sens,7
	MOVW R26,R30
	CALL SUBOPT_0x11D
; 0007 0212 
; 0007 0213     printDebug("\r\n alarmEnable     >> 0x%02X",        config_sens[ch].alarmEnable);
	CALL SUBOPT_0x11E
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	LDI  R30,LOW(29)
	CALL __MULB1W2U
	__ADDW1MN _config_sens,8
	MOVW R26,R30
	CALL SUBOPT_0x11D
; 0007 0214     printDebug("\r\n lowerLimit      >> %f [%04lX]",     config_sens[ch].lowerLimit,config_sens[ch].lowerLimit);
	__POINTD1FN _0xE0000,2136
	CALL SUBOPT_0x125
	CALL SUBOPT_0xF6
	CALL SUBOPT_0x10F
	LDI  R30,LOW(29)
	CALL __MULB1W2U
	CALL SUBOPT_0xF6
	CALL SUBOPT_0x1F
; 0007 0215     printDebug("\r\n lowerDelay      >> %d [%02X]",     config_sens[ch].lowerDelay,config_sens[ch].lowerDelay);
	__POINTD1FN _0xE0000,2169
	CALL SUBOPT_0x125
	CALL SUBOPT_0xF7
	CALL SUBOPT_0xDD
	LDD  R26,Y+10
	LDD  R27,Y+10+1
	LDI  R30,LOW(29)
	CALL __MULB1W2U
	CALL SUBOPT_0xF7
	CALL SUBOPT_0x127
; 0007 0216     printDebug("\r\n lowerExtreme    >> %f [%04lX]",     config_sens[ch].lowerExtreme,config_sens[ch].lowerExtreme);
	__POINTD1FN _0xE0000,2201
	CALL SUBOPT_0x125
	CALL SUBOPT_0xF8
	CALL SUBOPT_0x10F
	LDI  R30,LOW(29)
	CALL __MULB1W2U
	CALL SUBOPT_0xF8
	CALL SUBOPT_0x1F
; 0007 0217     printDebug("\r\n upperLimit      >> %f [%04lX]",     config_sens[ch].upperLimit,config_sens[ch].upperLimit);
	__POINTD1FN _0xE0000,2234
	CALL SUBOPT_0x125
	CALL SUBOPT_0xF9
	CALL SUBOPT_0x10F
	LDI  R30,LOW(29)
	CALL __MULB1W2U
	CALL SUBOPT_0xF9
	CALL SUBOPT_0x1F
; 0007 0218     printDebug("\r\n upperDelay      >> %d [%02X]",     config_sens[ch].upperDelay,config_sens[ch].upperDelay);
	__POINTD1FN _0xE0000,2267
	CALL SUBOPT_0x125
	CALL SUBOPT_0xFA
	CALL SUBOPT_0xDD
	LDD  R26,Y+10
	LDD  R27,Y+10+1
	LDI  R30,LOW(29)
	CALL __MULB1W2U
	CALL SUBOPT_0xFA
	CALL SUBOPT_0x127
; 0007 0219     printDebug("\r\n upperExtreme    >> %f [%04lX]",     config_sens[ch].upperExtreme,config_sens[ch].upperExtreme);
	__POINTD1FN _0xE0000,2299
	CALL SUBOPT_0x125
	CALL SUBOPT_0xFB
	CALL SUBOPT_0x10F
	LDI  R30,LOW(29)
	CALL __MULB1W2U
	CALL SUBOPT_0xFB
	CALL SUBOPT_0x1F
; 0007 021A     printDebug("\r\n");
	CALL SUBOPT_0xF1
; 0007 021B 
; 0007 021C     config_sens_flag[ch]                = 0x01;
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	SUBI R26,LOW(-_config_sens_flag)
	SBCI R27,HIGH(-_config_sens_flag)
	LDI  R30,LOW(1)
	CALL __EEPROMWRB
; 0007 021D     is_sensor_config_update[ch]          = 1;
	LDD  R30,Y+2
	LDD  R31,Y+2+1
	SUBI R30,LOW(-_is_sensor_config_update)
	SBCI R31,HIGH(-_is_sensor_config_update)
	LDI  R26,LOW(1)
	STD  Z+0,R26
; 0007 021E 
; 0007 021F     return 0;
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
	RJMP _0x20E0072
; 0007 0220 }
;/*============================================================*/
;int setAuxDinConfig(int ch, struct din_cnfg_st *newConfig)
; 0007 0223 {
_setAuxDinConfig:
; 0007 0224     if((ch < 0) || (ch > MAX_DI_CHANNEL)){
	CALL SUBOPT_0xF2
;	ch -> Y+2
;	*newConfig -> Y+0
	BRMI _0xE0081
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	SBIW R26,17
	BRLT _0xE0080
_0xE0081:
; 0007 0225         return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E0072
; 0007 0226     }
; 0007 0227 
; 0007 0228     config_din[ch].channelEnable        =   newConfig->channelEnable;
_0xE0080:
	CALL SUBOPT_0xFD
	SUBI R30,LOW(-_config_din)
	SBCI R31,HIGH(-_config_din)
	MOVW R0,R30
	LD   R26,Y
	LDD  R27,Y+1
	CALL SUBOPT_0x11A
; 0007 0229     config_din[ch].alarmDelay           =   newConfig->alarmDelay;
	CALL SUBOPT_0xFD
	__ADDW1MN _config_din,1
	CALL SUBOPT_0x128
	CALL SUBOPT_0x129
; 0007 022A 
; 0007 022B     printDebug("\r\n channel         >> [%d]",      ch);
	CALL SUBOPT_0x12A
	CALL SUBOPT_0xD5
; 0007 022C     printDebug("\r\n channelEnable   >> 0x%02X",    config_din[ch].channelEnable);
	CALL SUBOPT_0x12B
	LDI  R30,LOW(3)
	CALL __MULB1W2U
	SUBI R30,LOW(-_config_din)
	SBCI R31,HIGH(-_config_din)
	MOVW R26,R30
	CALL SUBOPT_0x11D
; 0007 022D     printDebug("\r\n alarmDelay      >> %d",        config_din[ch].alarmDelay);
	__POINTD1FN _0xE0000,2388
	CALL SUBOPT_0x12C
	LDI  R30,LOW(3)
	CALL __MULB1W2U
	__ADDW1MN _config_din,1
	CALL SUBOPT_0x126
	CALL SUBOPT_0x10
; 0007 022E 
; 0007 022F     config_din_flag[ch]                 =   0x01;
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	SUBI R26,LOW(-_config_din_flag)
	SBCI R27,HIGH(-_config_din_flag)
	LDI  R30,LOW(1)
	CALL __EEPROMWRB
; 0007 0230     is_din_config_update[ch]            =   1;
	LDD  R30,Y+2
	LDD  R31,Y+2+1
	SUBI R30,LOW(-_is_din_config_update)
	SBCI R31,HIGH(-_is_din_config_update)
	LDI  R26,LOW(1)
	STD  Z+0,R26
; 0007 0231     return 0;
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
	RJMP _0x20E0072
; 0007 0232 }
;/*============================================================*/
;int setAuxDoutConfig(int ch, struct dout_cnfg_st *newConfig)
; 0007 0235 {
_setAuxDoutConfig:
; 0007 0236     int i;
; 0007 0237 
; 0007 0238     if((ch < 0) || (ch > MAX_DO_CHANNEL)){
	CALL SUBOPT_0x71
;	ch -> Y+4
;	*newConfig -> Y+2
;	i -> R16,R17
	LDD  R26,Y+5
	TST  R26
	BRMI _0xE0084
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	SBIW R26,6
	BRLT _0xE0083
_0xE0084:
; 0007 0239         printDebug("\r\n<setAuxDoutConfig> Channel Error!!\r\n");
	__POINTD1FN _0xE0000,2413
	CALL SUBOPT_0x2
; 0007 023A         return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E0075
; 0007 023B     }
; 0007 023C 
; 0007 023D     if( (newConfig->eventSourceNumber) > MAX_EVENT_SOURCE ){
_0xE0083:
	LDD  R30,Y+2
	LDD  R31,Y+2+1
	LDD  R26,Z+2
	CPI  R26,LOW(0x24)
	BRLO _0xE0086
; 0007 023E         printDebug("\r\n<setAuxDoutConfig> eventSourceNumber is too long (%d)!!\r\n",(newConfig->eventSourceNumber));
	__POINTD1FN _0xE0000,2452
	CALL SUBOPT_0xEE
	LDD  R30,Z+2
	CALL SUBOPT_0x27
; 0007 023F         return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E0075
; 0007 0240     }
; 0007 0241 
; 0007 0242     config_dout[ch].channelEnable       =   0x01; //newConfig->channelEnable;      // Edit bug from software
_0xE0086:
	CALL SUBOPT_0x101
	SUBI R30,LOW(-_config_dout)
	SBCI R31,HIGH(-_config_dout)
	MOVW R26,R30
	LDI  R30,LOW(1)
	CALL SUBOPT_0x12D
; 0007 0243     config_dout[ch].stateOnEvent        =   0x00; //newConfig->stateOnEvent;
	__ADDW1MN _config_dout,1
	MOVW R26,R30
	LDI  R30,LOW(0)
	CALL SUBOPT_0x12D
; 0007 0244     config_dout[ch].eventSourceNumber   =   newConfig->eventSourceNumber;
	__ADDW1MN _config_dout,2
	MOVW R26,R30
	LDD  R30,Y+2
	LDD  R31,Y+2+1
	LDD  R30,Z+2
	CALL SUBOPT_0x12E
; 0007 0245 
; 0007 0246     printDebug("\r\n channel           >> [%d]",    ch);
; 0007 0247     printDebug("\r\n channelEnable     >> 0x%02X",  config_dout[ch].channelEnable);
	__POINTD1FN _0xE0000,2541
	CALL SUBOPT_0x102
	CALL SUBOPT_0x103
; 0007 0248     printDebug("\r\n stateOnEvent      >> 0x%02X",  config_dout[ch].stateOnEvent);
	__POINTD1FN _0xE0000,2572
	CALL SUBOPT_0x102
	CALL SUBOPT_0x104
; 0007 0249     printDebug("\r\n eventSourceNumber >> %d",      config_dout[ch].eventSourceNumber);
	CALL SUBOPT_0x12F
	CALL SUBOPT_0x102
	CALL SUBOPT_0x105
	CALL SUBOPT_0x27
; 0007 024A     printDebug("\r\n eventSource       >> ");
	CALL SUBOPT_0x130
; 0007 024B 
; 0007 024C     for(i=0;i<config_dout[ch].eventSourceNumber;i++){
	__GETWRN 16,17,0
_0xE0088:
	CALL SUBOPT_0x101
	CALL SUBOPT_0x105
	CALL SUBOPT_0x106
	BRGE _0xE0089
; 0007 024D 
; 0007 024E         config_dout[ch].eventSource[i]  =   newConfig->eventSource[i];
	CALL SUBOPT_0x101
	CALL SUBOPT_0x107
	CALL SUBOPT_0xE9
	LD   R30,Z
	CALL SUBOPT_0x12D
; 0007 024F 
; 0007 0250         if( config_dout[ch].eventSource[i] != 0x00 ){
	CALL SUBOPT_0x107
	CALL __EEPROMRDB
	CPI  R30,0
	BREQ _0xE008A
; 0007 0251             printDebug("[0x%02X]",config_dout[ch].eventSource[i]);
	CALL SUBOPT_0x111
	CALL SUBOPT_0x102
	CALL SUBOPT_0x107
	CALL SUBOPT_0x11D
; 0007 0252         }
; 0007 0253     }
_0xE008A:
	__ADDWRN 16,17,1
	RJMP _0xE0088
_0xE0089:
; 0007 0254     printDebug("\r\n");
	CALL SUBOPT_0xF1
; 0007 0255 
; 0007 0256     config_dout_flag[ch]                =   0x01;
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	SUBI R26,LOW(-_config_dout_flag)
	SBCI R27,HIGH(-_config_dout_flag)
	LDI  R30,LOW(1)
	CALL __EEPROMWRB
; 0007 0257     is_dout_config_update[ch]           =   1;
	LDD  R30,Y+4
	LDD  R31,Y+4+1
	SUBI R30,LOW(-_is_dout_config_update)
	SBCI R31,HIGH(-_is_dout_config_update)
	LDI  R26,LOW(1)
	STD  Z+0,R26
; 0007 0258 
; 0007 0259     return 0;
	RJMP _0x20E0076
; 0007 025A }
;/*============================================================*/
;int setAuxAinConfig(int ch, struct ain_cnfg_st *newConfig)
; 0007 025D {
_setAuxAinConfig:
; 0007 025E     if((ch < 0) || (ch > MAX_AI_CHANNEL)){
	CALL SUBOPT_0xF2
;	ch -> Y+2
;	*newConfig -> Y+0
	BRMI _0xE008C
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	SBIW R26,17
	BRLT _0xE008B
_0xE008C:
; 0007 025F         return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E0072
; 0007 0260     }
; 0007 0261 
; 0007 0262     config_ain[ch].channelEnable        =   newConfig->channelEnable;
_0xE008B:
	CALL SUBOPT_0x108
	SUBI R30,LOW(-_config_ain)
	SBCI R31,HIGH(-_config_ain)
	MOVW R0,R30
	LD   R26,Y
	LDD  R27,Y+1
	CALL SUBOPT_0x11A
; 0007 0263     config_ain[ch].alarmLevel           =   newConfig->alarmLevel;
	CALL SUBOPT_0x108
	__ADDW1MN _config_ain,1
	CALL SUBOPT_0x128
	CALL SUBOPT_0x124
; 0007 0264 
; 0007 0265     printDebug("\r\n channel         >> [%d]",      ch);
	CALL SUBOPT_0x12A
	CALL SUBOPT_0xD5
; 0007 0266     printDebug("\r\n channelEnable   >> 0x%02X",    config_ain[ch].channelEnable);
	CALL SUBOPT_0x12B
	LDI  R30,LOW(5)
	CALL __MULB1W2U
	SUBI R30,LOW(-_config_ain)
	SBCI R31,HIGH(-_config_ain)
	MOVW R26,R30
	CALL SUBOPT_0x11D
; 0007 0267     printDebug("\r\n alarmLevel      >> %d",        config_ain[ch].alarmLevel);
	__POINTD1FN _0xE0000,2655
	CALL SUBOPT_0x12C
	LDI  R30,LOW(5)
	CALL __MULB1W2U
	__ADDW1MN _config_ain,1
	CALL SUBOPT_0x131
; 0007 0268 
; 0007 0269     config_ain_flag[ch]                 = 0x01;
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	SUBI R26,LOW(-_config_ain_flag)
	SBCI R27,HIGH(-_config_ain_flag)
	LDI  R30,LOW(1)
	CALL __EEPROMWRB
; 0007 026A 
; 0007 026B     return 0;
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
	RJMP _0x20E0072
; 0007 026C }
;/*============================================================*/
;int setAuxAoutConfig(int ch, struct aout_cnfg_st *newConfig)
; 0007 026F {
_setAuxAoutConfig:
; 0007 0270     int i;
; 0007 0271 
; 0007 0272     if((ch < 0) || (ch > MAX_AO_CHANNEL)){
	CALL SUBOPT_0x71
;	ch -> Y+4
;	*newConfig -> Y+2
;	i -> R16,R17
	LDD  R26,Y+5
	TST  R26
	BRMI _0xE008F
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	SBIW R26,17
	BRLT _0xE008E
_0xE008F:
; 0007 0273         printDebug("\r\n<setAuxAoutConfig> Channel Error!!\r\n");
	__POINTD1FN _0xE0000,2680
	CALL SUBOPT_0x2
; 0007 0274         return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E0075
; 0007 0275     }
; 0007 0276 
; 0007 0277     if( (newConfig->eventSourceNumber) > MAX_EVENT_SOURCE ){
_0xE008E:
	LDD  R30,Y+2
	LDD  R31,Y+2+1
	LDD  R26,Z+5
	CPI  R26,LOW(0x24)
	BRLO _0xE0091
; 0007 0278         printDebug("\r\n<setAuxAoutConfig> eventSourceNumber is too long (%d)!!\r\n",(newConfig->eventSourceNumber));
	__POINTD1FN _0xE0000,2719
	CALL SUBOPT_0xEE
	LDD  R30,Z+5
	CALL SUBOPT_0x27
; 0007 0279         return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E0075
; 0007 027A     }
; 0007 027B 
; 0007 027C     config_aout[ch].channelEnable       =   newConfig->channelEnable;
_0xE0091:
	CALL SUBOPT_0x10A
	SUBI R30,LOW(-_config_aout)
	SBCI R31,HIGH(-_config_aout)
	MOVW R0,R30
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	CALL SUBOPT_0x11A
; 0007 027D     config_aout[ch].levelOnEvent        =   newConfig->levelOnEvent;
	CALL SUBOPT_0x10A
	__ADDW1MN _config_aout,1
	MOVW R0,R30
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	ADIW R26,1
	CALL SUBOPT_0x124
; 0007 027E     config_aout[ch].eventSourceNumber   =   newConfig->eventSourceNumber;
	CALL SUBOPT_0x10A
	__ADDW1MN _config_aout,5
	MOVW R26,R30
	LDD  R30,Y+2
	LDD  R31,Y+2+1
	LDD  R30,Z+5
	CALL SUBOPT_0x12E
; 0007 027F 
; 0007 0280     printDebug("\r\n channel           >> [%d]",    ch);
; 0007 0281     printDebug("\r\n channelEnable     >> 0x%02X",  config_aout[ch].channelEnable);
	__POINTD1FN _0xE0000,2541
	CALL SUBOPT_0x132
	SUBI R30,LOW(-_config_aout)
	SBCI R31,HIGH(-_config_aout)
	MOVW R26,R30
	CALL SUBOPT_0x11D
; 0007 0282     printDebug("\r\n levelOnEvent      >> %f",      config_aout[ch].levelOnEvent);
	__POINTD1FN _0xE0000,2779
	CALL SUBOPT_0x132
	__ADDW1MN _config_aout,1
	CALL SUBOPT_0x131
; 0007 0283     printDebug("\r\n eventSourceNumber >> %d",      config_aout[ch].eventSourceNumber);
	CALL SUBOPT_0x12F
	CALL SUBOPT_0x132
	CALL SUBOPT_0x10B
	CALL SUBOPT_0x27
; 0007 0284     printDebug("\r\n eventSource       >> ");
	CALL SUBOPT_0x130
; 0007 0285 
; 0007 0286     for(i=0;i<config_aout[ch].eventSourceNumber;i++){
	__GETWRN 16,17,0
_0xE0093:
	CALL SUBOPT_0x10A
	CALL SUBOPT_0x10B
	CALL SUBOPT_0x106
	BRGE _0xE0094
; 0007 0287 
; 0007 0288         config_aout[ch].eventSource[i]  =   newConfig->eventSource[i];
	CALL SUBOPT_0x10A
	CALL SUBOPT_0x10C
	CALL SUBOPT_0x109
	LD   R30,Z
	CALL __EEPROMWRB
; 0007 0289 
; 0007 028A         if( config_aout[ch].eventSource[i] != 0x00 ){
	CALL SUBOPT_0x10A
	CALL SUBOPT_0x10C
	CALL __EEPROMRDB
	CPI  R30,0
	BREQ _0xE0095
; 0007 028B             printDebug("[0x%02X]",config_aout[ch].eventSource[i]);
	CALL SUBOPT_0x111
	CALL SUBOPT_0x132
	CALL SUBOPT_0x10C
	CALL SUBOPT_0x11D
; 0007 028C         }
; 0007 028D     }
_0xE0095:
	__ADDWRN 16,17,1
	RJMP _0xE0093
_0xE0094:
; 0007 028E     printDebug("\r\n");
	CALL SUBOPT_0xF1
; 0007 028F 
; 0007 0290     config_aout_flag[ch]                =   0x01;
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	SUBI R26,LOW(-_config_aout_flag)
	SBCI R27,HIGH(-_config_aout_flag)
	LDI  R30,LOW(1)
	CALL __EEPROMWRB
; 0007 0291 
; 0007 0292     return 0;
_0x20E0076:
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
_0x20E0075:
	LDD  R17,Y+1
	LDD  R16,Y+0
	ADIW R28,6
	RET
; 0007 0293 }
;/*============================================================*/
;int setBuzzerConfig(struct buzz_cnfg_st *newConfig)
; 0007 0296 {
_setBuzzerConfig:
; 0007 0297     int i;
; 0007 0298 
; 0007 0299     if( (newConfig->eventSourceNumber) > MAX_EVENT_SOURCE ){
	CALL SUBOPT_0x71
;	*newConfig -> Y+2
;	i -> R16,R17
	LDD  R30,Y+2
	LDD  R31,Y+2+1
	LDD  R26,Z+1
	CPI  R26,LOW(0x24)
	BRLO _0xE0096
; 0007 029A         printDebug("\r\n<setBuzzerConfig> eventSourceNumber is too long (%d)!!\r\n",(newConfig->eventSourceNumber));
	__POINTD1FN _0xE0000,2806
	CALL SUBOPT_0xEE
	LDD  R30,Z+1
	CALL SUBOPT_0x27
; 0007 029B         return -1;
	CALL SUBOPT_0x11C
	RJMP _0x20E0072
; 0007 029C     }
; 0007 029D 
; 0007 029E     config_buzz.enable                  =   newConfig->enable;
_0xE0096:
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	LD   R30,X
	LDI  R26,LOW(_config_buzz)
	LDI  R27,HIGH(_config_buzz)
	CALL __EEPROMWRB
; 0007 029F     config_buzz.eventSourceNumber       =   newConfig->eventSourceNumber;
	__POINTW2MN _config_buzz,1
	LDD  R30,Y+2
	LDD  R31,Y+2+1
	LDD  R30,Z+1
	CALL __EEPROMWRB
; 0007 02A0 
; 0007 02A1     printDebug("\r\n enable            >> 0x%02X",  config_buzz.enable);
	__POINTD1FN _0xE0000,2865
	CALL __PUTPARD1
	LDI  R26,LOW(_config_buzz)
	LDI  R27,HIGH(_config_buzz)
	CALL SUBOPT_0x11D
; 0007 02A2     printDebug("\r\n eventSourceNumber >> %d",      config_buzz.eventSourceNumber);
	CALL SUBOPT_0x12F
	CALL __PUTPARD1
	CALL SUBOPT_0x10E
	CALL SUBOPT_0x27
; 0007 02A3     printDebug("\r\n eventSource       >>");
	__POINTD1FN _0xE0000,2896
	CALL SUBOPT_0x2
; 0007 02A4 
; 0007 02A5     for(i=0;i<config_buzz.eventSourceNumber;i++){
	__GETWRN 16,17,0
_0xE0098:
	CALL SUBOPT_0x10E
	CALL SUBOPT_0x106
	BRGE _0xE0099
; 0007 02A6 
; 0007 02A7         config_buzz.eventSource[i]      =   newConfig->eventSource[i];
	CALL SUBOPT_0x133
	LDD  R30,Y+2
	LDD  R31,Y+2+1
	CALL SUBOPT_0x112
	CALL __EEPROMWRB
; 0007 02A8 
; 0007 02A9         if( config_buzz.eventSource[i] != 0x00 ){
	CALL SUBOPT_0x133
	CALL __EEPROMRDB
	CPI  R30,0
	BREQ _0xE009A
; 0007 02AA             printDebug("[0x%02X]",config_buzz.eventSource[i]);
	CALL SUBOPT_0x111
	CALL __PUTPARD1
	CALL SUBOPT_0x133
	CALL SUBOPT_0x11D
; 0007 02AB         }
; 0007 02AC 
; 0007 02AD     }
_0xE009A:
	__ADDWRN 16,17,1
	RJMP _0xE0098
_0xE0099:
; 0007 02AE     printDebug("\r\n");
	CALL SUBOPT_0xF1
; 0007 02AF 
; 0007 02B0     config_buzz_flag                    =   0x01;
	LDI  R26,LOW(_config_buzz_flag)
	LDI  R27,HIGH(_config_buzz_flag)
	CALL SUBOPT_0x11B
; 0007 02B1 
; 0007 02B2     is_buzzer_config_update             =   1;
	STS  _is_buzzer_config_update,R30
; 0007 02B3 
; 0007 02B4     return 0;
	CALL SUBOPT_0xC3
	RJMP _0x20E0072
; 0007 02B5 }
;/*============================================================*/
;int setEnvAlarmConfig(struct alm_cnfg_st *newConfig)
; 0007 02B8 {
_setEnvAlarmConfig:
; 0007 02B9     config_alm.gsmRSSILevel             =   newConfig->gsmRSSILevel;
	ST   -Y,R27
	ST   -Y,R26
;	*newConfig -> Y+0
	LD   R26,Y
	LDD  R27,Y+1
	CALL __GETD1P
	LDI  R26,LOW(_config_alm)
	LDI  R27,HIGH(_config_alm)
	CALL __EEPROMWRD
; 0007 02BA     config_alm.gsmCreditBalance         =   newConfig->gsmCreditBalance;
	__POINTW1MN _config_alm,4
	MOVW R0,R30
	LD   R26,Y
	LDD  R27,Y+1
	ADIW R26,4
	CALL SUBOPT_0x129
; 0007 02BB     config_alm.batteryLevel             =   newConfig->batteryLevel;
	__POINTW1MN _config_alm,6
	MOVW R0,R30
	LD   R26,Y
	LDD  R27,Y+1
	ADIW R26,6
	CALL SUBOPT_0x124
; 0007 02BC     config_alm.commSignalLevel          =   newConfig->commSignalLevel;
	__POINTW1MN _config_alm,10
	MOVW R0,R30
	LD   R26,Y
	LDD  R27,Y+1
	ADIW R26,10
	CALL SUBOPT_0x124
; 0007 02BD     config_alm.commLostDelay            =   newConfig->commLostDelay;
	__POINTW1MN _config_alm,14
	MOVW R0,R30
	LD   R26,Y
	LDD  R27,Y+1
	ADIW R26,14
	CALL SUBOPT_0x129
; 0007 02BE     config_alm.memoryMin                =   newConfig->memoryMin;
	__POINTW1MN _config_alm,16
	MOVW R0,R30
	LD   R26,Y
	LDD  R27,Y+1
	ADIW R26,16
	CALL SUBOPT_0x129
; 0007 02BF 
; 0007 02C0     printDebug("\r\n gsmRSSILevel     >> %f dB",    config_alm.gsmRSSILevel);
	__POINTD1FN _0xE0000,2920
	CALL __PUTPARD1
	LDI  R26,LOW(_config_alm)
	LDI  R27,HIGH(_config_alm)
	CALL SUBOPT_0x134
; 0007 02C1     printDebug("\r\n gsmCreditBalance >> %d Baht",  config_alm.gsmCreditBalance);
	__POINTD1FN _0xE0000,2949
	CALL __PUTPARD1
	__POINTW2MN _config_alm,4
	CALL __EEPROMRDW
	CALL SUBOPT_0xD5
; 0007 02C2     printDebug("\r\n batteryLevel     >> %f Volts", config_alm.batteryLevel);
	__POINTD1FN _0xE0000,2980
	CALL __PUTPARD1
	__POINTW2MN _config_alm,6
	CALL SUBOPT_0x134
; 0007 02C3     printDebug("\r\n commSignalLevel  >> %f dB",    config_alm.commSignalLevel);
	__POINTD1FN _0xE0000,3012
	CALL __PUTPARD1
	__POINTW2MN _config_alm,10
	CALL SUBOPT_0x134
; 0007 02C4     printDebug("\r\n commLostDelay    >> %d sec",   config_alm.commLostDelay);
	__POINTD1FN _0xE0000,3041
	CALL __PUTPARD1
	__POINTW2MN _config_alm,14
	CALL __EEPROMRDW
	CALL SUBOPT_0xD5
; 0007 02C5     printDebug("\r\n memoryMin        >> %d MB.",   config_alm.memoryMin);
	__POINTD1FN _0xE0000,3071
	CALL __PUTPARD1
	__POINTW2MN _config_alm,16
	CALL __EEPROMRDW
	CALL SUBOPT_0xDD
	CALL SUBOPT_0x10
; 0007 02C6 
; 0007 02C7     config_alm_flag                 = 0x01;
	LDI  R26,LOW(_config_alm_flag)
	LDI  R27,HIGH(_config_alm_flag)
	CALL SUBOPT_0x11B
; 0007 02C8     is_env_config_update            = 1;
	STS  _is_env_config_update,R30
; 0007 02C9     return 0;
	RJMP _0x20E0074
; 0007 02CA }
;/*============================================================*/
;int setStatusReportConfig(struct stat_cnfg_st *newConfig)
; 0007 02CD {
_setStatusReportConfig:
; 0007 02CE     config_stat.accm                    =   newConfig->accm;
	ST   -Y,R27
	ST   -Y,R26
;	*newConfig -> Y+0
	LD   R26,Y
	LDD  R27,Y+1
	LD   R30,X
	LDI  R26,LOW(_config_stat)
	LDI  R27,HIGH(_config_stat)
	CALL __EEPROMWRB
; 0007 02CF     config_stat.intv                    =   newConfig->intv;
	__POINTW1MN _config_stat,1
	CALL SUBOPT_0x128
	CALL SUBOPT_0x129
; 0007 02D0 
; 0007 02D1     printDebug("\r\n accm     >> %f dB",    config_stat.accm);
	__POINTD1FN _0xE0000,3101
	CALL __PUTPARD1
	LDI  R26,LOW(_config_stat)
	LDI  R27,HIGH(_config_stat)
	CALL SUBOPT_0x11D
; 0007 02D2     printDebug("\r\n intv     >> %d Baht",  config_stat.intv);
	__POINTD1FN _0xE0000,3122
	CALL __PUTPARD1
	__POINTW2MN _config_stat,1
	CALL __EEPROMRDW
	CALL SUBOPT_0xDD
	CALL SUBOPT_0x10
; 0007 02D3 
; 0007 02D4     config_stat_flag                    = 0x01;
	LDI  R26,LOW(_config_stat_flag)
	LDI  R27,HIGH(_config_stat_flag)
	CALL SUBOPT_0x11B
; 0007 02D5     is_status_config_update             = 1;
	STS  _is_status_config_update,R30
; 0007 02D6     return 0;
_0x20E0074:
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
	ADIW R28,2
	RET
; 0007 02D7 }
;/*============================================================*/
;
;/**************************************************************/
;/********* Service Configuration Management Function **********/
;/**************************************************************/
;/*============================================================*/
;int setDefaultConfig(void)
; 0007 02DF {
; 0007 02E0     int i;
; 0007 02E1 
; 0007 02E2     config_prop_flag            = 0x00;
;	i -> R16,R17
; 0007 02E3     config_oper_flag            = 0x00;
; 0007 02E4 
; 0007 02E5     for(i=0;i<MAX_SENS_CHANNEL;i++){
; 0007 02E6         config_sens_flag[i]     = 0x00;
; 0007 02E7     }
; 0007 02E8 
; 0007 02E9     for(i=0;i<MAX_DI_CHANNEL;i++){
; 0007 02EA         config_din_flag[i]      = 0x00;
; 0007 02EB     }
; 0007 02EC 
; 0007 02ED     for(i=0;i<MAX_DO_CHANNEL;i++){
; 0007 02EE         config_dout_flag[i]     = 0x00;
; 0007 02EF     }
; 0007 02F0 
; 0007 02F1     for(i=0;i<MAX_AI_CHANNEL;i++){
; 0007 02F2         config_ain_flag[i]      = 0x00;
; 0007 02F3     }
; 0007 02F4 
; 0007 02F5     for(i=0;i<MAX_AO_CHANNEL;i++){
; 0007 02F6         config_aout_flag[i]     = 0x00;
; 0007 02F7     }
; 0007 02F8 
; 0007 02F9     config_buzz_flag            = 0x00;
; 0007 02FA     config_alm_flag             = 0x00;
; 0007 02FB     config_stat_flag            = 0x00;
; 0007 02FC 
; 0007 02FD     return 0;
; 0007 02FE }
;/*============================================================*/
;int isDeviceConfig(void)
; 0007 0301 {
_isDeviceConfig:
; 0007 0302     int i   = 0;
; 0007 0303 
; 0007 0304     if( config_prop_flag || config_oper_flag || config_buzz_flag || config_alm_flag || config_stat_flag ){
	CALL SUBOPT_0x86
;	i -> R16,R17
	LDI  R26,LOW(_config_prop_flag)
	LDI  R27,HIGH(_config_prop_flag)
	CALL __EEPROMRDB
	CPI  R30,0
	BRNE _0xE00AB
	LDI  R26,LOW(_config_oper_flag)
	LDI  R27,HIGH(_config_oper_flag)
	CALL __EEPROMRDB
	CPI  R30,0
	BRNE _0xE00AB
	LDI  R26,LOW(_config_buzz_flag)
	LDI  R27,HIGH(_config_buzz_flag)
	CALL __EEPROMRDB
	CPI  R30,0
	BRNE _0xE00AB
	LDI  R26,LOW(_config_alm_flag)
	LDI  R27,HIGH(_config_alm_flag)
	CALL __EEPROMRDB
	CPI  R30,0
	BRNE _0xE00AB
	LDI  R26,LOW(_config_stat_flag)
	LDI  R27,HIGH(_config_stat_flag)
	CALL __EEPROMRDB
	CPI  R30,0
	BREQ _0xE00AA
_0xE00AB:
; 0007 0305         return 1;
	LDI  R30,LOW(1)
	LDI  R31,HIGH(1)
	RJMP _0x20E0073
; 0007 0306     }
; 0007 0307 
; 0007 0308     for(i=0;i<MAX_SENS_CHANNEL;i++){
_0xE00AA:
	__GETWRN 16,17,0
_0xE00AE:
	__CPWRN 16,17,5
	BRGE _0xE00AF
; 0007 0309         if(config_sens_flag[i]){
	LDI  R26,LOW(_config_sens_flag)
	LDI  R27,HIGH(_config_sens_flag)
	CALL SUBOPT_0xE2
	CPI  R30,0
	BREQ _0xE00B0
; 0007 030A             return 1;
	LDI  R30,LOW(1)
	LDI  R31,HIGH(1)
	RJMP _0x20E0073
; 0007 030B         }
; 0007 030C     }
_0xE00B0:
	__ADDWRN 16,17,1
	RJMP _0xE00AE
_0xE00AF:
; 0007 030D 
; 0007 030E     //for(i=0;i<MAX_DI_CHANNEL;i++){
; 0007 030F     for(i=0;i<2;i++){
	__GETWRN 16,17,0
_0xE00B2:
	__CPWRN 16,17,2
	BRGE _0xE00B3
; 0007 0310         if(config_din_flag[i]){
	LDI  R26,LOW(_config_din_flag)
	LDI  R27,HIGH(_config_din_flag)
	CALL SUBOPT_0xE2
	CPI  R30,0
	BREQ _0xE00B4
; 0007 0311             return 1;
	LDI  R30,LOW(1)
	LDI  R31,HIGH(1)
	RJMP _0x20E0073
; 0007 0312         }
; 0007 0313     }
_0xE00B4:
	__ADDWRN 16,17,1
	RJMP _0xE00B2
_0xE00B3:
; 0007 0314 
; 0007 0315     //for(i=0;i<MAX_DO_CHANNEL;i++){
; 0007 0316     for(i=0;i<2;i++){
	__GETWRN 16,17,0
_0xE00B6:
	__CPWRN 16,17,2
	BRGE _0xE00B7
; 0007 0317         if(config_dout_flag[i]){
	LDI  R26,LOW(_config_dout_flag)
	LDI  R27,HIGH(_config_dout_flag)
	CALL SUBOPT_0xE2
	CPI  R30,0
	BREQ _0xE00B8
; 0007 0318             return 1;
	LDI  R30,LOW(1)
	LDI  R31,HIGH(1)
	RJMP _0x20E0073
; 0007 0319         }
; 0007 031A     }
_0xE00B8:
	__ADDWRN 16,17,1
	RJMP _0xE00B6
_0xE00B7:
; 0007 031B     return 0;
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
_0x20E0073:
	LD   R16,Y+
	LD   R17,Y+
	RET
; 0007 031C }
;/*============================================================*/
;int getAllConfig(void)
; 0007 031F {
_getAllConfig:
; 0007 0320     int i,err;
; 0007 0321 
; 0007 0322     // -- load configuration -- //
; 0007 0323     getPropertiesConfig(&properties_config);
	CALL __SAVELOCR4
;	i -> R16,R17
;	err -> R18,R19
	CALL SUBOPT_0xB
; 0007 0324     is_properties_config_update = 0;
; 0007 0325 
; 0007 0326     getOperatingConfig(&operating_config);
	CALL SUBOPT_0xC
; 0007 0327     is_operating_config_update = 0;
; 0007 0328 
; 0007 0329     for(i=0;i<MAX_SENS_CHANNEL;i++){
	__GETWRN 16,17,0
_0xE00BA:
	__CPWRN 16,17,5
	BRGE _0xE00BB
; 0007 032A         err = getSensorConfig(i,&sensor_config[i]);
	ST   -Y,R17
	ST   -Y,R16
	__MULBNWRU 16,17,29
	SUBI R30,LOW(-_sensor_config)
	SBCI R31,HIGH(-_sensor_config)
	MOVW R26,R30
	CALL _getSensorConfig
	MOVW R18,R30
; 0007 032B         if(err < 0){
	TST  R19
	BRPL _0xE00BC
; 0007 032C             printDebug("<main> getSensorConfig(%d) error\r\n",i);
	__POINTD1FN _0xE0000,3145
	CALL __PUTPARD1
	MOVW R30,R16
	CALL SUBOPT_0xD5
; 0007 032D             continue;
	RJMP _0xE00B9
; 0007 032E         }
; 0007 032F         is_sensor_config_update[i] = 0;
_0xE00BC:
	LDI  R26,LOW(_is_sensor_config_update)
	LDI  R27,HIGH(_is_sensor_config_update)
	CALL SUBOPT_0x135
; 0007 0330     }
_0xE00B9:
	__ADDWRN 16,17,1
	RJMP _0xE00BA
_0xE00BB:
; 0007 0331 
; 0007 0332     getBuzzerConfig(&buzz_config);
	CALL SUBOPT_0x12
; 0007 0333     is_buzzer_config_update = 0;
; 0007 0334 
; 0007 0335     for(i=0;i<USE_DIN;i++){
	__GETWRN 16,17,0
_0xE00BE:
	__CPWRN 16,17,2
	BRGE _0xE00BF
; 0007 0336         getAuxDinConfig(i,&din_config[i]);
	ST   -Y,R17
	ST   -Y,R16
	__MULBNWRU 16,17,3
	SUBI R30,LOW(-_din_config)
	SBCI R31,HIGH(-_din_config)
	MOVW R26,R30
	CALL _getAuxDinConfig
; 0007 0337         is_din_config_update[i] = 0;
	LDI  R26,LOW(_is_din_config_update)
	LDI  R27,HIGH(_is_din_config_update)
	CALL SUBOPT_0x135
; 0007 0338     }
	__ADDWRN 16,17,1
	RJMP _0xE00BE
_0xE00BF:
; 0007 0339 
; 0007 033A     for(i=0;i<USE_DOUT;i++){
	__GETWRN 16,17,0
_0xE00C1:
	__CPWRN 16,17,2
	BRGE _0xE00C2
; 0007 033B         getAuxDoutConfig(i,&dout_config[i]);
	ST   -Y,R17
	ST   -Y,R16
	__MULBNWRU 16,17,38
	CALL SUBOPT_0x14
; 0007 033C         is_dout_config_update[i] = 0;
	CALL SUBOPT_0x135
; 0007 033D     }
	__ADDWRN 16,17,1
	RJMP _0xE00C1
_0xE00C2:
; 0007 033E 
; 0007 033F     getStatusReportConfig(&status_config);
	CALL SUBOPT_0x15
; 0007 0340     is_status_config_update = 0;
; 0007 0341 
; 0007 0342     getEnvAlarmConfig(&env_config);
	CALL SUBOPT_0x16
; 0007 0343     is_env_config_update = 0;
; 0007 0344 
; 0007 0345     return 0;
	CALL SUBOPT_0x136
_0x20E0072:
	ADIW R28,4
	RET
; 0007 0346 }
;/*============================================================*/
;#include <stdlib.h>
;#include "configstructure.h"
;
;/**************************************************************/
;/**************** Configuration saved in EEPROM ***************/
;/**************************************************************/
;/*============================================================*/
;eeprom struct prop_cnfg_st  config_prop                     =   {   "EndPoint",
;                                                                    "COMM-ETH-0.01a",
;                                                                    "TestEndPoint01",
;                                                                    "00000000001",
;                                                                    "iNTELENICs Company",
;                                                                    "STRI-703",
;                                                                    7
;                                                                };
;eeprom struct oper_cnfg_st  config_oper                     =   {   0x20,
;                                                                    0x00,
;                                                                    0x00,
;                                                                    {0x00,0x00,0x00,0x00,0x00}
;                                                                };
;eeprom struct sens_cnfg_st  config_sens[MAX_SENS_CHANNEL]   =   {   {   300,0x8000,0,0,0,0,
;                                                                        0,0.0,10,0.0,0.0,10,0.0   },
;                                                                    {   300,0x8000,0,0,0,0,
;                                                                        0,0.0,10,0.0,0.0,10,0.0   },
;                                                                    {   300,0x8000,0,0,0,0,
;                                                                        0,0.0,10,0.0,0.0,10,0.0   },
;                                                                    {   300,0x8000,0,0,0,0,
;                                                                        0,0.0,10,0.0,0.0,10,0.0   },
;                                                                    {   300,0x8000,0,0,0,0,
;                                                                        0,0.0,10,0.0,0.0,10,0.0   }
;                                                                };
;eeprom struct din_cnfg_st   config_din[MAX_DI_CHANNEL]      =   {   {0x00,15},
;                                                                    {0x00,15},
;                                                                    {0x00,15},
;                                                                    {0x00,15},
;                                                                    {0x00,15},
;                                                                    {0x00,15},
;                                                                    {0x00,15},
;                                                                    {0x00,15},
;                                                                    {0x00,15},
;                                                                    {0x00,15},
;                                                                    {0x00,15},
;                                                                    {0x00,15},
;                                                                    {0x00,15},
;                                                                    {0x00,15},
;                                                                    {0x00,15},
;                                                                    {0x00,15}
;                                                                };
;eeprom struct dout_cnfg_st  config_dout[MAX_DO_CHANNEL]     =   {   {0x00,0x01,0,{  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;                                                                                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;                                                                                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;                                                                                    0x00,0x00,0x00,0x00,0x00}
;                                                                    },
;                                                                    {0x00,0x01,0,{  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;                                                                                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;                                                                                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;                                                                                    0x00,0x00,0x00,0x00,0x00}
;                                                                    },
;                                                                    {0x00,0x01,0,{  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;                                                                                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;                                                                                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;                                                                                    0x00,0x00,0x00,0x00,0x00}
;                                                                    },
;                                                                    {0x00,0x01,0,{  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;                                                                                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;                                                                                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;                                                                                    0x00,0x00,0x00,0x00,0x00}
;                                                                    },
;                                                                    {0x00,0x01,0,{  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;                                                                                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;                                                                                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;                                                                                    0x00,0x00,0x00,0x00,0x00}
;                                                                    }
;                                                                };
;//                                                                    ,{0x00,0x01,0,{  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;//                                                                                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;//                                                                                    0x00,0x00,0x00,0x00,0x00}
;//                                                                    },
;//                                                                    {0x00,0x01,0,{  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;//                                                                                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;//                                                                                    0x00,0x00,0x00,0x00,0x00}
;//                                                                    },
;//                                                                    {0x00,0x01,0,{  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;//                                                                                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;//                                                                                    0x00,0x00,0x00,0x00,0x00}
;//                                                                    },
;//                                                                    {0x00,0x01,0,{  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;//                                                                                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;//                                                                                    0x00,0x00,0x00,0x00,0x00}
;//                                                                    },
;//                                                                    {0x00,0x01,0,{  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;//                                                                                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;//                                                                                    0x00,0x00,0x00,0x00,0x00}
;//                                                                    },
;//                                                                    {0x00,0x01,0,{  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;//                                                                                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;//                                                                                    0x00,0x00,0x00,0x00,0x00}
;//                                                                    },
;//                                                                    {0x00,0x01,0,{  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;//                                                                                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;//                                                                                    0x00,0x00,0x00,0x00,0x00}
;//                                                                    },
;//                                                                    {0x00,0x01,0,{  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;//                                                                                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;//                                                                                    0x00,0x00,0x00,0x00,0x00}
;//                                                                    },
;//                                                                    {0x00,0x01,0,{  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;//                                                                                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;//                                                                                    0x00,0x00,0x00,0x00,0x00}
;//                                                                    },
;//                                                                    {0x00,0x01,0,{  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;//                                                                                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;//                                                                                    0x00,0x00,0x00,0x00,0x00}
;//                                                                    },
;//                                                                    {0x00,0x01,0,{  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;//                                                                                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;//                                                                                    0x00,0x00,0x00,0x00,0x00}
;//                                                                    }
;//                                                                };
;eeprom struct ain_cnfg_st   config_ain[MAX_AI_CHANNEL]      =   {   {0x00,1.5},
;                                                                    {0x00,1.5},
;                                                                    {0x00,1.5},
;                                                                    {0x00,1.5},
;                                                                    {0x00,1.5},
;                                                                    {0x00,1.5},
;                                                                    {0x00,1.5},
;                                                                    {0x00,1.5},
;                                                                    {0x00,1.5},
;                                                                    {0x00,1.5},
;                                                                    {0x00,1.5},
;                                                                    {0x00,1.5},
;                                                                    {0x00,1.5},
;                                                                    {0x00,1.5},
;                                                                    {0x00,1.5},
;                                                                    {0x00,1.5}
;                                                                };
;eeprom struct aout_cnfg_st  config_aout[MAX_AO_CHANNEL]     =   {   {0x00,0.0,0,{  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;                                                                                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;                                                                                    0x00,0x00,0x00,0x00,0x00}
;                                                                    },
;                                                                    {0x00,0.0,0,{  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;                                                                                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;                                                                                    0x00,0x00,0x00,0x00,0x00}
;                                                                    },
;                                                                    {0x00,0.0,0,{  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;                                                                                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;                                                                                    0x00,0x00,0x00,0x00,0x00}
;                                                                    },
;                                                                    {0x00,0.0,0,{  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;                                                                                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;                                                                                    0x00,0x00,0x00,0x00,0x00}
;                                                                    },
;                                                                    {0x00,0.0,0,{  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;                                                                                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;                                                                                    0x00,0x00,0x00,0x00,0x00}
;                                                                    },
;                                                                    {0x00,0.0,0,{  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;                                                                                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;                                                                                    0x00,0x00,0x00,0x00,0x00}
;                                                                    },
;                                                                    {0x00,0.0,0,{  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;                                                                                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;                                                                                    0x00,0x00,0x00,0x00,0x00}
;                                                                    },
;                                                                    {0x00,0.0,0,{  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;                                                                                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;                                                                                    0x00,0x00,0x00,0x00,0x00}
;                                                                    },
;                                                                    {0x00,0.0,0,{  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;                                                                                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;                                                                                    0x00,0x00,0x00,0x00,0x00}
;                                                                    },
;                                                                    {0x00,0.0,0,{  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;                                                                                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;                                                                                    0x00,0x00,0x00,0x00,0x00}
;                                                                    },
;                                                                    {0x00,0.0,0,{  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;                                                                                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;                                                                                    0x00,0x00,0x00,0x00,0x00}
;                                                                    },
;                                                                    {0x00,0.0,0,{  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;                                                                                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;                                                                                    0x00,0x00,0x00,0x00,0x00}
;                                                                    },
;                                                                    {0x00,0.0,0,{  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;                                                                                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;                                                                                    0x00,0x00,0x00,0x00,0x00}
;                                                                    },
;                                                                    {0x00,0.0,0,{  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;                                                                                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;                                                                                    0x00,0x00,0x00,0x00,0x00}
;                                                                    },
;                                                                    {0x00,0.0,0,{  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;                                                                                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;                                                                                    0x00,0x00,0x00,0x00,0x00}
;                                                                    },
;                                                                    {0x00,0.0,0,{  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;                                                                                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;                                                                                    0x00,0x00,0x00,0x00,0x00}
;                                                                    },
;
;                                                                };
;eeprom struct buzz_cnfg_st  config_buzz                     =   {   0x00,
;                                                                    0x00,
;                                                                    {   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;                                                                        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
;                                                                        0x00,0x00,0x00,0x00,0x00
;                                                                    }
;                                                                };
;eeprom struct alm_cnfg_st   config_alm                      =   {   0x00000000,
;                                                                    0x0000,
;                                                                    0x00000000,
;                                                                    0x00000000,
;                                                                    0x0000,
;                                                                    0x0000
;                                                                };
;eeprom struct stat_cnfg_st  config_stat                     =   {0x30,60};
;/*============================================================*/
;
;/**************************************************************/
;/***************** EEPROM Configured indicator ****************/
;/**************************************************************/
;/*============================================================*/
;eeprom char config_prop_flag                    =   0x00;
;eeprom char config_oper_flag                    =   0x00;
;eeprom char config_sens_flag[MAX_SENS_CHANNEL]  =   {0x00,0x00,0x00,0x00,0x00};
;eeprom char config_din_flag[MAX_DI_CHANNEL]     =   {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
;eeprom char config_dout_flag[MAX_DO_CHANNEL]    =   {0x00,0x00,0x00,0x00,0x00};//,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
;eeprom char config_ain_flag[MAX_AI_CHANNEL]     =   {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
;eeprom char config_aout_flag[MAX_AO_CHANNEL]    =   {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
;eeprom char config_buzz_flag                    =   0x00;
;eeprom char config_alm_flag                     =   0x00;
;eeprom char config_stat_flag                    =   0x00;
;/*============================================================*/
;#include <stdlib.h>
;#include <stdio.h>
;#include <string.h>
;#include <delay.h>
;#include "ethcomm.h"
	#ifndef __SLEEP_DEFINED__
	#define __SLEEP_DEFINED__
	.EQU __se_bit=0x01
	.EQU __sm_mask=0x0E
	.EQU __sm_powerdown=0x04
	.EQU __sm_powersave=0x06
	.EQU __sm_standby=0x0C
	.EQU __sm_ext_standby=0x0E
	.EQU __sm_adc_noise_red=0x02
	.SET power_ctrl_reg=smcr
	#endif
;#include "io.h"
;#include "log.h"
;#include "logqueue.h"
;#include "debug.h"
;
;//eeprom char     DEVICE_SERIAL[8]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01};
;eeprom char     DEVICE_SERIAL[8]    = {0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x22};
;/*bongkot edit default of serial number*/
;
;TIMER           commLostTimer       = 0;
;unsigned char   duplicateListClear  = 0;
;
;struct log_wait_st    logDataWait   = {0x00,0x00};
;struct log_wait_st    logEventWait  = {0x00,0x00};
;
;/**************************************************************/
;/***** Higher Level Communication Management (IMS_Protocol)****/
;/**************************************************************/
;/*============================================================*/
;int ETH_sendNack(char frameID,char errCode)
; 0009 001A {

	.CSEG
_ETH_sendNack:
; 0009 001B     int     i=0,k=0;
; 0009 001C     char    frameData[2+sizeof(DEVICE_SERIAL)];
; 0009 001D 
; 0009 001E     frameData[i++]      = PROTOERROR;
	ST   -Y,R26
	CALL SUBOPT_0x137
;	frameID -> Y+15
;	errCode -> Y+14
;	i -> R16,R17
;	k -> R18,R19
;	frameData -> Y+4
	LDI  R30,LOW(235)
	ST   X,R30
; 0009 001F 
; 0009 0020     for(k=0;k<sizeof(DEVICE_SERIAL);k++){
	__GETWRN 18,19,0
_0x120004:
	__CPWRN 18,19,8
	BRGE _0x120005
; 0009 0021         frameData[i++]  = DEVICE_SERIAL[k];
	CALL SUBOPT_0x138
	CALL SUBOPT_0x139
; 0009 0022     }
	__ADDWRN 18,19,1
	RJMP _0x120004
_0x120005:
; 0009 0023 
; 0009 0024     frameData[i++]      = errCode;
	CALL SUBOPT_0x138
	LDD  R26,Y+14
	STD  Z+0,R26
; 0009 0025 
; 0009 0026     printDebug("<ETH_sendNack> sending..\r\n");
	__POINTD1FN _0x120000,0
	CALL SUBOPT_0x2
; 0009 0027     //print_payload(frameData,i);
; 0009 0028     ETH_send(frameData,i,frameID,0);
	CALL SUBOPT_0x13A
	CALL SUBOPT_0x13B
; 0009 0029 
; 0009 002A     return 0;
	CALL SUBOPT_0x136
	RJMP _0x20E006F
; 0009 002B }
;/*============================================================*/
;int ETH_sendStatusRequestAck(char frameID,char accm,char status)
; 0009 002E {
_ETH_sendStatusRequestAck:
; 0009 002F     int     i=0,k=0;
; 0009 0030     char    frameData[7+sizeof(DEVICE_SERIAL)];
; 0009 0031 
; 0009 0032     frameData[i++]      = STATREQA;
	ST   -Y,R26
	SBIW R28,15
	CALL SUBOPT_0x13C
;	frameID -> Y+21
;	accm -> Y+20
;	status -> Y+19
;	i -> R16,R17
;	k -> R18,R19
;	frameData -> Y+4
	LDI  R30,LOW(27)
	ST   X,R30
; 0009 0033 
; 0009 0034     for(k=0;k<sizeof(DEVICE_SERIAL);k++){
	__GETWRN 18,19,0
_0x120007:
	__CPWRN 18,19,8
	BRGE _0x120008
; 0009 0035         frameData[i++]  = DEVICE_SERIAL[k];
	CALL SUBOPT_0x138
	CALL SUBOPT_0x139
; 0009 0036     }
	__ADDWRN 18,19,1
	RJMP _0x120007
_0x120008:
; 0009 0037 
; 0009 0038     frameData[i++]      = accm;
	CALL SUBOPT_0x138
	LDD  R26,Y+20
	STD  Z+0,R26
; 0009 0039     frameData[i++]      = status;
	CALL SUBOPT_0x138
	LDD  R26,Y+19
	STD  Z+0,R26
; 0009 003A 
; 0009 003B     printDebug("<ETH_sendStatusRequestAck> sending..\r\n");
	__POINTD1FN _0x120000,27
	CALL SUBOPT_0x2
; 0009 003C     //print_payload(frameData,i);
; 0009 003D 
; 0009 003E     ETH_send(frameData,i,frameID,0);
	CALL SUBOPT_0x13A
	LDD  R30,Y+25
	CALL SUBOPT_0x13D
; 0009 003F 
; 0009 0040     return 0;
	ADIW R28,22
	RET
; 0009 0041 
; 0009 0042 }
;/*============================================================*/
;int ETH_sendStatusReportCmd(unsigned long int timestamp, unsigned char accm, unsigned char *paraResp, int paraLen)
; 0009 0045 {
_ETH_sendStatusReportCmd:
; 0009 0046     int     i=0,k=0;
; 0009 0047     int     frameLen    = 0;
; 0009 0048     char    *frameData;
; 0009 0049 
; 0009 004A     frameLen            = 1 + sizeof(DEVICE_SERIAL) + sizeof(timestamp) + sizeof(accm) + paraLen;
	ST   -Y,R27
	ST   -Y,R26
	SBIW R28,2
	CALL SUBOPT_0x28
;	timestamp -> Y+13
;	accm -> Y+12
;	*paraResp -> Y+10
;	paraLen -> Y+8
;	i -> R16,R17
;	k -> R18,R19
;	frameLen -> R20,R21
;	*frameData -> Y+6
	CALL SUBOPT_0x13E
; 0009 004B     if(frameLen > 250){
	BRLT _0x120009
; 0009 004C         printDebug("<ETH_sendStatusReportCmd> frameLen too long (%d bytes)\r\n",frameLen);
	__POINTD1FN _0x120000,66
	CALL SUBOPT_0x39
; 0009 004D         return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E0071
; 0009 004E     }
; 0009 004F 
; 0009 0050     frameData           = (char *) malloc (frameLen);
_0x120009:
	CALL SUBOPT_0x13F
; 0009 0051     if(frameData == NULL){
	BRNE _0x12000A
; 0009 0052         printDebug("<ETH_sendStatusReportCmd> malloc failed (%d bytes)\r\n",frameLen);
	__POINTD1FN _0x120000,123
	CALL SUBOPT_0x39
; 0009 0053         return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E0071
; 0009 0054     }
; 0009 0055 
; 0009 0056     frameData[i++]      = STATREPC;
_0x12000A:
	CALL SUBOPT_0x140
	ADD  R26,R30
	ADC  R27,R31
	LDI  R30,LOW(42)
	ST   X,R30
; 0009 0057 
; 0009 0058     for(k=0;k<sizeof(DEVICE_SERIAL);k++){
	__GETWRN 18,19,0
_0x12000C:
	__CPWRN 18,19,8
	BRGE _0x12000D
; 0009 0059         frameData[i++]  = DEVICE_SERIAL[k];
	CALL SUBOPT_0x140
	CALL SUBOPT_0x141
; 0009 005A     }
	__ADDWRN 18,19,1
	RJMP _0x12000C
_0x12000D:
; 0009 005B 
; 0009 005C     memcpy(&frameData[i],&timestamp,sizeof(timestamp));
	CALL SUBOPT_0x142
	MOVW R30,R28
	ADIW R30,15
	CALL SUBOPT_0x3C
; 0009 005D     i += sizeof(timestamp);
	__ADDWRN 16,17,4
; 0009 005E 
; 0009 005F     frameData[i++]      = accm;
	CALL SUBOPT_0x140
	ADD  R30,R26
	ADC  R31,R27
	LDD  R26,Y+12
	STD  Z+0,R26
; 0009 0060 
; 0009 0061     memcpy(&frameData[i],paraResp,paraLen);
	CALL SUBOPT_0x142
	CALL SUBOPT_0x143
; 0009 0062     i += paraLen;
; 0009 0063 
; 0009 0064     ETH_send(frameData,i,0x00,CMD_TIMEOUT);
	CALL SUBOPT_0x144
	ST   -Y,R17
	ST   -Y,R16
	LDI  R30,LOW(0)
	CALL SUBOPT_0x145
; 0009 0065     free( frameData );
	CALL SUBOPT_0x146
; 0009 0066 }
_0x20E0071:
	CALL __LOADLOCR6
	ADIW R28,17
	RET
;/*============================================================*/
;int ETH_sendEventReportCmd(char eventType, unsigned long int timestamp, char eventID, char statusCode)
; 0009 0069 {
_ETH_sendEventReportCmd:
; 0009 006A     int     i=0,k=0,res=0;
; 0009 006B     char    frameID;
; 0009 006C     char    frameData[8 + sizeof(DEVICE_SERIAL)];
; 0009 006D 
; 0009 006E     if((eventType != TYP_RLT) && (eventType != TYP_LOG) && (eventType != TYP_SAV))
	ST   -Y,R26
	SBIW R28,17
	CALL SUBOPT_0x28
;	eventType -> Y+29
;	timestamp -> Y+25
;	eventID -> Y+24
;	statusCode -> Y+23
;	i -> R16,R17
;	k -> R18,R19
;	res -> R20,R21
;	frameID -> Y+22
;	frameData -> Y+6
	LDD  R26,Y+29
	CPI  R26,LOW(0x0)
	BREQ _0x12000F
	CPI  R26,LOW(0x1)
	BREQ _0x12000F
	CPI  R26,LOW(0x2)
	BRNE _0x120010
_0x12000F:
	RJMP _0x12000E
_0x120010:
; 0009 006F     {
; 0009 0070         printDebug("<ETH_sendEventReportCmd> Wrong eventType 0x%02X\r\n", eventType);
	__POINTD1FN _0x120000,176
	CALL __PUTPARD1
	LDD  R30,Y+33
	CALL SUBOPT_0x27
; 0009 0071         return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E0070
; 0009 0072     }
; 0009 0073 
; 0009 0074     frameData[i++]      =   EVENREPC;
_0x12000E:
	CALL SUBOPT_0x147
	ADD  R26,R30
	ADC  R27,R31
	LDI  R30,LOW(58)
	ST   X,R30
; 0009 0075 
; 0009 0076     for(k=0;k<sizeof(DEVICE_SERIAL);k++){
	__GETWRN 18,19,0
_0x120012:
	__CPWRN 18,19,8
	BRGE _0x120013
; 0009 0077         frameData[i++]  = DEVICE_SERIAL[k];
	CALL SUBOPT_0x147
	CALL SUBOPT_0x141
; 0009 0078     }
	__ADDWRN 18,19,1
	RJMP _0x120012
_0x120013:
; 0009 0079 
; 0009 007A     memcpy(&frameData[i],&timestamp,sizeof(timestamp));
	MOVW R30,R16
	MOVW R26,R28
	ADIW R26,6
	CALL SUBOPT_0x1B
	MOVW R30,R28
	ADIW R30,27
	CALL SUBOPT_0x3C
; 0009 007B     i += sizeof(timestamp);
	__ADDWRN 16,17,4
; 0009 007C 
; 0009 007D     frameData[i++]      =   eventType;
	CALL SUBOPT_0x147
	ADD  R30,R26
	ADC  R31,R27
	LDD  R26,Y+29
	STD  Z+0,R26
; 0009 007E     frameData[i++]      =   eventID;
	CALL SUBOPT_0x147
	ADD  R30,R26
	ADC  R31,R27
	LDD  R26,Y+24
	STD  Z+0,R26
; 0009 007F     frameData[i++]      =   statusCode;
	CALL SUBOPT_0x147
	ADD  R30,R26
	ADC  R31,R27
	LDD  R26,Y+23
	STD  Z+0,R26
; 0009 0080 
; 0009 0081     frameID             = ETH_generateId();
	CALL _ETH_generateId
	STD  Y+22,R30
; 0009 0082 
; 0009 0083     if(eventType == TYP_RLT)
	LDD  R30,Y+29
	CPI  R30,0
	BRNE _0x120014
; 0009 0084     {
; 0009 0085         res = addEventLogQueue(frameID,timestamp,eventID,statusCode);
	LDD  R30,Y+22
	ST   -Y,R30
	CALL SUBOPT_0xBE
	CALL __PUTPARD1
	LDD  R30,Y+29
	ST   -Y,R30
	LDD  R26,Y+29
	CALL _addEventLogQueue
	MOVW R20,R30
; 0009 0086         if(res < 0)
	TST  R21
	BRPL _0x120015
; 0009 0087         {
; 0009 0088             printDebug("<ETH_sendEventReportCmd> addEventLogQueue(0x%02X,%ld,0x%02X,0x%02X) failed\r\n",
; 0009 0089                         frameID,timestamp,eventID,statusCode);
	__POINTD1FN _0x120000,226
	CALL __PUTPARD1
	LDD  R30,Y+26
	CALL SUBOPT_0x55
	CALL SUBOPT_0x148
	LDD  R30,Y+36
	CALL SUBOPT_0x55
	LDD  R30,Y+39
	CALL SUBOPT_0x55
	CALL SUBOPT_0x149
; 0009 008A         }
; 0009 008B     }
_0x120015:
; 0009 008C     else if(eventType == TYP_LOG)
	RJMP _0x120016
_0x120014:
	LDD  R26,Y+29
	CPI  R26,LOW(0x1)
	BRNE _0x120017
; 0009 008D     {
; 0009 008E         logEventWait.frameID = frameID;
	LDD  R30,Y+22
	STS  _logEventWait,R30
; 0009 008F     }
; 0009 0090 
; 0009 0091     printDebug("<ETH_sendEventReportCmd> sending..\r\n");
_0x120017:
_0x120016:
	__POINTD1FN _0x120000,303
	CALL SUBOPT_0x2
; 0009 0092     print_payload(frameData,i);
	CALL SUBOPT_0x46
	MOVW R26,R16
	CALL _print_payload
; 0009 0093 
; 0009 0094     res = ETH_send(frameData,i,frameID,CMD_TIMEOUT);
	CALL SUBOPT_0x46
	ST   -Y,R17
	ST   -Y,R16
	LDD  R30,Y+26
	CALL SUBOPT_0x145
	MOVW R20,R30
; 0009 0095     if(res < 0){
	TST  R21
	BRPL _0x120018
; 0009 0096         return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E0070
; 0009 0097     }
; 0009 0098     else{
_0x120018:
; 0009 0099         return 0;
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
; 0009 009A     }
; 0009 009B }
_0x20E0070:
	CALL __LOADLOCR6
	ADIW R28,30
	RET
;/*============================================================*/
;int ETH_sendConfigManageNack(char frameID,char accd,char cnfg,char status)
; 0009 009E {
_ETH_sendConfigManageNack:
; 0009 009F     int     i=0,k=0;
; 0009 00A0     char    frameData[4 + sizeof(DEVICE_SERIAL)];
; 0009 00A1 
; 0009 00A2     frameData[i++]      = CONFMANA;
	ST   -Y,R26
	SBIW R28,12
	CALL SUBOPT_0x13C
;	frameID -> Y+19
;	accd -> Y+18
;	cnfg -> Y+17
;	status -> Y+16
;	i -> R16,R17
;	k -> R18,R19
;	frameData -> Y+4
	LDI  R30,LOW(75)
	ST   X,R30
; 0009 00A3 
; 0009 00A4     for(k=0;k<sizeof(DEVICE_SERIAL);k++){
	__GETWRN 18,19,0
_0x12001B:
	__CPWRN 18,19,8
	BRGE _0x12001C
; 0009 00A5         frameData[i++]  = DEVICE_SERIAL[k];
	CALL SUBOPT_0x138
	CALL SUBOPT_0x139
; 0009 00A6     }
	__ADDWRN 18,19,1
	RJMP _0x12001B
_0x12001C:
; 0009 00A7 
; 0009 00A8     frameData[i++]      = accd;
	CALL SUBOPT_0x138
	LDD  R26,Y+18
	STD  Z+0,R26
; 0009 00A9     frameData[i++]      = cnfg;
	CALL SUBOPT_0x138
	LDD  R26,Y+17
	STD  Z+0,R26
; 0009 00AA     frameData[i++]      = status;
	CALL SUBOPT_0x138
	LDD  R26,Y+16
	STD  Z+0,R26
; 0009 00AB 
; 0009 00AC     printDebug("<ETH_sendConfigManageNack> sending..\r\n");
	__POINTD1FN _0x120000,340
	CALL SUBOPT_0x2
; 0009 00AD     //print_payload(frameData,i);
; 0009 00AE 
; 0009 00AF     ETH_send(frameData,i,frameID,0);
	CALL SUBOPT_0x13A
	LDD  R30,Y+23
	CALL SUBOPT_0x13D
; 0009 00B0 
; 0009 00B1     return 0;
	ADIW R28,20
	RET
; 0009 00B2 }
;/*============================================================*/
;int ETH_sendConfigManageAck(char frameID,char accd,char cnfg,char status,char *cnfgData, int cnfgLen)
; 0009 00B5 {
_ETH_sendConfigManageAck:
; 0009 00B6     int     i=0,k=0;
; 0009 00B7     int     frameLen    = 0;
; 0009 00B8     char    *frameData;
; 0009 00B9 
; 0009 00BA 
; 0009 00BB     frameLen            = 1 + sizeof(DEVICE_SERIAL) + sizeof(accd) + sizeof(cnfg) + sizeof(status) + cnfgLen;
	ST   -Y,R27
	ST   -Y,R26
	SBIW R28,2
	CALL SUBOPT_0x28
;	frameID -> Y+15
;	accd -> Y+14
;	cnfg -> Y+13
;	status -> Y+12
;	*cnfgData -> Y+10
;	cnfgLen -> Y+8
;	i -> R16,R17
;	k -> R18,R19
;	frameLen -> R20,R21
;	*frameData -> Y+6
	CALL SUBOPT_0x13E
; 0009 00BC     if(frameLen > 250){
	BRLT _0x12001D
; 0009 00BD         printDebug("<ETH_sendConfigManageAck> frameLen too long (%d bytes)\r\n",frameLen);
	__POINTD1FN _0x120000,379
	CALL SUBOPT_0x39
; 0009 00BE         ETH_sendConfigManageNack(frameID,accd,cnfg,ERROR);
	CALL SUBOPT_0x14A
; 0009 00BF         return -1;
	RJMP _0x20E006E
; 0009 00C0     }
; 0009 00C1 
; 0009 00C2     frameData           = (char *) malloc (frameLen);
_0x12001D:
	CALL SUBOPT_0x13F
; 0009 00C3     if(frameData == NULL){
	BRNE _0x12001E
; 0009 00C4         printDebug("<ETH_sendConfigManageAck> malloc failed (%d bytes)\r\n",frameLen);
	__POINTD1FN _0x120000,436
	CALL SUBOPT_0x39
; 0009 00C5         ETH_sendConfigManageNack(frameID,accd,cnfg,ERROR);
	CALL SUBOPT_0x14A
; 0009 00C6         return -1;
	RJMP _0x20E006E
; 0009 00C7     }
; 0009 00C8 
; 0009 00C9     frameData[i++]      = CONFMANA;
_0x12001E:
	CALL SUBOPT_0x140
	ADD  R26,R30
	ADC  R27,R31
	LDI  R30,LOW(75)
	ST   X,R30
; 0009 00CA 
; 0009 00CB     for(k=0;k<sizeof(DEVICE_SERIAL);k++){
	__GETWRN 18,19,0
_0x120020:
	__CPWRN 18,19,8
	BRGE _0x120021
; 0009 00CC         frameData[i++]  = DEVICE_SERIAL[k];
	CALL SUBOPT_0x140
	CALL SUBOPT_0x141
; 0009 00CD     }
	__ADDWRN 18,19,1
	RJMP _0x120020
_0x120021:
; 0009 00CE 
; 0009 00CF     frameData[i++]      = accd;
	CALL SUBOPT_0x140
	ADD  R30,R26
	ADC  R31,R27
	LDD  R26,Y+14
	STD  Z+0,R26
; 0009 00D0     frameData[i++]      = cnfg;
	CALL SUBOPT_0x140
	ADD  R30,R26
	ADC  R31,R27
	LDD  R26,Y+13
	STD  Z+0,R26
; 0009 00D1     frameData[i++]      = status;
	CALL SUBOPT_0x140
	ADD  R30,R26
	ADC  R31,R27
	LDD  R26,Y+12
	STD  Z+0,R26
; 0009 00D2     if(cnfgLen > 0){
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	CALL __CPW02
	BRGE _0x120022
; 0009 00D3         memcpy(&frameData[i],cnfgData,cnfgLen);
	CALL SUBOPT_0x142
	CALL SUBOPT_0x143
; 0009 00D4         i += cnfgLen;
; 0009 00D5     }
; 0009 00D6 
; 0009 00D7     printDebug("<ETH_sendConfigManageAck> sending..\r\n");
_0x120022:
	__POINTD1FN _0x120000,489
	CALL SUBOPT_0x2
; 0009 00D8     print_payload(frameData,i);
	CALL SUBOPT_0x144
	MOVW R26,R16
	CALL SUBOPT_0x14B
; 0009 00D9 
; 0009 00DA     ETH_send(frameData,i,frameID,0);
	ST   -Y,R17
	ST   -Y,R16
	CALL SUBOPT_0x13B
; 0009 00DB 
; 0009 00DC     free( frameData );
	CALL SUBOPT_0x146
; 0009 00DD 
; 0009 00DE     return 0;
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
_0x20E006E:
	CALL __LOADLOCR6
_0x20E006F:
	ADIW R28,16
	RET
; 0009 00DF }
;/*============================================================*/
;int ETH_sendDataReportCmd(char dataType, unsigned long int timestamp, unsigned int sensorID, float value)
; 0009 00E2 {
_ETH_sendDataReportCmd:
; 0009 00E3     int     i=0,k=0,res=0;
; 0009 00E4     char    frameID;
; 0009 00E5     char    frameData[10 + sizeof(DEVICE_SERIAL)];
; 0009 00E6     char    did = 0x00;
; 0009 00E7 
; 0009 00E8     if((dataType != TYP_RLT) && (dataType != TYP_LOG) && (dataType != TYP_SAV))
	CALL __PUTPARD2
	SBIW R28,20
	LDI  R30,LOW(0)
	ST   Y,R30
	CALL SUBOPT_0x28
;	dataType -> Y+36
;	timestamp -> Y+32
;	sensorID -> Y+30
;	value -> Y+26
;	i -> R16,R17
;	k -> R18,R19
;	res -> R20,R21
;	frameID -> Y+25
;	frameData -> Y+7
;	did -> Y+6
	LDD  R26,Y+36
	CPI  R26,LOW(0x0)
	BREQ _0x120024
	CPI  R26,LOW(0x1)
	BREQ _0x120024
	CPI  R26,LOW(0x2)
	BRNE _0x120025
_0x120024:
	RJMP _0x120023
_0x120025:
; 0009 00E9     {
; 0009 00EA         printDebug("<ETH_sendDataReportCmd> Wrong dataType 0x%02X\r\n", dataType);
	__POINTD1FN _0x120000,527
	CALL __PUTPARD1
	LDD  R30,Y+40
	CALL SUBOPT_0x27
; 0009 00EB         return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E006D
; 0009 00EC     }
; 0009 00ED 
; 0009 00EE     did     = ((sensorID+1) & 0xff) << 4;
_0x120023:
	LDD  R26,Y+30
	SUBI R26,-LOW(1)
	MOV  R30,R26
	SWAP R30
	ANDI R30,0xF0
	STD  Y+6,R30
; 0009 00EF     did    |= dataType;
	LDD  R30,Y+36
	LDD  R26,Y+6
	OR   R30,R26
	STD  Y+6,R30
; 0009 00F0 
; 0009 00F1     frameData[i++]      =   DATAREPC;
	CALL SUBOPT_0x14C
	ADD  R26,R30
	ADC  R27,R31
	LDI  R30,LOW(90)
	ST   X,R30
; 0009 00F2 
; 0009 00F3     for(k=0;k<sizeof(DEVICE_SERIAL);k++){
	__GETWRN 18,19,0
_0x120027:
	__CPWRN 18,19,8
	BRGE _0x120028
; 0009 00F4         frameData[i++]  = DEVICE_SERIAL[k];
	CALL SUBOPT_0x14C
	CALL SUBOPT_0x141
; 0009 00F5     }
	__ADDWRN 18,19,1
	RJMP _0x120027
_0x120028:
; 0009 00F6 
; 0009 00F7     memcpy(&frameData[i],&timestamp,sizeof(timestamp));
	MOVW R30,R16
	MOVW R26,R28
	ADIW R26,7
	CALL SUBOPT_0x1B
	MOVW R30,R28
	ADIW R30,34
	CALL SUBOPT_0x3C
; 0009 00F8     i += sizeof(timestamp);
	__ADDWRN 16,17,4
; 0009 00F9 
; 0009 00FA     frameData[i++]      =   did;
	CALL SUBOPT_0x14C
	ADD  R30,R26
	ADC  R31,R27
	LDD  R26,Y+6
	STD  Z+0,R26
; 0009 00FB 
; 0009 00FC     memcpy(&frameData[i],&value,sizeof(value));
	MOVW R30,R16
	MOVW R26,R28
	ADIW R26,7
	CALL SUBOPT_0x1B
	MOVW R30,R28
	ADIW R30,28
	CALL SUBOPT_0x3C
; 0009 00FD     i += sizeof(value);
	__ADDWRN 16,17,4
; 0009 00FE 
; 0009 00FF     frameID             = ETH_generateId();
	CALL _ETH_generateId
	STD  Y+25,R30
; 0009 0100 
; 0009 0101     if(dataType == TYP_RLT)
	LDD  R30,Y+36
	CPI  R30,0
	BRNE _0x120029
; 0009 0102     {
; 0009 0103         res = addDataLogQueue(frameID,timestamp,sensorID,value);
	LDD  R30,Y+25
	ST   -Y,R30
	CALL SUBOPT_0x148
	LDD  R30,Y+35
	LDD  R31,Y+35+1
	ST   -Y,R31
	ST   -Y,R30
	__GETD2S 33
	CALL _addDataLogQueue
	MOVW R20,R30
; 0009 0104         if(res < 0)
	TST  R21
	BRPL _0x12002A
; 0009 0105         {
; 0009 0106             printDebug("<ETH_sendDataReportCmd> addDataLogQueue(0x%02X,%ld,%u,%.2f) failed\r\n",frameID,timestamp,sensorID,value);
	__POINTD1FN _0x120000,575
	CALL __PUTPARD1
	LDD  R30,Y+29
	CALL SUBOPT_0x55
	CALL SUBOPT_0x14D
	CALL __PUTPARD1
	LDD  R30,Y+42
	LDD  R31,Y+42+1
	CALL SUBOPT_0xDD
	__GETD1S 42
	CALL __PUTPARD1
	CALL SUBOPT_0x149
; 0009 0107         }
; 0009 0108     }
_0x12002A:
; 0009 0109     else if(dataType == TYP_LOG)
	RJMP _0x12002B
_0x120029:
	LDD  R26,Y+36
	CPI  R26,LOW(0x1)
	BRNE _0x12002C
; 0009 010A     {
; 0009 010B         logDataWait.frameID = frameID;
	LDD  R30,Y+25
	STS  _logDataWait,R30
; 0009 010C     }
; 0009 010D 
; 0009 010E     printDebug("<ETH_sendDataReportCmd> sending..\r\n");
_0x12002C:
_0x12002B:
	__POINTD1FN _0x120000,644
	CALL SUBOPT_0x2
; 0009 010F     //print_payload(frameData,i);
; 0009 0110 
; 0009 0111     res = ETH_send(frameData,i,frameID,CMD_TIMEOUT);
	CALL SUBOPT_0x53
	ST   -Y,R17
	ST   -Y,R16
	LDD  R30,Y+29
	CALL SUBOPT_0x145
	MOVW R20,R30
; 0009 0112     if(res < 0){
	TST  R21
	BRPL _0x12002D
; 0009 0113         return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E006D
; 0009 0114     }
; 0009 0115     else{
_0x12002D:
; 0009 0116         return 0;
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
; 0009 0117     }
; 0009 0118 }
_0x20E006D:
	CALL __LOADLOCR6
	ADIW R28,37
	RET
;/*============================================================*/
;int ETH_sendLogManipulationAck(char frameID,char accd,char status)
; 0009 011B {
_ETH_sendLogManipulationAck:
; 0009 011C     int     i=0,k=0;
; 0009 011D     char    frameData[3 + sizeof(DEVICE_SERIAL)];
; 0009 011E 
; 0009 011F     frameData[i++]      = LOGMANIA;
	CALL SUBOPT_0x14E
;	frameID -> Y+17
;	accd -> Y+16
;	status -> Y+15
;	i -> R16,R17
;	k -> R18,R19
;	frameData -> Y+4
	LDI  R30,LOW(107)
	ST   X,R30
; 0009 0120 
; 0009 0121     for(k=0;k<sizeof(DEVICE_SERIAL);k++){
	__GETWRN 18,19,0
_0x120030:
	__CPWRN 18,19,8
	BRGE _0x120031
; 0009 0122         frameData[i++]  = DEVICE_SERIAL[k];
	CALL SUBOPT_0x138
	CALL SUBOPT_0x139
; 0009 0123     }
	__ADDWRN 18,19,1
	RJMP _0x120030
_0x120031:
; 0009 0124 
; 0009 0125     frameData[i++]      = accd;
	CALL SUBOPT_0x138
	CALL SUBOPT_0x14F
; 0009 0126     frameData[i++]      = status;
	LDD  R26,Y+15
	STD  Z+0,R26
; 0009 0127 
; 0009 0128     printDebug("<ETH_sendLogManipulationAck> sending..\r\n");
	__POINTD1FN _0x120000,680
	RJMP _0x20E006C
; 0009 0129     //print_payload(frameData,i);
; 0009 012A     ETH_send(frameData,i,frameID,0);
; 0009 012B 
; 0009 012C     return 0;
; 0009 012D }
;/*============================================================*/
;int ETH_sendNetworkMaintenanceAck(char frameID,char cmd,char status)
; 0009 0130 {
_ETH_sendNetworkMaintenanceAck:
; 0009 0131     int     i=0,k=0;
; 0009 0132     char    frameData[3 + sizeof(DEVICE_SERIAL)];
; 0009 0133 
; 0009 0134     frameData[i++]      = NETMAINA;
	CALL SUBOPT_0x14E
;	frameID -> Y+17
;	cmd -> Y+16
;	status -> Y+15
;	i -> R16,R17
;	k -> R18,R19
;	frameData -> Y+4
	LDI  R30,LOW(123)
	ST   X,R30
; 0009 0135 
; 0009 0136     for(k=0;k<sizeof(DEVICE_SERIAL);k++){
	__GETWRN 18,19,0
_0x120033:
	__CPWRN 18,19,8
	BRGE _0x120034
; 0009 0137         frameData[i++]  = DEVICE_SERIAL[k];
	CALL SUBOPT_0x138
	CALL SUBOPT_0x139
; 0009 0138     }
	__ADDWRN 18,19,1
	RJMP _0x120033
_0x120034:
; 0009 0139 
; 0009 013A     frameData[i++]      = cmd;
	CALL SUBOPT_0x138
	CALL SUBOPT_0x14F
; 0009 013B     frameData[i++]      = status;
	LDD  R26,Y+15
	STD  Z+0,R26
; 0009 013C 
; 0009 013D     printDebug("<ETH_sendNetworkMaintenanceAck> sending..\r\n");
	__POINTD1FN _0x120000,721
	RJMP _0x20E006C
; 0009 013E     ETH_send(frameData,i,frameID,0);
; 0009 013F 
; 0009 0140     return 0;
; 0009 0141 }
;/*============================================================*/
;int ETH_remoteDeviceControlAck(char frameID,char cmd,char status)
; 0009 0144 {
_ETH_remoteDeviceControlAck:
; 0009 0145     int     i=0,k=0;
; 0009 0146     char    frameData[3 + sizeof(DEVICE_SERIAL)];
; 0009 0147 
; 0009 0148     frameData[i++]      = RMDCTRLA;
	CALL SUBOPT_0x14E
;	frameID -> Y+17
;	cmd -> Y+16
;	status -> Y+15
;	i -> R16,R17
;	k -> R18,R19
;	frameData -> Y+4
	LDI  R30,LOW(139)
	ST   X,R30
; 0009 0149 
; 0009 014A     for(k=0;k<sizeof(DEVICE_SERIAL);k++){
	__GETWRN 18,19,0
_0x120036:
	__CPWRN 18,19,8
	BRGE _0x120037
; 0009 014B         frameData[i++]  = DEVICE_SERIAL[k];
	CALL SUBOPT_0x138
	CALL SUBOPT_0x139
; 0009 014C     }
	__ADDWRN 18,19,1
	RJMP _0x120036
_0x120037:
; 0009 014D 
; 0009 014E     frameData[i++]      = cmd;
	CALL SUBOPT_0x138
	CALL SUBOPT_0x14F
; 0009 014F     frameData[i++]      = status;
	LDD  R26,Y+15
	STD  Z+0,R26
; 0009 0150 
; 0009 0151     printDebug("<ETH_remoteDeviceControlAck> sending..\r\n");
	__POINTD1FN _0x120000,765
_0x20E006C:
	CALL __PUTPARD1
	CALL SUBOPT_0x30
; 0009 0152     ETH_send(frameData,i,frameID,0);
	CALL SUBOPT_0x13A
	LDD  R30,Y+21
	CALL SUBOPT_0x13D
; 0009 0153 
; 0009 0154     return 0;
	ADIW R28,18
	RET
; 0009 0155 }
;/*============================================================*/
;int ETH_clearDuplicateRequestCmd(void)
; 0009 0158 {
_ETH_clearDuplicateRequestCmd:
; 0009 0159     int     i=0,k=0;
; 0009 015A     char    frameData[2 + sizeof(DEVICE_SERIAL)];
; 0009 015B 
; 0009 015C     frameData[i++]  = CLRLISTC;
	CALL SUBOPT_0x137
;	i -> R16,R17
;	k -> R18,R19
;	frameData -> Y+4
	LDI  R30,LOW(154)
	ST   X,R30
; 0009 015D 
; 0009 015E     for(k=0;k<sizeof(DEVICE_SERIAL);k++){
	__GETWRN 18,19,0
_0x120039:
	__CPWRN 18,19,8
	BRGE _0x12003A
; 0009 015F         frameData[i++]  = DEVICE_SERIAL[k];
	CALL SUBOPT_0x138
	CALL SUBOPT_0x139
; 0009 0160     }
	__ADDWRN 18,19,1
	RJMP _0x120039
_0x12003A:
; 0009 0161 
; 0009 0162     frameData[i++]  = CLR_DUPLIST;
	MOVW R30,R16
	__ADDWRN 16,17,1
	CALL SUBOPT_0x150
	LDI  R30,LOW(1)
	ST   X,R30
; 0009 0163 
; 0009 0164     printDebug("<ETH_clearDuplicateRequestCmd> sending..\r\n");
	__POINTD1FN _0x120000,806
	CALL SUBOPT_0x2
; 0009 0165     ETH_send(frameData,i,0xFF,0);
	CALL SUBOPT_0x13A
	LDI  R30,LOW(255)
	CALL SUBOPT_0x13D
; 0009 0166 
; 0009 0167     return 0;
	ADIW R28,14
	RET
; 0009 0168 }
;/*============================================================*/
;void ETH_checkPushLog(unsigned char id)
; 0009 016B {
_ETH_checkPushLog:
; 0009 016C     FIL                 file;
; 0009 016D     int                 res;
; 0009 016E     unsigned long int   timestamp;
; 0009 016F     unsigned int        channel;
; 0009 0170     float               value;
; 0009 0171     unsigned char       eventID;
; 0009 0172     unsigned char       eventStatus;
; 0009 0173 
; 0009 0174     // -- check if id is in dataLogQueue -- //
; 0009 0175     res = readDataLogQueue(id,&timestamp,&channel,&value);
	ST   -Y,R26
	SBIW R28,40
	SUBI R29,2
	CALL __SAVELOCR6
;	id -> Y+558
;	file -> Y+14
;	res -> R16,R17
;	timestamp -> Y+10
;	channel -> R18,R19
;	value -> Y+6
;	eventID -> R21
;	eventStatus -> R20
	CALL SUBOPT_0x151
	IN   R30,SPL
	IN   R31,SPH
	SBIW R30,1
	ST   -Y,R31
	ST   -Y,R30
	PUSH R19
	PUSH R18
	MOVW R26,R28
	ADIW R26,11
	CALL _readDataLogQueue
	POP  R18
	POP  R19
	MOVW R16,R30
; 0009 0176     if(res != -1)
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	CP   R30,R16
	CPC  R31,R17
	BRNE PC+3
	JMP _0x12003B
; 0009 0177     {
; 0009 0178         // -- found in dataLogQueue -- //
; 0009 0179         if( (timestamp == 0) || (timestamp == 0xFFFFFFFF) || (channel > (MAX_SENS_CHANNEL-1)) )
	CALL SUBOPT_0x5D
	BREQ _0x12003D
	CALL SUBOPT_0x43
	BREQ _0x12003D
	__CPWRN 18,19,5
	BRLO _0x12003C
_0x12003D:
; 0009 017A         {
; 0009 017B             printDebug("\r\n<ETH_checkPushLog> === ERROR INFOMATION IN DATA LOG QUEUE ===\r\n");
	__POINTD1FN _0x120000,849
	RJMP _0x120115
; 0009 017C         }
; 0009 017D         else
_0x12003C:
; 0009 017E         {
; 0009 017F             printDebug("<ETH_checkPushLog> DataLog time[%ld],ch[%d],val[%.2f]\r\n",timestamp,channel,value);
	__POINTD1FN _0x120000,915
	CALL SUBOPT_0x40
	MOVW R30,R18
	CALL SUBOPT_0x41
; 0009 0180             res = LOG_openFile(&file,LOGFILE_DATA);
	CALL SUBOPT_0x152
	CALL SUBOPT_0x4E
	MOVW R16,R30
; 0009 0181             if(res < 0)
	TST  R17
	BRPL _0x120040
; 0009 0182             {
; 0009 0183                 printDebug("<ETH_checkPushLog> LOG_openFile(%s) failed, couldn't save log\r\n",LOGFILE_DATA);
	__POINTD1FN _0x120000,971
	CALL SUBOPT_0x4F
; 0009 0184             }
; 0009 0185             else
	RJMP _0x120041
_0x120040:
; 0009 0186             {
; 0009 0187                 res = LOG_insertData(&file,timestamp,channel,value);
	CALL SUBOPT_0x152
	CALL SUBOPT_0x153
	ST   -Y,R19
	ST   -Y,R18
	CALL SUBOPT_0x51
	MOVW R16,R30
; 0009 0188                 if(res < 0)
	TST  R17
	BRPL _0x120042
; 0009 0189                 {
; 0009 018A                     printDebug("<ETH_checkPushLog> LOG_insertData() failed\r\n");
	CALL SUBOPT_0x154
; 0009 018B                 }
; 0009 018C 
; 0009 018D                 res = LOG_closeFile(&file);
_0x120042:
	CALL SUBOPT_0x155
; 0009 018E                 if(res < 0)
	BRPL _0x120043
; 0009 018F                 {
; 0009 0190                     printDebug("<ETH_checkPushLog> LOG_closeFile() failed\r\n");
	CALL SUBOPT_0x156
; 0009 0191                 }
; 0009 0192 
; 0009 0193                 printDebug("<ETH_checkPushLog> Inserted Data Log\r\n");
_0x120043:
	__POINTD1FN _0x120000,1124
_0x120115:
	CALL __PUTPARD1
	CALL SUBOPT_0x30
; 0009 0194             }
_0x120041:
; 0009 0195         }
; 0009 0196 
; 0009 0197         //isDataLogEmpty = 0;
; 0009 0198         removeDataLogQueue(id);
	__GETB2SX 558
	CALL _removeDataLogQueue
; 0009 0199     }
; 0009 019A 
; 0009 019B     // -- check if id is in eventLogQueue -- //
; 0009 019C     res = readEventLogQueue(id,&timestamp,&eventID,&eventStatus);
_0x12003B:
	CALL SUBOPT_0x151
	IN   R30,SPL
	IN   R31,SPH
	ST   -Y,R31
	ST   -Y,R30
	PUSH R21
	IN   R26,SPL
	IN   R27,SPH
	PUSH R20
	CALL _readEventLogQueue
	POP  R20
	POP  R21
	MOVW R16,R30
; 0009 019D     if(res != -1)
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	CP   R30,R16
	CPC  R31,R17
	BRNE PC+3
	JMP _0x120044
; 0009 019E     {
; 0009 019F         // -- found in eventLogQueue -- //
; 0009 01A0         if( (timestamp == 0) || (timestamp == 0xFFFFFFFF) )
	CALL SUBOPT_0x5D
	BREQ _0x120046
	CALL SUBOPT_0x43
	BRNE _0x120045
_0x120046:
; 0009 01A1         {
; 0009 01A2             printDebug("\r\n<ETH_checkPushLog> === ERROR INFOMATION IN EVENT LOG QUEUE ===\r\n");
	__POINTD1FN _0x120000,1163
	RJMP _0x120116
; 0009 01A3         }
; 0009 01A4         else{
_0x120045:
; 0009 01A5 
; 0009 01A6             res = LOG_openFile(&file,LOGFILE_EVENT);
	CALL SUBOPT_0x152
	CALL SUBOPT_0x59
	MOVW R16,R30
; 0009 01A7             if(res < 0)
	TST  R17
	BRPL _0x120049
; 0009 01A8             {
; 0009 01A9                 printDebug("<ETH_checkPushLog> LOG_openFile(%s) failed, couldn't save log\r\n",LOGFILE_EVENT);
	__POINTD1FN _0x120000,971
	CALL SUBOPT_0x5A
; 0009 01AA             }
; 0009 01AB             else
	RJMP _0x12004A
_0x120049:
; 0009 01AC             {
; 0009 01AD                 printDebug("<ETH_checkPushLog> EventLog time[%ld],id[0x%02X],stat[0x%02X]\r\n",timestamp,eventID,eventStatus);
	__POINTD1FN _0x120000,1230
	CALL SUBOPT_0x40
	CALL SUBOPT_0x48
; 0009 01AE                 res = LOG_insertEvent(&file,timestamp,eventID,eventStatus);
	CALL SUBOPT_0x152
	CALL SUBOPT_0x153
	ST   -Y,R21
	MOV  R26,R20
	CALL _LOG_insertEvent
	MOVW R16,R30
; 0009 01AF                 if(res < 0)
	TST  R17
	BRPL _0x12004B
; 0009 01B0                 {
; 0009 01B1                     printDebug("<ETH_checkPushLog> LOG_insertData() failed\r\n");
	CALL SUBOPT_0x154
; 0009 01B2                 }
; 0009 01B3 
; 0009 01B4                 res = LOG_closeFile(&file);
_0x12004B:
	CALL SUBOPT_0x155
; 0009 01B5                 if(res < 0)
	BRPL _0x12004C
; 0009 01B6                 {
; 0009 01B7                     printDebug("<ETH_checkPushLog> LOG_closeFile() failed\r\n");
	CALL SUBOPT_0x156
; 0009 01B8                 }
; 0009 01B9 
; 0009 01BA                 printDebug("<ETH_checkPushLog> Inserted Event Log\r\n");
_0x12004C:
	__POINTD1FN _0x120000,1294
_0x120116:
	CALL __PUTPARD1
	CALL SUBOPT_0x30
; 0009 01BB             }
_0x12004A:
; 0009 01BC 
; 0009 01BD         }
; 0009 01BE 
; 0009 01BF         //isEventLogEmpty    = 0;
; 0009 01C0         removeEventLogQueue(id);
	__GETB2SX 558
	CALL _removeEventLogQueue
; 0009 01C1     }
; 0009 01C2 
; 0009 01C3     return;
_0x120044:
	CALL __LOADLOCR6
	ADIW R28,47
	SUBI R29,-2
	RET
; 0009 01C4 }
;/*============================================================*/
;void ETH_retransmit(void)
; 0009 01C7 {
_ETH_retransmit:
; 0009 01C8     int i;
; 0009 01C9 
; 0009 01CA     for(i=0;i<ETH_MAX_WAIT_QUEUE;i++)
	CALL SUBOPT_0x86
;	i -> R16,R17
_0x12004E:
	__CPWRN 16,17,15
	BRLT PC+3
	JMP _0x12004F
; 0009 01CB     {
; 0009 01CC         if( TIMER_checkTimerExceed(eth_waitQueue[i].retryTime) &&
; 0009 01CD             (eth_waitQueue[i].packetID != 0))
	CALL SUBOPT_0x157
	__ADDW1MN _eth_waitQueue,1
	MOVW R26,R30
	CALL __GETD1P
	CALL SUBOPT_0x1A
	BREQ _0x120051
	CALL SUBOPT_0x157
	__ADDW1MN _eth_waitQueue,8
	LD   R26,Z
	CPI  R26,LOW(0x0)
	BRNE _0x120052
_0x120051:
	RJMP _0x120050
_0x120052:
; 0009 01CE         {
; 0009 01CF             if(eth_waitQueue[i].retryCount >= ETH_MAX_RETRY)
	CALL SUBOPT_0x157
	SUBI R30,LOW(-_eth_waitQueue)
	SBCI R31,HIGH(-_eth_waitQueue)
	LD   R26,Z
	CPI  R26,LOW(0x3)
	BRSH PC+3
	JMP _0x120053
; 0009 01D0             {
; 0009 01D1                 printDebug("<ETH_retransmit> packet [0x%02X] Expired\r\n",eth_waitQueue[i].packetID);
	__POINTD1FN _0x120000,1334
	CALL __PUTPARD1
	CALL SUBOPT_0x157
	__ADDW1MN _eth_waitQueue,8
	LD   R30,Z
	CALL SUBOPT_0x27
; 0009 01D2 
; 0009 01D3                 if(eth_waitQueue[i].packetID == logDataWait.frameID){
	CALL SUBOPT_0x157
	__ADDW1MN _eth_waitQueue,8
	LD   R26,Z
	LDS  R30,_logDataWait
	CP   R30,R26
	BRNE _0x120054
; 0009 01D4                     printDebug("<ETH_retransmit> update logData timeout\r\n");
	__POINTD1FN _0x120000,1377
	CALL SUBOPT_0x2
; 0009 01D5                     logDataWait.frameID = 0x00;
	LDI  R30,LOW(0)
	STS  _logDataWait,R30
; 0009 01D6                 }
; 0009 01D7                 else if(eth_waitQueue[i].packetID == logEventWait.frameID){
	RJMP _0x120055
_0x120054:
	CALL SUBOPT_0x157
	__ADDW1MN _eth_waitQueue,8
	LD   R26,Z
	LDS  R30,_logEventWait
	CP   R30,R26
	BRNE _0x120056
; 0009 01D8                     printDebug("<ETH_retransmit> update logEvent timeout\r\n");
	__POINTD1FN _0x120000,1419
	CALL SUBOPT_0x2
; 0009 01D9                     logEventWait.frameID = 0x00;
	LDI  R30,LOW(0)
	STS  _logEventWait,R30
; 0009 01DA                 }
; 0009 01DB                 else{
	RJMP _0x120057
_0x120056:
; 0009 01DC                     // ---- Push in log here ---- //
; 0009 01DD                     ETH_checkPushLog(eth_waitQueue[i].packetID);
	CALL SUBOPT_0x157
	__ADDW1MN _eth_waitQueue,8
	LD   R26,Z
	RCALL _ETH_checkPushLog
; 0009 01DE                     // -------------------------- //
; 0009 01DF                 }
_0x120057:
_0x120055:
; 0009 01E0 
; 0009 01E1                 ETH_removeWaitQueue(eth_waitQueue[i].packetID);
	CALL SUBOPT_0x157
	__ADDW1MN _eth_waitQueue,8
	LD   R26,Z
	CALL _ETH_removeWaitQueue
; 0009 01E2 
; 0009 01E3                 printDebug("<ETH_retransmit> commLostTimer = %ld(%lX)\r\n",commLostTimer,commLostTimer);
	__POINTD1FN _0x120000,1462
	CALL SUBOPT_0x158
	CALL SUBOPT_0x158
	CALL SUBOPT_0x1F
; 0009 01E4                 if((commLostTimer == 0xFFFFFFFF) || (commLostTimer == 0)){
	CALL SUBOPT_0x159
	CALL SUBOPT_0x2B
	BREQ _0x120059
	CALL SUBOPT_0x159
	CALL __CPD02
	BRNE _0x120058
_0x120059:
; 0009 01E5                     TIMER_setTimer(&commLostTimer,30);
	LDI  R30,LOW(_commLostTimer)
	LDI  R31,HIGH(_commLostTimer)
	CALL SUBOPT_0x15A
	CALL _TIMER_setTimer
; 0009 01E6                     printDebug("<ETH_retransmit> LostTimer time left = %ld(%lX)\r\n",(commLostTimer-baseCounter),(commLostTimer-baseCounter));
	__POINTD1FN _0x120000,1506
	CALL SUBOPT_0x15B
	CALL SUBOPT_0x15B
	CALL SUBOPT_0x1F
; 0009 01E7                 }
; 0009 01E8             }
_0x120058:
; 0009 01E9             else
	RJMP _0x12005B
_0x120053:
; 0009 01EA             {
; 0009 01EB                 TIMER_setTimer(&(eth_waitQueue[i].retryTime), eth_waitQueue[i].timeout);
	CALL SUBOPT_0x157
	CALL SUBOPT_0x15C
	CALL SUBOPT_0x15D
; 0009 01EC                 eth_waitQueue[i].retryCount++;      // increase retry counter
	CALL SUBOPT_0x157
	SUBI R30,LOW(-_eth_waitQueue)
	SBCI R31,HIGH(-_eth_waitQueue)
	MOVW R26,R30
	LD   R30,X
	SUBI R30,-LOW(1)
	ST   X,R30
; 0009 01ED 
; 0009 01EE                 printDebug("\r\n<ETH_retransmit> --Retransmitting-- [0x%02X]\r\n",eth_waitQueue[i].packetID);
	__POINTD1FN _0x120000,1556
	CALL __PUTPARD1
	CALL SUBOPT_0x157
	__ADDW1MN _eth_waitQueue,8
	LD   R30,Z
	CALL SUBOPT_0x27
; 0009 01EF 
; 0009 01F0                 write_uart0(    eth_waitQueue[i].packetData,
; 0009 01F1                                 eth_waitQueue[i].packetLen);
	CALL SUBOPT_0x157
	CALL SUBOPT_0x15E
	ST   -Y,R31
	ST   -Y,R30
	CALL SUBOPT_0x157
	__ADDW1MN _eth_waitQueue,7
	LD   R26,Z
	LDI  R27,0
	CALL _write_uart0
; 0009 01F2             }
_0x12005B:
; 0009 01F3         }
; 0009 01F4     }
_0x120050:
	__ADDWRN 16,17,1
	RJMP _0x12004E
_0x12004F:
; 0009 01F5     return;
	LD   R16,Y+
	LD   R17,Y+
	RET
; 0009 01F6 }
;/*============================================================*/
;void ETH_processPacket(unsigned char *ptr2frame,int len)
; 0009 01F9 {
_ETH_processPacket:
; 0009 01FA     FIL             file;
; 0009 01FB     unsigned char   frameType;
; 0009 01FC     int             res=0;
; 0009 01FD     unsigned char   frameID;
; 0009 01FE     int             payload;            // -- pointer to payload data extracted from a frame -- //
; 0009 01FF 
; 0009 0200     int             cnfgRd;             // -- for keeping read configuration -- //
; 0009 0201     char            *cnfgWr;
; 0009 0202 
; 0009 0203     int             i;
; 0009 0204 
; 0009 0205 //    printDebug("\r\n\r\n****** processPacket ******\r\n");
; 0009 0206 //    print_payload(ptr2frame,len);
; 0009 0207 //    printDebug("\r\n******************\r\n");
; 0009 0208     frameID         = ptr2frame[0];
	ST   -Y,R27
	ST   -Y,R26
	SBIW R28,38
	SUBI R29,2
	CALL __SAVELOCR6
;	*ptr2frame -> Y+558
;	len -> Y+556
;	file -> Y+12
;	frameType -> R17
;	res -> R18,R19
;	frameID -> R16
;	payload -> R20,R21
;	cnfgRd -> Y+10
;	*cnfgWr -> Y+8
;	i -> Y+6
	__GETWRN 18,19,0
	CALL SUBOPT_0x15F
	LD   R16,X
; 0009 0209     frameType       = ptr2frame[1];
	CALL SUBOPT_0x15F
	ADIW R26,1
	LD   R17,X
; 0009 020A 
; 0009 020B     commLostTimer   = 0xFFFFFFFF;                     // -- cancel communication lost timer -- //
	CALL SUBOPT_0x23
	STS  _commLostTimer,R30
	STS  _commLostTimer+1,R31
	STS  _commLostTimer+2,R22
	STS  _commLostTimer+3,R23
; 0009 020C     //commLostTimer   = 0;                            // -- re-initial -- //
; 0009 020D 
; 0009 020E     switch(frameType){
	CALL SUBOPT_0x99
; 0009 020F         case STATREQC  :     // -- Status Request COMMAND
	CPI  R30,LOW(0x1A)
	LDI  R26,HIGH(0x1A)
	CPC  R31,R26
	BREQ PC+3
	JMP _0x12005F
; 0009 0210             if( len < (2 + sizeof(struct stat_req_st) - (sizeof(unsigned int) + sizeof(unsigned char *)) ) ){
	CALL SUBOPT_0x160
	SBIW R26,13
	BRGE _0x120060
; 0009 0211                 printDebug("<ETH_processPacket> status request invalid length (%d)\r\n",len);
	__POINTD1FN _0x120000,1605
	CALL SUBOPT_0x161
; 0009 0212                 ETH_sendNack(frameID,INVALID_LENGTH);
	CALL SUBOPT_0x162
; 0009 0213                 return;
	RJMP _0x20E006B
; 0009 0214             }
; 0009 0215 
; 0009 0216             payload = (int) malloc (len);
_0x120060:
	CALL SUBOPT_0x160
	CALL SUBOPT_0x163
; 0009 0217             if(payload == NULL){
	BRNE _0x120061
; 0009 0218                 printDebug("<ETH_processPacket> payload malloc() failed\r\n");
	__POINTD1FN _0x120000,1662
	CALL SUBOPT_0x2
; 0009 0219                 ETH_sendNack(frameID,NOT_READY);
	CALL SUBOPT_0x164
; 0009 021A                 return;
	RJMP _0x20E006B
; 0009 021B             }
; 0009 021C 
; 0009 021D             res = statusRequestParser(ptr2frame+2,len-2,(struct stat_req_st *)payload);
_0x120061:
	CALL SUBOPT_0x165
	CALL SUBOPT_0x166
	RCALL _statusRequestParser
	MOVW R18,R30
; 0009 021E             if(res < 0){
	TST  R19
	BRPL _0x120062
; 0009 021F                 printDebug("<ETH_processPacket> statusRequestParser() failed\r\n");
	__POINTD1FN _0x120000,1708
	CALL SUBOPT_0x2
; 0009 0220                 free( (void *) payload );
	CALL SUBOPT_0x167
; 0009 0221                 ETH_sendNack(frameID,INVALID_PARAMETER);
; 0009 0222                 return;
	RJMP _0x20E006B
; 0009 0223             }
; 0009 0224 
; 0009 0225             printDebug("\r\n--statusRequestParser-- CMD [0x%02X]\r\n",frameID);
_0x120062:
	__POINTD1FN _0x120000,1759
	CALL SUBOPT_0x168
; 0009 0226             printDebug("accessMethod    [0x%02X]\r\n",      ((struct stat_req_st *)payload)->accm);
	__POINTD1FN _0x120000,1800
	CALL SUBOPT_0x169
; 0009 0227             printDebug("interval        [0x%04X] = %d\r\n", ((struct stat_req_st *)payload)->intv,((struct stat_req_st *)payload)->intv);
	__POINTD1FN _0x120000,1827
	CALL SUBOPT_0x16A
	CALL SUBOPT_0x16A
	CALL SUBOPT_0x1F
; 0009 0228             printDebug("statusList      |");
	__POINTD1FN _0x120000,1859
	CALL SUBOPT_0x2
; 0009 0229 
; 0009 022A             for( i=0 ; i<(((struct stat_req_st *)payload)->parLen) ; i++)
	LDI  R30,LOW(0)
	STD  Y+6,R30
	STD  Y+6+1,R30
_0x120064:
	MOVW R26,R20
	ADIW R26,11
	CALL SUBOPT_0x16B
	BRSH _0x120065
; 0009 022B             {
; 0009 022C                 printDebug("%02X|",(((struct stat_req_st *)payload)->parlst)[i++]);
	__POINTD1FN _0x120000,1877
	CALL __PUTPARD1
	MOVW R30,R20
	LDD  R26,Z+13
	LDD  R27,Z+14
	LDD  R30,Y+10
	LDD  R31,Y+10+1
	ADIW R30,1
	STD  Y+10,R30
	STD  Y+10+1,R31
	SBIW R30,1
	CALL SUBOPT_0x16C
; 0009 022D             }
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	ADIW R30,1
	STD  Y+6,R30
	STD  Y+6+1,R31
	RJMP _0x120064
_0x120065:
; 0009 022E             printDebug("\r\n-- ..Done.. --\r\n");
	__POINTD1FN _0x120000,1883
	CALL SUBOPT_0x2
; 0009 022F 
; 0009 0230             ETH_sendStatusRequestAck(frameID,((struct stat_req_st *)payload)->accm,0x00);
	CALL SUBOPT_0x16D
	LDI  R26,LOW(0)
	RCALL _ETH_sendStatusRequestAck
; 0009 0231 
; 0009 0232             if( ((struct stat_req_st *)payload)->accm < 0x30){
	MOVW R30,R20
	LDD  R26,Z+8
	CPI  R26,LOW(0x30)
	BRSH _0x120066
; 0009 0233                 free_statusRequest((struct stat_req_st *)payload);
	MOVW R26,R20
	CALL _free_statusRequest
; 0009 0234             }
; 0009 0235 
; 0009 0236             free( (void *) payload );
_0x120066:
	MOVW R26,R20
	CALL _free
; 0009 0237             break;
	RJMP _0x12005E
; 0009 0238         case STATREPA  :     // -- Status Report ACKNOWLEDGE
_0x12005F:
	CPI  R30,LOW(0x2B)
	LDI  R26,HIGH(0x2B)
	CPC  R31,R26
	BREQ PC+3
	JMP _0x120067
; 0009 0239             if( len < (2 + sizeof(struct stat_rep_st)) ){
	CALL SUBOPT_0x160
	SBIW R26,14
	BRGE _0x120068
; 0009 023A                 printDebug("<ETH_processPacket> status report invalid length (%d)\r\n",len);
	__POINTD1FN _0x120000,1902
	RJMP _0x20E006A
; 0009 023B                 return;
; 0009 023C             }
; 0009 023D 
; 0009 023E             printDebug("\r\n--statusReportParser-- ACK [0x%02X]\r\n",frameID);
_0x120068:
	__POINTD1FN _0x120000,1958
	CALL SUBOPT_0x168
; 0009 023F             printDebug("unixTime        [0x%02X][0x%02X][0x%02X][0x%02X]\r\n",
; 0009 0240                                     ptr2frame[10],ptr2frame[11],ptr2frame[12],ptr2frame[13]);
	__POINTD1FN _0x120000,1998
	CALL __PUTPARD1
	__GETW1SX 562
	LDD  R30,Z+10
	CALL SUBOPT_0x55
	__GETW1SX 566
	LDD  R30,Z+11
	CALL SUBOPT_0x55
	__GETW1SX 570
	LDD  R30,Z+12
	CALL SUBOPT_0x55
	__GETW1SX 574
	LDD  R30,Z+13
	CALL SUBOPT_0x55
	CALL SUBOPT_0x149
; 0009 0241             res = setTimeSyncSchema( &ptr2frame[10] );
	CALL SUBOPT_0x15F
	ADIW R26,10
	CALL _setTimeSyncSchema
	MOVW R18,R30
; 0009 0242             if(res < 0){
; 0009 0243                 //printDebug("<ETH_processPacket> setTimeSyncSchema() failed in STATREPA\r\n");
; 0009 0244             }
; 0009 0245             ETH_removeWaitQueue(frameID);
	MOV  R26,R16
	CALL _ETH_removeWaitQueue
; 0009 0246             break;
	RJMP _0x12005E
; 0009 0247         case EVENREPA  :     // -- Event Report ACKNOWLEDGE
_0x120067:
	CPI  R30,LOW(0x3B)
	LDI  R26,HIGH(0x3B)
	CPC  R31,R26
	BREQ PC+3
	JMP _0x12006A
; 0009 0248             if( len < (2 + sizeof(struct event_rep_st)) ){
	CALL SUBOPT_0x160
	SBIW R26,10
	BRGE _0x12006B
; 0009 0249                 printDebug("<ETH_processPacket> event report invalid length (%d)\r\n",len);
	__POINTD1FN _0x120000,2049
_0x20E006A:
	CALL __PUTPARD1
	__GETW1SX 560
	CALL SUBOPT_0xD5
; 0009 024A                 return;
_0x20E006B:
	CALL __LOADLOCR6
	ADIW R28,48
	SUBI R29,-2
	RET
; 0009 024B             }
; 0009 024C 
; 0009 024D             printDebug("\r\n--eventReportParser-- ACK [0x%02X]\r\n", frameID);
_0x12006B:
	__POINTD1FN _0x120000,2104
	CALL SUBOPT_0x168
; 0009 024E             if( (logEventWait.frameID != 0) && (frameID == logEventWait.frameID) )
	LDS  R26,_logEventWait
	CPI  R26,LOW(0x0)
	BREQ _0x12006D
	LDS  R30,_logEventWait
	CP   R30,R16
	BREQ _0x12006E
_0x12006D:
	RJMP _0x12006C
_0x12006E:
; 0009 024F             {
; 0009 0250                 printDebug("<ETH_processPacket> got event log ack\r\n");
	__POINTD1FN _0x120000,2143
	CALL SUBOPT_0x2
; 0009 0251 
; 0009 0252                 res = LOG_openFile(&file,LOGFILE_EVENT);
	CALL SUBOPT_0x4A
	CALL SUBOPT_0x59
	MOVW R18,R30
; 0009 0253                 if(res < 0){        printDebug("<logReport> LOG_openFile(%s) failed\r\n",LOGFILE_EVENT);            }
	TST  R19
	BRPL _0x12006F
	__POINTD1FN _0x120000,2183
	RJMP _0x120117
; 0009 0254                 else
_0x12006F:
; 0009 0255                 {
; 0009 0256                     res = LOG_setLastSend(&file,logEventWait.logID + 1);
	CALL SUBOPT_0x4A
	CALL SUBOPT_0x62
	CALL SUBOPT_0x16E
; 0009 0257                     if(res < 0){    printDebug("<LOG_readData> LOG_setLastSend() failed\r\n");                      }
	BRPL _0x120071
	CALL SUBOPT_0x16F
; 0009 0258                     else{           printDebug("<LOG_readData> LOG_setLastSend(%s,%ld)\r\n",LOGFILE_EVENT,logEventWait.logID + 1);   }
	RJMP _0x120072
_0x120071:
	CALL SUBOPT_0x170
	CALL SUBOPT_0x63
	CALL SUBOPT_0x62
	CALL SUBOPT_0xC0
	CALL SUBOPT_0x1F
_0x120072:
; 0009 0259 
; 0009 025A                     res = LOG_closeFile(&file);
	CALL SUBOPT_0x171
; 0009 025B                     if(res < 0){    printDebug("<logReport> LOG_closeFile(%s) failed\r\n",LOGFILE_EVENT);           }
	BRPL _0x120073
	__POINTD1FN _0x120000,2304
_0x120117:
	CALL __PUTPARD1
	CALL SUBOPT_0x63
	CALL SUBOPT_0x10
; 0009 025C                 }
_0x120073:
; 0009 025D 
; 0009 025E                 logEventWait.frameID    = 0;
	CALL SUBOPT_0x61
; 0009 025F                 logEventWait.logID      = 0;
; 0009 0260             }
; 0009 0261             removeEventLogQueue(frameID);
_0x12006C:
	MOV  R26,R16
	CALL _removeEventLogQueue
; 0009 0262             ETH_removeWaitQueue(frameID);
	MOV  R26,R16
	CALL _ETH_removeWaitQueue
; 0009 0263             break;
	RJMP _0x12005E
; 0009 0264         case CONFMANC  :     // -- Configuration Management COMMAND
_0x12006A:
	CPI  R30,LOW(0x4A)
	LDI  R26,HIGH(0x4A)
	CPC  R31,R26
	BREQ PC+3
	JMP _0x120074
; 0009 0265             printDebug("<ETH_processPacket> Config Manage\r\n");
	__POINTD1FN _0x120000,2343
	CALL SUBOPT_0x2
; 0009 0266             print_payload(ptr2frame, len);
	CALL SUBOPT_0x165
	ST   -Y,R31
	ST   -Y,R30
	CALL SUBOPT_0x15F
	CALL _print_payload
; 0009 0267 
; 0009 0268             if( len < (2 + sizeof(struct conf_man_st) - (sizeof(unsigned int) + sizeof(unsigned char *)) ) ){
	CALL SUBOPT_0x160
	SBIW R26,12
	BRGE _0x120075
; 0009 0269                 printDebug("<ETH_processPacket> configuration management invalid length (%d)\r\n",len);
	__POINTD1FN _0x120000,2379
	CALL SUBOPT_0x161
; 0009 026A                 ETH_sendNack(frameID,INVALID_LENGTH);
	CALL SUBOPT_0x162
; 0009 026B                 return;
	RJMP _0x20E0069
; 0009 026C             }
; 0009 026D 
; 0009 026E             payload = (int) malloc (sizeof(struct conf_man_st));
_0x120075:
	LDI  R26,LOW(14)
	CALL SUBOPT_0x172
; 0009 026F             if(payload == NULL){
	BRNE _0x120076
; 0009 0270                 printDebug("<ETH_processPacket> payload malloc(%d) failed\r\n",sizeof(struct conf_man_st));
	CALL SUBOPT_0x173
	__GETD1N 0xE
	CALL SUBOPT_0x174
; 0009 0271                 ETH_sendNack(frameID,NOT_READY);
	CALL SUBOPT_0x164
; 0009 0272                 return;
	RJMP _0x20E0069
; 0009 0273             }
; 0009 0274 
; 0009 0275             res = configManageParser(ptr2frame+2,len-2,(struct conf_man_st *)payload);
_0x120076:
	CALL SUBOPT_0x175
	RCALL _configManageParser
	MOVW R18,R30
; 0009 0276             if(res < 0){
	TST  R19
	BRPL _0x120077
; 0009 0277                 printDebug("<ETH_processPacket> configManageParser() failed\r\n");
	__POINTD1FN _0x120000,2494
	CALL SUBOPT_0x2
; 0009 0278                 free( (void *) payload );
	CALL SUBOPT_0x167
; 0009 0279                 ETH_sendNack(frameID,INVALID_PARAMETER);
; 0009 027A                 return;
	RJMP _0x20E0069
; 0009 027B             }
; 0009 027C 
; 0009 027D             printDebug("\r\n--configManageParser-- CMD [0x%02X]\r\n",frameID);
_0x120077:
	__POINTD1FN _0x120000,2544
	CALL SUBOPT_0x168
; 0009 027E             printDebug("accd            [0x%02X]\r\n",       ((struct conf_man_st *)payload)->accd);
	CALL SUBOPT_0x176
; 0009 027F             printDebug("cnfg            [0x%02X]\r\n",       ((struct conf_man_st *)payload)->cnfg);
	__POINTD1FN _0x120000,2611
	CALL SUBOPT_0x177
; 0009 0280 
; 0009 0281             switch( ((struct conf_man_st *)payload)->accd ){
	CALL SUBOPT_0x178
; 0009 0282                 case CONF_RD_CMD    :   // -- Configration Read -- //
	BREQ PC+3
	JMP _0x12007B
; 0009 0283                                         res = getConfigLen(((struct conf_man_st *)payload)->cnfg);
	MOVW R30,R20
	LDD  R26,Z+9
	CALL _getConfigLen
	MOVW R18,R30
; 0009 0284                                         if(res < 0){
	TST  R19
	BRPL _0x12007C
; 0009 0285                                             printDebug("<ETH_processPacket> getConfigLen() failed\r\n");
	__POINTD1FN _0x120000,2638
	CALL SUBOPT_0x2
; 0009 0286                                             ETH_sendNack(frameID,INVALID_PARAMETER);
	RJMP _0x120118
; 0009 0287                                             break;
; 0009 0288                                         }
; 0009 0289 
; 0009 028A                                         cnfgRd = (int) malloc (res);
_0x12007C:
	MOVW R26,R18
	CALL _malloc
	STD  Y+10,R30
	STD  Y+10+1,R31
; 0009 028B                                         if(cnfgRd == NULL){
	SBIW R30,0
	BRNE _0x12007D
; 0009 028C                                             printDebug("<ETH_processPacket> cnfgRd malloc() failed\r\n");
	__POINTD1FN _0x120000,2682
	CALL SUBOPT_0x2
; 0009 028D                                             ETH_sendNack(frameID,NOT_READY);
	ST   -Y,R16
	LDI  R26,LOW(80)
	RJMP _0x120119
; 0009 028E                                             break;
; 0009 028F                                         }
; 0009 0290 
; 0009 0291                                         res = configRead(((struct conf_man_st *)payload)->cnfg,(char *) cnfgRd);
_0x12007D:
	MOVW R30,R20
	LDD  R26,Z+9
	ST   -Y,R26
	LDD  R26,Y+11
	LDD  R27,Y+11+1
	CALL _configRead
	MOVW R18,R30
; 0009 0292                                         if(res <= 0){
	CLR  R0
	CP   R0,R18
	CPC  R0,R19
	BRLT _0x12007E
; 0009 0293                                             printDebug("<ETH_processPacket> configRead() failed\r\n");
	__POINTD1FN _0x120000,2727
	CALL SUBOPT_0x2
; 0009 0294                                             if(res == -1){
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	CP   R30,R18
	CPC  R31,R19
	BRNE _0x12007F
; 0009 0295                                                 ETH_sendNack(frameID,INVALID_PARAMETER);
	ST   -Y,R16
	LDI  R26,LOW(48)
	RJMP _0x12011A
; 0009 0296                                             }
; 0009 0297                                             else if((res == -2) || (res == 0)){
_0x12007F:
	LDI  R30,LOW(65534)
	LDI  R31,HIGH(65534)
	CP   R30,R18
	CPC  R31,R19
	BREQ _0x120082
	CLR  R0
	CP   R0,R18
	CPC  R0,R19
	BRNE _0x120081
_0x120082:
; 0009 0298                                                 ETH_sendNack(frameID,NOT_READY);
	ST   -Y,R16
	LDI  R26,LOW(80)
	RJMP _0x12011A
; 0009 0299                                             }
; 0009 029A                                             else if(res == -3){
_0x120081:
	LDI  R30,LOW(65533)
	LDI  R31,HIGH(65533)
	CP   R30,R18
	CPC  R31,R19
	BRNE _0x120085
; 0009 029B                                                 ETH_sendConfigManageNack(   frameID,
; 0009 029C                                                                             ((struct conf_man_st *)payload)->accd,
; 0009 029D                                                                             ((struct conf_man_st *)payload)->cnfg,
; 0009 029E                                                                             ERROR);
	CALL SUBOPT_0x16D
	CALL SUBOPT_0x179
; 0009 029F                                             }
; 0009 02A0                                             else{
	RJMP _0x120086
_0x120085:
; 0009 02A1                                                 ETH_sendNack(frameID,UNKNOWN_ERROR);
	ST   -Y,R16
	LDI  R26,LOW(255)
_0x12011A:
	RCALL _ETH_sendNack
; 0009 02A2                                             }
_0x120086:
; 0009 02A3 
; 0009 02A4                                             free((void *) cnfgRd);
	LDD  R26,Y+10
	LDD  R27,Y+10+1
	CALL _free
; 0009 02A5                                             break;
	RJMP _0x12007A
; 0009 02A6                                         }
; 0009 02A7 
; 0009 02A8                                         res = ETH_sendConfigManageAck(  frameID,
_0x12007E:
; 0009 02A9                                                                         ((struct conf_man_st *)payload)->accd,
; 0009 02AA                                                                         ((struct conf_man_st *)payload)->cnfg,
; 0009 02AB                                                                         SUCCESS,
; 0009 02AC                                                                         (char *)cnfgRd,
; 0009 02AD                                                                         res  );
	CALL SUBOPT_0x16D
	CALL SUBOPT_0x17A
	LDD  R30,Y+14
	LDD  R31,Y+14+1
	ST   -Y,R31
	ST   -Y,R30
	MOVW R26,R18
	CALL SUBOPT_0x17B
; 0009 02AE                                         if(res < 0){
	BRPL _0x120087
; 0009 02AF                                             printDebug("<ETH_processPacket> RD_CMD : ETH_sendConfigManageAck() failed\r\n");
	__POINTD1FN _0x120000,2769
	CALL SUBOPT_0x2
; 0009 02B0                                         }
; 0009 02B1 
; 0009 02B2                                         free( (void *) cnfgRd );
_0x120087:
	LDD  R26,Y+10
	LDD  R27,Y+10+1
	CALL _free
; 0009 02B3                                         break;
	RJMP _0x12007A
; 0009 02B4                 case CONF_WR_CMD    :   // -- Configuration Write -- //
_0x12007B:
	CPI  R30,LOW(0x20)
	LDI  R26,HIGH(0x20)
	CPC  R31,R26
	BREQ PC+3
	JMP _0x120088
; 0009 02B5                                         cnfgWr = malloc(((struct conf_man_st *)payload)->confLen);
	MOVW R30,R20
	LDD  R26,Z+10
	LDD  R27,Z+11
	CALL _malloc
	CALL SUBOPT_0x17C
; 0009 02B6                                         if(cnfgWr == NULL){
	SBIW R30,0
	BRNE _0x120089
; 0009 02B7                                             printDebug("<ETH_processPacket> cnfgWr malloc() failed\r\n");
	__POINTD1FN _0x120000,2833
	CALL SUBOPT_0x2
; 0009 02B8                                             ETH_sendNack(frameID,NOT_READY);
	ST   -Y,R16
	LDI  R26,LOW(80)
	RJMP _0x120119
; 0009 02B9                                             break;
; 0009 02BA                                         }
; 0009 02BB 
; 0009 02BC                                         memcpy(cnfgWr,((struct conf_man_st *)payload)->confSpec,((struct conf_man_st *)payload)->confLen);
_0x120089:
	CALL SUBOPT_0x17D
	MOVW R30,R20
	LDD  R26,Z+12
	LDD  R27,Z+13
	ST   -Y,R27
	ST   -Y,R26
	LDD  R26,Z+10
	LDD  R27,Z+11
	CALL _memcpy
; 0009 02BD 
; 0009 02BE                                         res = configWrite(  (unsigned char) (((struct conf_man_st *)payload)->cnfg),
; 0009 02BF                                                             cnfgWr,
; 0009 02C0                                                             (int) (((struct conf_man_st *)payload)->confLen) );
	MOVW R30,R20
	LDD  R26,Z+9
	ST   -Y,R26
	CALL SUBOPT_0x17E
	MOVW R30,R20
	LDD  R26,Z+10
	LDD  R27,Z+11
	CALL _configWrite
	MOVW R18,R30
; 0009 02C1 
; 0009 02C2                                         free(cnfgWr);
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	CALL _free
; 0009 02C3                                         if(res < 0){
	TST  R19
	BRPL _0x12008A
; 0009 02C4                                             printDebug("<ETH_processPacket> configWrite() failed\r\n");
	__POINTD1FN _0x120000,2878
	CALL SUBOPT_0x2
; 0009 02C5                                             ETH_sendConfigManageNack(   frameID,
; 0009 02C6                                                                         ((struct conf_man_st *)payload)->accd,
; 0009 02C7                                                                         ((struct conf_man_st *)payload)->cnfg,
; 0009 02C8                                                                         ERROR);
	CALL SUBOPT_0x16D
	CALL SUBOPT_0x179
; 0009 02C9                                             break;
	RJMP _0x12007A
; 0009 02CA                                         }
; 0009 02CB 
; 0009 02CC 
; 0009 02CD                                         res = ETH_sendConfigManageAck(  frameID,
_0x12008A:
; 0009 02CE                                                                         ((struct conf_man_st *)payload)->accd,
; 0009 02CF                                                                         ((struct conf_man_st *)payload)->cnfg,
; 0009 02D0                                                                         SUCCESS,
; 0009 02D1                                                                         NULL,
; 0009 02D2                                                                         0  );
	CALL SUBOPT_0x16D
	CALL SUBOPT_0x17A
	CALL SUBOPT_0x17F
	CALL SUBOPT_0x17B
; 0009 02D3                                         if(res < 0){
	BRPL _0x12008B
; 0009 02D4                                             printDebug("WARN : <ETH_processPacket> WR_CMD : ETH_sendConfigManageAck() failed\r\n");
	CALL SUBOPT_0x180
; 0009 02D5                                         }
; 0009 02D6 
; 0009 02D7                                         break;
_0x12008B:
	RJMP _0x12007A
; 0009 02D8                 case CONF_CF_CMD    :   // -- Configuration Confirm -- //
_0x120088:
	CPI  R30,LOW(0x30)
	LDI  R26,HIGH(0x30)
	CPC  R31,R26
	BRNE _0x12008F
; 0009 02D9                                         res = configConfirm();
	CALL _configConfirm
	MOVW R18,R30
; 0009 02DA                                         if(res < 0){
	TST  R19
	BRPL _0x12008D
; 0009 02DB                                             printDebug("<ETH_processPacket> configConfirm() failed\r\n");
	__POINTD1FN _0x120000,2992
	CALL SUBOPT_0x2
; 0009 02DC                                             ETH_sendConfigManageNack(   frameID,
; 0009 02DD                                                                         ((struct conf_man_st *)payload)->accd,
; 0009 02DE                                                                         ((struct conf_man_st *)payload)->cnfg,
; 0009 02DF                                                                         ERROR);
	CALL SUBOPT_0x16D
	CALL SUBOPT_0x179
; 0009 02E0                                             break;
	RJMP _0x12007A
; 0009 02E1                                         }
; 0009 02E2 
; 0009 02E3                                         res = ETH_sendConfigManageAck(  frameID,
_0x12008D:
; 0009 02E4                                                                         ((struct conf_man_st *)payload)->accd,
; 0009 02E5                                                                         ((struct conf_man_st *)payload)->cnfg,
; 0009 02E6                                                                         SUCCESS,
; 0009 02E7                                                                         NULL,
; 0009 02E8                                                                         0  );
	CALL SUBOPT_0x16D
	CALL SUBOPT_0x17A
	CALL SUBOPT_0x17F
	CALL SUBOPT_0x17B
; 0009 02E9                                         if(res < 0){
	BRPL _0x12008E
; 0009 02EA                                             printDebug("WARN : <ETH_processPacket> WR_CMD : ETH_sendConfigManageAck() failed\r\n");
	CALL SUBOPT_0x180
; 0009 02EB                                         }
; 0009 02EC 
; 0009 02ED                                         break;
_0x12008E:
	RJMP _0x12007A
; 0009 02EE                 default             :   // -- Shouldn't reach here -- //
_0x12008F:
; 0009 02EF                                         printDebug("<ETH_processPacket> unknown type for config->accd [0x%02X]\r\n",
; 0009 02F0                                                         ((struct conf_man_st *)payload)->accd );
	CALL SUBOPT_0x181
; 0009 02F1                                         ETH_sendNack(frameID,INVALID_PARAMETER);
_0x120118:
	ST   -Y,R16
	LDI  R26,LOW(48)
_0x120119:
	RCALL _ETH_sendNack
; 0009 02F2                                         break;
; 0009 02F3             }
_0x12007A:
; 0009 02F4 
; 0009 02F5             free_configManage((struct conf_man_st *)payload);
	MOVW R26,R20
	RCALL _free_configManage
; 0009 02F6             free( (void *) payload );
	MOVW R26,R20
	CALL _free
; 0009 02F7 
; 0009 02F8             break;
	RJMP _0x12005E
; 0009 02F9         case DATAREPA  :     // -- Data Report ACKNOWLEDGE
_0x120074:
	CPI  R30,LOW(0x5B)
	LDI  R26,HIGH(0x5B)
	CPC  R31,R26
	BREQ PC+3
	JMP _0x120090
; 0009 02FA             if( len < (2 + sizeof(struct data_rep_st)) ){
	CALL SUBOPT_0x160
	SBIW R26,10
	BRGE _0x120091
; 0009 02FB                 printDebug("<ETH_processPacket> Data report invalid length (%d)\r\n",len);
	__POINTD1FN _0x120000,3098
	CALL SUBOPT_0x161
; 0009 02FC                 return;
	RJMP _0x20E0069
; 0009 02FD             }
; 0009 02FE 
; 0009 02FF             printDebug("\r\n--dataReportParser-- ACK [0x%02X]\r\n",frameID);
_0x120091:
	__POINTD1FN _0x120000,3152
	CALL SUBOPT_0x168
; 0009 0300             if( (logDataWait.frameID != 0) && (frameID == logDataWait.frameID) )
	LDS  R26,_logDataWait
	CPI  R26,LOW(0x0)
	BREQ _0x120093
	LDS  R30,_logDataWait
	CP   R30,R16
	BREQ _0x120094
_0x120093:
	RJMP _0x120092
_0x120094:
; 0009 0301             {
; 0009 0302                 printDebug("<ETH_processPacket> got data log ack\r\n");
	__POINTD1FN _0x120000,3190
	CALL SUBOPT_0x2
; 0009 0303 
; 0009 0304                 res = LOG_openFile(&file,LOGFILE_DATA);
	CALL SUBOPT_0x4A
	CALL SUBOPT_0x4E
	MOVW R18,R30
; 0009 0305                 if(res < 0){        printDebug("<logReport> LOG_openFile(%s) failed\r\n",LOGFILE_DATA);             }
	TST  R19
	BRPL _0x120095
	__POINTD1FN _0x120000,2183
	RJMP _0x12011B
; 0009 0306                 else
_0x120095:
; 0009 0307                 {
; 0009 0308                     res = LOG_setLastSend(&file,logDataWait.logID + 1);
	CALL SUBOPT_0x4A
	CALL SUBOPT_0x5F
	CALL SUBOPT_0x16E
; 0009 0309                     if(res < 0){    printDebug("<LOG_readData> LOG_setLastSend() failed\r\n");                      }
	BRPL _0x120097
	CALL SUBOPT_0x16F
; 0009 030A                     else{           printDebug("<LOG_readData> LOG_setLastSend(%s,%ld)\r\n",LOGFILE_DATA,logDataWait.logID + 1);    }
	RJMP _0x120098
_0x120097:
	CALL SUBOPT_0x170
	LDI  R30,LOW(_LOGFILE_DATA)
	LDI  R31,HIGH(_LOGFILE_DATA)
	CALL SUBOPT_0xDD
	CALL SUBOPT_0x5F
	CALL SUBOPT_0xC0
	CALL SUBOPT_0x1F
_0x120098:
; 0009 030B 
; 0009 030C                     res = LOG_closeFile(&file);
	CALL SUBOPT_0x171
; 0009 030D                     if(res < 0){    printDebug("<logReport> LOG_closeFile(%s) failed\r\n",LOGFILE_DATA);            }
	BRPL _0x120099
	__POINTD1FN _0x120000,2304
_0x12011B:
	CALL __PUTPARD1
	LDI  R30,LOW(_LOGFILE_DATA)
	LDI  R31,HIGH(_LOGFILE_DATA)
	CALL SUBOPT_0xDD
	CALL SUBOPT_0x10
; 0009 030E                 }
_0x120099:
; 0009 030F 
; 0009 0310                 logDataWait.frameID    = 0;
	CALL SUBOPT_0x5E
; 0009 0311                 logDataWait.logID      = 0;
; 0009 0312             }
; 0009 0313             removeDataLogQueue(frameID);
_0x120092:
	MOV  R26,R16
	CALL _removeDataLogQueue
; 0009 0314             ETH_removeWaitQueue(frameID);
	MOV  R26,R16
	CALL _ETH_removeWaitQueue
; 0009 0315             break;
	RJMP _0x12005E
; 0009 0316         case LOGMANIC  :     // -- Log Manipulation COMMAND
_0x120090:
	CPI  R30,LOW(0x6A)
	LDI  R26,HIGH(0x6A)
	CPC  R31,R26
	BREQ PC+3
	JMP _0x12009A
; 0009 0317             if( len < (2 + sizeof(struct log_manic_st)) ){
	CALL SUBOPT_0x160
	SBIW R26,19
	BRGE _0x12009B
; 0009 0318                 printDebug("<ETH_processPacket> log manipulation (CMD) invalid length (%d)\r\n",len);
	__POINTD1FN _0x120000,3229
	CALL SUBOPT_0x161
; 0009 0319                 ETH_sendNack(frameID,INVALID_LENGTH);
	CALL SUBOPT_0x162
; 0009 031A                 return;
	RJMP _0x20E0069
; 0009 031B             }
; 0009 031C 
; 0009 031D             payload = (int) malloc (sizeof(struct log_manic_st));
_0x12009B:
	LDI  R26,LOW(17)
	CALL SUBOPT_0x172
; 0009 031E             if(payload == NULL){
	BRNE _0x12009C
; 0009 031F                 printDebug("<ETH_processPacket> payload malloc(%d) failed\r\n",sizeof(struct log_manic_st));
	CALL SUBOPT_0x173
	__GETD1N 0x11
	CALL SUBOPT_0x174
; 0009 0320                 ETH_sendNack(frameID,NOT_READY);
	CALL SUBOPT_0x164
; 0009 0321                 return;
	RJMP _0x20E0069
; 0009 0322             }
; 0009 0323 
; 0009 0324             res = logManipulationCmdParser(ptr2frame+2,len-2,(struct log_manic_st *)payload);
_0x12009C:
	CALL SUBOPT_0x175
	RCALL _logManipulationCmdParser
	MOVW R18,R30
; 0009 0325             if(res < 0){
	TST  R19
	BRPL _0x12009D
; 0009 0326                 printDebug("<ETH_processPacket> logManipulationCmdParser() failed\r\n");
	CALL SUBOPT_0x182
; 0009 0327                 free( (void *) payload );
	CALL SUBOPT_0x167
; 0009 0328                 ETH_sendNack(frameID,INVALID_PARAMETER);
; 0009 0329                 return;
	RJMP _0x20E0069
; 0009 032A             }
; 0009 032B 
; 0009 032C             printDebug("\r\n--logManipulationCmdParser-- CMD [0x%02X]\r\n",frameID);
_0x12009D:
	__POINTD1FN _0x120000,3350
	CALL SUBOPT_0x168
; 0009 032D             printDebug("accd            [0x%02X]\r\n",  ((struct log_manic_st *)payload)->accd);
	CALL SUBOPT_0x176
; 0009 032E             printDebug("tStart          [%ld]\r\n",     ((struct log_manic_st *)payload)->tStart);
	__POINTD1FN _0x120000,3396
	CALL SUBOPT_0x183
; 0009 032F             printDebug("tStop           [%ld]\r\n",     ((struct log_manic_st *)payload)->tStop);
	__POINTD1FN _0x120000,3420
	CALL __PUTPARD1
	MOVW R30,R20
	__GETD2Z 13
	CALL SUBOPT_0x184
; 0009 0330 
; 0009 0331             res = setLogManipulateSchema(   ((struct log_manic_st *)payload)->accd,
; 0009 0332                                             ((struct log_manic_st *)payload)->tStart,
; 0009 0333                                             ((struct log_manic_st *)payload)->tStop);
	MOVW R30,R20
	LDD  R26,Z+8
	ST   -Y,R26
	CALL SUBOPT_0x185
	CALL __PUTPARD2
	MOVW R30,R20
	__GETD2Z 13
	CALL _setLogManipulateSchema
	MOVW R18,R30
; 0009 0334             if(res < 0){
	TST  R19
	BRPL _0x12009E
; 0009 0335                 printDebug("<ETH_processPacket> setLogManipulateSchema() failed\r\n");
	__POINTD1FN _0x120000,3444
	CALL SUBOPT_0x2
; 0009 0336                 ETH_sendLogManipulationAck(frameID,((struct log_manic_st *)payload)->accd,ERROR);
	CALL SUBOPT_0x16D
	LDI  R26,LOW(1)
	RCALL _ETH_sendLogManipulationAck
; 0009 0337             }
; 0009 0338 
; 0009 0339             ETH_sendLogManipulationAck(frameID,((struct log_manic_st *)payload)->accd,SUCCESS);
_0x12009E:
	CALL SUBOPT_0x16D
	LDI  R26,LOW(0)
	RCALL _ETH_sendLogManipulationAck
; 0009 033A 
; 0009 033B             free( (void *) payload );
	MOVW R26,R20
	CALL _free
; 0009 033C 
; 0009 033D             break;
	RJMP _0x12005E
; 0009 033E         case LOGMANIA  :     // -- Log Manipulation ACKNOWLEDGE
_0x12009A:
	CPI  R30,LOW(0x6B)
	LDI  R26,HIGH(0x6B)
	CPC  R31,R26
	BRNE _0x12009F
; 0009 033F             if( len < (2 + sizeof(struct log_mania_st)) ){
	CALL SUBOPT_0x160
	SBIW R26,12
	BRGE _0x1200A0
; 0009 0340                 printDebug("<ETH_processPacket> log manipulation (ACK) invalid length (%d)\r\n",len);
	__POINTD1FN _0x120000,3498
	CALL SUBOPT_0x161
; 0009 0341                 return;
	RJMP _0x20E0069
; 0009 0342             }
; 0009 0343 
; 0009 0344             payload = (int) malloc (sizeof(struct log_mania_st));
_0x1200A0:
	LDI  R26,LOW(10)
	CALL SUBOPT_0x172
; 0009 0345             if(payload == NULL){
	BRNE _0x1200A1
; 0009 0346                 printDebug("<ETH_processPacket> payload malloc(%d) failed\r\n",sizeof(struct log_mania_st));
	CALL SUBOPT_0x173
	CALL SUBOPT_0x186
; 0009 0347                 return;
	RJMP _0x20E0069
; 0009 0348             }
; 0009 0349 
; 0009 034A             res = logManipulationAckParser(ptr2frame+2,(struct log_mania_st *)payload);
_0x1200A1:
	CALL SUBOPT_0x187
	RCALL _logManipulationAckParser
	MOVW R18,R30
; 0009 034B             if(res < 0){
	TST  R19
	BRPL _0x1200A2
; 0009 034C                 printDebug("<ETH_processPacket> logManipulationCmdParser() failed\r\n");
	CALL SUBOPT_0x182
; 0009 034D                 free( (void *) payload );
	MOVW R26,R20
	CALL _free
; 0009 034E                 return;
	RJMP _0x20E0069
; 0009 034F             }
; 0009 0350 
; 0009 0351             printDebug("\r\n--logManipulationAckParser-- ACK [0x%02X]\r\n",frameID);
_0x1200A2:
	__POINTD1FN _0x120000,3563
	CALL SUBOPT_0x168
; 0009 0352             printDebug("accd            [0x%02X]\r\n",  ((struct log_mania_st *)payload)->accd);
	CALL SUBOPT_0x176
; 0009 0353             printDebug("status          [%ld]\r\n",     ((struct log_mania_st *)payload)->status);
	__POINTD1FN _0x120000,3609
	CALL SUBOPT_0x177
; 0009 0354 
; 0009 0355             free( (void *) payload );
	MOVW R26,R20
	CALL _free
; 0009 0356             ETH_removeWaitQueue(frameID);
	MOV  R26,R16
	CALL _ETH_removeWaitQueue
; 0009 0357             break;
	RJMP _0x12005E
; 0009 0358         case NETMAINC  :     // -- Network Maintenance COMMAND
_0x12009F:
	CPI  R30,LOW(0x7A)
	LDI  R26,HIGH(0x7A)
	CPC  R31,R26
	BREQ PC+3
	JMP _0x1200A3
; 0009 0359             if( len < (2 + sizeof(struct netw_man_st) - (sizeof(unsigned int) + sizeof(unsigned char *)) + 1 ) ){
	CALL SUBOPT_0x160
	SBIW R26,12
	BRGE _0x1200A4
; 0009 035A                 printDebug("<ETH_processPacket> network maintenance invalid length (%d)\r\n",len);
	__POINTD1FN _0x120000,3633
	CALL SUBOPT_0x161
; 0009 035B                 ETH_sendNack(frameID,INVALID_LENGTH);
	CALL SUBOPT_0x162
; 0009 035C                 return;
	RJMP _0x20E0069
; 0009 035D             }
; 0009 035E 
; 0009 035F             payload = (int) malloc (sizeof(struct netw_man_st));
_0x1200A4:
	LDI  R26,LOW(13)
	CALL SUBOPT_0x172
; 0009 0360             if(payload == NULL){
	BRNE _0x1200A5
; 0009 0361                 printDebug("<ETH_processPacket> payload malloc(%d) failed\r\n",sizeof(struct netw_man_st));
	CALL SUBOPT_0x173
	CALL SUBOPT_0x188
; 0009 0362                 ETH_sendNack(frameID,NOT_READY);
	CALL SUBOPT_0x164
; 0009 0363                 return;
	RJMP _0x20E0069
; 0009 0364             }
; 0009 0365 
; 0009 0366             res = networkMaintenanceParser(ptr2frame+2,len-2,(struct netw_man_st *)payload);
_0x1200A5:
	CALL SUBOPT_0x175
	RCALL _networkMaintenanceParser
	MOVW R18,R30
; 0009 0367             if(res < 0){
	TST  R19
	BRPL _0x1200A6
; 0009 0368                 printDebug("<ETH_processPacket> networkMaintenanceParser() failed\r\n");
	__POINTD1FN _0x120000,3695
	CALL SUBOPT_0x2
; 0009 0369                 free( (void *) payload );
	CALL SUBOPT_0x167
; 0009 036A                 ETH_sendNack(frameID,INVALID_PARAMETER);
; 0009 036B                 return;
	RJMP _0x20E0069
; 0009 036C             }
; 0009 036D 
; 0009 036E             printDebug("\r\n--networkMaintenanceParser-- CMD [0x%02X]\r\n",frameID);
_0x1200A6:
	__POINTD1FN _0x120000,3751
	CALL SUBOPT_0x168
; 0009 036F             printDebug("cmd             [0x%02X]\r\n",  ((struct netw_man_st *)payload)->cmd);
	CALL SUBOPT_0x189
; 0009 0370             printDebug("dataLen         [%d]\r\n",      ((struct netw_man_st *)payload)->dataLen);
	__POINTD1FN _0x120000,3824
	CALL SUBOPT_0x16A
	CALL SUBOPT_0x174
; 0009 0371             if( ((struct netw_man_st *)payload)->dataLen > 0 ){
	MOVW R30,R20
	CALL SUBOPT_0x18A
	BRSH _0x1200A7
; 0009 0372                 printDebug("data ---        \r\n");
	__POINTD1FN _0x120000,3847
	CALL SUBOPT_0x2
; 0009 0373                 print_payload(((struct netw_man_st *)payload)->data,((struct netw_man_st *)payload)->dataLen);
	MOVW R30,R20
	LDD  R26,Z+11
	LDD  R27,Z+12
	ST   -Y,R27
	ST   -Y,R26
	LDD  R26,Z+9
	LDD  R27,Z+10
	CALL _print_payload
; 0009 0374                 printDebug("--------\r\n");
	__POINTD1FN _0x120000,3866
	CALL SUBOPT_0x2
; 0009 0375             }
; 0009 0376 
; 0009 0377             switch(((struct netw_man_st *)payload)->cmd){
_0x1200A7:
	CALL SUBOPT_0x178
; 0009 0378                 case NETW_TIME_SYNC :   res = setTimeSyncSchema( ((struct netw_man_st *)payload)->data );
	BRNE _0x1200AE
	MOVW R30,R20
	LDD  R26,Z+11
	LDD  R27,Z+12
	CALL _setTimeSyncSchema
	MOVW R18,R30
; 0009 0379                                         if(res < 0){
	TST  R19
	BRPL _0x1200AC
; 0009 037A                                             printDebug("<ETH_processPacket> setTimeSyncSchema() failed\r\n");
	__POINTD1FN _0x120000,3877
	CALL SUBOPT_0x2
; 0009 037B                                             ETH_sendNack(frameID,INVALID_PARAMETER);
	CALL SUBOPT_0x18B
; 0009 037C                                             free_networkMaintenance((struct netw_man_st *)payload);
	MOVW R26,R20
	RCALL _free_networkMaintenance
; 0009 037D                                             free( (void *) payload );
	MOVW R26,R20
	CALL _free
; 0009 037E                                             return;
	RJMP _0x20E0069
; 0009 037F                                         }
; 0009 0380 
; 0009 0381                                         res = ETH_sendNetworkMaintenanceAck(frameID,((struct netw_man_st *)payload)->cmd,SUCCESS);
_0x1200AC:
	CALL SUBOPT_0x16D
	LDI  R26,LOW(0)
	RCALL _ETH_sendNetworkMaintenanceAck
	MOVW R18,R30
; 0009 0382 
; 0009 0383                                         if(res < 0){
	TST  R19
	BRPL _0x1200AD
; 0009 0384                                             printDebug("WARN : <ETH_processPacket> NETW_TIME_SYNC : ETH_sendNetworkMaintenanceAck() failed\r\n");
	__POINTD1FN _0x120000,3926
	CALL SUBOPT_0x2
; 0009 0385                                         }
; 0009 0386 
; 0009 0387                                         break;
_0x1200AD:
	RJMP _0x1200AA
; 0009 0388                 default :               // -- Shouldn't reach here -- //
_0x1200AE:
; 0009 0389                                         printDebug("<ETH_processPacket> unknown type for config->accd [0x%02X]\r\n",
; 0009 038A                                                         ((struct netw_man_st *)payload)->cmd );
	CALL SUBOPT_0x181
; 0009 038B                                         ETH_sendNack(frameID,INVALID_PARAMETER);
	CALL SUBOPT_0x18B
; 0009 038C                                         break;
; 0009 038D             }
_0x1200AA:
; 0009 038E 
; 0009 038F             if( ((struct netw_man_st *)payload)->dataLen > 0 ){
	MOVW R30,R20
	CALL SUBOPT_0x18A
	BRSH _0x1200AF
; 0009 0390                 free_networkMaintenance((struct netw_man_st *)payload);
	MOVW R26,R20
	RCALL _free_networkMaintenance
; 0009 0391             }
; 0009 0392 
; 0009 0393             free( (void *) payload );
_0x1200AF:
	MOVW R26,R20
	CALL _free
; 0009 0394 
; 0009 0395             break;
	RJMP _0x12005E
; 0009 0396         case RMDCTRLC  :     // -- Remote Device Control COMMAND
_0x1200A3:
	CPI  R30,LOW(0x8A)
	LDI  R26,HIGH(0x8A)
	CPC  R31,R26
	BREQ PC+3
	JMP _0x1200B0
; 0009 0397             if( len < (2 + sizeof(struct rem_dev_ctrl_st)) ){
	CALL SUBOPT_0x160
	SBIW R26,15
	BRGE _0x1200B1
; 0009 0398                 printDebug("<ETH_processPacket> remote device control invalid length (%d)\r\n",len);
	__POINTD1FN _0x120000,4011
	CALL SUBOPT_0x161
; 0009 0399                 ETH_sendNack(frameID,INVALID_LENGTH);
	CALL SUBOPT_0x162
; 0009 039A                 return;
	RJMP _0x20E0069
; 0009 039B             }
; 0009 039C 
; 0009 039D             payload = (int) malloc (sizeof(struct rem_dev_ctrl_st));
_0x1200B1:
	LDI  R26,LOW(13)
	CALL SUBOPT_0x172
; 0009 039E             if(payload == NULL){
	BRNE _0x1200B2
; 0009 039F                 printDebug("<ETH_processPacket> payload malloc(%d) failed\r\n",sizeof(struct rem_dev_ctrl_st));
	CALL SUBOPT_0x173
	CALL SUBOPT_0x188
; 0009 03A0                 ETH_sendNack(frameID,NOT_READY);
	CALL SUBOPT_0x164
; 0009 03A1                 return;
	RJMP _0x20E0069
; 0009 03A2             }
; 0009 03A3 
; 0009 03A4             res = remoteDeviceControlParser(ptr2frame+2,(struct rem_dev_ctrl_st *)payload);
_0x1200B2:
	CALL SUBOPT_0x187
	RCALL _remoteDeviceControlParser
	MOVW R18,R30
; 0009 03A5             if(res < 0){
	TST  R19
	BRPL _0x1200B3
; 0009 03A6                 printDebug("<ETH_processPacket> remoteDeviceControlParser() failed\r\n");
	__POINTD1FN _0x120000,4075
	CALL SUBOPT_0x2
; 0009 03A7                 free( (void *) payload );
	CALL SUBOPT_0x167
; 0009 03A8                 ETH_sendNack(frameID,INVALID_PARAMETER);
; 0009 03A9                 return;
	RJMP _0x20E0069
; 0009 03AA             }
; 0009 03AB 
; 0009 03AC             printDebug("\r\n--remoteDeviceControlParser-- CMD [0x%02X]\r\n",frameID);
_0x1200B3:
	__POINTD1FN _0x120000,4132
	CALL SUBOPT_0x168
; 0009 03AD             printDebug("cmd             [0x%02X]\r\n",  ((struct rem_dev_ctrl_st *)payload)->cmd);
	CALL SUBOPT_0x189
; 0009 03AE             printDebug("value           [%ld]\r\n",      ((struct rem_dev_ctrl_st *)payload)->value);
	__POINTD1FN _0x120000,4179
	CALL SUBOPT_0x183
; 0009 03AF 
; 0009 03B0             switch(((struct rem_dev_ctrl_st *)payload)->cmd){
	CALL SUBOPT_0x178
; 0009 03B1                 case DEVCTRL_MUTE_ALARM :   res = setMuteAlarm( ((struct rem_dev_ctrl_st *)payload)->value );
	BRNE _0x1200BA
	MOVW R30,R20
	CALL SUBOPT_0x185
	CALL _setMuteAlarm
	MOVW R18,R30
; 0009 03B2                                             if(res < 0){
	TST  R19
	BRPL _0x1200B8
; 0009 03B3                                                 printDebug("<ETH_processPacket> setTimeSyncSchema(%ld) failed\r\n",((struct rem_dev_ctrl_st *)payload)->value);
	__POINTD1FN _0x120000,4203
	CALL SUBOPT_0x183
; 0009 03B4                                                 ETH_sendNack(frameID,INVALID_PARAMETER);
	CALL SUBOPT_0x18B
; 0009 03B5                                                 free( (void *) payload );
	MOVW R26,R20
	CALL _free
; 0009 03B6                                                 return;
	RJMP _0x20E0069
; 0009 03B7                                             }
; 0009 03B8 
; 0009 03B9                                             res = ETH_remoteDeviceControlAck(frameID,((struct rem_dev_ctrl_st *)payload)->cmd,SUCCESS);
_0x1200B8:
	CALL SUBOPT_0x16D
	LDI  R26,LOW(0)
	RCALL _ETH_remoteDeviceControlAck
	MOVW R18,R30
; 0009 03BA 
; 0009 03BB                                             if(res < 0){
	TST  R19
	BRPL _0x1200B9
; 0009 03BC                                                 printDebug("WARN : <ETH_processPacket> DEVCTRL_MUTE_ALARM : ETH_remoteDeviceControlAck() failed\r\n");
	__POINTD1FN _0x120000,4255
	CALL SUBOPT_0x2
; 0009 03BD                                             }
; 0009 03BE                                             break;
_0x1200B9:
	RJMP _0x1200B6
; 0009 03BF                 default :                   // -- Shouldn't reach here -- //
_0x1200BA:
; 0009 03C0                                             printDebug("<ETH_processPacket> unknown type for config->accd [0x%02X]\r\n",
; 0009 03C1                                                             ((struct netw_man_st *)payload)->cmd );
	CALL SUBOPT_0x181
; 0009 03C2                                             ETH_sendNack(frameID,INVALID_PARAMETER);
	CALL SUBOPT_0x18B
; 0009 03C3                                             break;
; 0009 03C4             }
_0x1200B6:
; 0009 03C5 
; 0009 03C6             free( (void *) payload );
	MOVW R26,R20
	CALL _free
; 0009 03C7             break;
	RJMP _0x12005E
; 0009 03C8         case CLRLISTA  :     // -- Clear List ACKNOWLEDGE
_0x1200B0:
	CPI  R30,LOW(0x9B)
	LDI  R26,HIGH(0x9B)
	CPC  R31,R26
	BREQ PC+3
	JMP _0x1200BB
; 0009 03C9             if( len < (2 + sizeof(struct clr_lst_st)) ){
	CALL SUBOPT_0x160
	SBIW R26,12
	BRGE _0x1200BC
; 0009 03CA                 printDebug("<ETH_processPacket> clear list ACK invalid length (%d)\r\n",len);
	__POINTD1FN _0x120000,4341
	CALL SUBOPT_0x161
; 0009 03CB                 return;
	RJMP _0x20E0069
; 0009 03CC             }
; 0009 03CD 
; 0009 03CE             payload = (int) malloc (sizeof(struct clr_lst_st));
_0x1200BC:
	LDI  R26,LOW(10)
	CALL SUBOPT_0x172
; 0009 03CF             if(payload == NULL){
	BRNE _0x1200BD
; 0009 03D0                 printDebug("<ETH_processPacket> payload malloc(%d) failed\r\n",sizeof(struct clr_lst_st));
	CALL SUBOPT_0x173
	CALL SUBOPT_0x186
; 0009 03D1                 return;
	RJMP _0x20E0069
; 0009 03D2             }
; 0009 03D3 
; 0009 03D4             res = clearListParser(ptr2frame+2,(struct clr_lst_st *)payload);
_0x1200BD:
	CALL SUBOPT_0x187
	RCALL _clearListParser
	MOVW R18,R30
; 0009 03D5             if(res < 0){
	TST  R19
	BRPL _0x1200BE
; 0009 03D6                 printDebug("<ETH_processPacket> clearListParser() failed\r\n");
	__POINTD1FN _0x120000,4398
	CALL SUBOPT_0x2
; 0009 03D7                 free( (void *) payload );
	MOVW R26,R20
	CALL _free
; 0009 03D8                 return;
	RJMP _0x20E0069
; 0009 03D9             }
; 0009 03DA 
; 0009 03DB             printDebug("\r\n--clearListParser-- ACK [0x%02X]\r\n",frameID);
_0x1200BE:
	__POINTD1FN _0x120000,4445
	CALL SUBOPT_0x168
; 0009 03DC             printDebug("cmd             [0x%02X]\r\n",  ((struct clr_lst_st *)payload)->cmd);
	CALL SUBOPT_0x189
; 0009 03DD             printDebug("status          [0x%02X]\r\n",  ((struct clr_lst_st *)payload)->status);
	__POINTD1FN _0x120000,4482
	CALL SUBOPT_0x177
; 0009 03DE 
; 0009 03DF             switch(((struct clr_lst_st *)payload)->cmd){
	MOVW R30,R20
	LDD  R30,Z+8
	CALL SUBOPT_0x18C
; 0009 03E0                 case CLR_DUPLIST :  if(((struct clr_lst_st *)payload)->status == 0x00)
	BRNE _0x1200C5
	MOVW R30,R20
	LDD  R30,Z+9
	CPI  R30,0
	BRNE _0x1200C3
; 0009 03E1                                     {
; 0009 03E2                                         printDebug("<ETH_processPacket> clear duplicate request (ACK) SUCCESS!!\r\n");
	__POINTD1FN _0x120000,4509
	CALL SUBOPT_0x2
; 0009 03E3                                         duplicateListClear = 1;
	LDI  R30,LOW(1)
	STS  _duplicateListClear,R30
; 0009 03E4                                         free( (void *) payload );
	MOVW R26,R20
	CALL _free
; 0009 03E5                                         return;
	RJMP _0x20E0069
; 0009 03E6                                     }
; 0009 03E7                                     else
_0x1200C3:
; 0009 03E8                                     {
; 0009 03E9                                         printDebug("<ETH_processPacket> clear duplicate request (ACK) FAILED[0x%02X]!!\r\n",
; 0009 03EA                                                     ((struct clr_lst_st *)payload)->status);
	__POINTD1FN _0x120000,4571
	CALL SUBOPT_0x177
; 0009 03EB                                     }
; 0009 03EC                                     break;
	RJMP _0x1200C1
; 0009 03ED                 default         :   // -- Shouldn't reach here -- //
_0x1200C5:
; 0009 03EE                                     printDebug("<ETH_processPacket> unknown type for clr_lst_st->cmd [0x%02X]\r\n",
; 0009 03EF                                                     ((struct clr_lst_st *)payload)->cmd );
	__POINTD1FN _0x120000,4640
	CALL SUBOPT_0x169
; 0009 03F0                                     break;
; 0009 03F1             }
_0x1200C1:
; 0009 03F2 
; 0009 03F3             free( (void *) payload );
	MOVW R26,R20
	CALL _free
; 0009 03F4             break;
	RJMP _0x12005E
; 0009 03F5         case FMWUPLDC  :     // -- Firmware Upload COMMAND (Reserved)
_0x1200BB:
	CPI  R30,LOW(0xFA)
	LDI  R26,HIGH(0xFA)
	CPC  R31,R26
	BRNE _0x1200C7
; 0009 03F6             printDebug("<ETH_processPacket> firmware upload hasn't supported yet\r\n");
	__POINTD1FN _0x120000,4704
	CALL SUBOPT_0x2
; 0009 03F7             break;
	RJMP _0x12005E
; 0009 03F8         default:
_0x1200C7:
; 0009 03F9             printDebug("\r\n<ETH_processPacket> invalid frame type ( %02X )!!\r\n",frameType);
	__POINTD1FN _0x120000,4763
	CALL __PUTPARD1
	MOV  R30,R17
	CALL SUBOPT_0x27
; 0009 03FA             break;
; 0009 03FB     }
_0x12005E:
; 0009 03FC 
; 0009 03FD     return;
_0x20E0069:
	CALL __LOADLOCR6
	ADIW R28,48
	SUBI R29,-2
	RET
; 0009 03FE }
;/*============================================================*/
;
;/**************************************************************/
;/************* Low level Communication Management *************/
;/**************************************************************/
;/*============================================================*/
;void ETH_receive()
; 0009 0406 {
_ETH_receive:
; 0009 0407     unsigned char   *ptr;
; 0009 0408     int             size=0;
; 0009 0409 
; 0009 040A     // -- for packet validation -- //
; 0009 040B     int     offset=0;
; 0009 040C     int     len = 0x0000;
; 0009 040D     int     total=0;
; 0009 040E 
; 0009 040F     // --------------- Process Xbee Data ---------------- // UART0
; 0009 0410     do{
	CALL SUBOPT_0x18D
	CALL __SAVELOCR6
;	*ptr -> R16,R17
;	size -> R18,R19
;	offset -> R20,R21
;	len -> Y+8
;	total -> Y+6
	CALL SUBOPT_0x0
_0x1200C9:
; 0009 0411         ptr = (char *) malloc (RX_BUFFER_SIZE0);
	LDI  R26,LOW(500)
	LDI  R27,HIGH(500)
	CALL _malloc
	MOVW R16,R30
; 0009 0412         if(ptr == NULL){
	MOV  R0,R16
	OR   R0,R17
	BRNE _0x1200CB
; 0009 0413             printDebug("<ETH_receive> malloc..FAILED..\r\n");
	__POINTD1FN _0x120000,4817
	CALL SUBOPT_0x2
; 0009 0414         }
; 0009 0415     }while(ptr == NULL);
_0x1200CB:
	MOV  R0,R16
	OR   R0,R17
	BREQ _0x1200C9
; 0009 0416     size = read_uart0(ptr,RX_BUFFER_SIZE0-1,10);
	ST   -Y,R17
	ST   -Y,R16
	LDI  R30,LOW(499)
	LDI  R31,HIGH(499)
	CALL SUBOPT_0x18E
	CALL _read_uart0
	MOVW R18,R30
; 0009 0417 
; 0009 0418     if(size <= 0){
	CLR  R0
	CP   R0,R18
	CPC  R0,R19
	BRLT _0x1200CC
; 0009 0419         free( ptr );
	MOVW R26,R16
	CALL _free
; 0009 041A         return;
	CALL __LOADLOCR6
	RJMP _0x20E0067
; 0009 041B     }
; 0009 041C 
; 0009 041D     printDebug("\r\n\r\n+++++++ Raw buffer +++++++\r\n");
_0x1200CC:
	__POINTD1FN _0x120000,4850
	CALL SUBOPT_0x2
; 0009 041E     print_payload(ptr,size);
	ST   -Y,R17
	ST   -Y,R16
	MOVW R26,R18
	CALL _print_payload
; 0009 041F 
; 0009 0420     do{
_0x1200CE:
; 0009 0421         //printDebug("<ETH_receive> ptr");
; 0009 0422         offset += strcspn(&ptr[offset],"\x7e");                                   // seach for header
	MOVW R30,R20
	CALL SUBOPT_0x18F
	__POINTW2MN _0x1200D0,0
	CALL _strcspn
	__ADDWRR 20,21,30,31
; 0009 0423         if(offset == size){
	__CPWRR 18,19,20,21
	BRNE _0x1200D1
; 0009 0424 //            printDebug("<ETH_receive> invalid packet 0x7E not found\r\n");    // not found Start Delimiter 0x7E
; 0009 0425             break;
	RJMP _0x1200CF
; 0009 0426         }
; 0009 0427         len = (ptr[offset+1] & 0xffff) << 8;                                    // check packet length (MSB)
_0x1200D1:
	MOVW R30,R20
	ADIW R30,1
	ADD  R30,R16
	ADC  R31,R17
	LD   R30,Z
	LDI  R31,0
	MOV  R31,R30
	LDI  R30,0
	STD  Y+8,R30
	STD  Y+8+1,R31
; 0009 0428         len |= ptr[offset+2];                                                   // check packet length (LSB)
	MOVW R30,R20
	CALL SUBOPT_0x112
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	CALL SUBOPT_0x190
	CALL SUBOPT_0x17C
; 0009 0429 //        printDebug("len = [0x%04X](%d)\r\n",len,len);
; 0009 042A 
; 0009 042B         total += len;                                                           // update total analyse
	CALL SUBOPT_0x191
; 0009 042C         if (total > size){                                                      //check length validation
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	CP   R18,R26
	CPC  R19,R27
	BRGE _0x1200D2
; 0009 042D             offset++;
	__ADDWRN 20,21,1
; 0009 042E             total = offset;                                                     // roll back total analyse
	__PUTWSR 20,21,6
; 0009 042F             printDebug("\r\ninvalid length!!\r\n");
	__POINTD1FN _0x120000,4885
	CALL SUBOPT_0x2
; 0009 0430             continue;
	RJMP _0x1200CD
; 0009 0431         }
; 0009 0432 
; 0009 0433 //        printDebug("\r\n****** packet checksum ******\r\n");
; 0009 0434 //        print_payload(&ptr[offset+3],len);
; 0009 0435         if(ETH_checksum(&ptr[offset+3],len) != ptr[offset+3+len]){              // checksum error detection
_0x1200D2:
	MOVW R30,R20
	ADIW R30,3
	CALL SUBOPT_0x18F
	LDD  R26,Y+10
	LDD  R27,Y+10+1
	RCALL _ETH_checksum
	MOVW R0,R30
	MOVW R30,R20
	ADIW R30,3
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	ADD  R30,R26
	ADC  R31,R27
	ADD  R30,R16
	ADC  R31,R17
	LD   R30,Z
	CALL SUBOPT_0x192
	BREQ _0x1200D3
; 0009 0436             printDebug("<ETH_receive> checksum error\r\n");
	__POINTD1FN _0x120000,4906
	CALL SUBOPT_0x2
; 0009 0437             offset++;
	__ADDWRN 20,21,1
; 0009 0438             total = offset;                                                     // roll back total analyse
	__PUTWSR 20,21,6
; 0009 0439         }
; 0009 043A         else{                                                                   // got a valid packet
	RJMP _0x1200D4
_0x1200D3:
; 0009 043B //            printDebug("\r\n****** checksum correct ******\r\n");
; 0009 043C //            print_payload(&ptr[offset+3],len);
; 0009 043D //            printDebug("\r\n******************\r\n");
; 0009 043E 
; 0009 043F             ETH_processPacket(&ptr[offset+3],len);                              // analyse API-specific Structure
	MOVW R30,R20
	ADIW R30,3
	CALL SUBOPT_0x18F
	LDD  R26,Y+10
	LDD  R27,Y+10+1
	RCALL _ETH_processPacket
; 0009 0440             offset += 3+len;
	LDD  R30,Y+8
	LDD  R31,Y+8+1
	ADIW R30,3
	__ADDWRR 20,21,30,31
; 0009 0441         }
_0x1200D4:
; 0009 0442 	}while( total < size);						                                // loop if still unread byte
_0x1200CD:
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	CP   R26,R18
	CPC  R27,R19
	BRGE _0x1200CF
	RJMP _0x1200CE
_0x1200CF:
; 0009 0443 
; 0009 0444 
; 0009 0445 
; 0009 0446     free( ptr );
	MOVW R26,R16
	CALL _free
; 0009 0447 }
	CALL __LOADLOCR6
	RJMP _0x20E0067

	.DSEG
_0x1200D0:
	.BYTE 0x2
;/*============================================================*/
;int ETH_send(char *frameData, int frameLen, char frameID, int timeout)
; 0009 044A {

	.CSEG
_ETH_send:
; 0009 044B     int     res;
; 0009 044C     char    *sendPacket;
; 0009 044D     int     packetLen   = 0;
; 0009 044E 
; 0009 044F     frameLen++;     // -- + frameID (1 Byte) -- //
	CALL SUBOPT_0x193
;	*frameData -> Y+11
;	frameLen -> Y+9
;	frameID -> Y+8
;	timeout -> Y+6
;	res -> R16,R17
;	*sendPacket -> R18,R19
;	packetLen -> R20,R21
	__GETWRN 20,21,0
	LDD  R30,Y+9
	LDD  R31,Y+9+1
	ADIW R30,1
	STD  Y+9,R30
	STD  Y+9+1,R31
; 0009 0450 
; 0009 0451     packetLen   = frameLen + 2 + 1 + 1;       // length(2 bytes) + frameID(1 byte) + header(1 byte) + sum(1 byte)
	ADIW R30,4
	MOVW R20,R30
; 0009 0452 
; 0009 0453     if(packetLen > MAX_MTU){
	__CPWRN 20,21,501
	BRLT _0x1200D5
; 0009 0454         printDebug("<ETH_send> WARNING : Packet is too long(%d bytes)\r\n",packetLen);
	__POINTD1FN _0x120000,4937
	CALL SUBOPT_0x39
; 0009 0455         return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E0068
; 0009 0456     }
; 0009 0457 
; 0009 0458     sendPacket  = (char *) malloc ( packetLen );
_0x1200D5:
	MOVW R26,R20
	CALL _malloc
	MOVW R18,R30
; 0009 0459     if(sendPacket == NULL){
	MOV  R0,R18
	OR   R0,R19
	BRNE _0x1200D6
; 0009 045A         printDebug("<ETH_send> WARNING : ETH_send malloc failed (%d)\r\n",packetLen);
	__POINTD1FN _0x120000,4989
	CALL SUBOPT_0x39
; 0009 045B         return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E0068
; 0009 045C     }
; 0009 045D 
; 0009 045E     memset(sendPacket,'\0',packetLen);
_0x1200D6:
	ST   -Y,R19
	ST   -Y,R18
	LDI  R30,LOW(0)
	ST   -Y,R30
	MOVW R26,R20
	CALL _memset
; 0009 045F 
; 0009 0460     sendPacket[0] = 0x7E;
	MOVW R26,R18
	LDI  R30,LOW(126)
	ST   X,R30
; 0009 0461     sendPacket[1] = (frameLen >> 8) & 0xFF;
	LDD  R30,Y+9
	LDD  R31,Y+9+1
	CALL __ASRW8
	__PUTB1RNS 18,1
; 0009 0462     sendPacket[2] = frameLen & 0xFF;
	LDD  R30,Y+9
	__PUTB1RNS 18,2
; 0009 0463 
; 0009 0464     if(frameID == 0x00){
	LDD  R30,Y+8
	CPI  R30,0
	BRNE _0x1200D7
; 0009 0465         frameID         = ETH_generateId();
	CALL _ETH_generateId
	STD  Y+8,R30
; 0009 0466         //printDebug("<ETH_send> ETH_generateId() return 0x%02X\r\n",frameID);
; 0009 0467     }
; 0009 0468 
; 0009 0469     sendPacket[3] = frameID;
_0x1200D7:
	LDD  R30,Y+8
	__PUTB1RNS 18,3
; 0009 046A 
; 0009 046B     memcpy(&sendPacket[4],frameData,frameLen);
	MOVW R30,R18
	ADIW R30,4
	ST   -Y,R31
	ST   -Y,R30
	LDD  R30,Y+13
	LDD  R31,Y+13+1
	ST   -Y,R31
	ST   -Y,R30
	LDD  R26,Y+13
	LDD  R27,Y+13+1
	CALL _memcpy
; 0009 046C     sendPacket[packetLen-1] = ETH_checksum(&sendPacket[3],frameLen);
	MOVW R30,R20
	SBIW R30,1
	ADD  R30,R18
	ADC  R31,R19
	PUSH R31
	PUSH R30
	MOVW R30,R18
	ADIW R30,3
	ST   -Y,R31
	ST   -Y,R30
	LDD  R26,Y+11
	LDD  R27,Y+11+1
	RCALL _ETH_checksum
	POP  R26
	POP  R27
	ST   X,R30
; 0009 046D 
; 0009 046E     //printDebug("<ETH_send> checksum = 0x%02X\r\n",sendPacket[packetLen-1]);
; 0009 046F 
; 0009 0470     if((timeout > 0) && (frameID != 0xFF)){
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	CALL __CPW02
	BRGE _0x1200D9
	LDD  R26,Y+8
	CPI  R26,LOW(0xFF)
	BRNE _0x1200DA
_0x1200D9:
	RJMP _0x1200D8
_0x1200DA:
; 0009 0471         res = ETH_addWaitQueue(frameID, &sendPacket[0], packetLen, timeout);
	LDD  R30,Y+8
	ST   -Y,R30
	ST   -Y,R19
	ST   -Y,R18
	ST   -Y,R21
	ST   -Y,R20
	LDD  R26,Y+11
	LDD  R27,Y+11+1
	CALL _ETH_addWaitQueue
	MOVW R16,R30
; 0009 0472         if(res < 0){
	TST  R17
	BRPL _0x1200DB
; 0009 0473             printDebug("<ETH_send> ETH_addWaitQueue() failed [id:0x%02X]\r\n",frameID);
	__POINTD1FN _0x120000,5040
	CALL __PUTPARD1
	LDD  R30,Y+12
	CALL SUBOPT_0x27
; 0009 0474             free(sendPacket);
	MOVW R26,R18
	CALL _free
; 0009 0475             return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E0068
; 0009 0476         }
; 0009 0477     }
_0x1200DB:
; 0009 0478 
; 0009 0479 
; 0009 047A //    if((commLostTimer == 0xFFFFFFFF) || (commLostTimer == 0)){
; 0009 047B //        TIMER_setTimer(&commLostTimer,30);
; 0009 047C //    }
; 0009 047D 
; 0009 047E     printDebug("\r\n--Transmitting [0x%02X]\r\n",frameID);
_0x1200D8:
	__POINTD1FN _0x120000,5091
	CALL __PUTPARD1
	LDD  R30,Y+12
	CALL SUBOPT_0x27
; 0009 047F     print_payload(sendPacket,packetLen);
	ST   -Y,R19
	ST   -Y,R18
	MOVW R26,R20
	CALL _print_payload
; 0009 0480 
; 0009 0481     write_uart0(sendPacket,packetLen);
	ST   -Y,R19
	ST   -Y,R18
	MOVW R26,R20
	CALL _write_uart0
; 0009 0482     free(sendPacket);
	MOVW R26,R18
	CALL _free
; 0009 0483 
; 0009 0484     //printDebug("-- Completed --\r\n");
; 0009 0485     delay_ms(7);
	CALL SUBOPT_0x8
	CALL _delay_ms
; 0009 0486 
; 0009 0487     return 0;
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
_0x20E0068:
	CALL __LOADLOCR6
	ADIW R28,13
	RET
; 0009 0488 }
;/*============================================================*/
;int ETH_checksum(char buf[],int len)
; 0009 048B {
_ETH_checksum:
; 0009 048C     int i;
; 0009 048D     char sum = 0;
; 0009 048E 
; 0009 048F     //printDebug("<checksum> \r\n");
; 0009 0490     for (i=0;i<len;i++){
	CALL SUBOPT_0x6F
;	buf -> Y+6
;	len -> Y+4
;	i -> R16,R17
;	sum -> R19
	LDI  R19,0
	__GETWRN 16,17,0
_0x1200DD:
	LDD  R30,Y+4
	LDD  R31,Y+4+1
	CP   R16,R30
	CPC  R17,R31
	BRGE _0x1200DE
; 0009 0491         sum += buf[i];
	MOVW R30,R16
	CALL SUBOPT_0x194
	ADD  R19,R30
; 0009 0492         //printDebug("<0x%02X> -> [0x%02X]\r\n",buf[i],sum);
; 0009 0493     }
	__ADDWRN 16,17,1
	RJMP _0x1200DD
_0x1200DE:
; 0009 0494     return (0xff - (sum & 0xff));
	MOV  R30,R19
	CALL SUBOPT_0x87
	LDI  R26,LOW(255)
	LDI  R27,HIGH(255)
	CALL __SWAPW12
	SUB  R30,R26
	SBC  R31,R27
	RJMP _0x20E0064
; 0009 0495 
; 0009 0496 }
;/*============================================================*/
;
;/**************************************************************/
;/***************** Ethernet Hardare Management ****************/
;/**************************************************************/
;/*============================================================*/
;char ETH_current_mode;
;char ETH_switchMode(char mode)
; 0009 049F {
_ETH_switchMode:
; 0009 04A0     if(mode == MODE_CONF){
	ST   -Y,R26
;	mode -> Y+0
	LD   R30,Y
	CPI  R30,0
	BRNE _0x1200DF
; 0009 04A1         printDebug("<ETH_switchMode> switch to Config mode\r\n");
	__POINTD1FN _0x120000,5119
	CALL SUBOPT_0x2
; 0009 04A2         ETH_CONF;
	LDS  R30,258
	ORI  R30,0x80
	RJMP _0x12011C
; 0009 04A3     }
; 0009 04A4     else{
_0x1200DF:
; 0009 04A5         printDebug("<ETH_switchMode> switch to Normal mode\r\n");
	__POINTD1FN _0x120000,5160
	CALL SUBOPT_0x2
; 0009 04A6         ETH_NORM;
	LDS  R30,258
	ANDI R30,0x7F
_0x12011C:
	STS  258,R30
; 0009 04A7     }
; 0009 04A8 
; 0009 04A9     delay_ms(5);
	CALL SUBOPT_0x195
; 0009 04AA 
; 0009 04AB     ETH_current_mode = mode;
	LD   R30,Y
	STS  _ETH_current_mode,R30
; 0009 04AC 
; 0009 04AD     delay_ms(5);
	CALL SUBOPT_0x195
; 0009 04AE     ETH_OFF;
	CBI  0x14,4
; 0009 04AF     delay_ms(1500);
	LDI  R26,LOW(1500)
	LDI  R27,HIGH(1500)
	CALL _delay_ms
; 0009 04B0     ETH_ON;
	SBI  0x14,4
; 0009 04B1     #asm("wdr")
	wdr
; 0009 04B2     delay_ms(2000);
	LDI  R26,LOW(2000)
	LDI  R27,HIGH(2000)
	CALL _delay_ms
; 0009 04B3 
; 0009 04B4     return ETH_MODE;
	LDS  R30,258
	ANDI R30,LOW(0x80)
	ADIW R28,1
	RET
; 0009 04B5 }
;/*============================================================*/
;int ETH_getConfig(unsigned char *ptr, unsigned int *buflen)
; 0009 04B8 {
; 0009 04B9     TIMER   timeout;
; 0009 04BA     char    getInfoCmd[] = ">R\r";
; 0009 04BB     int     i=0;
; 0009 04BC 
; 0009 04BD     ETH_switchMode((unsigned char) MODE_CONF);
;	*ptr -> Y+12
;	*buflen -> Y+10
;	timeout -> Y+6
;	getInfoCmd -> Y+2
;	i -> R16,R17
; 0009 04BE     /*
; 0009 04BF     if(mode != MODE_CONF){
; 0009 04C0         printDebug("<ETH_getConfig> ETH_switchMode(MODE_CONF) failed\r\n");
; 0009 04C1         return -1;
; 0009 04C2     }
; 0009 04C3     */
; 0009 04C4 
; 0009 04C5     for(i=0;i<CONF_READ_BUFFER;i++){
; 0009 04C6         configRd[i] = 0x00;
; 0009 04C7     }
; 0009 04C8     configLen       = 0;
; 0009 04C9     config_start    = 0;
; 0009 04CA     config_ready    = 0;
; 0009 04CB     config_end      = 0;
; 0009 04CC     config_response = 0;
; 0009 04CD 
; 0009 04CE     printDebug("<ETH_getConfig> Write to uart 0 :");
; 0009 04CF     for(i=0;i<strlen(getInfoCmd);i++){
; 0009 04D0         putchar3(getInfoCmd[i]);
; 0009 04D1     }
; 0009 04D2     printDebug("\r\n");
; 0009 04D3 
; 0009 04D4     for(i=0;i<strlen(getInfoCmd);i++){
; 0009 04D5         putchar0(getInfoCmd[i]);
; 0009 04D6     }
; 0009 04D7 
; 0009 04D8     TIMER_setTimer(&timeout, 7);
; 0009 04D9 
; 0009 04DA     while( (!config_ready) && !TIMER_checkTimerExceed(timeout)){
; 0009 04DB        delay_ms(50);
; 0009 04DC        #asm("wdr")
; 0009 04DD     }
; 0009 04DE 
; 0009 04DF     memcpy(ptr,&configRd[0],configLen);
; 0009 04E0 
; 0009 04E1     *buflen    = configLen;
; 0009 04E2 
; 0009 04E3     ETH_switchMode(MODE_NORM);
; 0009 04E4 
; 0009 04E5     /*
; 0009 04E6     if(mode != MODE_NORM){
; 0009 04E7         printDebug("<ETH_getConfig> ETH_switchMode(MODE_NORM) failed\r\n");
; 0009 04E8         return -1;
; 0009 04E9     }
; 0009 04EA     */
; 0009 04EB 
; 0009 04EC     if(config_response == 'S'){
; 0009 04ED         return 0;
; 0009 04EE     }
; 0009 04EF     else{
; 0009 04F0         return -1;
; 0009 04F1     }
; 0009 04F2 }
;/*============================================================*/
;int ETH_setConfig(char *ip, char *mask, char *gw, char *server)
; 0009 04F5 {
; 0009 04F6     TIMER   timeout;
; 0009 04F7     char    getInfoCmd[] = ">R\r";
; 0009 04F8     char    setInfoCmd[] = ">W";
; 0009 04F9     int     i=0;
; 0009 04FA     char    setStr[30];
; 0009 04FB     int     readLen=0;
; 0009 04FC     char    *ptr;
; 0009 04FD 
; 0009 04FE     ptr = (unsigned char *) malloc( sizeof(char) * CONF_READ_BUFFER );
;	*ip -> Y+53
;	*mask -> Y+51
;	*gw -> Y+49
;	*server -> Y+47
;	timeout -> Y+43
;	getInfoCmd -> Y+39
;	setInfoCmd -> Y+36
;	i -> R16,R17
;	setStr -> Y+6
;	readLen -> R18,R19
;	*ptr -> R20,R21
; 0009 04FF     if(ptr == NULL){
; 0009 0500         printDebug("<ETH_setConfig> malloc(CONF_READ_BUFFER) failed\r\n");
; 0009 0501         return -1;
; 0009 0502     }
; 0009 0503 
; 0009 0504     ETH_switchMode((unsigned char) MODE_CONF);
; 0009 0505 
; 0009 0506     // ------------------------- Read Old Configuration --------------------------- //
; 0009 0507     for(i=0;i<CONF_READ_BUFFER;i++){
; 0009 0508         configRd[i] = 0x00;
; 0009 0509     }
; 0009 050A     configLen       = 0;
; 0009 050B     config_start    = 0;
; 0009 050C     config_ready    = 0;
; 0009 050D     config_end      = 0;
; 0009 050E     config_response = 0;
; 0009 050F 
; 0009 0510     printDebug("<ETH_setConfig> Write to uart 0 :");
; 0009 0511     for(i=0;i<strlen(getInfoCmd);i++){
; 0009 0512         putchar3(getInfoCmd[i]);
; 0009 0513     }
; 0009 0514     printDebug("\r\n");
; 0009 0515 
; 0009 0516     for(i=0;i<strlen(getInfoCmd);i++){
; 0009 0517         putchar0(getInfoCmd[i]);
; 0009 0518     }
; 0009 0519 
; 0009 051A     TIMER_setTimer(&timeout, 7);
; 0009 051B 
; 0009 051C     while( (!config_ready) && !TIMER_checkTimerExceed(timeout)){
; 0009 051D        delay_ms(50);
; 0009 051E        #asm("wdr")
; 0009 051F     }
; 0009 0520 
; 0009 0521     memcpy(ptr,&configRd[0],configLen);
; 0009 0522     readLen = configLen;
; 0009 0523 
; 0009 0524     if(config_response != 'S'){
; 0009 0525         printDebug("<ETH_setConfig> read config from ETH module failed\r\n");
; 0009 0526         free( ptr );
; 0009 0527         return -1;
; 0009 0528     }
; 0009 0529 
; 0009 052A     // ------------------------- Update Configuration --------------------------- //
; 0009 052B     sprintf(setStr,"%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X",
; 0009 052C                 (ip[0]    *100) + (ip[1]     *10) + ip[2],
; 0009 052D                 (ip[3]    *100) + (ip[4]     *10) + ip[5],
; 0009 052E                 (ip[6]    *100) + (ip[7]     *10) + ip[8],
; 0009 052F                 (ip[9]    *100) + (ip[10]    *10) + ip[11],
; 0009 0530                 (mask[0]  *100) + (mask[1]   *10) + mask[2],
; 0009 0531                 (mask[3]  *100) + (mask[4]   *10) + mask[5],
; 0009 0532                 (mask[6]  *100) + (mask[7]   *10) + mask[8],
; 0009 0533                 (mask[9]  *100) + (mask[10]  *10) + mask[11],
; 0009 0534                 (gw[0]    *100) + (gw[1]     *10) + gw[2],
; 0009 0535                 (gw[3]    *100) + (gw[4]     *10) + gw[5],
; 0009 0536                 (gw[6]    *100) + (gw[7]     *10) + gw[8],
; 0009 0537                 (gw[9]    *100) + (gw[10]    *10) + gw[11]);
; 0009 0538 
; 0009 0539     printDebug("<ETH_setConfig> Set String [%s]\r\n",setStr);
; 0009 053A 
; 0009 053B     memcpy((ptr+14),&setStr[0],24);
; 0009 053C 
; 0009 053D     sprintf(setStr,"%02X%02X%02X%02X",
; 0009 053E                 (server[0]*100) + (server[1] *10) + server[2],
; 0009 053F                 (server[3]*100) + (server[4] *10) + server[5],
; 0009 0540                 (server[6]*100) + (server[7] *10) + server[8],
; 0009 0541                 (server[9]*100) + (server[10]*10) + server[11]);
; 0009 0542 
; 0009 0543     printDebug("<ETH_setConfig> Set String [%s]\r\n",setStr);
; 0009 0544 
; 0009 0545     memcpy((ptr+42),&setStr[0],8);
; 0009 0546 
; 0009 0547 //    printDebug("<ETH_setConfig> Modified setting msg ---\r\n");
; 0009 0548 //    for(i=0;i<configLen;i++){
; 0009 0549 //        putchar3(ptr[i]);
; 0009 054A //    }
; 0009 054B //    printDebug("\r\n\---\r\n");
; 0009 054C 
; 0009 054D     // ------------------------- Set New Configuration --------------------------- //
; 0009 054E     for(i=0;i<CONF_READ_BUFFER;i++){
; 0009 054F         configRd[i] = 0x00;
; 0009 0550     }
; 0009 0551     configLen       = 0;
; 0009 0552     config_start    = 0;
; 0009 0553     config_ready    = 0;
; 0009 0554     config_end      = 0;
; 0009 0555     config_response = 0;
; 0009 0556 
; 0009 0557     printDebug("<ETH_setConfig> Setting msg ---\r\n");
; 0009 0558     for(i=0;i<strlen(setInfoCmd);i++){
; 0009 0559         putchar0(setInfoCmd[i]);
; 0009 055A         putchar3(setInfoCmd[i]);
; 0009 055B     }
; 0009 055C     for(i=12;i<readLen;i++){
; 0009 055D         putchar0(ptr[i]);
; 0009 055E         putchar3(ptr[i]);
; 0009 055F     }
; 0009 0560     putchar0('\r');
; 0009 0561     printDebug("\r\n\---\r\n");
; 0009 0562 
; 0009 0563     TIMER_setTimer(&timeout, 10);
; 0009 0564 
; 0009 0565     while( (!config_ready) && !TIMER_checkTimerExceed(timeout)){
; 0009 0566        delay_ms(50);
; 0009 0567        #asm("wdr")
; 0009 0568     }
; 0009 0569 
; 0009 056A     ETH_switchMode(MODE_NORM);
; 0009 056B 
; 0009 056C     free( ptr );
; 0009 056D 
; 0009 056E     if(config_response == 'S'){
; 0009 056F         return 0;
; 0009 0570     }
; 0009 0571     else{
; 0009 0572         return -1;
; 0009 0573     }
; 0009 0574 }
;/*============================================================*/
;void ETH_reset(void)
; 0009 0577 {
_ETH_reset:
; 0009 0578     printDebug("<ETH_reset> Resetting Ethernet Module, please wait.");
	__POINTD1FN _0x120000,5497
	CALL SUBOPT_0x2
; 0009 0579     ETH_RESET   = 0;
	CBI  0xE,2
; 0009 057A     delay_ms(3000);
	LDI  R26,LOW(3000)
	LDI  R27,HIGH(3000)
	CALL _delay_ms
; 0009 057B     ETH_RESET   = 1;
	SBI  0xE,2
; 0009 057C     delay_ms(1);
	CALL SUBOPT_0x67
	CALL _delay_ms
; 0009 057D     printDebug("...Done\r\n");
	__POINTD1FN _0x120000,5549
	CALL SUBOPT_0x2
; 0009 057E }
	RET
;/*============================================================*/
;#include <stdlib.h>
;#include "ethparser.h"
;#include "debug.h"
;
;/*============================================================*/
;int statusRequestParser(unsigned char *pkt, int len, struct stat_req_st *st)
; 000A 0007 {

	.CSEG
_statusRequestParser:
; 000A 0008     int     i,k=0;
; 000A 0009 
; 000A 000A     for(i=0;i<sizeof(st->nid);i++){
	CALL SUBOPT_0x6F
;	*pkt -> Y+8
;	len -> Y+6
;	*st -> Y+4
;	i -> R16,R17
;	k -> R18,R19
	CALL SUBOPT_0x196
_0x140004:
	__CPWRN 16,17,8
	BRGE _0x140005
; 000A 000B         st->nid[0]  =   pkt[k++];
	CALL SUBOPT_0x197
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	ST   X,R30
; 000A 000C     }
	__ADDWRN 16,17,1
	RJMP _0x140004
_0x140005:
; 000A 000D 
; 000A 000E     st->accm        =   pkt[k++];
	CALL SUBOPT_0x197
	CALL SUBOPT_0x198
; 000A 000F 
; 000A 0010     st->intv        =   ((pkt[k++] & 0x00ff) << 8) |
; 000A 0011                         ((pkt[k++] & 0x00ff));
	CALL SUBOPT_0x87
	MOV  R31,R30
	LDI  R30,0
	MOVW R0,R30
	CALL SUBOPT_0x197
	CALL SUBOPT_0x87
	OR   R30,R0
	OR   R31,R1
	CALL SUBOPT_0x199
; 000A 0012 
; 000A 0013     if(st->accm >= 0x30){
	LDD  R26,Z+8
	CPI  R26,LOW(0x30)
	BRLO _0x140006
; 000A 0014         return 0;
	RJMP _0x20E0066
; 000A 0015     }
; 000A 0016 
; 000A 0017     st->parLen      =   len - k;
_0x140006:
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	SUB  R30,R18
	SBC  R31,R19
	__PUTW1SNS 4,11
; 000A 0018 
; 000A 0019     st->parlst      =   malloc((st->parLen) * sizeof(char));
	LDD  R30,Y+4
	LDD  R31,Y+4+1
	LDD  R26,Z+11
	LDD  R27,Z+12
	CALL SUBOPT_0x19A
	__PUTW1SNS 4,13
; 000A 001A     if(st->parlst == NULL)
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	ADIW R26,13
	CALL __GETW1P
	SBIW R30,0
	BRNE _0x140007
; 000A 001B     {
; 000A 001C         printDebug("<statusRequestParser> malloc failed\r\n");
	__POINTD1FN _0x140000,0
	CALL SUBOPT_0x2
; 000A 001D         return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E0065
; 000A 001E     }
; 000A 001F 
; 000A 0020     for( i=0 ; i<(st->parLen) ; i++ )
_0x140007:
	__GETWRN 16,17,0
_0x140009:
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	ADIW R26,11
	CALL SUBOPT_0x19B
	BRSH _0x14000A
; 000A 0021     {
; 000A 0022         (st->parlst)[i]      = pkt[i+k];
	LDD  R30,Y+4
	LDD  R31,Y+4+1
	LDD  R26,Z+13
	LDD  R27,Z+14
	CALL SUBOPT_0x19C
	ST   X,R30
; 000A 0023     }
	__ADDWRN 16,17,1
	RJMP _0x140009
_0x14000A:
; 000A 0024 
; 000A 0025     return 0;
	RJMP _0x20E0066
; 000A 0026 }
;/*============================================================*/
;int statusReportParser(unsigned char *pkt, unsigned long int *time)
; 000A 0029 {
; 000A 002A     int i,k=0;
; 000A 002B 
; 000A 002C     k               +=  8;
;	*pkt -> Y+6
;	*time -> Y+4
;	i -> R16,R17
;	k -> R18,R19
; 000A 002D 
; 000A 002E     *time           =   (((long)pkt[k++] & 0x000000FF) << 24) |
; 000A 002F                         (((long)pkt[k++] & 0x000000FF) << 16) |
; 000A 0030                         (((long)pkt[k++] & 0x000000FF) << 8)  |
; 000A 0031                         (((long)pkt[k++] & 0x000000FF));
; 000A 0032 
; 000A 0033     return 0;
; 000A 0034 }
;/*============================================================*/
;int configManageParser(unsigned char *pkt, int len, struct conf_man_st *st)
; 000A 0037 {
_configManageParser:
; 000A 0038     int i,k=0;
; 000A 0039 
; 000A 003A     printDebug("<configManageParser>\r\n");
	CALL SUBOPT_0x6F
;	*pkt -> Y+8
;	len -> Y+6
;	*st -> Y+4
;	i -> R16,R17
;	k -> R18,R19
	__GETWRN 18,19,0
	__POINTD1FN _0x140000,38
	CALL SUBOPT_0x2
; 000A 003B     print_payload(pkt,len);
	CALL SUBOPT_0x17D
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	CALL _print_payload
; 000A 003C 
; 000A 003D     for(i=0;i<sizeof(st->nid);i++){
	__GETWRN 16,17,0
_0x14000C:
	__CPWRN 16,17,8
	BRGE _0x14000D
; 000A 003E         st->nid[0]  =   pkt[k++];
	CALL SUBOPT_0x197
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	ST   X,R30
; 000A 003F     }
	__ADDWRN 16,17,1
	RJMP _0x14000C
_0x14000D:
; 000A 0040 
; 000A 0041     st->accd        =   pkt[k++];
	CALL SUBOPT_0x197
	CALL SUBOPT_0x198
; 000A 0042 
; 000A 0043     st->cnfg        =   pkt[k++];
	__PUTB1SNS 4,9
; 000A 0044 
; 000A 0045     if(st->accd == CONF_RD_CMD){
	LDD  R30,Y+4
	LDD  R31,Y+4+1
	LDD  R26,Z+8
	CPI  R26,LOW(0x10)
	BRNE _0x14000E
; 000A 0046         printDebug("<configManageParser> READING\r\n");
	__POINTD1FN _0x140000,61
	CALL SUBOPT_0x2
; 000A 0047         st->confLen     =   0;
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	ADIW R26,10
	CALL SUBOPT_0xFC
; 000A 0048         st->confSpec    =   NULL;
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	ADIW R26,12
	CALL SUBOPT_0xFC
; 000A 0049         return 0;
	RJMP _0x20E0066
; 000A 004A     }
; 000A 004B     printDebug("<configManageParser> WRITING\r\n");
_0x14000E:
	__POINTD1FN _0x140000,92
	CALL SUBOPT_0x2
; 000A 004C 
; 000A 004D     st->confLen     =   len - k;
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	SUB  R30,R18
	SBC  R31,R19
	__PUTW1SNS 4,10
; 000A 004E 
; 000A 004F     printDebug("<configManageParser> confLen = %d\r\n",st->confLen);
	__POINTD1FN _0x140000,123
	CALL SUBOPT_0x19D
	ADIW R26,10
	CALL SUBOPT_0x1C
	CALL SUBOPT_0x174
; 000A 0050 
; 000A 0051 
; 000A 0052     st->confSpec    =   malloc((st->confLen) * sizeof(char));
	LDD  R30,Y+4
	LDD  R31,Y+4+1
	LDD  R26,Z+10
	LDD  R27,Z+11
	CALL SUBOPT_0x19A
	__PUTW1SNS 4,12
; 000A 0053     if(st->confSpec == NULL)
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	ADIW R26,12
	CALL __GETW1P
	SBIW R30,0
	BRNE _0x14000F
; 000A 0054     {
; 000A 0055         printDebug("<configManageParser> malloc failed\r\n");
	__POINTD1FN _0x140000,159
	CALL SUBOPT_0x2
; 000A 0056         return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E0065
; 000A 0057     }
; 000A 0058 
; 000A 0059     for( i=0 ; i<(st->confLen) ; i++ )
_0x14000F:
	__GETWRN 16,17,0
_0x140011:
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	ADIW R26,10
	CALL SUBOPT_0x19B
	BRSH _0x140012
; 000A 005A     {
; 000A 005B         (st->confSpec)[i]      = pkt[i+k];
	LDD  R30,Y+4
	LDD  R31,Y+4+1
	LDD  R26,Z+12
	LDD  R27,Z+13
	CALL SUBOPT_0x19C
	ST   X,R30
; 000A 005C     }
	__ADDWRN 16,17,1
	RJMP _0x140011
_0x140012:
; 000A 005D 
; 000A 005E     return 0;
	RJMP _0x20E0066
; 000A 005F 
; 000A 0060 }
;/*============================================================*/
;/*
;int dataReportParser(unsigned char *pkt, int len, unsigned char *frameID)
;{
;    *frameID        =   pkt[0];
;    return 0;
;}
;*/
;/*============================================================*/
;int logManipulationCmdParser(unsigned char *pkt, int len, struct log_manic_st *st)
; 000A 006B {
_logManipulationCmdParser:
; 000A 006C     int i,k=0;
; 000A 006D 
; 000A 006E     for(i=0;i<sizeof(st->nid);i++){
	CALL SUBOPT_0x6F
;	*pkt -> Y+8
;	len -> Y+6
;	*st -> Y+4
;	i -> R16,R17
;	k -> R18,R19
	CALL SUBOPT_0x196
_0x140014:
	__CPWRN 16,17,8
	BRGE _0x140015
; 000A 006F         st->nid[0]  =   pkt[k++];
	CALL SUBOPT_0x197
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	ST   X,R30
; 000A 0070     }
	__ADDWRN 16,17,1
	RJMP _0x140014
_0x140015:
; 000A 0071 
; 000A 0072     st->accd        =   pkt[k++];
	CALL SUBOPT_0x197
	CALL SUBOPT_0x19E
; 000A 0073 
; 000A 0074     if(len > 6){
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	SBIW R26,7
	BRGE PC+3
	JMP _0x140016
; 000A 0075         st->tStart  =   (((long)pkt[k++] & 0x000000FF) << 24) |
; 000A 0076                         (((long)pkt[k++] & 0x000000FF) << 16) |
; 000A 0077                         (((long)pkt[k++] & 0x000000FF) << 8)  |
; 000A 0078                         (((long)pkt[k++] & 0x000000FF));
	CALL SUBOPT_0x197
	CALL SUBOPT_0x19F
	CALL SUBOPT_0x1A0
	PUSH R23
	PUSH R22
	PUSH R31
	PUSH R30
	CALL SUBOPT_0x197
	CALL SUBOPT_0x19F
	CALL __LSLD16
	POP  R26
	POP  R27
	POP  R24
	POP  R25
	CALL __ORD12
	PUSH R23
	PUSH R22
	PUSH R31
	PUSH R30
	CALL SUBOPT_0x197
	CALL SUBOPT_0x19F
	CALL SUBOPT_0x1A1
	POP  R26
	POP  R27
	POP  R24
	POP  R25
	CALL __ORD12
	PUSH R23
	PUSH R22
	PUSH R31
	PUSH R30
	CALL SUBOPT_0x197
	CALL SUBOPT_0x19F
	POP  R26
	POP  R27
	POP  R24
	POP  R25
	CALL SUBOPT_0x1A2
; 000A 0079 
; 000A 007A         st->tStop   =   (((long)pkt[k++] & 0x000000FF) << 24) |
; 000A 007B                         (((long)pkt[k++] & 0x000000FF) << 16) |
; 000A 007C                         (((long)pkt[k++] & 0x000000FF) << 8)  |
; 000A 007D                         (((long)pkt[k++] & 0x000000FF));
	CALL SUBOPT_0x197
	CALL SUBOPT_0x19F
	CALL SUBOPT_0x1A0
	PUSH R23
	PUSH R22
	PUSH R31
	PUSH R30
	CALL SUBOPT_0x197
	CALL SUBOPT_0x19F
	CALL __LSLD16
	POP  R26
	POP  R27
	POP  R24
	POP  R25
	CALL __ORD12
	PUSH R23
	PUSH R22
	PUSH R31
	PUSH R30
	CALL SUBOPT_0x197
	CALL SUBOPT_0x19F
	CALL SUBOPT_0x1A1
	POP  R26
	POP  R27
	POP  R24
	POP  R25
	CALL __ORD12
	PUSH R23
	PUSH R22
	PUSH R31
	PUSH R30
	CALL SUBOPT_0x197
	CALL SUBOPT_0x19F
	POP  R26
	POP  R27
	POP  R24
	POP  R25
	CALL __ORD12
	__PUTD1SNS 4,13
; 000A 007E     }
; 000A 007F 
; 000A 0080     return 0;
_0x140016:
	RJMP _0x20E0066
; 000A 0081 }
;/*============================================================*/
;int logManipulationAckParser(unsigned char *pkt, struct log_mania_st *st)
; 000A 0084 {
_logManipulationAckParser:
; 000A 0085     int i,k=0;
; 000A 0086 
; 000A 0087     for(i=0;i<sizeof(st->nid);i++){
	CALL SUBOPT_0x6F
;	*pkt -> Y+6
;	*st -> Y+4
;	i -> R16,R17
;	k -> R18,R19
	CALL SUBOPT_0x196
_0x140018:
	__CPWRN 16,17,8
	BRGE _0x140019
; 000A 0088         st->nid[0]  =   pkt[k++];
	CALL SUBOPT_0x1A3
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	ST   X,R30
; 000A 0089     }
	__ADDWRN 16,17,1
	RJMP _0x140018
_0x140019:
; 000A 008A 
; 000A 008B     st->accd        =   pkt[k++];
	RJMP _0x20E0063
; 000A 008C     st->status      =   pkt[k++];
; 000A 008D 
; 000A 008E     return 0;
; 000A 008F }
;/*============================================================*/
;int networkMaintenanceParser(unsigned char *pkt, int len, struct netw_man_st *st)
; 000A 0092 {
_networkMaintenanceParser:
; 000A 0093     int i,k=0;
; 000A 0094 
; 000A 0095     for(i=0;i<sizeof(st->nid);i++){
	CALL SUBOPT_0x6F
;	*pkt -> Y+8
;	len -> Y+6
;	*st -> Y+4
;	i -> R16,R17
;	k -> R18,R19
	CALL SUBOPT_0x196
_0x14001B:
	__CPWRN 16,17,8
	BRGE _0x14001C
; 000A 0096         st->nid[0]  =   pkt[k++];
	CALL SUBOPT_0x197
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	ST   X,R30
; 000A 0097     }
	__ADDWRN 16,17,1
	RJMP _0x14001B
_0x14001C:
; 000A 0098 
; 000A 0099     st->cmd         =   pkt[k++];
	CALL SUBOPT_0x197
	CALL SUBOPT_0x19E
; 000A 009A 
; 000A 009B     st->dataLen     =   len - 2;
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	SBIW R30,2
	CALL SUBOPT_0x199
; 000A 009C 
; 000A 009D     if( st->dataLen > 0 ){
	CALL SUBOPT_0x18A
	BRSH _0x14001D
; 000A 009E 
; 000A 009F         st->data    =   malloc((st->dataLen) * sizeof(char));
	LDD  R30,Y+4
	LDD  R31,Y+4+1
	LDD  R26,Z+9
	LDD  R27,Z+10
	CALL SUBOPT_0x19A
	__PUTW1SNS 4,11
; 000A 00A0         if(st->data == NULL)
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	ADIW R26,11
	CALL __GETW1P
	SBIW R30,0
	BRNE _0x14001E
; 000A 00A1         {
; 000A 00A2             printDebug("<networkMaintenanceParser> malloc failed (%d)\r\n",((st->dataLen) * sizeof(char)));
	__POINTD1FN _0x140000,196
	CALL __PUTPARD1
	LDD  R30,Y+8
	LDD  R31,Y+8+1
	LDD  R26,Z+9
	LDD  R27,Z+10
	LDI  R30,LOW(1)
	LDI  R31,HIGH(1)
	CALL __MULW12U
	CALL SUBOPT_0xDD
	CALL SUBOPT_0x10
; 000A 00A3             return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E0065
; 000A 00A4         }
; 000A 00A5 
; 000A 00A6         for( i=0 ; i<(st->dataLen) ; i++ )
_0x14001E:
	__GETWRN 16,17,0
_0x140020:
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	ADIW R26,9
	CALL SUBOPT_0x19B
	BRSH _0x140021
; 000A 00A7         {
; 000A 00A8             (st->data)[i]      = pkt[i+k];
	LDD  R30,Y+4
	LDD  R31,Y+4+1
	LDD  R26,Z+11
	LDD  R27,Z+12
	CALL SUBOPT_0x19C
	ST   X,R30
; 000A 00A9         }
	__ADDWRN 16,17,1
	RJMP _0x140020
_0x140021:
; 000A 00AA 
; 000A 00AB     }
; 000A 00AC 
; 000A 00AD     return 0;
_0x14001D:
_0x20E0066:
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
_0x20E0065:
	CALL __LOADLOCR4
_0x20E0067:
	ADIW R28,10
	RET
; 000A 00AE }
;/*============================================================*/
;int remoteDeviceControlParser(unsigned char *pkt, struct rem_dev_ctrl_st *st)
; 000A 00B1 {
_remoteDeviceControlParser:
; 000A 00B2     int i,k=0;
; 000A 00B3 
; 000A 00B4     for(i=0;i<sizeof(st->nid);i++){
	CALL SUBOPT_0x6F
;	*pkt -> Y+6
;	*st -> Y+4
;	i -> R16,R17
;	k -> R18,R19
	CALL SUBOPT_0x196
_0x140023:
	__CPWRN 16,17,8
	BRGE _0x140024
; 000A 00B5         st->nid[0]  =   pkt[k++];
	CALL SUBOPT_0x1A3
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	ST   X,R30
; 000A 00B6     }
	__ADDWRN 16,17,1
	RJMP _0x140023
_0x140024:
; 000A 00B7 
; 000A 00B8     st->cmd         =   pkt[k++];
	CALL SUBOPT_0x1A3
	CALL SUBOPT_0x19E
; 000A 00B9 
; 000A 00BA     st->value       =   (((long)pkt[k++] & 0x000000FF) << 24) |
; 000A 00BB                         (((long)pkt[k++] & 0x000000FF) << 16) |
; 000A 00BC                         (((long)pkt[k++] & 0x000000FF) << 8)  |
; 000A 00BD                         (((long)pkt[k++] & 0x000000FF));
	CALL SUBOPT_0x1A3
	CALL SUBOPT_0x19F
	CALL SUBOPT_0x1A0
	PUSH R23
	PUSH R22
	PUSH R31
	PUSH R30
	CALL SUBOPT_0x1A3
	CALL SUBOPT_0x19F
	CALL __LSLD16
	POP  R26
	POP  R27
	POP  R24
	POP  R25
	CALL __ORD12
	PUSH R23
	PUSH R22
	PUSH R31
	PUSH R30
	CALL SUBOPT_0x1A3
	CALL SUBOPT_0x19F
	CALL SUBOPT_0x1A1
	POP  R26
	POP  R27
	POP  R24
	POP  R25
	CALL __ORD12
	PUSH R23
	PUSH R22
	PUSH R31
	PUSH R30
	CALL SUBOPT_0x1A3
	CALL SUBOPT_0x19F
	POP  R26
	POP  R27
	POP  R24
	POP  R25
	CALL SUBOPT_0x1A2
; 000A 00BE 
; 000A 00BF     return 0;
	RJMP _0x20E0062
; 000A 00C0 }
;/*============================================================*/
;int clearListParser(unsigned char *pkt, struct clr_lst_st *st)
; 000A 00C3 {
_clearListParser:
; 000A 00C4     int i,k=0;
; 000A 00C5 
; 000A 00C6     for(i=0;i<sizeof(st->nid);i++){
	CALL SUBOPT_0x6F
;	*pkt -> Y+6
;	*st -> Y+4
;	i -> R16,R17
;	k -> R18,R19
	CALL SUBOPT_0x196
_0x140026:
	__CPWRN 16,17,8
	BRGE _0x140027
; 000A 00C7         st->nid[0]  =   pkt[k++];
	CALL SUBOPT_0x1A3
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	ST   X,R30
; 000A 00C8     }
	__ADDWRN 16,17,1
	RJMP _0x140026
_0x140027:
; 000A 00C9 
; 000A 00CA     st->cmd         =   pkt[k++];
_0x20E0063:
	MOVW R30,R18
	__ADDWRN 18,19,1
	CALL SUBOPT_0x194
	CALL SUBOPT_0x19E
; 000A 00CB     st->status      =   pkt[k++];
	CALL SUBOPT_0x1A3
	__PUTB1SNS 4,9
; 000A 00CC 
; 000A 00CD     return 0;
_0x20E0062:
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
_0x20E0064:
	CALL __LOADLOCR4
	ADIW R28,8
	RET
; 000A 00CE }
;/*============================================================*/
;void free_statusRequest(struct stat_req_st *st)
; 000A 00D1 {
_free_statusRequest:
; 000A 00D2     free ( st->parlst );
	CALL SUBOPT_0x83
;	*st -> Y+0
	LDD  R26,Z+13
	LDD  R27,Z+14
	CALL _free
; 000A 00D3 }
	RJMP _0x20E0061
;/*============================================================*/
;void free_configManage(struct conf_man_st *st)
; 000A 00D6 {
_free_configManage:
; 000A 00D7     free ( st->confSpec );
	CALL SUBOPT_0x83
;	*st -> Y+0
	LDD  R26,Z+12
	LDD  R27,Z+13
	CALL _free
; 000A 00D8 }
	RJMP _0x20E0061
;/*============================================================*/
;void free_networkMaintenance(struct netw_man_st *st)
; 000A 00DB {
_free_networkMaintenance:
; 000A 00DC     free ( st->data );
	CALL SUBOPT_0x83
;	*st -> Y+0
	LDD  R26,Z+11
	LDD  R27,Z+12
	CALL _free
; 000A 00DD }
	RJMP _0x20E0061
;/*============================================================*/
;
;#include <stdlib.h>
;#include <string.h>
;#include "ethservice.h"
;#include "ds1672.h"
;#include "alarm.h"
	#ifndef __SLEEP_DEFINED__
	#define __SLEEP_DEFINED__
	.EQU __se_bit=0x01
	.EQU __sm_mask=0x0E
	.EQU __sm_powerdown=0x04
	.EQU __sm_powersave=0x06
	.EQU __sm_standby=0x0C
	.EQU __sm_ext_standby=0x0E
	.EQU __sm_adc_noise_red=0x02
	.SET power_ctrl_reg=smcr
	#endif
;#include "debug.h"
;
;/*============================================================*/
;int getConfigLen(unsigned char cnfg)
; 000B 000A {

	.CSEG
_getConfigLen:
; 000B 000B     unsigned char   type = cnfg & 0xF0;;
; 000B 000C 
; 000B 000D     switch( type ){
	ST   -Y,R26
	ST   -Y,R17
;	cnfg -> Y+1
;	type -> R17
	LDD  R30,Y+1
	ANDI R30,LOW(0xF0)
	MOV  R17,R30
	MOV  R30,R17
	CALL SUBOPT_0x37
; 000B 000E         case CONF_PROPERTIES    :   return sizeof(struct prop_cnfg_st);
	BRNE _0x160006
	LDI  R30,LOW(161)
	LDI  R31,HIGH(161)
	RJMP _0x20E0060
; 000B 000F         case CONF_OPERATE       :   return sizeof(struct oper_cnfg_st);
_0x160006:
	CPI  R30,LOW(0x20)
	LDI  R26,HIGH(0x20)
	CPC  R31,R26
	BRNE _0x160007
	LDI  R30,LOW(8)
	LDI  R31,HIGH(8)
	RJMP _0x20E0060
; 000B 0010         case CONF_SENSOR        :   return sizeof(struct sens_cnfg_st);
_0x160007:
	CPI  R30,LOW(0x30)
	LDI  R26,HIGH(0x30)
	CPC  R31,R26
	BRNE _0x160008
	LDI  R30,LOW(29)
	LDI  R31,HIGH(29)
	RJMP _0x20E0060
; 000B 0011         case CONF_AUXDI         :   return sizeof(struct din_cnfg_st);
_0x160008:
	CPI  R30,LOW(0x40)
	LDI  R26,HIGH(0x40)
	CPC  R31,R26
	BRNE _0x160009
	LDI  R30,LOW(3)
	LDI  R31,HIGH(3)
	RJMP _0x20E0060
; 000B 0012         case CONF_AUXDO         :   return sizeof(struct dout_cnfg_st);
_0x160009:
	CPI  R30,LOW(0x50)
	LDI  R26,HIGH(0x50)
	CPC  R31,R26
	BRNE _0x16000A
	LDI  R30,LOW(38)
	LDI  R31,HIGH(38)
	RJMP _0x20E0060
; 000B 0013         case CONF_AUXAI         :   return sizeof(struct ain_cnfg_st);
_0x16000A:
	CPI  R30,LOW(0x60)
	LDI  R26,HIGH(0x60)
	CPC  R31,R26
	BRNE _0x16000B
	LDI  R30,LOW(5)
	LDI  R31,HIGH(5)
	RJMP _0x20E0060
; 000B 0014         case CONF_AUXAO         :   return sizeof(struct aout_cnfg_st);
_0x16000B:
	CPI  R30,LOW(0x70)
	LDI  R26,HIGH(0x70)
	CPC  R31,R26
	BRNE _0x16000C
	LDI  R30,LOW(41)
	LDI  R31,HIGH(41)
	RJMP _0x20E0060
; 000B 0015         case CONF_BUZZER        :   return sizeof(struct buzz_cnfg_st);
_0x16000C:
	CPI  R30,LOW(0x80)
	LDI  R26,HIGH(0x80)
	CPC  R31,R26
	BRNE _0x16000D
	LDI  R30,LOW(37)
	LDI  R31,HIGH(37)
	RJMP _0x20E0060
; 000B 0016         case CONF_ENVALARM      :   return sizeof(struct alm_cnfg_st);
_0x16000D:
	CPI  R30,LOW(0x90)
	LDI  R26,HIGH(0x90)
	CPC  R31,R26
	BRNE _0x16000F
	LDI  R30,LOW(18)
	LDI  R31,HIGH(18)
	RJMP _0x20E0060
; 000B 0017         default                 :   printDebug("<getConfigLen> unknown configuration type [0x%02X]\r\n",type);
_0x16000F:
	__POINTD1FN _0x160000,0
	CALL __PUTPARD1
	MOV  R30,R17
	CALL SUBOPT_0x27
; 000B 0018                                     return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
; 000B 0019     }
; 000B 001A }
_0x20E0060:
	LDD  R17,Y+0
_0x20E0061:
	ADIW R28,2
	RET
;/*============================================================*/
;int configRead(unsigned char cnfg, unsigned char *ptr)
; 000B 001D {
_configRead:
; 000B 001E     int i = 0;
; 000B 001F     int res = 0;
; 000B 0020     unsigned char   type            = 0x00;
; 000B 0021     int             channel         = 0;
; 000B 0022     void            *cnfgStrc       = NULL;
; 000B 0023 
; 000B 0024     type    =   cnfg & 0xF0;
	CALL SUBOPT_0x1A4
	CALL SUBOPT_0x36
;	cnfg -> Y+12
;	*ptr -> Y+10
;	i -> R16,R17
;	res -> R18,R19
;	type -> R21
;	channel -> Y+8
;	*cnfgStrc -> Y+6
	__GETWRN 18,19,0
	LDI  R21,0
	LDD  R30,Y+12
	ANDI R30,LOW(0xF0)
	MOV  R21,R30
; 000B 0025 
; 000B 0026 
; 000B 0027     switch( type ){
	MOV  R30,R21
	CALL SUBOPT_0x37
; 000B 0028         case CONF_PROPERTIES    :   cnfgStrc = malloc (sizeof(struct prop_cnfg_st));
	BREQ PC+3
	JMP _0x160013
	CALL SUBOPT_0xE1
	CALL SUBOPT_0x1A5
; 000B 0029                                     if(cnfgStrc == NULL){
	BRNE _0x160014
; 000B 002A                                         printDebug("<configRead> CONF_PROPERTIES malloc1 failed (%d bytes)\r\n",sizeof(struct prop_cnfg_st));
	__POINTD1FN _0x160000,53
	CALL __PUTPARD1
	__GETD1N 0xA1
	CALL SUBOPT_0x174
; 000B 002B                                         return -2;
	LDI  R30,LOW(65534)
	LDI  R31,HIGH(65534)
	RJMP _0x20E005F
; 000B 002C                                     }
; 000B 002D 
; 000B 002E                                     res = getPropertiesConfig((struct prop_cnfg_st *) cnfgStrc);
_0x160014:
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	CALL _getPropertiesConfig
	MOVW R18,R30
; 000B 002F                                     if(res < 0){
	TST  R19
	BRPL _0x160015
; 000B 0030                                         printDebug("<configRead> getPropertiesConfig() failed\r\n");
	__POINTD1FN _0x160000,110
	CALL SUBOPT_0x2
; 000B 0031                                         free ( cnfgStrc );
	CALL SUBOPT_0x146
; 000B 0032                                         return -3;
	LDI  R30,LOW(65533)
	LDI  R31,HIGH(65533)
	RJMP _0x20E005F
; 000B 0033                                     }
; 000B 0034 
; 000B 0035                                     printDebug("\r\n--- READ CONF_PROPERTIES ---\r\n");
_0x160015:
	__POINTD1FN _0x160000,154
	CALL SUBOPT_0x2
; 000B 0036                                     printDebug("%s\r\n",((struct prop_cnfg_st *)cnfgStrc)->deviceType);
	CALL SUBOPT_0x1A6
	CALL SUBOPT_0xDD
	CALL SUBOPT_0x10
; 000B 0037                                     printDebug("%s\r\n",((struct prop_cnfg_st *)cnfgStrc)->firmwareVersion);
	CALL SUBOPT_0x1A6
	ADIW R30,20
	CALL SUBOPT_0xDD
	CALL SUBOPT_0x10
; 000B 0038                                     printDebug("%s\r\n",((struct prop_cnfg_st *)cnfgStrc)->deviceName);
	CALL SUBOPT_0x1A6
	ADIW R30,40
	CALL SUBOPT_0xDD
	CALL SUBOPT_0x10
; 000B 0039                                     printDebug("%s\r\n",((struct prop_cnfg_st *)cnfgStrc)->deviceID);
	CALL SUBOPT_0x1A6
	SUBI R30,LOW(-80)
	SBCI R31,HIGH(-80)
	CALL SUBOPT_0xDD
	CALL SUBOPT_0x10
; 000B 003A                                     printDebug("%s\r\n",((struct prop_cnfg_st *)cnfgStrc)->hostName);
	CALL SUBOPT_0x1A6
	SUBI R30,LOW(-100)
	SBCI R31,HIGH(-100)
	CALL SUBOPT_0xDD
	CALL SUBOPT_0x10
; 000B 003B                                     printDebug("%s\r\n",((struct prop_cnfg_st *)cnfgStrc)->hostID);
	CALL SUBOPT_0x1A6
	SUBI R30,LOW(-140)
	SBCI R31,HIGH(-140)
	CALL SUBOPT_0xDD
	CALL SUBOPT_0x10
; 000B 003C                                     printDebug("%d\r\n",(signed char) (((struct prop_cnfg_st *)cnfgStrc)->timeZone));
	__POINTD1FN _0x160000,192
	CALL SUBOPT_0x10F
	SUBI R26,LOW(-160)
	SBCI R27,HIGH(-160)
	LD   R30,X
	CALL __CBD1
	CALL SUBOPT_0x174
; 000B 003D 
; 000B 003E //                                    printDebug("\r\n--- cnfgStrc ---\r\n");
; 000B 003F //                                    print_payload((char *)cnfgStrc, sizeof(struct prop_cnfg_st));
; 000B 0040 
; 000B 0041                                     memcpy(ptr,(char *) cnfgStrc,sizeof(struct prop_cnfg_st));
	CALL SUBOPT_0x1A7
	CALL SUBOPT_0xE1
	CALL SUBOPT_0x1A8
; 000B 0042 //                                    printDebug("\r\n--- ptr ---\r\n");
; 000B 0043 //                                    print_payload((char *)ptr, sizeof(struct prop_cnfg_st));
; 000B 0044 
; 000B 0045                                     free ( cnfgStrc );
; 000B 0046 
; 000B 0047                                     return sizeof(struct prop_cnfg_st);
	LDI  R30,LOW(161)
	LDI  R31,HIGH(161)
	RJMP _0x20E005F
; 000B 0048 
; 000B 0049         case CONF_OPERATE       :   cnfgStrc = malloc (sizeof(struct oper_cnfg_st));
_0x160013:
	CPI  R30,LOW(0x20)
	LDI  R26,HIGH(0x20)
	CPC  R31,R26
	BREQ PC+3
	JMP _0x160016
	LDI  R26,LOW(8)
	CALL SUBOPT_0x1A9
; 000B 004A                                     if(cnfgStrc == NULL){
	BRNE _0x160017
; 000B 004B                                         printDebug("<configRead> CONF_OPERATE malloc1 failed (%d bytes)\r\n",sizeof(struct oper_cnfg_st));
	__POINTD1FN _0x160000,197
	CALL __PUTPARD1
	__GETD1N 0x8
	CALL SUBOPT_0x174
; 000B 004C                                         return -2;
	LDI  R30,LOW(65534)
	LDI  R31,HIGH(65534)
	RJMP _0x20E005F
; 000B 004D                                     }
; 000B 004E 
; 000B 004F                                     res = getOperatingConfig((struct oper_cnfg_st *) cnfgStrc);
_0x160017:
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	CALL _getOperatingConfig
	MOVW R18,R30
; 000B 0050                                     if(res < 0){
	TST  R19
	BRPL _0x160018
; 000B 0051                                         printDebug("<configRead> getOperatingConfig() failed\r\n");
	__POINTD1FN _0x160000,251
	CALL SUBOPT_0x2
; 000B 0052                                         free ( cnfgStrc );
	CALL SUBOPT_0x146
; 000B 0053                                         return -3;
	LDI  R30,LOW(65533)
	LDI  R31,HIGH(65533)
	RJMP _0x20E005F
; 000B 0054                                     }
; 000B 0055 
; 000B 0056                                     printDebug("\r\n--- READ CONF_OPERATE ---\r\n");
_0x160018:
	__POINTD1FN _0x160000,294
	CALL SUBOPT_0x2
; 000B 0057                                     printDebug("mode            [0x%02X]\r\n",((struct oper_cnfg_st *)cnfgStrc)->mode);
	__POINTD1FN _0x160000,324
	CALL SUBOPT_0x10F
	LD   R30,X
	CALL SUBOPT_0x27
; 000B 0058                                     printDebug("deviceEnable    [0x%02X]\r\n",((struct oper_cnfg_st *)cnfgStrc)->deviceEnable);
	__POINTD1FN _0x160000,351
	CALL SUBOPT_0x110
	LDD  R30,Z+1
	CALL SUBOPT_0x27
; 000B 0059                                     printDebug("alarmEnable     [0x%02X]\r\n",((struct oper_cnfg_st *)cnfgStrc)->alarmEnable);
	CALL SUBOPT_0x1AA
	LDD  R30,Z+2
	CALL SUBOPT_0x27
; 000B 005A                                     printDebug("sensorEnable    ");
	__POINTD1FN _0x160000,405
	CALL SUBOPT_0x2
; 000B 005B                                     for(i=0;i<MAX_SENS_CHANNEL;i++){
	__GETWRN 16,17,0
_0x16001A:
	__CPWRN 16,17,5
	BRGE _0x16001B
; 000B 005C                                         printDebug("[0x%02X]",((struct oper_cnfg_st *)cnfgStrc)->sensorEnable[i]);
	CALL SUBOPT_0x1AB
	CALL SUBOPT_0xF0
; 000B 005D                                         if(i == (MAX_SENS_CHANNEL-1)){
	LDI  R30,LOW(4)
	LDI  R31,HIGH(4)
	CP   R30,R16
	CPC  R31,R17
	BRNE _0x16001C
; 000B 005E                                             printDebug("\r\n");
	CALL SUBOPT_0x1AC
; 000B 005F                                         }
; 000B 0060                                     }
_0x16001C:
	__ADDWRN 16,17,1
	RJMP _0x16001A
_0x16001B:
; 000B 0061 
; 000B 0062 //                                    printDebug("\r\n--- cnfgStrc ---\r\n");
; 000B 0063 //                                    print_payload((char *)cnfgStrc, sizeof(struct oper_cnfg_st));
; 000B 0064 
; 000B 0065                                     memcpy(ptr,(char *) cnfgStrc,sizeof(struct oper_cnfg_st));
	CALL SUBOPT_0x1A7
	LDI  R26,LOW(8)
	CALL SUBOPT_0x1AD
; 000B 0066 //                                    printDebug("\r\n--- ptr ---\r\n");
; 000B 0067 //                                    print_payload((char *)ptr, sizeof(struct oper_cnfg_st));
; 000B 0068 
; 000B 0069                                     free ( cnfgStrc );
; 000B 006A 
; 000B 006B                                     return sizeof(struct oper_cnfg_st);
	LDI  R30,LOW(8)
	LDI  R31,HIGH(8)
	RJMP _0x20E005F
; 000B 006C 
; 000B 006D         case CONF_SENSOR        :   channel =   (int)cnfg & 0x000F;
_0x160016:
	CPI  R30,LOW(0x30)
	LDI  R26,HIGH(0x30)
	CPC  R31,R26
	BREQ PC+3
	JMP _0x16001D
	CALL SUBOPT_0x1AE
; 000B 006E 
; 000B 006F                                     cnfgStrc = malloc (sizeof(struct sens_cnfg_st));
	LDI  R26,LOW(29)
	CALL SUBOPT_0x1A9
; 000B 0070                                     if(cnfgStrc == NULL){
	BRNE _0x16001E
; 000B 0071                                         printDebug("<configRead> CONF_SENSOR malloc1 failed (%d bytes)\r\n",sizeof(struct sens_cnfg_st));
	__POINTD1FN _0x160000,431
	CALL __PUTPARD1
	__GETD1N 0x1D
	CALL SUBOPT_0x174
; 000B 0072                                         return -2;
	LDI  R30,LOW(65534)
	LDI  R31,HIGH(65534)
	RJMP _0x20E005F
; 000B 0073                                     }
; 000B 0074 
; 000B 0075                                     res = getSensorConfig(channel, (struct sens_cnfg_st *) cnfgStrc);
_0x16001E:
	CALL SUBOPT_0x17D
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	CALL _getSensorConfig
	MOVW R18,R30
; 000B 0076                                     if(res < 0){
	TST  R19
	BRPL _0x16001F
; 000B 0077                                         printDebug("<configRead> getSensorConfig() failed\r\n");
	__POINTD1FN _0x160000,484
	CALL SUBOPT_0x2
; 000B 0078                                         free ( cnfgStrc );
	CALL SUBOPT_0x146
; 000B 0079                                         return -3;
	LDI  R30,LOW(65533)
	LDI  R31,HIGH(65533)
	RJMP _0x20E005F
; 000B 007A                                     }
; 000B 007B 
; 000B 007C                                     printDebug("\r\n--- READ CONF_SENSOR [%d]---\r\n",channel);
_0x16001F:
	__POINTD1FN _0x160000,524
	CALL SUBOPT_0x1AF
; 000B 007D                                     printDebug("samplingRate    [%d]\r\n",      ((struct sens_cnfg_st *)cnfgStrc)->samplingRate);
	__POINTD1FN _0x160000,557
	CALL SUBOPT_0x10F
	CALL SUBOPT_0x1C
	CALL SUBOPT_0x174
; 000B 007E                                     printDebug("reOccurrence    [0x%04X]\r\n",  ((struct sens_cnfg_st *)cnfgStrc)->reOccurrence);
	__POINTD1FN _0x160000,580
	CALL SUBOPT_0x10F
	ADIW R26,2
	CALL SUBOPT_0x1C
	CALL SUBOPT_0x174
; 000B 007F                                     printDebug("timeStartHour   [%d]\r\n",      ((struct sens_cnfg_st *)cnfgStrc)->timeStartHour);
	__POINTD1FN _0x160000,607
	CALL SUBOPT_0x110
	LDD  R30,Z+4
	CALL SUBOPT_0x27
; 000B 0080                                     printDebug("timeStartMin    [%d]\r\n",      ((struct sens_cnfg_st *)cnfgStrc)->timeStartMin);
	__POINTD1FN _0x160000,630
	CALL SUBOPT_0x110
	LDD  R30,Z+5
	CALL SUBOPT_0x27
; 000B 0081                                     printDebug("timeStopHour    [%d]\r\n",      ((struct sens_cnfg_st *)cnfgStrc)->timeStopHour);
	__POINTD1FN _0x160000,653
	CALL SUBOPT_0x110
	LDD  R30,Z+6
	CALL SUBOPT_0x27
; 000B 0082                                     printDebug("timeStopMin     [%d]\r\n",      ((struct sens_cnfg_st *)cnfgStrc)->timeStopMin);
	__POINTD1FN _0x160000,676
	CALL SUBOPT_0x110
	LDD  R30,Z+7
	CALL SUBOPT_0x27
; 000B 0083                                     printDebug("alarmEnable     [0x%02X]\r\n",  ((struct sens_cnfg_st *)cnfgStrc)->alarmEnable);
	CALL SUBOPT_0x1AA
	LDD  R30,Z+8
	CALL SUBOPT_0x27
; 000B 0084                                     printDebug("lowerLimit      [%f]\r\n",      ((struct sens_cnfg_st *)cnfgStrc)->lowerLimit);
	__POINTD1FN _0x160000,699
	CALL SUBOPT_0x110
	CALL SUBOPT_0x185
	CALL SUBOPT_0x184
; 000B 0085                                     printDebug("lowerDelay      [%d]\r\n",      ((struct sens_cnfg_st *)cnfgStrc)->lowerDelay);
	__POINTD1FN _0x160000,722
	CALL SUBOPT_0x10F
	ADIW R26,13
	CALL SUBOPT_0x1C
	CALL SUBOPT_0x174
; 000B 0086                                     printDebug("lowerExtreme    [%f]\r\n",      ((struct sens_cnfg_st *)cnfgStrc)->lowerExtreme);
	__POINTD1FN _0x160000,745
	CALL SUBOPT_0x110
	__GETD2Z 15
	CALL SUBOPT_0x184
; 000B 0087                                     printDebug("upperLimit      [%f]\r\n",      ((struct sens_cnfg_st *)cnfgStrc)->upperLimit);
	__POINTD1FN _0x160000,768
	CALL SUBOPT_0x110
	__GETD2Z 19
	CALL SUBOPT_0x184
; 000B 0088                                     printDebug("upperDelay      [%d]\r\n",      ((struct sens_cnfg_st *)cnfgStrc)->upperDelay);
	__POINTD1FN _0x160000,791
	CALL SUBOPT_0x10F
	ADIW R26,23
	CALL SUBOPT_0x1C
	CALL SUBOPT_0x174
; 000B 0089                                     printDebug("upperExtreme    [%f]\r\n",      ((struct sens_cnfg_st *)cnfgStrc)->upperExtreme);
	__POINTD1FN _0x160000,814
	CALL SUBOPT_0x110
	__GETD2Z 25
	CALL SUBOPT_0x184
; 000B 008A 
; 000B 008B //                                    printDebug("\r\n--- cnfgStrc ---\r\n");
; 000B 008C //                                    print_payload((char *)cnfgStrc, sizeof(struct sens_cnfg_st));
; 000B 008D 
; 000B 008E                                     memcpy(ptr,(char *) cnfgStrc,sizeof(struct sens_cnfg_st));
	CALL SUBOPT_0x1A7
	LDI  R26,LOW(29)
	CALL SUBOPT_0x1AD
; 000B 008F //                                    printDebug("\r\n--- ptr ---\r\n");
; 000B 0090 //                                    print_payload((char *)ptr, sizeof(struct sens_cnfg_st));
; 000B 0091 
; 000B 0092                                     free ( cnfgStrc );
; 000B 0093 
; 000B 0094                                     return sizeof(struct sens_cnfg_st);
	LDI  R30,LOW(29)
	LDI  R31,HIGH(29)
	RJMP _0x20E005F
; 000B 0095 
; 000B 0096         case CONF_AUXDI         :   channel =   (int)cnfg & 0x000F;
_0x16001D:
	CPI  R30,LOW(0x40)
	LDI  R26,HIGH(0x40)
	CPC  R31,R26
	BREQ PC+3
	JMP _0x160020
	CALL SUBOPT_0x1AE
; 000B 0097 
; 000B 0098                                     cnfgStrc = malloc (sizeof(struct din_cnfg_st));
	CALL SUBOPT_0x68
	CALL SUBOPT_0x1A5
; 000B 0099                                     if(cnfgStrc == NULL){
	BRNE _0x160021
; 000B 009A                                         printDebug("<configRead> CONF_AUXDI malloc1 failed (%d bytes)\r\n",sizeof(struct din_cnfg_st));
	__POINTD1FN _0x160000,837
	CALL SUBOPT_0x1B0
; 000B 009B                                         return -2;
	LDI  R30,LOW(65534)
	LDI  R31,HIGH(65534)
	RJMP _0x20E005F
; 000B 009C                                     }
; 000B 009D 
; 000B 009E                                     res = getAuxDinConfig(channel, (struct din_cnfg_st *) cnfgStrc);
_0x160021:
	CALL SUBOPT_0x17D
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	CALL _getAuxDinConfig
	MOVW R18,R30
; 000B 009F                                     if(res < 0){
	TST  R19
	BRPL _0x160022
; 000B 00A0                                         printDebug("<configRead> getAuxDinConfig() failed\r\n");
	__POINTD1FN _0x160000,889
	CALL SUBOPT_0x2
; 000B 00A1                                         free ( cnfgStrc );
	CALL SUBOPT_0x146
; 000B 00A2                                         return -3;
	LDI  R30,LOW(65533)
	LDI  R31,HIGH(65533)
	RJMP _0x20E005F
; 000B 00A3                                     }
; 000B 00A4 
; 000B 00A5                                     printDebug("\r\n--- READ CONF_AUXDI [%d]---\r\n",channel);
_0x160022:
	__POINTD1FN _0x160000,929
	CALL SUBOPT_0x1AF
; 000B 00A6                                     printDebug("channelEnable    [0x%02X]\r\n", ((struct din_cnfg_st *)cnfgStrc)->channelEnable);
	CALL SUBOPT_0x1B1
	LD   R30,X
	CALL SUBOPT_0x27
; 000B 00A7                                     printDebug("alarmDelay       [%d]\r\n",     ((struct din_cnfg_st *)cnfgStrc)->alarmDelay);
	__POINTD1FN _0x160000,989
	CALL SUBOPT_0x10F
	ADIW R26,1
	CALL SUBOPT_0x1C
	CALL SUBOPT_0x174
; 000B 00A8 
; 000B 00A9 //                                    printDebug("\r\n--- cnfgStrc ---\r\n");
; 000B 00AA //                                    print_payload((char *)cnfgStrc, sizeof(struct din_cnfg_st));
; 000B 00AB 
; 000B 00AC                                     memcpy(ptr,(char *) cnfgStrc,sizeof(struct din_cnfg_st));
	CALL SUBOPT_0x1A7
	CALL SUBOPT_0x68
	CALL SUBOPT_0x1A8
; 000B 00AD //                                    printDebug("\r\n--- ptr ---\r\n");
; 000B 00AE //                                    print_payload((char *)ptr, sizeof(struct din_cnfg_st));
; 000B 00AF 
; 000B 00B0                                     free ( cnfgStrc );
; 000B 00B1 
; 000B 00B2                                     return sizeof(struct din_cnfg_st);
	LDI  R30,LOW(3)
	LDI  R31,HIGH(3)
	RJMP _0x20E005F
; 000B 00B3 
; 000B 00B4         case CONF_AUXDO         :   channel =   (int)cnfg & 0x000F;
_0x160020:
	CPI  R30,LOW(0x50)
	LDI  R26,HIGH(0x50)
	CPC  R31,R26
	BREQ PC+3
	JMP _0x160023
	CALL SUBOPT_0x1AE
; 000B 00B5 
; 000B 00B6                                     cnfgStrc = malloc (sizeof(struct dout_cnfg_st));
	LDI  R26,LOW(38)
	CALL SUBOPT_0x1A9
; 000B 00B7                                     if(cnfgStrc == NULL){
	BRNE _0x160024
; 000B 00B8                                         printDebug("<configRead> CONF_AUXDO malloc1 failed (%d bytes)\r\n",sizeof(struct dout_cnfg_st));
	__POINTD1FN _0x160000,1013
	CALL __PUTPARD1
	__GETD1N 0x26
	CALL SUBOPT_0x174
; 000B 00B9                                         return -2;
	LDI  R30,LOW(65534)
	LDI  R31,HIGH(65534)
	RJMP _0x20E005F
; 000B 00BA                                     }
; 000B 00BB 
; 000B 00BC                                     res = getAuxDoutConfig(channel, (struct dout_cnfg_st *) cnfgStrc);
_0x160024:
	CALL SUBOPT_0x17D
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	CALL _getAuxDoutConfig
	MOVW R18,R30
; 000B 00BD                                     if(res < 0){
	TST  R19
	BRPL _0x160025
; 000B 00BE                                         printDebug("<configRead> getAuxDoutConfig() failed\r\n");
	__POINTD1FN _0x160000,1065
	CALL SUBOPT_0x2
; 000B 00BF                                         free ( cnfgStrc );
	CALL SUBOPT_0x146
; 000B 00C0                                         return -3;
	LDI  R30,LOW(65533)
	LDI  R31,HIGH(65533)
	RJMP _0x20E005F
; 000B 00C1                                     }
; 000B 00C2 
; 000B 00C3                                     printDebug("\r\n--- READ CONF_AUXDO [%d]---\r\n",channel);
_0x160025:
	__POINTD1FN _0x160000,1106
	CALL SUBOPT_0x1AF
; 000B 00C4                                     printDebug("channelEnable     [0x%02X]\r\n",    ((struct dout_cnfg_st *)cnfgStrc)->channelEnable);
	CALL SUBOPT_0x1B2
	LD   R30,X
	CALL SUBOPT_0x27
; 000B 00C5                                     printDebug("stateOnEvent      [%d]\r\n",        ((struct dout_cnfg_st *)cnfgStrc)->stateOnEvent);
	__POINTD1FN _0x160000,1167
	CALL SUBOPT_0x110
	LDD  R30,Z+1
	CALL SUBOPT_0x27
; 000B 00C6                                     printDebug("eventSourceNumber [%d]\r\n",        ((struct dout_cnfg_st *)cnfgStrc)->eventSourceNumber);
	CALL SUBOPT_0x1B3
	LDD  R30,Z+2
	CALL SUBOPT_0x27
; 000B 00C7 
; 000B 00C8                                     printDebug("eventSource       ");
	CALL SUBOPT_0x1B4
; 000B 00C9                                     for(i=0;i<MAX_EVENT_SOURCE;i++){
	__GETWRN 16,17,0
_0x160027:
	__CPWRN 16,17,35
	BRGE _0x160028
; 000B 00CA                                         printDebug("[0x%02X]",((struct dout_cnfg_st *)cnfgStrc)->eventSource[i]);
	CALL SUBOPT_0x1AB
	CALL SUBOPT_0xF0
; 000B 00CB                                         if(i == (MAX_EVENT_SOURCE-1)){
	CALL SUBOPT_0x1B5
	BRNE _0x160029
; 000B 00CC                                             printDebug("\r\n");
	CALL SUBOPT_0x1AC
; 000B 00CD                                         }
; 000B 00CE                                     }
_0x160029:
	__ADDWRN 16,17,1
	RJMP _0x160027
_0x160028:
; 000B 00CF 
; 000B 00D0 //                                    printDebug("\r\n--- cnfgStrc ---\r\n");
; 000B 00D1 //                                    print_payload((char *)cnfgStrc, sizeof(struct dout_cnfg_st));
; 000B 00D2 
; 000B 00D3                                     memcpy(ptr,(char *) cnfgStrc,sizeof(struct dout_cnfg_st));
	CALL SUBOPT_0x1A7
	LDI  R26,LOW(38)
	CALL SUBOPT_0x1AD
; 000B 00D4 //                                    printDebug("\r\n--- ptr ---\r\n");
; 000B 00D5 //                                    print_payload((char *)ptr, sizeof(struct dout_cnfg_st));
; 000B 00D6 
; 000B 00D7                                     free ( cnfgStrc );
; 000B 00D8 
; 000B 00D9                                     return sizeof(struct dout_cnfg_st);
	LDI  R30,LOW(38)
	LDI  R31,HIGH(38)
	RJMP _0x20E005F
; 000B 00DA 
; 000B 00DB         case CONF_AUXAI         :   channel =   (int)cnfg & 0x000F;
_0x160023:
	CPI  R30,LOW(0x60)
	LDI  R26,HIGH(0x60)
	CPC  R31,R26
	BREQ PC+3
	JMP _0x16002A
	CALL SUBOPT_0x1AE
; 000B 00DC 
; 000B 00DD                                     cnfgStrc = malloc (sizeof(struct ain_cnfg_st));
	LDI  R26,LOW(5)
	CALL SUBOPT_0x1A9
; 000B 00DE                                     if(cnfgStrc == NULL){
	BRNE _0x16002B
; 000B 00DF                                         printDebug("<configRead> CONF_AUXAI malloc1 failed (%d bytes)\r\n",sizeof(struct ain_cnfg_st));
	__POINTD1FN _0x160000,1236
	CALL __PUTPARD1
	__GETD1N 0x5
	CALL SUBOPT_0x174
; 000B 00E0                                         return -2;
	LDI  R30,LOW(65534)
	LDI  R31,HIGH(65534)
	RJMP _0x20E005F
; 000B 00E1                                     }
; 000B 00E2 
; 000B 00E3                                     res = getAuxAinConfig(channel, (struct ain_cnfg_st *) cnfgStrc);
_0x16002B:
	CALL SUBOPT_0x17D
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	CALL _getAuxAinConfig
	MOVW R18,R30
; 000B 00E4                                     if(res < 0){
	TST  R19
	BRPL _0x16002C
; 000B 00E5                                         printDebug("<configRead> getAuxAinConfig() failed\r\n");
	__POINTD1FN _0x160000,1288
	CALL SUBOPT_0x2
; 000B 00E6                                         free ( cnfgStrc );
	CALL SUBOPT_0x146
; 000B 00E7                                         return -3;
	LDI  R30,LOW(65533)
	LDI  R31,HIGH(65533)
	RJMP _0x20E005F
; 000B 00E8                                     }
; 000B 00E9 
; 000B 00EA                                     printDebug("\r\n--- READ CONF_AUXAI [%d]---\r\n",channel);
_0x16002C:
	__POINTD1FN _0x160000,1328
	CALL SUBOPT_0x1AF
; 000B 00EB                                     printDebug("channelEnable    [0x%02X]\r\n", ((struct ain_cnfg_st *)cnfgStrc)->channelEnable);
	CALL SUBOPT_0x1B1
	LD   R30,X
	CALL SUBOPT_0x27
; 000B 00EC                                     printDebug("alarmDelay       [%f]\r\n",     ((struct ain_cnfg_st *)cnfgStrc)->alarmLevel);
	__POINTD1FN _0x160000,1360
	CALL SUBOPT_0x110
	CALL SUBOPT_0x1B6
; 000B 00ED 
; 000B 00EE //                                    printDebug("\r\n--- cnfgStrc ---\r\n");
; 000B 00EF //                                    print_payload((char *)cnfgStrc, sizeof(struct ain_cnfg_st));
; 000B 00F0 
; 000B 00F1                                     memcpy(ptr,(char *) cnfgStrc,sizeof(struct ain_cnfg_st));
	CALL SUBOPT_0x1A7
	LDI  R26,LOW(5)
	CALL SUBOPT_0x1AD
; 000B 00F2 //                                    printDebug("\r\n--- ptr ---\r\n");
; 000B 00F3 //                                    print_payload((char *)ptr, sizeof(struct ain_cnfg_st));
; 000B 00F4 
; 000B 00F5                                     free ( cnfgStrc );
; 000B 00F6 
; 000B 00F7                                     return sizeof(struct ain_cnfg_st);
	LDI  R30,LOW(5)
	LDI  R31,HIGH(5)
	RJMP _0x20E005F
; 000B 00F8 
; 000B 00F9         case CONF_AUXAO         :   channel =   (int)cnfg & 0x000F;
_0x16002A:
	CPI  R30,LOW(0x70)
	LDI  R26,HIGH(0x70)
	CPC  R31,R26
	BREQ PC+3
	JMP _0x16002D
	CALL SUBOPT_0x1AE
; 000B 00FA 
; 000B 00FB                                     cnfgStrc = malloc (sizeof(struct aout_cnfg_st));
	LDI  R26,LOW(41)
	CALL SUBOPT_0x1A9
; 000B 00FC                                     if(cnfgStrc == NULL){
	BRNE _0x16002E
; 000B 00FD                                         printDebug("<configRead> CONF_AUXAO malloc1 failed (%d bytes)\r\n",sizeof(struct aout_cnfg_st));
	__POINTD1FN _0x160000,1384
	CALL __PUTPARD1
	__GETD1N 0x29
	CALL SUBOPT_0x174
; 000B 00FE                                         return -2;
	LDI  R30,LOW(65534)
	LDI  R31,HIGH(65534)
	RJMP _0x20E005F
; 000B 00FF                                     }
; 000B 0100 
; 000B 0101                                     res = getAuxAoutConfig(channel, (struct aout_cnfg_st *) cnfgStrc);
_0x16002E:
	CALL SUBOPT_0x17D
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	CALL _getAuxAoutConfig
	MOVW R18,R30
; 000B 0102                                     if(res < 0){
	TST  R19
	BRPL _0x16002F
; 000B 0103                                         printDebug("<configRead> getAuxAoutConfig() failed\r\n");
	__POINTD1FN _0x160000,1436
	CALL SUBOPT_0x2
; 000B 0104                                         free ( cnfgStrc );
	CALL SUBOPT_0x146
; 000B 0105                                         return -3;
	LDI  R30,LOW(65533)
	LDI  R31,HIGH(65533)
	RJMP _0x20E005F
; 000B 0106                                     }
; 000B 0107 
; 000B 0108                                     printDebug("\r\n--- READ CONF_AUXAO [%d]---\r\n",channel);
_0x16002F:
	__POINTD1FN _0x160000,1477
	CALL SUBOPT_0x1AF
; 000B 0109                                     printDebug("channelEnable     [0x%02X]\r\n",    ((struct aout_cnfg_st *)cnfgStrc)->channelEnable);
	CALL SUBOPT_0x1B2
	LD   R30,X
	CALL SUBOPT_0x27
; 000B 010A                                     printDebug("levelOnEvent      [%f]\r\n",        ((struct aout_cnfg_st *)cnfgStrc)->levelOnEvent);
	__POINTD1FN _0x160000,1509
	CALL SUBOPT_0x110
	CALL SUBOPT_0x1B6
; 000B 010B                                     printDebug("eventSourceNumber [%d]\r\n",        ((struct aout_cnfg_st *)cnfgStrc)->eventSourceNumber);
	CALL SUBOPT_0x1B3
	LDD  R30,Z+5
	CALL SUBOPT_0x27
; 000B 010C 
; 000B 010D                                     printDebug("eventSource       ");
	CALL SUBOPT_0x1B4
; 000B 010E                                     for(i=0;i<MAX_EVENT_SOURCE;i++){
	__GETWRN 16,17,0
_0x160031:
	__CPWRN 16,17,35
	BRGE _0x160032
; 000B 010F                                         printDebug("[0x%02X]",((struct aout_cnfg_st *)cnfgStrc)->eventSource[i]);
	CALL SUBOPT_0x1AB
	ADIW R30,6
	ADD  R30,R16
	ADC  R31,R17
	LD   R30,Z
	CALL SUBOPT_0x27
; 000B 0110                                         if(i == (MAX_EVENT_SOURCE-1)){
	CALL SUBOPT_0x1B5
	BRNE _0x160033
; 000B 0111                                             printDebug("\r\n");
	CALL SUBOPT_0x1AC
; 000B 0112                                         }
; 000B 0113                                     }
_0x160033:
	__ADDWRN 16,17,1
	RJMP _0x160031
_0x160032:
; 000B 0114 
; 000B 0115 //                                    printDebug("\r\n--- cnfgStrc ---\r\n");
; 000B 0116 //                                    print_payload((char *)cnfgStrc, sizeof(struct aout_cnfg_st));
; 000B 0117 
; 000B 0118                                     memcpy(ptr,(char *) cnfgStrc,sizeof(struct aout_cnfg_st));
	CALL SUBOPT_0x1A7
	LDI  R26,LOW(41)
	CALL SUBOPT_0x1AD
; 000B 0119 //                                    printDebug("\r\n--- ptr ---\r\n");
; 000B 011A //                                    print_payload((char *)ptr, sizeof(struct aout_cnfg_st));
; 000B 011B 
; 000B 011C                                     free ( cnfgStrc );
; 000B 011D 
; 000B 011E                                     return sizeof(struct aout_cnfg_st);
	LDI  R30,LOW(41)
	LDI  R31,HIGH(41)
	RJMP _0x20E005F
; 000B 011F 
; 000B 0120         case CONF_BUZZER        :   cnfgStrc = malloc (sizeof(struct buzz_cnfg_st));
_0x16002D:
	CPI  R30,LOW(0x80)
	LDI  R26,HIGH(0x80)
	CPC  R31,R26
	BREQ PC+3
	JMP _0x160034
	LDI  R26,LOW(37)
	CALL SUBOPT_0x1A9
; 000B 0121                                     if(cnfgStrc == NULL){
	BRNE _0x160035
; 000B 0122                                         printDebug("<configRead> CONF_BUZZER malloc1 failed (%d bytes)\r\n",sizeof(struct buzz_cnfg_st));
	__POINTD1FN _0x160000,1534
	CALL __PUTPARD1
	__GETD1N 0x25
	CALL SUBOPT_0x174
; 000B 0123                                         return -2;
	LDI  R30,LOW(65534)
	LDI  R31,HIGH(65534)
	RJMP _0x20E005F
; 000B 0124                                     }
; 000B 0125 
; 000B 0126                                     res = getBuzzerConfig((struct buzz_cnfg_st *) cnfgStrc);
_0x160035:
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	CALL _getBuzzerConfig
	MOVW R18,R30
; 000B 0127                                     if(res < 0){
	TST  R19
	BRPL _0x160036
; 000B 0128                                         printDebug("<configRead> getBuzzerConfig() failed\r\n");
	__POINTD1FN _0x160000,1587
	CALL SUBOPT_0x2
; 000B 0129                                         free ( cnfgStrc );
	CALL SUBOPT_0x146
; 000B 012A                                         return -3;
	LDI  R30,LOW(65533)
	LDI  R31,HIGH(65533)
	RJMP _0x20E005F
; 000B 012B                                     }
; 000B 012C 
; 000B 012D                                     printDebug("\r\n--- READ CONF_BUZZER ---\r\n");
_0x160036:
	__POINTD1FN _0x160000,1627
	CALL SUBOPT_0x2
; 000B 012E                                     printDebug("enable            [0x%02X]\r\n",    ((struct buzz_cnfg_st *)cnfgStrc)->enable);
	__POINTD1FN _0x160000,1656
	CALL SUBOPT_0x10F
	LD   R30,X
	CALL SUBOPT_0x27
; 000B 012F                                     printDebug("eventSourceNumber [%d]\r\n",        ((struct buzz_cnfg_st *)cnfgStrc)->eventSourceNumber);
	CALL SUBOPT_0x1B3
	LDD  R30,Z+1
	CALL SUBOPT_0x27
; 000B 0130 
; 000B 0131                                     printDebug("eventSource       ");
	CALL SUBOPT_0x1B4
; 000B 0132                                     for(i=0;i<MAX_EVENT_SOURCE;i++){
	__GETWRN 16,17,0
_0x160038:
	__CPWRN 16,17,35
	BRGE _0x160039
; 000B 0133                                         printDebug("[0x%02X]",((struct buzz_cnfg_st *)cnfgStrc)->eventSource[i]);
	CALL SUBOPT_0x1AB
	CALL SUBOPT_0x112
	CALL SUBOPT_0x27
; 000B 0134                                         if(i == (MAX_EVENT_SOURCE - 1)){
	CALL SUBOPT_0x1B5
	BRNE _0x16003A
; 000B 0135                                             printDebug("\r\n");
	CALL SUBOPT_0x1AC
; 000B 0136                                         }
; 000B 0137                                     }
_0x16003A:
	__ADDWRN 16,17,1
	RJMP _0x160038
_0x160039:
; 000B 0138 
; 000B 0139 //                                    printDebug("\r\n--- cnfgStrc ---\r\n");
; 000B 013A //                                    print_payload((char *)cnfgStrc, sizeof(struct buzz_cnfg_st));
; 000B 013B 
; 000B 013C                                     memcpy(ptr,(char *) cnfgStrc,sizeof(struct buzz_cnfg_st));
	CALL SUBOPT_0x1A7
	LDI  R26,LOW(37)
	CALL SUBOPT_0x1AD
; 000B 013D //                                    printDebug("\r\n--- ptr ---\r\n");
; 000B 013E //                                    print_payload((char *)ptr, sizeof(struct buzz_cnfg_st));
; 000B 013F 
; 000B 0140                                     free ( cnfgStrc );
; 000B 0141 
; 000B 0142                                     return sizeof(struct buzz_cnfg_st);
	LDI  R30,LOW(37)
	LDI  R31,HIGH(37)
	RJMP _0x20E005F
; 000B 0143 
; 000B 0144         case CONF_ENVALARM      :   cnfgStrc = malloc (sizeof(struct alm_cnfg_st));
_0x160034:
	CPI  R30,LOW(0x90)
	LDI  R26,HIGH(0x90)
	CPC  R31,R26
	BREQ PC+3
	JMP _0x16003B
	LDI  R26,LOW(18)
	CALL SUBOPT_0x1A9
; 000B 0145                                     if(cnfgStrc == NULL){
	BRNE _0x16003C
; 000B 0146                                         printDebug("<configRead> CONF_ENVALARM malloc1 failed (%d bytes)\r\n",sizeof(struct alm_cnfg_st));
	__POINTD1FN _0x160000,1685
	CALL __PUTPARD1
	__GETD1N 0x12
	CALL SUBOPT_0x174
; 000B 0147                                         return -2;
	LDI  R30,LOW(65534)
	LDI  R31,HIGH(65534)
	RJMP _0x20E005F
; 000B 0148                                     }
; 000B 0149 
; 000B 014A                                     res = getEnvAlarmConfig((struct alm_cnfg_st *) cnfgStrc);
_0x16003C:
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	CALL _getEnvAlarmConfig
	MOVW R18,R30
; 000B 014B                                     if(res < 0){
	TST  R19
	BRPL _0x16003D
; 000B 014C                                         printDebug("<configRead> getEnvAlarmConfig() failed\r\n");
	__POINTD1FN _0x160000,1740
	CALL SUBOPT_0x2
; 000B 014D                                         free ( cnfgStrc );
	CALL SUBOPT_0x146
; 000B 014E                                         return -3;
	LDI  R30,LOW(65533)
	LDI  R31,HIGH(65533)
	RJMP _0x20E005F
; 000B 014F                                     }
; 000B 0150 
; 000B 0151                                     printDebug("\r\n--- READ CONF_ENVALARM ---\r\n");
_0x16003D:
	__POINTD1FN _0x160000,1782
	CALL SUBOPT_0x2
; 000B 0152                                     printDebug("gsmRSSILevel      [%f]\r\n",((struct alm_cnfg_st *)cnfgStrc)->gsmRSSILevel);
	__POINTD1FN _0x160000,1813
	CALL SUBOPT_0x10F
	CALL SUBOPT_0x114
; 000B 0153                                     printDebug("gsmCreditBalance  [%d]\r\n",((struct alm_cnfg_st *)cnfgStrc)->gsmCreditBalance);
	__POINTD1FN _0x160000,1838
	CALL SUBOPT_0x10F
	ADIW R26,4
	CALL SUBOPT_0x115
; 000B 0154                                     printDebug("batteryLevel      [%f]\r\n",((struct alm_cnfg_st *)cnfgStrc)->batteryLevel);
	__POINTD1FN _0x160000,1863
	CALL SUBOPT_0x110
	CALL SUBOPT_0x117
; 000B 0155                                     printDebug("commSignalLevel   [%f]\r\n",((struct alm_cnfg_st *)cnfgStrc)->commSignalLevel);
	__POINTD1FN _0x160000,1888
	CALL SUBOPT_0x110
	CALL SUBOPT_0x118
; 000B 0156                                     printDebug("commLostDelay     [%d]\r\n",((struct alm_cnfg_st *)cnfgStrc)->commLostDelay);
	__POINTD1FN _0x160000,1913
	CALL SUBOPT_0x10F
	ADIW R26,14
	CALL SUBOPT_0x115
; 000B 0157                                     printDebug("memoryMin         [%d]\r\n",((struct alm_cnfg_st *)cnfgStrc)->memoryMin);
	__POINTD1FN _0x160000,1938
	CALL SUBOPT_0x10F
	ADIW R26,16
	CALL SUBOPT_0x1C
	CALL SUBOPT_0x174
; 000B 0158 
; 000B 0159 //                                    printDebug("\r\n--- cnfgStrc ---\r\n");
; 000B 015A //                                    print_payload((char *)cnfgStrc, sizeof(struct alm_cnfg_st));
; 000B 015B 
; 000B 015C                                     memcpy(ptr,(char *) cnfgStrc,sizeof(struct alm_cnfg_st));
	CALL SUBOPT_0x1A7
	LDI  R26,LOW(18)
	CALL SUBOPT_0x1AD
; 000B 015D //                                    printDebug("\r\n--- ptr ---\r\n");
; 000B 015E //                                    print_payload((char *)ptr, sizeof(struct alm_cnfg_st));
; 000B 015F 
; 000B 0160                                     free ( cnfgStrc );
; 000B 0161 
; 000B 0162                                     return sizeof(struct alm_cnfg_st);
	LDI  R30,LOW(18)
	LDI  R31,HIGH(18)
	RJMP _0x20E005F
; 000B 0163         case CONF_STATREPORT    :   cnfgStrc = malloc (sizeof(struct stat_cnfg_st));
_0x16003B:
	CPI  R30,LOW(0xA0)
	LDI  R26,HIGH(0xA0)
	CPC  R31,R26
	BREQ PC+3
	JMP _0x160041
	CALL SUBOPT_0x68
	CALL SUBOPT_0x1A5
; 000B 0164                                     if(cnfgStrc == NULL){
	BRNE _0x16003F
; 000B 0165                                         printDebug("<configRead> CONF_STATREPORT malloc1 failed (%d bytes)\r\n",sizeof(struct stat_cnfg_st));
	__POINTD1FN _0x160000,1963
	CALL SUBOPT_0x1B0
; 000B 0166                                         return -2;
	LDI  R30,LOW(65534)
	LDI  R31,HIGH(65534)
	RJMP _0x20E005F
; 000B 0167                                     }
; 000B 0168 
; 000B 0169                                     res = getStatusReportConfig((struct stat_cnfg_st *) cnfgStrc);
_0x16003F:
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	CALL _getStatusReportConfig
	MOVW R18,R30
; 000B 016A                                     if(res < 0){
	TST  R19
	BRPL _0x160040
; 000B 016B                                         printDebug("<configRead> getStatusReportConfig() failed\r\n");
	__POINTD1FN _0x160000,2020
	CALL SUBOPT_0x2
; 000B 016C                                         free ( cnfgStrc );
	CALL SUBOPT_0x146
; 000B 016D                                         return -3;
	LDI  R30,LOW(65533)
	LDI  R31,HIGH(65533)
	RJMP _0x20E005F
; 000B 016E                                     }
; 000B 016F 
; 000B 0170                                     printDebug("\r\n--- READ CONF_STATREPORT ---\r\n");
_0x160040:
	__POINTD1FN _0x160000,2066
	CALL SUBOPT_0x2
; 000B 0171                                     printDebug("accm      [0x%02X]\r\n",((struct stat_cnfg_st *)cnfgStrc)->accm);
	__POINTD1FN _0x160000,2099
	CALL SUBOPT_0x10F
	LD   R30,X
	CALL SUBOPT_0x27
; 000B 0172                                     printDebug("intv      [%d]\r\n",    ((struct stat_cnfg_st *)cnfgStrc)->intv);
	__POINTD1FN _0x160000,2120
	CALL SUBOPT_0x10F
	ADIW R26,1
	CALL SUBOPT_0x1C
	CALL SUBOPT_0x174
; 000B 0173 
; 000B 0174 //                                    printDebug("\r\n--- cnfgStrc ---\r\n");
; 000B 0175 //                                    print_payload((char *)cnfgStrc, sizeof(struct stat_cnfg_st));
; 000B 0176 
; 000B 0177                                     memcpy(ptr,(char *) cnfgStrc,sizeof(struct stat_cnfg_st));
	CALL SUBOPT_0x1A7
	CALL SUBOPT_0x68
	CALL SUBOPT_0x1A8
; 000B 0178 //                                    printDebug("\r\n--- ptr ---\r\n");
; 000B 0179 //                                    print_payload((char *)ptr, sizeof(struct stat_cnfg_st));
; 000B 017A 
; 000B 017B                                     free ( cnfgStrc );
; 000B 017C         default                 :   printDebug("<configRead> unknown configuration type [0x%02X]\r\n",type);
_0x160041:
	CALL SUBOPT_0x1B7
	MOV  R30,R21
	CALL SUBOPT_0x27
; 000B 017D                                     return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
; 000B 017E     }
; 000B 017F 
; 000B 0180     return 0;
_0x20E005F:
	CALL __LOADLOCR6
	ADIW R28,13
	RET
; 000B 0181 
; 000B 0182 }
;/*============================================================*/
;int configWrite(unsigned char cnfg, unsigned char *conf, int len)
; 000B 0185 {
_configWrite:
; 000B 0186     int res = 0;
; 000B 0187     unsigned char   type            = 0x00;
; 000B 0188     int             channel         = 0;
; 000B 0189 
; 000B 018A     type    =   cnfg & 0xF0;
	ST   -Y,R27
	ST   -Y,R26
	CALL SUBOPT_0x36
;	cnfg -> Y+10
;	*conf -> Y+8
;	len -> Y+6
;	res -> R16,R17
;	type -> R19
;	channel -> R20,R21
	LDI  R19,0
	__GETWRN 20,21,0
	LDD  R30,Y+10
	ANDI R30,LOW(0xF0)
	MOV  R19,R30
; 000B 018B 
; 000B 018C     printDebug("\r\n --- WRITE CONFIG packet (%d)--- \r\n",len);
	__POINTD1FN _0x160000,2188
	CALL SUBOPT_0x110
	CALL SUBOPT_0xD5
; 000B 018D     print_payload(conf,len);
	CALL SUBOPT_0x17D
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	CALL _print_payload
; 000B 018E 
; 000B 018F     switch( type ){
	MOV  R30,R19
	CALL SUBOPT_0x37
; 000B 0190         case CONF_PROPERTIES    :   printDebug("\r\n--- Write CONF_PROPERTIES ---");
	BRNE _0x160045
	__POINTD1FN _0x160000,2226
	CALL SUBOPT_0x2
; 000B 0191 
; 000B 0192                                     res = setPropertiesConfig((struct prop_cnfg_st *)conf);
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	CALL _setPropertiesConfig
	MOVW R16,R30
; 000B 0193                                     if(res < 0){
	TST  R17
	BRPL _0x160046
; 000B 0194                                         printDebug("<configWrite> setPropertiesConfig() failed\r\n");
	__POINTD1FN _0x160000,2258
	CALL SUBOPT_0x2
; 000B 0195                                         return -3;
	LDI  R30,LOW(65533)
	LDI  R31,HIGH(65533)
	RJMP _0x20E005E
; 000B 0196                                     }
; 000B 0197                                     break;
_0x160046:
	RJMP _0x160044
; 000B 0198         case CONF_OPERATE       :   printDebug("\r\n--- Write CONF_OPERATE ---");
_0x160045:
	CPI  R30,LOW(0x20)
	LDI  R26,HIGH(0x20)
	CPC  R31,R26
	BRNE _0x160047
	__POINTD1FN _0x160000,2303
	CALL SUBOPT_0x2
; 000B 0199 
; 000B 019A                                     res = setOperatingConfig((struct oper_cnfg_st *)conf);
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	CALL _setOperatingConfig
	MOVW R16,R30
; 000B 019B                                     if(res < 0){
	TST  R17
	BRPL _0x160048
; 000B 019C                                         printDebug("<configWrite> setOperatingConfig() failed\r\n");
	__POINTD1FN _0x160000,2332
	CALL SUBOPT_0x2
; 000B 019D                                         return -3;
	LDI  R30,LOW(65533)
	LDI  R31,HIGH(65533)
	RJMP _0x20E005E
; 000B 019E                                     }
; 000B 019F                                     break;
_0x160048:
	RJMP _0x160044
; 000B 01A0         case CONF_SENSOR        :   channel =   (int)cnfg & 0x000F;
_0x160047:
	CPI  R30,LOW(0x30)
	LDI  R26,HIGH(0x30)
	CPC  R31,R26
	BRNE _0x160049
	CALL SUBOPT_0x1B8
; 000B 01A1                                     printDebug("\r\n--- Write CONF_SENSOR (%d) ---",channel);
	__POINTD1FN _0x160000,2376
	CALL SUBOPT_0x39
; 000B 01A2 
; 000B 01A3                                     res = setSensorConfig(channel,(struct sens_cnfg_st *)conf);
	CALL SUBOPT_0x1B9
	CALL _setSensorConfig
	MOVW R16,R30
; 000B 01A4                                     if(res < 0){
	TST  R17
	BRPL _0x16004A
; 000B 01A5                                         printDebug("<configWrite> setSensorConfig() failed\r\n");
	__POINTD1FN _0x160000,2409
	CALL SUBOPT_0x2
; 000B 01A6                                         return -3;
	LDI  R30,LOW(65533)
	LDI  R31,HIGH(65533)
	RJMP _0x20E005E
; 000B 01A7                                     }
; 000B 01A8                                     break;
_0x16004A:
	RJMP _0x160044
; 000B 01A9         case CONF_AUXDI         :   channel =   (int)cnfg & 0x000F;
_0x160049:
	CPI  R30,LOW(0x40)
	LDI  R26,HIGH(0x40)
	CPC  R31,R26
	BRNE _0x16004B
	CALL SUBOPT_0x1B8
; 000B 01AA                                     printDebug("\r\n--- Write CONF_AUXDI (%d) ---",channel);
	__POINTD1FN _0x160000,2450
	CALL SUBOPT_0x39
; 000B 01AB 
; 000B 01AC                                     res = setAuxDinConfig(channel,(struct din_cnfg_st *)conf);
	CALL SUBOPT_0x1B9
	CALL _setAuxDinConfig
	MOVW R16,R30
; 000B 01AD                                     if(res < 0){
	TST  R17
	BRPL _0x16004C
; 000B 01AE                                         printDebug("<configWrite> setAuxDinConfig() failed\r\n");
	__POINTD1FN _0x160000,2482
	CALL SUBOPT_0x2
; 000B 01AF                                         return -3;
	LDI  R30,LOW(65533)
	LDI  R31,HIGH(65533)
	RJMP _0x20E005E
; 000B 01B0                                     }
; 000B 01B1                                     break;
_0x16004C:
	RJMP _0x160044
; 000B 01B2         case CONF_AUXDO         :   channel =   (int)cnfg & 0x000F;
_0x16004B:
	CPI  R30,LOW(0x50)
	LDI  R26,HIGH(0x50)
	CPC  R31,R26
	BRNE _0x16004D
	CALL SUBOPT_0x1B8
; 000B 01B3                                     printDebug("\r\n--- Write CONF_AUXDO (%d) ---",channel);
	__POINTD1FN _0x160000,2523
	CALL SUBOPT_0x39
; 000B 01B4 
; 000B 01B5                                     res = setAuxDoutConfig(channel,(struct dout_cnfg_st *)conf);
	CALL SUBOPT_0x1B9
	CALL _setAuxDoutConfig
	MOVW R16,R30
; 000B 01B6                                     if(res < 0){
	TST  R17
	BRPL _0x16004E
; 000B 01B7                                         printDebug("<configWrite> setAuxDoutConfig() failed\r\n");
	__POINTD1FN _0x160000,2555
	CALL SUBOPT_0x2
; 000B 01B8                                         return -3;
	LDI  R30,LOW(65533)
	LDI  R31,HIGH(65533)
	RJMP _0x20E005E
; 000B 01B9                                     }
; 000B 01BA                                     break;
_0x16004E:
	RJMP _0x160044
; 000B 01BB         case CONF_AUXAI         :   channel =   (int)cnfg & 0x000F;
_0x16004D:
	CPI  R30,LOW(0x60)
	LDI  R26,HIGH(0x60)
	CPC  R31,R26
	BRNE _0x16004F
	CALL SUBOPT_0x1B8
; 000B 01BC                                     printDebug("\r\n--- Write CONF_AUXAI (%d) ---",channel);
	__POINTD1FN _0x160000,2597
	CALL SUBOPT_0x39
; 000B 01BD 
; 000B 01BE                                     res = setAuxAinConfig(channel,(struct ain_cnfg_st *)conf);
	CALL SUBOPT_0x1B9
	CALL _setAuxAinConfig
	MOVW R16,R30
; 000B 01BF                                     if(res < 0){
	TST  R17
	BRPL _0x160050
; 000B 01C0                                         printDebug("<configWrite> setAuxAinConfig() failed\r\n");
	__POINTD1FN _0x160000,2629
	CALL SUBOPT_0x2
; 000B 01C1                                         return -3;
	LDI  R30,LOW(65533)
	LDI  R31,HIGH(65533)
	RJMP _0x20E005E
; 000B 01C2                                     }
; 000B 01C3                                     break;
_0x160050:
	RJMP _0x160044
; 000B 01C4         case CONF_AUXAO         :   channel =   (int)cnfg & 0x000F;
_0x16004F:
	CPI  R30,LOW(0x70)
	LDI  R26,HIGH(0x70)
	CPC  R31,R26
	BRNE _0x160051
	CALL SUBOPT_0x1B8
; 000B 01C5                                     printDebug("\r\n--- Write CONF_AUXAO (%d) ---",channel);
	__POINTD1FN _0x160000,2670
	CALL SUBOPT_0x39
; 000B 01C6 
; 000B 01C7                                     res = setAuxAoutConfig(channel,(struct aout_cnfg_st *)conf);
	CALL SUBOPT_0x1B9
	CALL _setAuxAoutConfig
	MOVW R16,R30
; 000B 01C8                                     if(res < 0){
	TST  R17
	BRPL _0x160052
; 000B 01C9                                         printDebug("<configWrite> setAuxAoutConfig() failed\r\n");
	__POINTD1FN _0x160000,2702
	CALL SUBOPT_0x2
; 000B 01CA                                         return -3;
	LDI  R30,LOW(65533)
	LDI  R31,HIGH(65533)
	RJMP _0x20E005E
; 000B 01CB                                     }
; 000B 01CC                                     break;
_0x160052:
	RJMP _0x160044
; 000B 01CD         case CONF_BUZZER        :   printDebug("\r\n--- Write CONF_BUZZER ---");
_0x160051:
	CPI  R30,LOW(0x80)
	LDI  R26,HIGH(0x80)
	CPC  R31,R26
	BRNE _0x160053
	__POINTD1FN _0x160000,2744
	CALL SUBOPT_0x2
; 000B 01CE 
; 000B 01CF                                     res = setBuzzerConfig((struct buzz_cnfg_st *)conf);
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	CALL _setBuzzerConfig
	MOVW R16,R30
; 000B 01D0                                     if(res < 0){
	TST  R17
	BRPL _0x160054
; 000B 01D1                                         printDebug("<configWrite> setBuzzerConfig() failed\r\n");
	__POINTD1FN _0x160000,2772
	CALL SUBOPT_0x2
; 000B 01D2                                         return -3;
	LDI  R30,LOW(65533)
	LDI  R31,HIGH(65533)
	RJMP _0x20E005E
; 000B 01D3                                     }
; 000B 01D4                                     break;
_0x160054:
	RJMP _0x160044
; 000B 01D5         case CONF_ENVALARM      :   printDebug("\r\n--- Write CONF_ENVALARM ---");
_0x160053:
	CPI  R30,LOW(0x90)
	LDI  R26,HIGH(0x90)
	CPC  R31,R26
	BRNE _0x160055
	__POINTD1FN _0x160000,2813
	CALL SUBOPT_0x2
; 000B 01D6 
; 000B 01D7                                     res = setEnvAlarmConfig((struct alm_cnfg_st *)conf);
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	CALL _setEnvAlarmConfig
	MOVW R16,R30
; 000B 01D8                                     if(res < 0){
	TST  R17
	BRPL _0x160056
; 000B 01D9                                         printDebug("<configWrite> setEnvAlarmConfig() failed\r\n");
	__POINTD1FN _0x160000,2843
	CALL SUBOPT_0x2
; 000B 01DA                                         return -3;
	LDI  R30,LOW(65533)
	LDI  R31,HIGH(65533)
	RJMP _0x20E005E
; 000B 01DB                                     }
; 000B 01DC                                     break;
_0x160056:
	RJMP _0x160044
; 000B 01DD         case CONF_STATREPORT    :   printDebug("\r\n--- Write CONF_STATREPORT ---");
_0x160055:
	CPI  R30,LOW(0xA0)
	LDI  R26,HIGH(0xA0)
	CPC  R31,R26
	BRNE _0x160059
	__POINTD1FN _0x160000,2886
	CALL SUBOPT_0x2
; 000B 01DE 
; 000B 01DF                                     res = setStatusReportConfig((struct stat_cnfg_st *)conf);
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	CALL _setStatusReportConfig
	MOVW R16,R30
; 000B 01E0                                     if(res < 0){
	TST  R17
	BRPL _0x160058
; 000B 01E1                                         printDebug("<configWrite> setStatusReportConfig() failed\r\n");
	__POINTD1FN _0x160000,2918
	CALL SUBOPT_0x2
; 000B 01E2                                         return -3;
	LDI  R30,LOW(65533)
	LDI  R31,HIGH(65533)
	RJMP _0x20E005E
; 000B 01E3                                     }
; 000B 01E4 
; 000B 01E5         default                 :   printDebug("<configRead> unknown configuration type [0x%02X]\r\n",type);
_0x160058:
_0x160059:
	CALL SUBOPT_0x1B7
	MOV  R30,R19
	CALL SUBOPT_0x27
; 000B 01E6                                     return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E005E
; 000B 01E7     }
_0x160044:
; 000B 01E8     return 0;
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
_0x20E005E:
	CALL __LOADLOCR6
	ADIW R28,11
	RET
; 000B 01E9 }
;/*============================================================*/
;int setLogManipulateSchema(unsigned char accd, unsigned long int tStart, unsigned long int tStop)
; 000B 01EC {
_setLogManipulateSchema:
; 000B 01ED     if(tStop < tStart){
	CALL __PUTPARD2
;	accd -> Y+8
;	tStart -> Y+4
;	tStop -> Y+0
	CALL SUBOPT_0x77
	CALL SUBOPT_0x7A
	CALL __CPD21
	BRSH _0x16005A
; 000B 01EE         printDebug("<setLogManipulateSchema> time period error start[%ld] - stop[%ld]\r\n",tStart,tStop);
	__POINTD1FN _0x160000,2965
	CALL SUBOPT_0x1BA
	CALL SUBOPT_0x1BA
	CALL SUBOPT_0x1F
; 000B 01EF         return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E005D
; 000B 01F0     }
; 000B 01F1 
; 000B 01F2     return 0;
_0x16005A:
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
	RJMP _0x20E005D
; 000B 01F3 }
;/*============================================================*/
;int setTimeSyncSchema(unsigned char *timeData)
; 000B 01F6 {
_setTimeSyncSchema:
; 000B 01F7     int res;
; 000B 01F8     unsigned long int unixTime = 0x00000000;
; 000B 01F9 
; 000B 01FA     memcpy(&unixTime,timeData,sizeof(unixTime));
	CALL SUBOPT_0x1A4
	ST   -Y,R17
	ST   -Y,R16
;	*timeData -> Y+6
;	res -> R16,R17
;	unixTime -> Y+2
	CALL SUBOPT_0x1BB
	LDD  R30,Y+8
	LDD  R31,Y+8+1
	CALL SUBOPT_0x3C
; 000B 01FB 
; 000B 01FC     if(unixTime == 0){
	CALL SUBOPT_0x1BC
	BRNE _0x16005B
; 000B 01FD         printDebug("<setTimeSyncSchema> Got 0 Unix time stamp\r\n");
	__POINTD1FN _0x160000,3033
	CALL SUBOPT_0x2
; 000B 01FE         return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	JMP  _0x20E0059
; 000B 01FF     }
; 000B 0200 
; 000B 0201     printDebug("<setTimeSyncSchema> Received time sync. packet %ld\r\n",unixTime);
_0x16005B:
	__POINTD1FN _0x160000,3077
	CALL SUBOPT_0x1BD
; 000B 0202 
; 000B 0203     res = RTC_setBinary( unixTime );
	CALL SUBOPT_0xA1
	CALL _RTC_setBinary
	MOVW R16,R30
; 000B 0204     if( res < 0 ){
	TST  R17
	BRPL _0x16005C
; 000B 0205         printDebug("<setTimeSyncSchema> RTC_setBinary(%ld) failed\r\n", unixTime);
	__POINTD1FN _0x160000,3130
	CALL SUBOPT_0x1BD
; 000B 0206         return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	JMP  _0x20E0059
; 000B 0207     }
; 000B 0208 
; 000B 0209     return 0;
_0x16005C:
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
	JMP  _0x20E0059
; 000B 020A }
;/*============================================================*/
;int setMuteAlarm(unsigned long int period)
; 000B 020D {
_setMuteAlarm:
; 000B 020E     int res;
; 000B 020F 
; 000B 0210     if(period == 0){
	CALL SUBOPT_0x1BE
;	period -> Y+2
;	res -> R16,R17
	CALL SUBOPT_0x1BC
	BRNE _0x16005D
; 000B 0211         printDebug("<setMuteAlarm> permanent mute alarm\r\n");
	__POINTD1FN _0x160000,3178
	CALL SUBOPT_0x2
; 000B 0212     }
; 000B 0213     else if(((period < 300) || (period > 86400))){
	RJMP _0x16005E
_0x16005D:
	CALL SUBOPT_0xA1
	__CPD2N 0x12C
	BRLO _0x160060
	CALL SUBOPT_0xA1
	__CPD2N 0x15181
	BRLO _0x16005F
_0x160060:
; 000B 0214         printDebug("<setMuteAlarm> invalid period (%ld)\r\n", period);
	__POINTD1FN _0x160000,3216
	CALL SUBOPT_0x1BD
; 000B 0215         return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	JMP  _0x20E005B
; 000B 0216     }
; 000B 0217     else{
_0x16005F:
; 000B 0218         printDebug("<setMuteAlarm> mute alarm for %ld second\r\n",period);
	__POINTD1FN _0x160000,3254
	CALL SUBOPT_0x1BD
; 000B 0219     }
_0x16005E:
; 000B 021A 
; 000B 021B     res = ALARM_mute( period );
	CALL SUBOPT_0xA1
	CALL _ALARM_mute
	MOVW R16,R30
; 000B 021C     if( res < 0 ){
	TST  R17
	BRPL _0x160063
; 000B 021D         printDebug("<setMuteAlarm> ALARM_mute(%ld) failed\r\n", period);
	__POINTD1FN _0x160000,3297
	CALL SUBOPT_0x1BD
; 000B 021E         return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	JMP  _0x20E005B
; 000B 021F     }
; 000B 0220 
; 000B 0221     return 0;
_0x160063:
	JMP  _0x20E005A
; 000B 0222 }
;/*============================================================*/
;int configConfirm(void)
; 000B 0225 {
_configConfirm:
; 000B 0226     return 0;
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
	RET
; 000B 0227 }
;/*============================================================*/
;#include <stdio.h>
;#include <stdlib.h>
;#include <string.h>
;#include "ethqueue.h"
	#ifndef __SLEEP_DEFINED__
	#define __SLEEP_DEFINED__
	.EQU __se_bit=0x01
	.EQU __sm_mask=0x0E
	.EQU __sm_powerdown=0x04
	.EQU __sm_powersave=0x06
	.EQU __sm_standby=0x0C
	.EQU __sm_ext_standby=0x0E
	.EQU __sm_adc_noise_red=0x02
	.SET power_ctrl_reg=smcr
	#endif
;#include "debug.h"
;
;#define MAX_SESS_LIST   100
;
;struct ethqueue eth_waitQueue[ETH_MAX_WAIT_QUEUE];
;char   ETH_waitQCount = 0;
;
;char   sess_list[MAX_SESS_LIST];
;int    last_sess_id = 0;
;
;/*============================================================*/
;int ETH_addWaitQueue(char id, char *pktptr, int len, int timeout)
; 000C 0011 {

	.CSEG
_ETH_addWaitQueue:
; 000C 0012     int slot;
; 000C 0013 
; 000C 0014     slot = ETH_findFreeSlotWaitQueue();
	CALL SUBOPT_0x71
;	id -> Y+8
;	*pktptr -> Y+6
;	len -> Y+4
;	timeout -> Y+2
;	slot -> R16,R17
	RCALL _ETH_findFreeSlotWaitQueue
	MOV  R16,R30
	CLR  R17
; 000C 0015     if(slot < 0){
	TST  R17
	BRPL _0x180003
; 000C 0016         printDebug("\r\n\r\n<ETH_addWaitQueue> WARNING : Wait queue FULL\r\n\r\n");
	__POINTD1FN _0x180000,0
	CALL SUBOPT_0x2
; 000C 0017         return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E005C
; 000C 0018     }
; 000C 0019 
; 000C 001A 
; 000C 001B     eth_waitQueue[slot].packetData = (char *) malloc(len);
_0x180003:
	CALL SUBOPT_0x157
	__ADDW1MN _eth_waitQueue,9
	PUSH R31
	PUSH R30
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	CALL _malloc
	POP  R26
	POP  R27
	ST   X+,R30
	ST   X,R31
; 000C 001C     if(eth_waitQueue[slot].packetData == NULL)
	CALL SUBOPT_0x157
	CALL SUBOPT_0x15E
	SBIW R30,0
	BRNE _0x180004
; 000C 001D     {
; 000C 001E         printDebug("<ETH_addWaitQueue> malloc(%d) failed\r\n",len);
	__POINTD1FN _0x180000,53
	CALL SUBOPT_0x100
; 000C 001F         return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E005C
; 000C 0020     }
; 000C 0021 
; 000C 0022     memcpy( eth_waitQueue[slot].packetData, pktptr, len );
_0x180004:
	CALL SUBOPT_0x157
	CALL SUBOPT_0x15E
	CALL SUBOPT_0x1BF
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	CALL _memcpy
; 000C 0023 
; 000C 0024     eth_waitQueue[slot].packetLen   = len;
	CALL SUBOPT_0x157
	__ADDW1MN _eth_waitQueue,7
	LDD  R26,Y+4
	STD  Z+0,R26
; 000C 0025     eth_waitQueue[slot].packetID    = id;
	CALL SUBOPT_0x157
	__ADDW1MN _eth_waitQueue,8
	LDD  R26,Y+8
	STD  Z+0,R26
; 000C 0026     eth_waitQueue[slot].retryCount  = 0;
	CALL SUBOPT_0x157
	CALL SUBOPT_0x1C0
; 000C 0027     eth_waitQueue[slot].timeout     = timeout;
	CALL SUBOPT_0x157
	__ADDW1MN _eth_waitQueue,5
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	STD  Z+0,R26
	STD  Z+1,R27
; 000C 0028 
; 000C 0029     //eth_waitQueue[slot].retryTime   = 0;
; 000C 002A     TIMER_setTimer(&(eth_waitQueue[slot].retryTime), eth_waitQueue[slot].timeout);
	CALL SUBOPT_0x157
	CALL SUBOPT_0x15C
	CALL SUBOPT_0x15D
; 000C 002B 
; 000C 002C     ETH_waitQCount++;
	INC  R7
; 000C 002D     printDebug("\r\n                                     Added (%02X) to eth_waitQueue[%d]\r\n", id, slot);
	__POINTD1FN _0x180000,92
	CALL __PUTPARD1
	LDD  R30,Y+12
	CALL SUBOPT_0x55
	MOVW R30,R16
	CALL __CWD1
	CALL SUBOPT_0x1F
; 000C 002E     //print_payload(eth_waitQueue[slot].packetData,eth_waitQueue[slot].packetLen);
; 000C 002F     return ETH_waitQCount;
	MOV  R30,R7
	LDI  R31,0
_0x20E005C:
	LDD  R17,Y+1
	LDD  R16,Y+0
_0x20E005D:
	ADIW R28,9
	RET
; 000C 0030 }
;/*============================================================*/
;int ETH_removeWaitQueue(char id)
; 000C 0033 {
_ETH_removeWaitQueue:
; 000C 0034     char i;
; 000C 0035     for(i=0;i<ETH_MAX_WAIT_QUEUE;i++){
	ST   -Y,R26
	ST   -Y,R17
;	id -> Y+1
;	i -> R17
	LDI  R17,LOW(0)
_0x180006:
	CPI  R17,15
	BRSH _0x180007
; 000C 0036         if(id == eth_waitQueue[i].packetID){        // scan id in eth_waitQueue
	CALL SUBOPT_0x1C1
	LD   R30,Z
	LDD  R26,Y+1
	CP   R30,R26
	BRNE _0x180008
; 000C 0037             //printDebug("                                 Removing (%02X) from eth_waitQueue\r\n", id);
; 000C 0038             //print_payload(eth_waitQueue[i].packetData,eth_waitQueue[i].packetLen);
; 000C 0039             //memset( eth_waitQueue[i].packetData, '\0', ETH_MAX_PKT_LEN );
; 000C 003A             free(eth_waitQueue[i].packetData);
	LDI  R26,LOW(11)
	MUL  R17,R26
	MOVW R30,R0
	CALL SUBOPT_0x15E
	CALL SUBOPT_0x1C2
; 000C 003B             eth_waitQueue[i].packetData  = NULL;
; 000C 003C             eth_waitQueue[i].packetLen   = 0;
; 000C 003D             eth_waitQueue[i].packetID    = 0;
	CALL SUBOPT_0x1C3
; 000C 003E             eth_waitQueue[i].retryCount  = 0;
; 000C 003F             eth_waitQueue[i].timeout     = 0;
	CALL SUBOPT_0x1C4
; 000C 0040             eth_waitQueue[i].retryTime   = 0;
; 000C 0041             ETH_waitQCount--;
	DEC  R7
; 000C 0042             //printDebug("Removed\r\n");
; 000C 0043             printDebug("\r\n                                     Removed (%02X) to eth_waitQueue[%d]\r\n", id, i);
	__POINTD1FN _0x180000,167
	CALL SUBOPT_0x1C5
	CALL SUBOPT_0x1C6
; 000C 0044             return ETH_waitQCount;
	MOV  R30,R7
	CALL SUBOPT_0x1C7
	JMP  _0x20E0055
; 000C 0045         }
; 000C 0046     }
_0x180008:
	SUBI R17,-1
	RJMP _0x180006
_0x180007:
; 000C 0047     printDebug("\r\n\r\nWARNING : ETH_removeWaitQueue(%02X) not found!!\r\n\r\n",id);
	__POINTD1FN _0x180000,244
	CALL SUBOPT_0x1C8
; 000C 0048     return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	LDD  R17,Y+0
	JMP  _0x20E0055
; 000C 0049 }
;/*============================================================*/
;void ETH_initWaitQueue(void)
; 000C 004C {
_ETH_initWaitQueue:
; 000C 004D     char i;
; 000C 004E 
; 000C 004F     for(i=0;i<ETH_MAX_WAIT_QUEUE;i++){
	ST   -Y,R17
;	i -> R17
	LDI  R17,LOW(0)
_0x18000A:
	CPI  R17,15
	BRSH _0x18000B
; 000C 0050         //memset( eth_waitQueue[i].packetData, '\0', ETH_MAX_PKT_LEN );
; 000C 0051         free(eth_waitQueue[i].packetData);
	LDI  R26,LOW(11)
	MUL  R17,R26
	MOVW R30,R0
	CALL SUBOPT_0x15E
	CALL SUBOPT_0x1C2
; 000C 0052         eth_waitQueue[i].packetData  = NULL;
; 000C 0053         eth_waitQueue[i].packetLen   = 0;
; 000C 0054         eth_waitQueue[i].packetID    = 0;
	CALL SUBOPT_0x1C3
; 000C 0055         eth_waitQueue[i].retryCount  = 0;
; 000C 0056         eth_waitQueue[i].timeout     = 0;
	CALL SUBOPT_0x1C4
; 000C 0057         eth_waitQueue[i].retryTime   = 0;
; 000C 0058     }
	SUBI R17,-1
	RJMP _0x18000A
_0x18000B:
; 000C 0059     return;
	JMP  _0x20E0057
; 000C 005A }
;/*============================================================*/
;char ETH_isIdExist(char id)
; 000C 005D {
_ETH_isIdExist:
; 000C 005E     char i;
; 000C 005F 
; 000C 0060     for(i=0;i<ETH_MAX_WAIT_QUEUE;i++){
	ST   -Y,R26
	ST   -Y,R17
;	id -> Y+1
;	i -> R17
	LDI  R17,LOW(0)
_0x18000D:
	CPI  R17,15
	BRSH _0x18000E
; 000C 0061         if(id == eth_waitQueue[i].packetID){
	CALL SUBOPT_0x1C1
	LD   R30,Z
	LDD  R26,Y+1
	CP   R30,R26
	BRNE _0x18000F
; 000C 0062             return 1;                           // found id in eth_waitQueue
	LDI  R30,LOW(1)
	LDD  R17,Y+0
	JMP  _0x20E0055
; 000C 0063         }
; 000C 0064     }
_0x18000F:
	SUBI R17,-1
	RJMP _0x18000D
_0x18000E:
; 000C 0065     return 0;
	LDI  R30,LOW(0)
	LDD  R17,Y+0
	JMP  _0x20E0055
; 000C 0066 }
;/*============================================================*/
;char ETH_isIdUsed(char id)
; 000C 0069 {
_ETH_isIdUsed:
; 000C 006A     char i;
; 000C 006B 
; 000C 006C     for(i=0;i<MAX_SESS_LIST;i++){
	ST   -Y,R26
	ST   -Y,R17
;	id -> Y+1
;	i -> R17
	LDI  R17,LOW(0)
_0x180011:
	CPI  R17,100
	BRSH _0x180012
; 000C 006D         if(id == sess_list[i]){
	CALL SUBOPT_0x99
	SUBI R30,LOW(-_sess_list)
	SBCI R31,HIGH(-_sess_list)
	LD   R30,Z
	LDD  R26,Y+1
	CP   R30,R26
	BRNE _0x180013
; 000C 006E             return 1;                           // found id in eth_waitQueue
	LDI  R30,LOW(1)
	LDD  R17,Y+0
	JMP  _0x20E0055
; 000C 006F         }
; 000C 0070     }
_0x180013:
	SUBI R17,-1
	RJMP _0x180011
_0x180012:
; 000C 0071     return 0;
	LDI  R30,LOW(0)
	LDD  R17,Y+0
	JMP  _0x20E0055
; 000C 0072 }
;/*============================================================*/
;char ETH_findFreeSlotWaitQueue(void)
; 000C 0075 {
_ETH_findFreeSlotWaitQueue:
; 000C 0076     char i;
; 000C 0077     for(i=0;i<ETH_MAX_WAIT_QUEUE;i++){
	ST   -Y,R17
;	i -> R17
	LDI  R17,LOW(0)
_0x180015:
	CPI  R17,15
	BRSH _0x180016
; 000C 0078         if(eth_waitQueue[i].packetLen == 0){
	LDI  R26,LOW(11)
	MUL  R17,R26
	MOVW R30,R0
	__ADDW1MN _eth_waitQueue,7
	LD   R30,Z
	CPI  R30,0
	BRNE _0x180017
; 000C 0079             return i;
	MOV  R30,R17
	JMP  _0x20E0057
; 000C 007A         }
; 000C 007B     }
_0x180017:
	SUBI R17,-1
	RJMP _0x180015
_0x180016:
; 000C 007C     return -1;
	LDI  R30,LOW(255)
	JMP  _0x20E0057
; 000C 007D }
;/*============================================================*/
;char ETH_generateId(void)
; 000C 0080 {
_ETH_generateId:
; 000C 0081     char id;
; 000C 0082 
; 000C 0083     do{
	ST   -Y,R17
;	id -> R17
_0x180019:
; 000C 0084         id = (rand() % 256) & 0xFF;
	CALL _rand
	MOV  R17,R30
; 000C 0085     }while(ETH_isIdExist(id) || (id == 0) || (id == 0xFF) || ETH_isIdUsed(id));
	MOV  R26,R17
	RCALL _ETH_isIdExist
	CPI  R30,0
	BRNE _0x18001B
	CPI  R17,0
	BREQ _0x18001B
	CPI  R17,255
	BREQ _0x18001B
	MOV  R26,R17
	RCALL _ETH_isIdUsed
	CPI  R30,0
	BREQ _0x18001A
_0x18001B:
	RJMP _0x180019
_0x18001A:
; 000C 0086     sess_list[last_sess_id] = id;
	MOVW R30,R8
	SUBI R30,LOW(-_sess_list)
	SBCI R31,HIGH(-_sess_list)
	ST   Z,R17
; 000C 0087     last_sess_id = (last_sess_id + 1) % MAX_SESS_LIST;
	MOVW R26,R8
	ADIW R26,1
	LDI  R30,LOW(100)
	LDI  R31,HIGH(100)
	CALL __MODW21
	MOVW R8,R30
; 000C 0088 
; 000C 0089     return id;
	MOV  R30,R17
	JMP  _0x20E0057
; 000C 008A }
;/*============================================================*/
;#include <stdlib.h>
;#include <string.h>
;#include <stdio.h>
;#include <delay.h>
;#include "sensor.h"
	#ifndef __SLEEP_DEFINED__
	#define __SLEEP_DEFINED__
	.EQU __se_bit=0x01
	.EQU __sm_mask=0x0E
	.EQU __sm_powerdown=0x04
	.EQU __sm_powersave=0x06
	.EQU __sm_standby=0x0C
	.EQU __sm_ext_standby=0x0E
	.EQU __sm_adc_noise_red=0x02
	.SET power_ctrl_reg=smcr
	#endif
;#include "config.h"
;#include "timer.h"
;#include "debug.h"
;#include "dht11.h"
;#include "calibration.h"
;
;#define MAX(x, y) (((x) > (y)) ? (x) : (y))
;
;
;//extern eeprom ST_CAL sensorCalulate;
;struct sens_val_st      sensor[5];
;extern ST_DHT11 dhtDevice;
;ST_DHT11 dhtDevice;
;//eeprom float calS1[5];//standrad point 1
;//eeprom float calS2[5];//standrad point 2
;//eeprom float calS3[5];//standrad point 3
;//eeprom float calX1[5];//input sensor point 1
;//eeprom float calX2[5];//input sensor point 2
;//eeprom float calX3[5];//input sensor point 3
;
;float sensorGetValue(unsigned int channelID){
; 000D 001A float sensorGetValue(unsigned int channelID){

	.CSEG
_sensorGetValue:
; 000D 001B     printDebug("Sensor ch[%d] is a raw data[%0.2f] , calProcess[%0.2f]\r\n",channelID-1,adcData[channelID-1],calProcessValue(adcData[channelID-1],channelID));
	ST   -Y,R27
	ST   -Y,R26
;	channelID -> Y+0
	__POINTD1FN _0x1A0000,0
	CALL SUBOPT_0x116
	SBIW R30,1
	CALL SUBOPT_0xDD
	LDD  R30,Y+8
	LDD  R31,Y+8+1
	SBIW R30,1
	CALL SUBOPT_0x90
	CALL SUBOPT_0x19
	CALL __PUTPARD1
	LDD  R30,Y+12
	LDD  R31,Y+12+1
	SBIW R30,1
	CALL SUBOPT_0x90
	CALL SUBOPT_0x19
	CALL __PUTPARD1
	LDD  R26,Y+16
	LDD  R27,Y+16+1
	CALL _calProcessValue
	CALL __PUTPARD1
	CALL SUBOPT_0x56
; 000D 001C     return calProcessValue(adcData[channelID-1],channelID);
	LD   R30,Y
	LDD  R31,Y+1
	SBIW R30,1
	CALL SUBOPT_0x90
	CALL SUBOPT_0x19
	CALL SUBOPT_0x113
	CALL _calProcessValue
	JMP  _0x20E0055
; 000D 001D }
;
;int sensorRead(int ch, struct sens_val_st *sensor){
; 000D 001F int sensorRead(int ch, struct sens_val_st *sensor){
_sensorRead:
; 000D 0020     int dhtRet = 0;
; 000D 0021 
; 000D 0022     updateSensorADC(ch);
	CALL SUBOPT_0x71
;	ch -> Y+4
;	*sensor -> Y+2
;	dhtRet -> R16,R17
	__GETWRN 16,17,0
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	RCALL _updateSensorADC
; 000D 0023     if(ch==0){
	LDD  R30,Y+4
	LDD  R31,Y+4+1
	SBIW R30,0
	BRNE _0x1A0003
; 000D 0024        sensor->value = calProcessValue(adcData[ch],ch+1);
	CALL SUBOPT_0x1C9
	CALL SUBOPT_0x19
	CALL SUBOPT_0x19D
	CALL SUBOPT_0x1CA
; 000D 0025        //sensor->value = adcData[ch];
; 000D 0026     }else if(ch==3){
	RJMP _0x1A0004
_0x1A0003:
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	SBIW R26,3
	BRNE _0x1A0005
; 000D 0027     sensor->value = calProcessValue(adcData[ch],ch+1);
	CALL SUBOPT_0x1C9
	CALL SUBOPT_0x19
	CALL SUBOPT_0x19D
	CALL SUBOPT_0x1CA
; 000D 0028        //sensor->value = adcData[ch];
; 000D 0029     }else if(ch==4){
	RJMP _0x1A0006
_0x1A0005:
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	SBIW R26,4
	BRNE _0x1A0007
; 000D 002A        sensor->value = calProcessValue(adcData[ch],ch+1);
	CALL SUBOPT_0x1C9
	CALL SUBOPT_0x19
	CALL SUBOPT_0x19D
	CALL SUBOPT_0x1CA
; 000D 002B        //sensor->value = adcData[ch];
; 000D 002C     }else if((ch==1) || (ch==2)){
	RJMP _0x1A0008
_0x1A0007:
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	SBIW R26,1
	BREQ _0x1A000A
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	SBIW R26,2
	BRNE _0x1A0009
_0x1A000A:
; 000D 002D         dhtRet = dhtDevice.status;
	__GETWRMN 16,17,_dhtDevice,8
; 000D 002E         if(dhtRet == DHT11_SUCCESS){
	LDI  R30,LOW(1)
	LDI  R31,HIGH(1)
	CP   R30,R16
	CPC  R31,R17
	BRNE _0x1A000C
; 000D 002F            sensor->value = calProcessValue(adcData[ch],ch+1);
	CALL SUBOPT_0x1C9
	CALL SUBOPT_0x19
	CALL SUBOPT_0x19D
	CALL SUBOPT_0x1CA
; 000D 0030            //sensor->value = adcData[ch];
; 000D 0031         }else if(dhtRet == DHT11_ERROR_TIMEOUT){
	RJMP _0x1A000D
_0x1A000C:
	LDI  R30,LOW(3)
	LDI  R31,HIGH(3)
	CP   R30,R16
	CPC  R31,R17
	BREQ _0x1A003B
; 000D 0032            sensor->status  = SENS_ERROR;
; 000D 0033            //return -2;
; 000D 0034         }else if(dhtRet == DHT11_ERROR_CHECKSUM){
	LDI  R30,LOW(2)
	LDI  R31,HIGH(2)
	CP   R30,R16
	CPC  R31,R17
	BRNE _0x1A0010
; 000D 0035            sensor->status  = SENS_ERROR;
_0x1A003B:
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	ADIW R26,4
	LDI  R30,LOW(128)
	ST   X,R30
; 000D 0036            //return -2;
; 000D 0037         }
; 000D 0038     }
_0x1A0010:
_0x1A000D:
; 000D 0039 
; 000D 003A     sensor->status  = SENS_NORMAL;
_0x1A0009:
_0x1A0008:
_0x1A0006:
_0x1A0004:
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	ADIW R26,4
	LDI  R30,LOW(0)
	ST   X,R30
; 000D 003B     return 0;
_0x20E005A:
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
_0x20E005B:
	LDD  R17,Y+1
	LDD  R16,Y+0
	ADIW R28,6
	RET
; 000D 003C }
;
;void updateSensorADC(int ch)
; 000D 003F {
_updateSensorADC:
; 000D 0040     int adc_raw = 0;
; 000D 0041     int dhtRet = 0;
; 000D 0042     float voltCutOff = 0.0;
; 000D 0043     float ACS709offset = 18.5;
; 000D 0044     float buffAmpSensor[60];
; 000D 0045     float buffVoltSensor[50];
; 000D 0046     float buff420Sensor[10];
; 000D 0047     float bufferTemp[2] = {0,0};
; 000D 0048     float bufferHumi[2] = {0,0};
; 000D 0049     int i=0,j=0;
; 000D 004A     int dht11Reread=0;
; 000D 004B     float ampValue = 0.0;
; 000D 004C     float voltValue = 0.0;
; 000D 004D     float mA420Value = 0.0;
; 000D 004E 
; 000D 004F     adc_raw     = read_adc(8+ch);
	ST   -Y,R27
	ST   -Y,R26
	SBIW R28,8
	SUBI R29,2
	__GETWRN 24,25,520
	LDI  R26,LOW(0)
	LDI  R27,HIGH(0)
	LDI  R30,LOW(_0x1A0011*2)
	LDI  R31,HIGH(_0x1A0011*2)
	LDI  R22,BYTE3(_0x1A0011*2)
	CALL __INITLOCW
	CALL SUBOPT_0x28
;	ch -> Y+526
;	adc_raw -> R16,R17
;	dhtRet -> R18,R19
;	voltCutOff -> Y+522
;	ACS709offset -> Y+518
;	buffAmpSensor -> Y+278
;	buffVoltSensor -> Y+78
;	buff420Sensor -> Y+38
;	bufferTemp -> Y+30
;	bufferHumi -> Y+22
;	i -> R20,R21
;	j -> Y+20
;	dht11Reread -> Y+18
;	ampValue -> Y+14
;	voltValue -> Y+10
;	mA420Value -> Y+6
	CALL SUBOPT_0x1CB
	MOVW R16,R30
; 000D 0050     if(ch==0){
	CALL SUBOPT_0x1CC
	SBIW R30,0
	BRNE _0x1A0012
; 000D 0051         //adcData[ch] =   adc_raw;
; 000D 0052         //mA420Value = ((((adcData[ch]+5.0/1023.0)*3.30)/3.30)*20.0);
; 000D 0053 
; 000D 0054         for(i=0;i<10;i++){
	__GETWRN 20,21,0
_0x1A0014:
	__CPWRN 20,21,10
	BRGE _0x1A0015
; 000D 0055             buff420Sensor[i] = read_adc(8+ch);
	MOVW R30,R20
	MOVW R26,R28
	ADIW R26,38
	CALL SUBOPT_0x1CD
	PUSH R31
	PUSH R30
	CALL SUBOPT_0x1CB
	POP  R26
	POP  R27
	CALL SUBOPT_0x91
; 000D 0056             delay_us(10);
	__DELAY_USB 27
; 000D 0057         }
	__ADDWRN 20,21,1
	RJMP _0x1A0014
_0x1A0015:
; 000D 0058         mA420Value = ((average(buff420Sensor,10)+5.0)/1023.0)*20.0;
	MOVW R30,R28
	ADIW R30,38
	CALL SUBOPT_0x18E
	CALL SUBOPT_0x1CE
	CALL SUBOPT_0x8C
	__GETD2N 0x41A00000
	CALL __MULF12
	CALL SUBOPT_0xA3
; 000D 0059         //mA420Value = (((adcData[ch]+5.0/1023.0)*3.30)/165.0);     //R=165 Ohm
; 000D 005A        //printDebug("[%d]ADC: %f, mA: %f \r\n", ch, adcData[ch], mA420Value);
; 000D 005B        //adcData[ch] = (adcData[ch]+5/1023.0)*3.30;
; 000D 005C        adcData[ch] = mA420Value;
	CALL SUBOPT_0x1CF
	ADD  R30,R26
	ADC  R31,R27
	CALL SUBOPT_0x1D0
; 000D 005D     }else if(ch==3){
	RJMP _0x1A0016
_0x1A0012:
	CALL SUBOPT_0x1D1
	SBIW R26,3
	BRNE _0x1A0017
; 000D 005E         //adcData[ch] =   adc_raw;
; 000D 005F         //voltValue = ((((adcData[ch]+5.0)/1023.0)*3.30)/3.30)*1000.0;
; 000D 0060         for(i=0;i<50;i++){
	__GETWRN 20,21,0
_0x1A0019:
	__CPWRN 20,21,50
	BRGE _0x1A001A
; 000D 0061             buffVoltSensor[i] = read_adc(8+ch);
	MOVW R30,R20
	MOVW R26,R28
	SUBI R26,LOW(-(78))
	SBCI R27,HIGH(-(78))
	CALL SUBOPT_0x1CD
	PUSH R31
	PUSH R30
	CALL SUBOPT_0x1CB
	POP  R26
	POP  R27
	CALL SUBOPT_0x91
; 000D 0062             delay_us(10);
	__DELAY_USB 27
; 000D 0063         }
	__ADDWRN 20,21,1
	RJMP _0x1A0019
_0x1A001A:
; 000D 0064 
; 000D 0065 
; 000D 0066         voltValue = ((average(buffVoltSensor,50)+5.0)/1023.0)*1000.0;
	MOVW R30,R28
	SUBI R30,LOW(-(78))
	SBCI R31,HIGH(-(78))
	ST   -Y,R31
	ST   -Y,R30
	CALL SUBOPT_0x6C
	CALL SUBOPT_0x1CE
	CALL SUBOPT_0x8C
	__GETD2N 0x447A0000
	CALL __MULF12
	CALL SUBOPT_0x1D2
; 000D 0067         //printDebug("[%d]ADC: %f, Volt(raw): %f, Volt(AC): %f \r\n", ch, adcData[ch], (adcData[ch]+5.0/1023.0)*3.30, voltValue);
; 000D 0068 
; 000D 0069        adcData[ch] = voltValue;
	CALL SUBOPT_0x1CF
	CALL SUBOPT_0x1D3
; 000D 006A        //adcData[ch] = (adcData[ch]+5/1023)*3.30;
; 000D 006B     }else if(ch==4){
	RJMP _0x1A001B
_0x1A0017:
	CALL SUBOPT_0x1D1
	SBIW R26,4
	BREQ PC+3
	JMP _0x1A001C
; 000D 006C         memset(buffAmpSensor,0,sizeof(buffAmpSensor));
	MOVW R30,R28
	SUBI R30,LOW(-(278))
	SBCI R31,HIGH(-(278))
	CALL SUBOPT_0xE0
	LDI  R26,LOW(240)
	CALL SUBOPT_0x1D4
; 000D 006D         for(i=0;i<60;i++){
	__GETWRN 20,21,0
_0x1A001E:
	__CPWRN 20,21,60
	BRGE _0x1A001F
; 000D 006E           buffAmpSensor[i] =  read_adc(8+ch);
	MOVW R30,R20
	MOVW R26,R28
	SUBI R26,LOW(-(278))
	SBCI R27,HIGH(-(278))
	CALL SUBOPT_0x1CD
	PUSH R31
	PUSH R30
	CALL SUBOPT_0x1CB
	POP  R26
	POP  R27
	CALL SUBOPT_0x91
; 000D 006F           delay_ms(1);
	CALL SUBOPT_0x67
	CALL _delay_ms
; 000D 0070         }
	__ADDWRN 20,21,1
	RJMP _0x1A001E
_0x1A001F:
; 000D 0071         //adcData[ch] = average(buffAmpSensor);
; 000D 0072        // voltCutOff = fabs(((((adcData[ch]+5.0)/1023.0)*3.30)-1.65));
; 000D 0073         voltCutOff = fabs(((((voltPeak(buffAmpSensor)+5.0)/1023.0)*3.30)-1.65));
	MOVW R26,R28
	SUBI R26,LOW(-(278))
	SBCI R27,HIGH(-(278))
	RCALL _voltPeak
	__GETD2N 0x40A00000
	CALL SUBOPT_0x8A
	CALL SUBOPT_0x8C
	__GETD2N 0x40533333
	CALL __MULF12
	MOVW R26,R30
	MOVW R24,R22
	__GETD1N 0x3FD33333
	CALL SUBOPT_0x1D5
	MOVW R26,R30
	MOVW R24,R22
	CALL _fabs
	__PUTD1SX 522
; 000D 0074         ampValue = (voltCutOff*1000.0)/18.5;
	__GETD2SX 522
	__GETD1N 0x447A0000
	CALL __MULF12
	MOVW R26,R30
	MOVW R24,R22
	__GETD1N 0x41940000
	CALL __DIVF21
	CALL SUBOPT_0x1D6
; 000D 0075         //printDebug("[%d]ADC: %f, Volt(raw): %f, Amp: %f\r\n", ch, adcData[ch], (adcData[ch]-511.0), ampValue);
; 000D 0076 
; 000D 0077        adcData[ch] =  ampValue;
	CALL SUBOPT_0x1CF
	ADD  R30,R26
	ADC  R31,R27
	CALL SUBOPT_0x1D7
	CALL SUBOPT_0x1D8
; 000D 0078     }else if((ch==1) || (ch==2)){
	RJMP _0x1A0020
_0x1A001C:
	CALL SUBOPT_0x1D1
	SBIW R26,1
	BREQ _0x1A0022
	CALL SUBOPT_0x1D1
	SBIW R26,2
	BREQ _0x1A0022
	RJMP _0x1A0021
_0x1A0022:
; 000D 0079 
; 000D 007A         //dhtRet = DHT11Read(&dhtDevice);
; 000D 007B 
; 000D 007C         dht11Reread = 0;
	LDI  R30,LOW(0)
	STD  Y+18,R30
	STD  Y+18+1,R30
; 000D 007D         //memset(&dhtDevice,0,sizeof(dhtDevice));
; 000D 007E         for(i=0;i<20;i++){
	__GETWRN 20,21,0
_0x1A0025:
	__CPWRN 20,21,20
	BRGE _0x1A0026
; 000D 007F 
; 000D 0080             dhtRet = DHT11Read(&dhtDevice);
	LDI  R26,LOW(_dhtDevice)
	LDI  R27,HIGH(_dhtDevice)
	CALL _DHT11Read
	MOVW R18,R30
; 000D 0081             //delay_ms(4);
; 000D 0082             //printDebug("[%d]ADC:DHT11:Return (%d). \r\n", ch,dhtRet);
; 000D 0083             if(dhtRet == DHT11_SUCCESS){
	LDI  R30,LOW(1)
	LDI  R31,HIGH(1)
	CP   R30,R18
	CPC  R31,R19
	BRNE _0x1A0027
; 000D 0084 //                if(ch==1){
; 000D 0085 //                  bufferTemp[dht11Reread] = dhtDevice.temp;
; 000D 0086 //                }else if(ch==2){
; 000D 0087 //                  bufferHumi[dht11Reread] = dhtDevice.humi;
; 000D 0088 //                }
; 000D 0089 
; 000D 008A                 bufferTemp[dht11Reread] = dhtDevice.temp;
	LDD  R30,Y+18
	LDD  R31,Y+18+1
	MOVW R26,R28
	ADIW R26,30
	CALL SUBOPT_0x1CD
	LDS  R26,_dhtDevice
	LDS  R27,_dhtDevice+1
	LDS  R24,_dhtDevice+2
	LDS  R25,_dhtDevice+3
	CALL SUBOPT_0x1D8
; 000D 008B                 bufferHumi[dht11Reread] = dhtDevice.humi;
	LDD  R30,Y+18
	LDD  R31,Y+18+1
	MOVW R26,R28
	ADIW R26,22
	CALL SUBOPT_0x1D9
	__GETD1MN _dhtDevice,4
	CALL __PUTDP1
; 000D 008C 
; 000D 008D                 ++dht11Reread;
	LDD  R30,Y+18
	LDD  R31,Y+18+1
	ADIW R30,1
	STD  Y+18,R30
	STD  Y+18+1,R31
; 000D 008E             }
; 000D 008F             if(dht11Reread>=2){
_0x1A0027:
	LDD  R26,Y+18
	LDD  R27,Y+18+1
	SBIW R26,2
	BRGE _0x1A0026
; 000D 0090                break;
; 000D 0091             }
; 000D 0092         }
	__ADDWRN 20,21,1
	RJMP _0x1A0025
_0x1A0026:
; 000D 0093 
; 000D 0094         if(dht11Reread>=2){
	LDD  R26,Y+18
	LDD  R27,Y+18+1
	SBIW R26,2
	BRLT _0x1A0029
; 000D 0095             if(ch==1){
	CALL SUBOPT_0x1D1
	SBIW R26,1
	BRNE _0x1A002A
; 000D 0096                adcData[ch] = average(bufferTemp,2);
	CALL SUBOPT_0x1CF
	ADD  R30,R26
	ADC  R31,R27
	PUSH R31
	PUSH R30
	CALL SUBOPT_0x1DA
	CALL SUBOPT_0x65
	RCALL _average
	POP  R26
	POP  R27
	RJMP _0x1A003C
; 000D 0097             }else if(ch==2){
_0x1A002A:
	CALL SUBOPT_0x1D1
	SBIW R26,2
	BRNE _0x1A002C
; 000D 0098                adcData[ch] = average(bufferHumi,2);
	CALL SUBOPT_0x1CF
	ADD  R30,R26
	ADC  R31,R27
	PUSH R31
	PUSH R30
	CALL SUBOPT_0x1DB
	CALL SUBOPT_0x65
	RCALL _average
	POP  R26
	POP  R27
_0x1A003C:
	CALL __PUTDP1
; 000D 0099             }
; 000D 009A         }else if(dht11Reread>=1){
_0x1A002C:
	RJMP _0x1A002D
_0x1A0029:
	LDD  R26,Y+18
	LDD  R27,Y+18+1
	SBIW R26,1
	BRLT _0x1A002E
; 000D 009B             if(ch==1){
	CALL SUBOPT_0x1D1
	SBIW R26,1
	BRNE _0x1A002F
; 000D 009C                adcData[ch] = average(bufferTemp,1);
	CALL SUBOPT_0x1CF
	ADD  R30,R26
	ADC  R31,R27
	PUSH R31
	PUSH R30
	CALL SUBOPT_0x1DA
	CALL SUBOPT_0x67
	RCALL _average
	POP  R26
	POP  R27
	RJMP _0x1A003D
; 000D 009D             }else if(ch==2){
_0x1A002F:
	CALL SUBOPT_0x1D1
	SBIW R26,2
	BRNE _0x1A0031
; 000D 009E                adcData[ch] = average(bufferHumi,1);
	CALL SUBOPT_0x1CF
	ADD  R30,R26
	ADC  R31,R27
	PUSH R31
	PUSH R30
	CALL SUBOPT_0x1DB
	CALL SUBOPT_0x67
	RCALL _average
	POP  R26
	POP  R27
_0x1A003D:
	CALL __PUTDP1
; 000D 009F             }
; 000D 00A0         }
_0x1A0031:
; 000D 00A1     }
_0x1A002E:
_0x1A002D:
; 000D 00A2     return;
_0x1A0021:
_0x1A0020:
_0x1A001B:
_0x1A0016:
	CALL __LOADLOCR6
	ADIW R28,16
	SUBI R29,-2
	RET
; 000D 00A3 }
;
;float voltPeak(float data[]){       //Amp value
; 000D 00A5 float voltPeak(float data[]){
_voltPeak:
; 000D 00A6      int i = 0;
; 000D 00A7      float sum=0.0;
; 000D 00A8 
; 000D 00A9      for(i=0;i<60;i++){
	CALL SUBOPT_0x1A4
	CALL SUBOPT_0x86
;	data -> Y+6
;	i -> R16,R17
;	sum -> Y+2
	__GETWRN 16,17,0
_0x1A0033:
	__CPWRN 16,17,60
	BRGE _0x1A0034
; 000D 00AA        sum = MAX(sum,data[i]);
	CALL SUBOPT_0x1DC
	CALL SUBOPT_0xA1
	CALL __CMPF12
	BREQ PC+2
	BRCC PC+3
	JMP  _0x1A0035
	CALL SUBOPT_0xA0
	RJMP _0x1A0036
_0x1A0035:
	CALL SUBOPT_0x1DC
_0x1A0036:
	CALL SUBOPT_0x9F
; 000D 00AB      }
	__ADDWRN 16,17,1
	RJMP _0x1A0033
_0x1A0034:
; 000D 00AC      return sum;
	CALL SUBOPT_0xA0
_0x20E0059:
	LDD  R17,Y+1
	LDD  R16,Y+0
	ADIW R28,8
	RET
; 000D 00AD }
;float average(float data[],int count){      //Volt value
; 000D 00AE float average(float data[],int count){
_average:
; 000D 00AF      int i = 0;
; 000D 00B0      float avg = 0.0, sum=0.0;
; 000D 00B1 
; 000D 00B2      //printDebug("raw data.\r\n");
; 000D 00B3      for(i=0;i<count;i++){
	ST   -Y,R27
	ST   -Y,R26
	SBIW R28,8
	CALL SUBOPT_0x1DD
	LDI  R30,LOW(0)
	STD  Y+3,R30
	STD  Y+4,R30
	STD  Y+5,R30
	STD  Y+6,R30
	STD  Y+7,R30
	CALL SUBOPT_0x86
;	data -> Y+12
;	count -> Y+10
;	i -> R16,R17
;	avg -> Y+6
;	sum -> Y+2
	__GETWRN 16,17,0
_0x1A0039:
	LDD  R30,Y+10
	LDD  R31,Y+10+1
	CP   R16,R30
	CPC  R17,R31
	BRGE _0x1A003A
; 000D 00B4        //printDebug("%.2f ", data[i]);
; 000D 00B5        sum += data[i];
	MOVW R30,R16
	LDD  R26,Y+12
	LDD  R27,Y+12+1
	CALL SUBOPT_0x1DE
	CALL SUBOPT_0xA1
	CALL __ADDF12
	CALL SUBOPT_0x9F
; 000D 00B6      }
	__ADDWRN 16,17,1
	RJMP _0x1A0039
_0x1A003A:
; 000D 00B7      //printDebug("\r\nMax(%.2f) ", sum);
; 000D 00B8      //printDebug("\r\n");
; 000D 00B9      //return sum;
; 000D 00BA 
; 000D 00BB 
; 000D 00BC      avg =(sum/count);
	LDD  R30,Y+10
	LDD  R31,Y+10+1
	CALL SUBOPT_0x1DF
	CALL __DIVF21
	CALL SUBOPT_0x9D
; 000D 00BD      return avg;
	LDD  R17,Y+1
	LDD  R16,Y+0
	ADIW R28,14
	RET
; 000D 00BE }
;
;
;
;#include <stdlib.h>
;#include <stdio.h>
;#include "dataqueue.h"
;#include "debug.h"
;
;struct data_record_st dataQ[MAX_DATA_QUEUE];
;int last_wr_dataQ = 0;
;int last_rd_dataQ = 0;
;int dataQ_len = 0;
;
;/*============================================================*/
;int addDataQueue(unsigned long int timestamp, unsigned int channel, float value)
; 000E 000D {

	.CSEG
_addDataQueue:
; 000E 000E     if(dataQ_len == MAX_DATA_QUEUE){
	CALL __PUTPARD2
;	timestamp -> Y+6
;	channel -> Y+4
;	value -> Y+0
	LDS  R26,_dataQ_len
	LDS  R27,_dataQ_len+1
	SBIW R26,10
	BRNE _0x1C0003
; 000E 000F         return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	JMP  _0x20E004D
; 000E 0010     }
; 000E 0011 
; 000E 0012     dataQ[last_wr_dataQ].timestamp      = timestamp;
_0x1C0003:
	CALL SUBOPT_0x1E0
	SUBI R30,LOW(-_dataQ)
	SBCI R31,HIGH(-_dataQ)
	CALL SUBOPT_0x1D0
; 000E 0013     dataQ[last_wr_dataQ].channel        = channel;
	CALL SUBOPT_0x1E0
	__ADDW1MN _dataQ,4
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	STD  Z+0,R26
	STD  Z+1,R27
; 000E 0014     dataQ[last_wr_dataQ].value          = value;
	CALL SUBOPT_0x1E0
	__ADDW1MN _dataQ,6
	CALL SUBOPT_0x7A
	CALL SUBOPT_0x1D8
; 000E 0015 
; 000E 0016     last_wr_dataQ = (last_wr_dataQ + 1) % MAX_DATA_QUEUE;
	MOVW R26,R10
	ADIW R26,1
	LDI  R30,LOW(10)
	LDI  R31,HIGH(10)
	CALL __MODW21
	MOVW R10,R30
; 000E 0017 
; 000E 0018     dataQ_len++;
	LDI  R26,LOW(_dataQ_len)
	LDI  R27,HIGH(_dataQ_len)
	CALL SUBOPT_0x6E
; 000E 0019 
; 000E 001A     return 0;
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
	JMP  _0x20E004D
; 000E 001B }
;/*============================================================*/
;int fetchDataQueue(unsigned long int *timestamp, unsigned int *channel, float *value)
; 000E 001E {
_fetchDataQueue:
; 000E 001F     if(dataQ_len == 0){
	ST   -Y,R27
	ST   -Y,R26
;	*timestamp -> Y+4
;	*channel -> Y+2
;	*value -> Y+0
	LDS  R30,_dataQ_len
	LDS  R31,_dataQ_len+1
	SBIW R30,0
	BRNE _0x1C0004
; 000E 0020         return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	JMP  _0x20E004E
; 000E 0021     }
; 000E 0022 
; 000E 0023     *timestamp  =   dataQ[last_rd_dataQ].timestamp;
_0x1C0004:
	CALL SUBOPT_0x1E1
	SUBI R30,LOW(-_dataQ)
	SBCI R31,HIGH(-_dataQ)
	CALL SUBOPT_0x1E2
; 000E 0024     *channel    =   dataQ[last_rd_dataQ].channel;
	CALL SUBOPT_0x1E1
	__ADDW1MN _dataQ,4
	MOVW R26,R30
	CALL __GETW1P
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	ST   X+,R30
	ST   X,R31
; 000E 0025     *value      =   dataQ[last_rd_dataQ].value;
	CALL SUBOPT_0x1E1
	__ADDW1MN _dataQ,6
	MOVW R26,R30
	CALL __GETD1P
	LD   R26,Y
	LDD  R27,Y+1
	CALL __PUTDP1
; 000E 0026 
; 000E 0027     last_rd_dataQ = (last_rd_dataQ + 1) % MAX_DATA_QUEUE;
	MOVW R26,R12
	ADIW R26,1
	LDI  R30,LOW(10)
	LDI  R31,HIGH(10)
	CALL __MODW21
	MOVW R12,R30
; 000E 0028 
; 000E 0029     dataQ_len--;
	LDI  R26,LOW(_dataQ_len)
	LDI  R27,HIGH(_dataQ_len)
	JMP  _0x20E0050
; 000E 002A     return 0;
; 000E 002B }
;/*============================================================*/
;#include <stdio.h>
;#include <stdlib.h>
;#include <string.h>
;#include "status.h"
	#ifndef __SLEEP_DEFINED__
	#define __SLEEP_DEFINED__
	.EQU __se_bit=0x01
	.EQU __sm_mask=0x0E
	.EQU __sm_powerdown=0x04
	.EQU __sm_powersave=0x06
	.EQU __sm_standby=0x0C
	.EQU __sm_ext_standby=0x0E
	.EQU __sm_adc_noise_red=0x02
	.SET power_ctrl_reg=smcr
	#endif
;#include "config.h"
;#include "timer.h"
;#include "debug.h"
;
;/*eeprom*/ char sensorStatus[MAX_SENS_CHANNEL]                  = {SENS_NORMAL,SENS_NORMAL,SENS_NORMAL,SENS_NORMAL,SENS_NORMAL};
;/*eeprom*/ char dataStatus[MAX_SENS_CHANNEL]                    = {DATA_NORMAL,DATA_NORMAL,DATA_NORMAL,DATA_NORMAL,DATA_NORMAL};
;char mtncStatus                                             = MTNC_NORMAL;
;char powerSrcStatus                                         = PWR_NORMAL;
;char batteryStatus                                          = BATT_NORMAL;
;char dinStatus[USE_DIN]                                     = {UNKNOWN,UNKNOWN};

	.DSEG
;char doutStatus[USE_DIN]                                    = {UNKNOWN,UNKNOWN};
;char serverCommStatus                                       = UNKNOWN;
;char lanStatus                                              = 0;
;char memoryStatus                                           = MEM_NORMAL;
;
;float batteryVolt                                           = 0.0;
;
;/*
;char dataLowerStatus[MAX_SENS_CHANNEL]           = {UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN};
;char dataLowerDelayStatus[MAX_SENS_CHANNEL]      = {UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN};
;char dataLowerExtremeStatus[MAX_SENS_CHANNEL]    = {UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN};
;char dataUpperStatus[MAX_SENS_CHANNEL]           = {UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN};
;char dataUpperDelayStatus[MAX_SENS_CHANNEL]      = {UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN};
;char dataUpperExtremeStatus[MAX_SENS_CHANNEL]    = {UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN};
;*/
;
;/****
;*  "sensor.h" -> struct sens_val_st sensor[]
;*
;****/
;/*============================================================*/
;int updateMIPStatus(void)
; 000F 0025 {

	.CSEG
; 000F 0026     // -- depend on menu -- //
; 000F 0027     return 0;
; 000F 0028 }
;/*============================================================*/
;int updateBatteryStatus(void)
; 000F 002B {
_updateBatteryStatus:
; 000F 002C     static TIMER    t               = 0;
; 000F 002D     static char     t_flag          = 0;
; 000F 002E     static char     lastCheck       = 0;
; 000F 002F     char            current_status  = 0;
; 000F 0030 
; 000F 0031     if(MAIN_POWER_CONNECT){
	ST   -Y,R17
;	current_status -> R17
	LDI  R17,0
	LDS  R30,259
	ANDI R30,LOW(0x80)
	LDI  R31,0
	CALL __ASRW3
	CALL __ASRW4
	SBIW R30,0
	BRNE _0x1E0006
; 000F 0032         powerSrcStatus      =   PWR_NORMAL;
	LDI  R30,LOW(0)
	STS  _powerSrcStatus,R30
; 000F 0033         batteryStatus       =   BATT_NORMAL;
	STS  _batteryStatus,R30
; 000F 0034         batteryVolt         =   4.2;
	__GETD1N 0x40866666
	CALL SUBOPT_0x1E3
; 000F 0035         return 0;
	RJMP _0x20E0058
; 000F 0036     }
; 000F 0037     else{
_0x1E0006:
; 000F 0038         powerSrcStatus      =   PWR_DOWN;
	LDI  R30,LOW(1)
	STS  _powerSrcStatus,R30
; 000F 0039         batteryVolt         =   readBattery();
	CALL _readBattery
	CALL SUBOPT_0x1E3
; 000F 003A 
; 000F 003B         if(env_config.batteryLevel == 0)    // -- battery alarm disable --> always BATT_NORMAL -- //
	CALL SUBOPT_0x1E4
	CALL __CPD10
	BRNE _0x1E0008
; 000F 003C         {
; 000F 003D             batteryStatus = BATT_NORMAL;
	LDI  R30,LOW(0)
	STS  _batteryStatus,R30
; 000F 003E         }
; 000F 003F         else
	RJMP _0x1E0009
_0x1E0008:
; 000F 0040         {
; 000F 0041             if(batteryVolt < env_config.batteryLevel)
	CALL SUBOPT_0x1E4
	LDS  R26,_batteryVolt
	LDS  R27,_batteryVolt+1
	LDS  R24,_batteryVolt+2
	LDS  R25,_batteryVolt+3
	CALL __CMPF12
	BRSH _0x1E000A
; 000F 0042             {
; 000F 0043                 current_status      = BATT_LOW;
	LDI  R17,LOW(1)
; 000F 0044             }
; 000F 0045             else
	RJMP _0x1E000B
_0x1E000A:
; 000F 0046             {
; 000F 0047                 current_status      = BATT_NORMAL;
	LDI  R17,LOW(0)
; 000F 0048             }
_0x1E000B:
; 000F 0049 
; 000F 004A             if(lastCheck != current_status)
	LDS  R26,_lastCheck_S00F0001000
	CP   R17,R26
	BREQ _0x1E000C
; 000F 004B             {
; 000F 004C                 t_flag              = 0;
	LDI  R30,LOW(0)
	STS  _t_flag_S00F0001000,R30
; 000F 004D                 lastCheck           = current_status;
	STS  _lastCheck_S00F0001000,R17
; 000F 004E             }
; 000F 004F 
; 000F 0050             if(!t_flag)
_0x1E000C:
	LDS  R30,_t_flag_S00F0001000
	CPI  R30,0
	BRNE _0x1E000D
; 000F 0051             {
; 000F 0052                 TIMER_setTimer(&t,10);
	LDI  R30,LOW(_t_S00F0001000)
	LDI  R31,HIGH(_t_S00F0001000)
	CALL SUBOPT_0x25
; 000F 0053                 t_flag              = 1;
	LDI  R30,LOW(1)
	RJMP _0x1E005D
; 000F 0054             }
; 000F 0055             else
_0x1E000D:
; 000F 0056             {
; 000F 0057                 if(TIMER_checkTimerExceed(t))
	LDS  R26,_t_S00F0001000
	LDS  R27,_t_S00F0001000+1
	LDS  R24,_t_S00F0001000+2
	LDS  R25,_t_S00F0001000+3
	CALL _TIMER_checkTimerExceed
	SBIW R30,0
	BREQ _0x1E000F
; 000F 0058                 {
; 000F 0059                     batteryStatus   = current_status;
	STS  _batteryStatus,R17
; 000F 005A                     t_flag          = 0;
	LDI  R30,LOW(0)
_0x1E005D:
	STS  _t_flag_S00F0001000,R30
; 000F 005B                 }
; 000F 005C             }
_0x1E000F:
; 000F 005D         }// -- battery alarm enable -- //
_0x1E0009:
; 000F 005E         return 1;
	LDI  R30,LOW(1)
	LDI  R31,HIGH(1)
	RJMP _0x20E0057
; 000F 005F     }// -- main power disconnect -- //
; 000F 0060 
; 000F 0061     return 0;
_0x20E0058:
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
_0x20E0057:
	LD   R17,Y+
	RET
; 000F 0062 }
;/*============================================================*/
;int updateCommStatus(void)
; 000F 0065 {
_updateCommStatus:
; 000F 0066     int res;
; 000F 0067 
; 000F 0068     if(!IO_LAN_CONNECT){
	ST   -Y,R17
	ST   -Y,R16
;	res -> R16,R17
	LDS  R30,256
	CALL SUBOPT_0x1E5
	SBIW R30,0
	BREQ _0x1E0010
; 000F 0069         lanStatus                       = COMM_LAN_DISCONNECT;
	LDI  R30,LOW(1)
	STS  _lanStatus,R30
; 000F 006A 
; 000F 006B         serverCommStatus                = UNKNOWN;
	LDI  R30,LOW(255)
	STS  _serverCommStatus,R30
; 000F 006C 
; 000F 006D         commLostTimer                   = 0;                // -- re-initial -- //
	LDI  R30,LOW(0)
	STS  _commLostTimer,R30
	STS  _commLostTimer+1,R30
	STS  _commLostTimer+2,R30
	STS  _commLostTimer+3,R30
; 000F 006E         return 1;
	LDI  R30,LOW(1)
	LDI  R31,HIGH(1)
	RJMP _0x20E0056
; 000F 006F     }
; 000F 0070     else{
_0x1E0010:
; 000F 0071         lanStatus                       = COMM_LAN_CONNECT;
	LDI  R30,LOW(0)
	STS  _lanStatus,R30
; 000F 0072 
; 000F 0073         if((commLostTimer != 0xFFFFFFFF) && (commLostTimer != 0)){
	CALL SUBOPT_0x159
	CALL SUBOPT_0x2B
	BREQ _0x1E0013
	CALL SUBOPT_0x159
	CALL __CPD02
	BRNE _0x1E0014
_0x1E0013:
	RJMP _0x1E0012
_0x1E0014:
; 000F 0074             printDebug("<updateCommStatus> LostTimer time left = %ld(%lX)\r\n",(commLostTimer-baseCounter),(commLostTimer-baseCounter));
	__POINTD1FN _0x1E0000,0
	CALL SUBOPT_0x15B
	CALL SUBOPT_0x15B
	CALL SUBOPT_0x1F
; 000F 0075         }
; 000F 0076 
; 000F 0077         res = TIMER_checkTimerExceed(commLostTimer);
_0x1E0012:
	CALL SUBOPT_0x159
	CALL _TIMER_checkTimerExceed
	MOVW R16,R30
; 000F 0078         if(res < 0){
	TST  R17
	BRPL _0x1E0015
; 000F 0079             serverCommStatus            = UNKNOWN;              // -- unknown -- //
	LDI  R30,LOW(255)
	STS  _serverCommStatus,R30
; 000F 007A             return 0;
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
	RJMP _0x20E0056
; 000F 007B         }
; 000F 007C         else{
_0x1E0015:
; 000F 007D             if(res){
	MOV  R0,R16
	OR   R0,R17
	BREQ _0x1E0017
; 000F 007E                 if(serverCommStatus != COMM_LOST){
	LDS  R26,_serverCommStatus
	CPI  R26,LOW(0x2)
	BREQ _0x1E0018
; 000F 007F                     printDebug("<updateCommStatus> Server Down!!!\r\n");
	__POINTD1FN _0x1E0000,52
	CALL SUBOPT_0x2
; 000F 0080                 }
; 000F 0081                 serverCommStatus        = COMM_LOST;            // -- disconnect -- //
_0x1E0018:
	LDI  R30,LOW(2)
	STS  _serverCommStatus,R30
; 000F 0082                 return 1;
	LDI  R30,LOW(1)
	LDI  R31,HIGH(1)
	RJMP _0x20E0056
; 000F 0083             }
; 000F 0084             else{
_0x1E0017:
; 000F 0085                 if(serverCommStatus != COMM_NORMAL){
	LDS  R30,_serverCommStatus
	CPI  R30,0
	BREQ _0x1E001A
; 000F 0086                     printDebug("<updateCommStatus> Server Up!!!\r\n");
	__POINTD1FN _0x1E0000,88
	CALL SUBOPT_0x2
; 000F 0087                 }
; 000F 0088                 serverCommStatus        = COMM_NORMAL;          // -- connect -- //
_0x1E001A:
	LDI  R30,LOW(0)
	STS  _serverCommStatus,R30
; 000F 0089                 return 0;
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
; 000F 008A             }
; 000F 008B         }
; 000F 008C     }
; 000F 008D }
_0x20E0056:
	LD   R16,Y+
	LD   R17,Y+
	RET
;/*============================================================*/
;int updateMemoryStatus(void)
; 000F 0090 {
_updateMemoryStatus:
; 000F 0091 //    if(env_config.memoryMin == 0)    // -- memory alarm disable --> always MEM_NORMAL -- //
; 000F 0092 //    {
; 000F 0093 //            memoryStatus        = MEM_NORMAL;
; 000F 0094 //    }
; 000F 0095 //    else
; 000F 0096 //    {
; 000F 0097         if(sdFreeSpace == 0)
	CALL SUBOPT_0x1E6
	BRNE _0x1E001B
; 000F 0098         {
; 000F 0099             memoryStatus    = MEM_ERROR;
	LDI  R30,LOW(2)
	RJMP _0x1E005E
; 000F 009A         }
; 000F 009B         else if((int)(sdFreeSpace/1024) < env_config.memoryMin)
_0x1E001B:
	CALL SUBOPT_0x26
	__GETD1N 0x400
	CALL __DIVD21U
	MOVW R26,R30
	__GETW1MN _env_config,16
	CP   R26,R30
	CPC  R27,R31
	BRSH _0x1E001D
; 000F 009C         {
; 000F 009D             memoryStatus    = MEM_LOW;
	LDI  R30,LOW(1)
	RJMP _0x1E005E
; 000F 009E         }
; 000F 009F         else
_0x1E001D:
; 000F 00A0         {
; 000F 00A1             memoryStatus    = MEM_NORMAL;
	LDI  R30,LOW(0)
_0x1E005E:
	STS  _memoryStatus,R30
; 000F 00A2         }
; 000F 00A3 //    }// -- memory alarm enable -- //
; 000F 00A4 
; 000F 00A5     if( memoryStatus != MEM_NORMAL ){
	CPI  R30,0
	BREQ _0x1E001F
; 000F 00A6         return 1;
	LDI  R30,LOW(1)
	LDI  R31,HIGH(1)
	RET
; 000F 00A7     }
; 000F 00A8     else{
_0x1E001F:
; 000F 00A9         return 0;
	RJMP _0x20E0054
; 000F 00AA     }
; 000F 00AB }
;/*============================================================*/
;int updateSensorStatus(int ch)
; 000F 00AE {
_updateSensorStatus:
; 000F 00AF     if((ch<0) || (ch>=MAX_SENS_CHANNEL)){
	ST   -Y,R27
	ST   -Y,R26
;	ch -> Y+0
	LDD  R26,Y+1
	TST  R26
	BRMI _0x1E0022
	LD   R26,Y
	LDD  R27,Y+1
	SBIW R26,5
	BRLT _0x1E0021
_0x1E0022:
; 000F 00B0         printDebug("<checkProbeAlarm> sensor channel out of range (%d)\r\n",ch);
	__POINTD1FN _0x1E0000,122
	CALL SUBOPT_0x116
	CALL SUBOPT_0xD5
; 000F 00B1         return 0;
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
	RJMP _0x20E0055
; 000F 00B2     }
; 000F 00B3 
; 000F 00B4     sensorStatus[ch] = sensor[ch].status;
_0x1E0021:
	CALL SUBOPT_0x1E7
	__PUTW1R 23,24
	LD   R26,Y
	LDD  R27,Y+1
	LDI  R30,LOW(5)
	CALL __MULB1W2U
	__ADDW1MN _sensor,4
	LD   R30,Z
	__GETW2R 23,24
	ST   X,R30
; 000F 00B5 
; 000F 00B6     if(sensorStatus[ch] == SENS_ERR_UNKNOWN){
	CALL SUBOPT_0x1E7
	LD   R26,Z
	CPI  R26,LOW(0xFF)
	BRNE _0x1E0024
; 000F 00B7         return 0;
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
	RJMP _0x20E0055
; 000F 00B8     }
; 000F 00B9     else if(sensorStatus[ch] != SENS_NORMAL){
_0x1E0024:
	CALL SUBOPT_0x1E7
	LD   R30,Z
	CPI  R30,0
	BREQ _0x1E0026
; 000F 00BA         //printDebug("<checkProbeAlarm> Channel %d ERR\r\n",ch);
; 000F 00BB         return 1;
	LDI  R30,LOW(1)
	LDI  R31,HIGH(1)
	RJMP _0x20E0055
; 000F 00BC     }
; 000F 00BD     else{
_0x1E0026:
; 000F 00BE         //printDebug("<checkProbeAlarm> Channel %d OK\r\n",ch);
; 000F 00BF         return 0;
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
; 000F 00C0     }
; 000F 00C1 }
_0x20E0055:
	ADIW R28,2
	RET
;/*============================================================*/
;int updateDataStatus(int ch)
; 000F 00C4 {
_updateDataStatus:
; 000F 00C5     static TIMER t[MAX_SENS_CHANNEL];
; 000F 00C6     static char flag_lower[MAX_SENS_CHANNEL] = {0,0,0,0,0};
; 000F 00C7     static char flag_upper[MAX_SENS_CHANNEL] = {0,0,0,0,0};
; 000F 00C8     int res = 0;
; 000F 00C9 
; 000F 00CA     if((ch<0) || (ch>=MAX_SENS_CHANNEL)){
	CALL SUBOPT_0x71
;	ch -> Y+2
;	res -> R16,R17
	__GETWRN 16,17,0
	LDD  R26,Y+3
	TST  R26
	BRMI _0x1E0029
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	SBIW R26,5
	BRLT _0x1E0028
_0x1E0029:
; 000F 00CB         printDebug("<updateDataStatus> ABORT: sensor channel out of range (%d)\r\n",ch);
	__POINTD1FN _0x1E0000,175
	CALL SUBOPT_0xEE
	CALL __CWD1
	RJMP _0x20E0053
; 000F 00CC         return 0;
; 000F 00CD     }
; 000F 00CE 
; 000F 00CF     if(sensor[ch].status != SENS_NORMAL){
_0x1E0028:
	CALL SUBOPT_0x108
	__ADDW1MN _sensor,4
	LD   R30,Z
	CPI  R30,0
	BREQ _0x1E002B
; 000F 00D0         //printDebug("<updateDataStatus> ABORT: sensor (%d) error\r\n",ch);
; 000F 00D1         return 0;
	RJMP _0x20E0052
; 000F 00D2     }
; 000F 00D3 
; 000F 00D4     if(sensor[ch].value < sensor_config[ch].lowerLimit){
_0x1E002B:
	CALL SUBOPT_0x108
	CALL SUBOPT_0x1E
	PUSH R23
	PUSH R22
	PUSH R31
	PUSH R30
	CALL SUBOPT_0xF5
	__ADDW1MN _sensor_config,9
	MOVW R26,R30
	CALL __GETD1P
	POP  R26
	POP  R27
	POP  R24
	POP  R25
	CALL __CMPF12
	BRSH _0x1E002C
; 000F 00D5 
; 000F 00D6         if(!flag_lower[ch])
	CALL SUBOPT_0x1E8
	LD   R30,Z
	CPI  R30,0
	BRNE _0x1E002D
; 000F 00D7         {
; 000F 00D8             TIMER_setTimer(&t[ch],sensor_config[ch].lowerDelay);
	CALL SUBOPT_0x1E9
	CALL SUBOPT_0x1EA
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	LDI  R30,LOW(29)
	CALL __MULB1W2U
	__ADDW1MN _sensor_config,13
	MOVW R26,R30
	CALL SUBOPT_0x1C
	CALL SUBOPT_0x1D
; 000F 00D9             flag_lower[ch] = 1;
	CALL SUBOPT_0x1E8
	LDI  R26,LOW(1)
	STD  Z+0,R26
; 000F 00DA         }
; 000F 00DB         else
	RJMP _0x1E002E
_0x1E002D:
; 000F 00DC         {
; 000F 00DD             if(TIMER_checkTimerExceed(t[ch]))
	CALL SUBOPT_0x1E9
	CALL SUBOPT_0x1DE
	CALL SUBOPT_0x1A
	BREQ _0x1E002F
; 000F 00DE             {
; 000F 00DF                 dataStatus[ch]              |=  DATA_LOWER_LIMIT;
	CALL SUBOPT_0x1EB
	ORI  R30,1
	ST   X,R30
; 000F 00E0                 //printDebug("<updateDataStatus> Probe %d lowerDelayLimit[%02X]\r\n", ch+1, dataStatus[ch]);   /////
; 000F 00E1             }
; 000F 00E2         }
_0x1E002F:
_0x1E002E:
; 000F 00E3         //dataStatus[ch]                      |=  DATA_LOWER_LIMIT;
; 000F 00E4         res |= 1;
	ORI  R16,LOW(1)
; 000F 00E5 
; 000F 00E6         //printDebug("<updateDataStatus> Probe %d lowerLimit[%02X] -- sensor[%f] vs config[%f]\r\n",
; 000F 00E7         //                ch+1,dataStatus[ch],sensor[ch].value,sensor_config[ch].lowerLimit);
; 000F 00E8     }
; 000F 00E9     else{
	RJMP _0x1E0030
_0x1E002C:
; 000F 00EA         flag_lower[ch] = 0;
	CALL SUBOPT_0x1E8
	LDI  R26,LOW(0)
	STD  Z+0,R26
; 000F 00EB         dataStatus[ch]                      &=  ~DATA_LOWER_LIMIT;
	CALL SUBOPT_0x1EB
	ANDI R30,0xFE
	ST   X,R30
; 000F 00EC         //dataStatus[ch]                      &=  ~DATA_LOWER_DELAY;
; 000F 00ED     }
_0x1E0030:
; 000F 00EE 
; 000F 00EF     if(sensor[ch].value < sensor_config[ch].lowerExtreme)
	CALL SUBOPT_0x108
	CALL SUBOPT_0x1E
	PUSH R23
	PUSH R22
	PUSH R31
	PUSH R30
	CALL SUBOPT_0xF5
	__ADDW1MN _sensor_config,15
	MOVW R26,R30
	CALL __GETD1P
	POP  R26
	POP  R27
	POP  R24
	POP  R25
	CALL __CMPF12
	BRSH _0x1E0031
; 000F 00F0     {
; 000F 00F1         dataStatus[ch]                      |=  DATA_LOWER_EXTREME;
	CALL SUBOPT_0x1EB
	ORI  R30,2
	ST   X,R30
; 000F 00F2         res |= 1;
	ORI  R16,LOW(1)
; 000F 00F3 
; 000F 00F4         //printDebug("<updateDataStatus> Probe %d lowerExtreme[%02X] -- sensor[%f] vs config[%f]\r\n",
; 000F 00F5         //                ch+1,dataStatus[ch],sensor[ch].value,sensor_config[ch].lowerExtreme);
; 000F 00F6     }
; 000F 00F7     else
	RJMP _0x1E0032
_0x1E0031:
; 000F 00F8     {
; 000F 00F9         dataStatus[ch]                      &=  ~DATA_LOWER_EXTREME;
	CALL SUBOPT_0x1EB
	ANDI R30,0xFD
	ST   X,R30
; 000F 00FA     }
_0x1E0032:
; 000F 00FB 
; 000F 00FC     if(sensor[ch].value > sensor_config[ch].upperLimit)
	CALL SUBOPT_0x108
	CALL SUBOPT_0x1E
	PUSH R23
	PUSH R22
	PUSH R31
	PUSH R30
	CALL SUBOPT_0xF5
	__ADDW1MN _sensor_config,19
	MOVW R26,R30
	CALL __GETD1P
	POP  R26
	POP  R27
	POP  R24
	POP  R25
	CALL __CMPF12
	BREQ PC+2
	BRCC PC+3
	JMP  _0x1E0033
; 000F 00FD     {
; 000F 00FE         if(!flag_upper[ch])
	CALL SUBOPT_0x1EC
	LD   R30,Z
	CPI  R30,0
	BRNE _0x1E0034
; 000F 00FF         {
; 000F 0100             TIMER_setTimer(&t[ch],sensor_config[ch].upperDelay);
	CALL SUBOPT_0x1E9
	CALL SUBOPT_0x1EA
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	LDI  R30,LOW(29)
	CALL __MULB1W2U
	__ADDW1MN _sensor_config,23
	MOVW R26,R30
	CALL SUBOPT_0x1C
	CALL SUBOPT_0x1D
; 000F 0101             flag_upper[ch] = 1;
	CALL SUBOPT_0x1EC
	LDI  R26,LOW(1)
	STD  Z+0,R26
; 000F 0102         }
; 000F 0103         else
	RJMP _0x1E0035
_0x1E0034:
; 000F 0104         {
; 000F 0105             if(TIMER_checkTimerExceed(t[ch]))
	CALL SUBOPT_0x1E9
	CALL SUBOPT_0x1DE
	CALL SUBOPT_0x1A
	BREQ _0x1E0036
; 000F 0106             {
; 000F 0107                 dataStatus[ch]              |=  DATA_UPPER_LIMIT;
	CALL SUBOPT_0x1EB
	ORI  R30,4
	ST   X,R30
; 000F 0108             }
; 000F 0109         }
_0x1E0036:
_0x1E0035:
; 000F 010A         //dataStatus[ch]                      |=  DATA_UPPER_LIMIT;
; 000F 010B         res |= 1;
	ORI  R16,LOW(1)
; 000F 010C 
; 000F 010D         //printDebug("<updateDataStatus> Probe %d upperLimit -- sensor[%f] vs config[%f]\r\n",
; 000F 010E         //                ch+1,sensor[ch].value,sensor_config[ch].upperLimit);
; 000F 010F     }
; 000F 0110     else
	RJMP _0x1E0037
_0x1E0033:
; 000F 0111     {
; 000F 0112         flag_upper[ch] = 0;
	CALL SUBOPT_0x1EC
	LDI  R26,LOW(0)
	STD  Z+0,R26
; 000F 0113         dataStatus[ch]                      &=  ~DATA_UPPER_LIMIT;
	CALL SUBOPT_0x1EB
	ANDI R30,0xFB
	ST   X,R30
; 000F 0114         //dataStatus[ch]                      &=  ~DATA_UPPER_DELAY;
; 000F 0115     }
_0x1E0037:
; 000F 0116 
; 000F 0117     if(sensor[ch].value > sensor_config[ch].upperExtreme)
	CALL SUBOPT_0x108
	CALL SUBOPT_0x1E
	PUSH R23
	PUSH R22
	PUSH R31
	PUSH R30
	CALL SUBOPT_0xF5
	__ADDW1MN _sensor_config,25
	MOVW R26,R30
	CALL __GETD1P
	POP  R26
	POP  R27
	POP  R24
	POP  R25
	CALL __CMPF12
	BREQ PC+2
	BRCC PC+3
	JMP  _0x1E0038
; 000F 0118     {
; 000F 0119         dataStatus[ch]                      |=  DATA_UPPER_EXTREME;
	CALL SUBOPT_0x1EB
	ORI  R30,8
	ST   X,R30
; 000F 011A         res |= 1;
	ORI  R16,LOW(1)
; 000F 011B 
; 000F 011C         //printDebug("<updateDataStatus> Probe %d upperExtreme -- sensor[%f] vs config[%f]\r\n",
; 000F 011D         //                ch+1,sensor[ch].value,sensor_config[ch].upperExtreme);
; 000F 011E     }
; 000F 011F     else
	RJMP _0x1E0039
_0x1E0038:
; 000F 0120     {
; 000F 0121         dataStatus[ch]                      &=  ~DATA_UPPER_EXTREME;
	CALL SUBOPT_0x1EB
	ANDI R30,0XF7
	ST   X,R30
; 000F 0122     }
_0x1E0039:
; 000F 0123 
; 000F 0124     return res;
	MOVW R30,R16
	RJMP _0x20E0051
; 000F 0125 }
;/*============================================================*/
;int updateDinStatus(void)
; 000F 0128 {
_updateDinStatus:
; 000F 0129     static TIMER    t[USE_DIN]                  = {0,0};
; 000F 012A     static char     lastDinCheck[USE_DIN]       = {UNKNOWN,UNKNOWN};   // -- initial with unuse value -- //

	.DSEG

	.CSEG
; 000F 012B     static char     steadyState[USE_DIN]        = {0,0};
; 000F 012C     char            currentState                = UNKNOWN;
; 000F 012D     int             ch                          = 0;
; 000F 012E     int             ret                         = 0;
; 000F 012F 
; 000F 0130     for(ch=0;ch<USE_DIN;ch++)
	CALL __SAVELOCR6
;	currentState -> R17
;	ch -> R18,R19
;	ret -> R20,R21
	LDI  R17,255
	CALL SUBOPT_0x0
	__GETWRN 18,19,0
_0x1E003C:
	__CPWRN 18,19,2
	BRLT PC+3
	JMP _0x1E003D
; 000F 0131     {
; 000F 0132         if(din_config[ch].channelEnable == 0x01)
	CALL SUBOPT_0x13
	LD   R26,Z
	CPI  R26,LOW(0x1)
	BREQ PC+3
	JMP _0x1E003E
; 000F 0133         {
; 000F 0134             switch(ch){
	MOVW R30,R18
; 000F 0135                 case 0  : currentState = DIN1;  break;
	SBIW R30,0
	BRNE _0x1E0042
	LDS  R30,259
	CALL SUBOPT_0x1E5
	CALL __LNEGW1
	MOV  R17,R30
	RJMP _0x1E0041
; 000F 0136                 case 1  : currentState = DIN2;  break;
_0x1E0042:
	CPI  R30,LOW(0x1)
	LDI  R26,HIGH(0x1)
	CPC  R31,R26
	BRNE _0x1E0044
	LDS  R30,259
	ANDI R30,LOW(0x8)
	LDI  R31,0
	CALL __ASRW3
	CALL __LNEGW1
	MOV  R17,R30
	RJMP _0x1E0041
; 000F 0137                 default : printDebug("<updateDinStatus> channel[%d] out of range\r\n",ch); return 0;
_0x1E0044:
	__POINTD1FN _0x1E0000,236
	CALL SUBOPT_0xF
	CALL SUBOPT_0x10
	CALL SUBOPT_0x64
	RJMP _0x20E004E
; 000F 0138             }
_0x1E0041:
; 000F 0139 
; 000F 013A             if(currentState != lastDinCheck[ch])
	LDI  R26,LOW(_lastDinCheck_S00F0006000)
	LDI  R27,HIGH(_lastDinCheck_S00F0006000)
	ADD  R26,R18
	ADC  R27,R19
	LD   R30,X
	CP   R30,R17
	BREQ _0x1E0045
; 000F 013B             {
; 000F 013C                 TIMER_setTimer(&t[ch],1);
	MOVW R30,R18
	LDI  R26,LOW(_t_S00F0006000)
	LDI  R27,HIGH(_t_S00F0006000)
	CALL SUBOPT_0x1EA
	__GETD2N 0x1
	CALL _TIMER_setTimer
; 000F 013D                 lastDinCheck[ch]    = currentState;
	MOVW R30,R18
	SUBI R30,LOW(-_lastDinCheck_S00F0006000)
	SBCI R31,HIGH(-_lastDinCheck_S00F0006000)
	ST   Z,R17
; 000F 013E                 steadyState[ch]     = 0;
	RJMP _0x1E005F
; 000F 013F             }
; 000F 0140             else if(!steadyState[ch])
_0x1E0045:
	LDI  R26,LOW(_steadyState_S00F0006000)
	LDI  R27,HIGH(_steadyState_S00F0006000)
	CALL SUBOPT_0xD
	BRNE _0x1E0047
; 000F 0141             {
; 000F 0142                 if(TIMER_checkTimerExceed(t[ch])){
	MOVW R30,R18
	LDI  R26,LOW(_t_S00F0006000)
	LDI  R27,HIGH(_t_S00F0006000)
	CALL SUBOPT_0x1DE
	CALL SUBOPT_0x1A
	BREQ _0x1E0048
; 000F 0143 
; 000F 0144                     steadyState[ch] = 1;
	LDI  R26,LOW(_steadyState_S00F0006000)
	LDI  R27,HIGH(_steadyState_S00F0006000)
	ADD  R26,R18
	ADC  R27,R19
	LDI  R30,LOW(1)
	ST   X,R30
; 000F 0145 
; 000F 0146                     if(currentState){
	CPI  R17,0
	BREQ _0x1E0049
; 000F 0147                         dinStatus[ch]   = DIN_RISING;
	LDI  R26,LOW(_dinStatus)
	LDI  R27,HIGH(_dinStatus)
	ADD  R26,R18
	ADC  R27,R19
	RJMP _0x1E0060
; 000F 0148                     }
; 000F 0149                     else{
_0x1E0049:
; 000F 014A                         dinStatus[ch]   = DIN_FALLING;
	LDI  R26,LOW(_dinStatus)
	LDI  R27,HIGH(_dinStatus)
	ADD  R26,R18
	ADC  R27,R19
	LDI  R30,LOW(0)
_0x1E0060:
	ST   X,R30
; 000F 014B                     }
; 000F 014C 
; 000F 014D                     ret += 1;
	__ADDWRN 20,21,1
; 000F 014E                 }
; 000F 014F                 else{
	RJMP _0x1E004B
_0x1E0048:
; 000F 0150                     steadyState[ch] = 0;
_0x1E005F:
	LDI  R26,LOW(_steadyState_S00F0006000)
	LDI  R27,HIGH(_steadyState_S00F0006000)
	CALL SUBOPT_0x11
; 000F 0151                 }
_0x1E004B:
; 000F 0152             }
; 000F 0153         }
_0x1E0047:
; 000F 0154     }
_0x1E003E:
	__ADDWRN 18,19,1
	RJMP _0x1E003C
_0x1E003D:
; 000F 0155 
; 000F 0156     return ret;
	MOVW R30,R20
	CALL __LOADLOCR6
	RJMP _0x20E004E
; 000F 0157 }
;/*============================================================*/
;int updateDoutStatus(void)
; 000F 015A {
_updateDoutStatus:
; 000F 015B     if(d_out[0]){   doutStatus[0]        = DOUT_HIGH; }
	LDS  R30,_d_out
	CPI  R30,0
	BREQ _0x1E004C
	LDI  R30,LOW(1)
	RJMP _0x1E0061
; 000F 015C     else{           doutStatus[0]        = DOUT_LOW; }
_0x1E004C:
	LDI  R30,LOW(0)
_0x1E0061:
	STS  _doutStatus,R30
; 000F 015D 
; 000F 015E     if(d_out[1]){   doutStatus[1]        = DOUT_HIGH; }
	__GETB1MN _d_out,1
	CPI  R30,0
	BREQ _0x1E004E
	LDI  R30,LOW(1)
	RJMP _0x1E0062
; 000F 015F     else{           doutStatus[1]        = DOUT_LOW; }
_0x1E004E:
	LDI  R30,LOW(0)
_0x1E0062:
	__PUTB1MN _doutStatus,1
; 000F 0160 
; 000F 0161     return 0;
_0x20E0054:
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
	RET
; 000F 0162 }
;/*============================================================*/
;int getDeviceState(unsigned short *state)
; 000F 0165 {
_getDeviceState:
; 000F 0166     int     i   = 0;
; 000F 0167 
; 000F 0168     *state      = 0x00;
	CALL SUBOPT_0x71
;	*state -> Y+2
;	i -> R16,R17
	__GETWRN 16,17,0
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	CALL SUBOPT_0xFC
; 000F 0169 
; 000F 016A     if(isDeviceConfig()){
	CALL _isDeviceConfig
	SBIW R30,0
	BREQ _0x1E0050
; 000F 016B         *state |= (1 << 15);
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	LD   R30,X+
	LD   R31,X+
	ORI  R31,HIGH(0x8000)
	RJMP _0x1E0063
; 000F 016C     }
; 000F 016D     else{
_0x1E0050:
; 000F 016E         *state &= ~(1 << 15);
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	LD   R30,X+
	LD   R31,X+
	ANDI R31,HIGH(0x7FFF)
_0x1E0063:
	ST   -X,R31
	ST   -X,R30
; 000F 016F     }
; 000F 0170 
; 000F 0171     if(operating_config.deviceEnable){
	__GETB1MN _operating_config,1
	CPI  R30,0
	BREQ _0x1E0052
; 000F 0172         *state |= (1 << 14);
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	LD   R30,X+
	LD   R31,X+
	ORI  R31,HIGH(0x4000)
	RJMP _0x1E0064
; 000F 0173     }
; 000F 0174     else{
_0x1E0052:
; 000F 0175         *state &= ~(1 << 14);
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	LD   R30,X+
	LD   R31,X+
	ANDI R31,HIGH(0xBFFF)
_0x1E0064:
	ST   -X,R31
	ST   -X,R30
; 000F 0176     }
; 000F 0177 
; 000F 0178     if(operating_config.mode == MODE_REALTIME){
	LDS  R26,_operating_config
	CPI  R26,LOW(0x10)
	BRNE _0x1E0054
; 000F 0179         *state |= (2 << 10);
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	LD   R30,X+
	LD   R31,X+
	ORI  R31,HIGH(0x800)
	RJMP _0x1E0065
; 000F 017A     }
; 000F 017B     else{
_0x1E0054:
; 000F 017C         *state |= (1 << 10);
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	LD   R30,X+
	LD   R31,X+
	ORI  R31,HIGH(0x400)
_0x1E0065:
	ST   -X,R31
	ST   -X,R30
; 000F 017D     }
; 000F 017E 
; 000F 017F     if(operating_config.alarmEnable){
	__GETB1MN _operating_config,2
	CPI  R30,0
	BREQ _0x1E0056
; 000F 0180         *state |= (2 << 8);
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	LD   R30,X+
	LD   R31,X+
	ORI  R31,HIGH(0x200)
	RJMP _0x1E0066
; 000F 0181     }
; 000F 0182     else{
_0x1E0056:
; 000F 0183         *state |= (1 << 8);
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	LD   R30,X+
	LD   R31,X+
	ORI  R31,HIGH(0x100)
_0x1E0066:
	ST   -X,R31
	ST   -X,R30
; 000F 0184     }
; 000F 0185 
; 000F 0186     for(i=0;i<MAX_SENS_CHANNEL;i++)
	__GETWRN 16,17,0
_0x1E0059:
	__CPWRN 16,17,5
	BRGE _0x1E005A
; 000F 0187     {
; 000F 0188         if(operating_config.sensorEnable[i]){
	__POINTW1MN _operating_config,3
	ADD  R30,R16
	ADC  R31,R17
	LD   R30,Z
	CPI  R30,0
	BREQ _0x1E005B
; 000F 0189             *state |= (1 << (4-i) );
	CALL SUBOPT_0x1ED
	OR   R30,R22
	OR   R31,R23
	RJMP _0x1E0067
; 000F 018A         }
; 000F 018B         else{
_0x1E005B:
; 000F 018C             *state &= ~(1 << (4-i) );
	CALL SUBOPT_0x1ED
	COM  R30
	COM  R31
	AND  R30,R22
	AND  R31,R23
_0x1E0067:
	MOVW R26,R24
	ST   X+,R30
	ST   X,R31
; 000F 018D         }
; 000F 018E     }
	__ADDWRN 16,17,1
	RJMP _0x1E0059
_0x1E005A:
; 000F 018F 
; 000F 0190     printDebug("<getDeviceState> state = [0x%04X]\r\n",*state);
	__POINTD1FN _0x1E0000,281
	CALL SUBOPT_0x12C
	CALL SUBOPT_0x1C
_0x20E0053:
	CALL __PUTPARD1
	CALL SUBOPT_0x10
; 000F 0191 
; 000F 0192     return 0;
_0x20E0052:
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
_0x20E0051:
	LDD  R17,Y+1
	LDD  R16,Y+0
	ADIW R28,4
	RET
; 000F 0193 }
;/*============================================================*/
;#include <stdlib.h>
;#include <stdio.h>
;#include "eventqueue.h"
;#include "debug.h"
;
;struct event_record_st eventQ[MAX_EVENT_QUEUE];
;int last_wr_eventQ = 0;
;int last_rd_eventQ = 0;
;int eventQ_len = 0;
;
;/*============================================================*/
;int addEventQueue(unsigned long int timestamp, unsigned char eventID, unsigned char eventStatus)
; 0010 000D {

	.CSEG
_addEventQueue:
; 0010 000E     if(eventQ_len == MAX_EVENT_QUEUE){
	ST   -Y,R26
;	timestamp -> Y+2
;	eventID -> Y+1
;	eventStatus -> Y+0
	LDS  R26,_eventQ_len
	LDS  R27,_eventQ_len+1
	SBIW R26,20
	BRNE _0x200003
; 0010 000F         return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E004E
; 0010 0010     }
; 0010 0011 
; 0010 0012     eventQ[last_wr_eventQ].timestamp        = timestamp;
_0x200003:
	CALL SUBOPT_0x1EE
	SUBI R30,LOW(-_eventQ)
	SBCI R31,HIGH(-_eventQ)
	CALL SUBOPT_0xA1
	CALL SUBOPT_0x1D8
; 0010 0013     eventQ[last_wr_eventQ].eventID          = eventID;
	CALL SUBOPT_0x1EE
	__ADDW1MN _eventQ,4
	LDD  R26,Y+1
	STD  Z+0,R26
; 0010 0014     eventQ[last_wr_eventQ].eventStatus      = eventStatus;
	CALL SUBOPT_0x1EE
	__ADDW1MN _eventQ,5
	LD   R26,Y
	STD  Z+0,R26
; 0010 0015 
; 0010 0016     last_wr_eventQ = (last_wr_eventQ + 1) % MAX_EVENT_QUEUE;
	LDS  R26,_last_wr_eventQ
	LDS  R27,_last_wr_eventQ+1
	ADIW R26,1
	LDI  R30,LOW(20)
	LDI  R31,HIGH(20)
	CALL __MODW21
	STS  _last_wr_eventQ,R30
	STS  _last_wr_eventQ+1,R31
; 0010 0017 
; 0010 0018     eventQ_len++;
	LDI  R26,LOW(_eventQ_len)
	LDI  R27,HIGH(_eventQ_len)
	LD   R30,X+
	LD   R31,X+
	ADIW R30,1
	RJMP _0x20E004F
; 0010 0019 
; 0010 001A     return 0;
; 0010 001B }
;/*============================================================*/
;int fetchEventQueue(unsigned long int *timestamp, unsigned char *eventID, unsigned char *eventStatus)
; 0010 001E {
_fetchEventQueue:
; 0010 001F     if(eventQ_len == 0){
	ST   -Y,R27
	ST   -Y,R26
;	*timestamp -> Y+4
;	*eventID -> Y+2
;	*eventStatus -> Y+0
	LDS  R30,_eventQ_len
	LDS  R31,_eventQ_len+1
	SBIW R30,0
	BRNE _0x200004
; 0010 0020         return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E004E
; 0010 0021     }
; 0010 0022 
; 0010 0023     *timestamp      =   eventQ[last_rd_eventQ].timestamp;
_0x200004:
	CALL SUBOPT_0x1EF
	SUBI R30,LOW(-_eventQ)
	SBCI R31,HIGH(-_eventQ)
	CALL SUBOPT_0x1E2
; 0010 0024     *eventID        =   eventQ[last_rd_eventQ].eventID;
	CALL SUBOPT_0x1EF
	__ADDW1MN _eventQ,4
	LD   R30,Z
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	ST   X,R30
; 0010 0025     *eventStatus    =   eventQ[last_rd_eventQ].eventStatus;
	CALL SUBOPT_0x1EF
	__ADDW1MN _eventQ,5
	CALL SUBOPT_0x1F0
; 0010 0026 
; 0010 0027     last_rd_eventQ  = (last_rd_eventQ + 1) % MAX_EVENT_QUEUE;
	LDS  R26,_last_rd_eventQ
	LDS  R27,_last_rd_eventQ+1
	ADIW R26,1
	LDI  R30,LOW(20)
	LDI  R31,HIGH(20)
	CALL __MODW21
	STS  _last_rd_eventQ,R30
	STS  _last_rd_eventQ+1,R31
; 0010 0028 
; 0010 0029     eventQ_len--;
	LDI  R26,LOW(_eventQ_len)
	LDI  R27,HIGH(_eventQ_len)
_0x20E0050:
	LD   R30,X+
	LD   R31,X+
	SBIW R30,1
_0x20E004F:
	ST   -X,R31
	ST   -X,R30
; 0010 002A     return 0;
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
_0x20E004E:
	ADIW R28,6
	RET
; 0010 002B }
;/*============================================================*/
;#include <stdlib.h>
;#include <stdio.h>
;#include "alarm.h"
	#ifndef __SLEEP_DEFINED__
	#define __SLEEP_DEFINED__
	.EQU __se_bit=0x01
	.EQU __sm_mask=0x0E
	.EQU __sm_powerdown=0x04
	.EQU __sm_powersave=0x06
	.EQU __sm_standby=0x0C
	.EQU __sm_ext_standby=0x0E
	.EQU __sm_adc_noise_red=0x02
	.SET power_ctrl_reg=smcr
	#endif
;#include "config.h"
;#include "debug.h"
;
;/*eeprom*/ char sensorAlarm[MAX_SENS_CHANNEL]   = {SENS_NORMAL,SENS_NORMAL,SENS_NORMAL,SENS_NORMAL,SENS_NORMAL};        // -- oled -- //
;/*eeprom*/ char dataAlarm[MAX_SENS_CHANNEL]     = {DATA_NORMAL,DATA_NORMAL,DATA_NORMAL,DATA_NORMAL,DATA_NORMAL};        // -- oled -- //
;/*eeprom*/ char dinAlarm[MAX_DI_CHANNEL]        = {UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,     // -- oled -- //
;                                               UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN};

	.DSEG
;/*eeprom*/ char ainAlarm[MAX_AI_CHANNEL]        = {UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,
;                                               UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN,UNKNOWN};
;/*eeprom*/ char muteAlarm                       = UNKNOWN;
;/*eeprom*/ char mtncAlarm                       = MTNC_NORMAL;
;/*eeprom*/ char powerSrcAlarm                   = PWR_NORMAL;
;/*eeprom*/ char batteryAlarm                    = BATT_NORMAL;                                                          // -- oled -- //
;/*eeprom*/ char communicationAlarm              = COMM_NORMAL;
;/*eeprom*/ char memoryAlarm                     = MEM_NORMAL;                                                           // -- oled -- //
;/*eeprom*/ char gsmAlarm                        = GSM_NORMAL;
;/*eeprom*/ char gsmBalanceAlarm                 = GBAL_NORMAL;
;
;/*============================================================*/
;/**************************************************************/
;/**************** Alarm Indicating decision *******************/
;/**************************************************************/
;int checkAlarm(char *srcList,int srcLen)
; 0011 001B {

	.CSEG
_checkAlarm:
; 0011 001C     int i=0, res=0, tmp=0;
; 0011 001D 
; 0011 001E     for(i=0;i<srcLen;i++)
	ST   -Y,R27
	ST   -Y,R26
	CALL SUBOPT_0x28
;	*srcList -> Y+8
;	srcLen -> Y+6
;	i -> R16,R17
;	res -> R18,R19
;	tmp -> R20,R21
	__GETWRN 16,17,0
_0x220006:
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	CP   R16,R30
	CPC  R17,R31
	BRGE _0x220007
; 0011 001F     {
; 0011 0020         tmp  = checkAlarmFromSrc(srcList[i]);
	MOVW R30,R16
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	ADD  R26,R30
	ADC  R27,R31
	LD   R26,X
	RCALL _checkAlarmFromSrc
	MOVW R20,R30
; 0011 0021         res |= tmp;
	__ORWRR 18,19,20,21
; 0011 0022         //printDebug("<checkAlarm> SRC[0x%02X] -> %d\r\n",srcList[i],tmp);
; 0011 0023     }
	__ADDWRN 16,17,1
	RJMP _0x220006
_0x220007:
; 0011 0024 
; 0011 0025     return res;
	MOVW R30,R18
	CALL __LOADLOCR6
_0x20E004D:
	ADIW R28,10
	RET
; 0011 0026 }
;/*============================================================*/
;int checkAlarmFromSrc(char alarmSrc)
; 0011 0029 {
_checkAlarmFromSrc:
; 0011 002A     int i   = 0;
; 0011 002B     int res = 0;
; 0011 002C 
; 0011 002D     switch(alarmSrc)
	ST   -Y,R26
	CALL __SAVELOCR4
;	alarmSrc -> Y+4
;	i -> R16,R17
;	res -> R18,R19
	__GETWRN 16,17,0
	__GETWRN 18,19,0
	LDD  R30,Y+4
	LDI  R31,0
; 0011 002E     {
; 0011 002F         case SRC_SENS1_EVENT             :  if(((sensorStatus[0]!= SENS_NORMAL) && (sensorStatus[0] != SENS_ERR_UNKNOWN)) ||
	CPI  R30,LOW(0xC0)
	LDI  R26,HIGH(0xC0)
	CPC  R31,R26
	BRNE _0x22000B
; 0011 0030                                                 (dataStatus[0]  != DATA_NORMAL))        res = 1;    break;
	LDS  R26,_sensorStatus
	CPI  R26,LOW(0x0)
	BREQ _0x22000D
	CPI  R26,LOW(0xFF)
	BRNE _0x22000F
_0x22000D:
	LDS  R26,_dataStatus
	CPI  R26,LOW(0x0)
	BREQ _0x22000C
_0x22000F:
	__GETWRN 18,19,1
_0x22000C:
	RJMP _0x22000A
; 0011 0031         case SRC_SENS1_LOWER             :  if(dataStatus[0]    &  DATA_LOWER_LIMIT)    res = 1;    break;
_0x22000B:
	CPI  R30,LOW(0xC1)
	LDI  R26,HIGH(0xC1)
	CPC  R31,R26
	BRNE _0x220011
	LDS  R30,_dataStatus
	ANDI R30,LOW(0x1)
	BREQ _0x220012
	__GETWRN 18,19,1
_0x220012:
	RJMP _0x22000A
; 0011 0032         case SRC_SENS1_LOWERDELAY        :  if(dataStatus[0]    &  DATA_LOWER_DELAY)    res = 1;    break;
_0x220011:
	CPI  R30,LOW(0xC2)
	LDI  R26,HIGH(0xC2)
	CPC  R31,R26
	BRNE _0x220013
	LDS  R30,_dataStatus
	ANDI R30,LOW(0x11)
	BREQ _0x220014
	__GETWRN 18,19,1
_0x220014:
	RJMP _0x22000A
; 0011 0033         case SRC_SENS1_LOWEREXTREME      :  if(dataStatus[0]    &  DATA_LOWER_EXTREME)  res = 1;    break;
_0x220013:
	CPI  R30,LOW(0xC3)
	LDI  R26,HIGH(0xC3)
	CPC  R31,R26
	BRNE _0x220015
	LDS  R30,_dataStatus
	ANDI R30,LOW(0x2)
	BREQ _0x220016
	__GETWRN 18,19,1
_0x220016:
	RJMP _0x22000A
; 0011 0034         case SRC_SENS1_UPPER             :  if(dataStatus[0]    &  DATA_UPPER_LIMIT)    res = 1;    break;
_0x220015:
	CPI  R30,LOW(0xC4)
	LDI  R26,HIGH(0xC4)
	CPC  R31,R26
	BRNE _0x220017
	LDS  R30,_dataStatus
	ANDI R30,LOW(0x4)
	BREQ _0x220018
	__GETWRN 18,19,1
_0x220018:
	RJMP _0x22000A
; 0011 0035         case SRC_SENS1_UPPERDELAY        :  if(dataStatus[0]    &  DATA_UPPER_DELAY)    res = 1;    break;
_0x220017:
	CPI  R30,LOW(0xC5)
	LDI  R26,HIGH(0xC5)
	CPC  R31,R26
	BRNE _0x220019
	LDS  R30,_dataStatus
	ANDI R30,LOW(0x14)
	BREQ _0x22001A
	__GETWRN 18,19,1
_0x22001A:
	RJMP _0x22000A
; 0011 0036         case SRC_SENS1_UPPEREXTREME      :  if(dataStatus[0]    &  DATA_UPPER_EXTREME)  res = 1;    break;
_0x220019:
	CPI  R30,LOW(0xC6)
	LDI  R26,HIGH(0xC6)
	CPC  R31,R26
	BRNE _0x22001B
	LDS  R30,_dataStatus
	ANDI R30,LOW(0x8)
	BREQ _0x22001C
	__GETWRN 18,19,1
_0x22001C:
	RJMP _0x22000A
; 0011 0037         case SRC_SENS1_ERROR             :  if((sensorStatus[0] != SENS_NORMAL) &&
_0x22001B:
	CPI  R30,LOW(0xC7)
	LDI  R26,HIGH(0xC7)
	CPC  R31,R26
	BRNE _0x22001D
; 0011 0038                                                (sensorStatus[0] != SENS_ERR_UNKNOWN))   res = 1;    break;
	LDS  R26,_sensorStatus
	CPI  R26,LOW(0x0)
	BREQ _0x22001F
	CPI  R26,LOW(0xFF)
	BRNE _0x220020
_0x22001F:
	RJMP _0x22001E
_0x220020:
	__GETWRN 18,19,1
_0x22001E:
	RJMP _0x22000A
; 0011 0039 
; 0011 003A         case SRC_SENS2_EVENT             :  if(((sensorStatus[1]!= SENS_NORMAL) && (sensorStatus[1] != SENS_ERR_UNKNOWN)) ||
_0x22001D:
	CPI  R30,LOW(0xC8)
	LDI  R26,HIGH(0xC8)
	CPC  R31,R26
	BRNE _0x220021
; 0011 003B                                                 (dataStatus[1]  != DATA_NORMAL))        res = 1;    break;
	__GETB2MN _sensorStatus,1
	CPI  R26,LOW(0x0)
	BREQ _0x220023
	__GETB2MN _sensorStatus,1
	CPI  R26,LOW(0xFF)
	BRNE _0x220025
_0x220023:
	__GETB2MN _dataStatus,1
	CPI  R26,LOW(0x0)
	BREQ _0x220022
_0x220025:
	__GETWRN 18,19,1
_0x220022:
	RJMP _0x22000A
; 0011 003C         case SRC_SENS2_LOWER             :  if(dataStatus[1]    &  DATA_LOWER_LIMIT)    res = 1;    break;
_0x220021:
	CPI  R30,LOW(0xC9)
	LDI  R26,HIGH(0xC9)
	CPC  R31,R26
	BRNE _0x220027
	__GETB1MN _dataStatus,1
	ANDI R30,LOW(0x1)
	BREQ _0x220028
	__GETWRN 18,19,1
_0x220028:
	RJMP _0x22000A
; 0011 003D         case SRC_SENS2_LOWERDELAY        :  if(dataStatus[1]    &  DATA_LOWER_DELAY)    res = 1;    break;
_0x220027:
	CPI  R30,LOW(0xCA)
	LDI  R26,HIGH(0xCA)
	CPC  R31,R26
	BRNE _0x220029
	__GETB1MN _dataStatus,1
	ANDI R30,LOW(0x11)
	BREQ _0x22002A
	__GETWRN 18,19,1
_0x22002A:
	RJMP _0x22000A
; 0011 003E         case SRC_SENS2_LOWEREXTREME      :  if(dataStatus[1]    &  DATA_LOWER_EXTREME)  res = 1;    break;
_0x220029:
	CPI  R30,LOW(0xCB)
	LDI  R26,HIGH(0xCB)
	CPC  R31,R26
	BRNE _0x22002B
	__GETB1MN _dataStatus,1
	ANDI R30,LOW(0x2)
	BREQ _0x22002C
	__GETWRN 18,19,1
_0x22002C:
	RJMP _0x22000A
; 0011 003F         case SRC_SENS2_UPPER             :  if(dataStatus[1]    &  DATA_UPPER_LIMIT)    res = 1;    break;
_0x22002B:
	CPI  R30,LOW(0xCC)
	LDI  R26,HIGH(0xCC)
	CPC  R31,R26
	BRNE _0x22002D
	__GETB1MN _dataStatus,1
	ANDI R30,LOW(0x4)
	BREQ _0x22002E
	__GETWRN 18,19,1
_0x22002E:
	RJMP _0x22000A
; 0011 0040         case SRC_SENS2_UPPERDELAY        :  if(dataStatus[1]    &  DATA_UPPER_DELAY)    res = 1;    break;
_0x22002D:
	CPI  R30,LOW(0xCD)
	LDI  R26,HIGH(0xCD)
	CPC  R31,R26
	BRNE _0x22002F
	__GETB1MN _dataStatus,1
	ANDI R30,LOW(0x14)
	BREQ _0x220030
	__GETWRN 18,19,1
_0x220030:
	RJMP _0x22000A
; 0011 0041         case SRC_SENS2_UPPEREXTREME      :  if(dataStatus[1]    &  DATA_UPPER_EXTREME)  res = 1;    break;
_0x22002F:
	CPI  R30,LOW(0xCE)
	LDI  R26,HIGH(0xCE)
	CPC  R31,R26
	BRNE _0x220031
	__GETB1MN _dataStatus,1
	ANDI R30,LOW(0x8)
	BREQ _0x220032
	__GETWRN 18,19,1
_0x220032:
	RJMP _0x22000A
; 0011 0042         case SRC_SENS2_ERROR             :  if((sensorStatus[1] != SENS_NORMAL) &&
_0x220031:
	CPI  R30,LOW(0xCF)
	LDI  R26,HIGH(0xCF)
	CPC  R31,R26
	BRNE _0x220033
; 0011 0043                                                (sensorStatus[1] != SENS_ERR_UNKNOWN))   res = 1;    break;
	__GETB2MN _sensorStatus,1
	CPI  R26,LOW(0x0)
	BREQ _0x220035
	__GETB2MN _sensorStatus,1
	CPI  R26,LOW(0xFF)
	BRNE _0x220036
_0x220035:
	RJMP _0x220034
_0x220036:
	__GETWRN 18,19,1
_0x220034:
	RJMP _0x22000A
; 0011 0044 
; 0011 0045         case SRC_SENS3_EVENT             :  if(((sensorStatus[2]!= SENS_NORMAL) && (sensorStatus[2] != SENS_ERR_UNKNOWN)) ||
_0x220033:
	CPI  R30,LOW(0xD0)
	LDI  R26,HIGH(0xD0)
	CPC  R31,R26
	BRNE _0x220037
; 0011 0046                                                 (dataStatus[2]  != DATA_NORMAL))        res = 1;    break;
	__GETB2MN _sensorStatus,2
	CPI  R26,LOW(0x0)
	BREQ _0x220039
	__GETB2MN _sensorStatus,2
	CPI  R26,LOW(0xFF)
	BRNE _0x22003B
_0x220039:
	__GETB2MN _dataStatus,2
	CPI  R26,LOW(0x0)
	BREQ _0x220038
_0x22003B:
	__GETWRN 18,19,1
_0x220038:
	RJMP _0x22000A
; 0011 0047         case SRC_SENS3_LOWER             :  if(dataStatus[2]    &  DATA_LOWER_LIMIT)    res = 1;    break;
_0x220037:
	CPI  R30,LOW(0xD1)
	LDI  R26,HIGH(0xD1)
	CPC  R31,R26
	BRNE _0x22003D
	__GETB1MN _dataStatus,2
	ANDI R30,LOW(0x1)
	BREQ _0x22003E
	__GETWRN 18,19,1
_0x22003E:
	RJMP _0x22000A
; 0011 0048         case SRC_SENS3_LOWERDELAY        :  if(dataStatus[2]    &  DATA_LOWER_DELAY)    res = 1;    break;
_0x22003D:
	CPI  R30,LOW(0xD2)
	LDI  R26,HIGH(0xD2)
	CPC  R31,R26
	BRNE _0x22003F
	__GETB1MN _dataStatus,2
	ANDI R30,LOW(0x11)
	BREQ _0x220040
	__GETWRN 18,19,1
_0x220040:
	RJMP _0x22000A
; 0011 0049         case SRC_SENS3_LOWEREXTREME      :  if(dataStatus[2]    &  DATA_LOWER_EXTREME)  res = 1;    break;
_0x22003F:
	CPI  R30,LOW(0xD3)
	LDI  R26,HIGH(0xD3)
	CPC  R31,R26
	BRNE _0x220041
	__GETB1MN _dataStatus,2
	ANDI R30,LOW(0x2)
	BREQ _0x220042
	__GETWRN 18,19,1
_0x220042:
	RJMP _0x22000A
; 0011 004A         case SRC_SENS3_UPPER             :  if(dataStatus[2]    &  DATA_UPPER_LIMIT)    res = 1;    break;
_0x220041:
	CPI  R30,LOW(0xD4)
	LDI  R26,HIGH(0xD4)
	CPC  R31,R26
	BRNE _0x220043
	__GETB1MN _dataStatus,2
	ANDI R30,LOW(0x4)
	BREQ _0x220044
	__GETWRN 18,19,1
_0x220044:
	RJMP _0x22000A
; 0011 004B         case SRC_SENS3_UPPERDELAY        :  if(dataStatus[2]    &  DATA_UPPER_DELAY)    res = 1;    break;
_0x220043:
	CPI  R30,LOW(0xD5)
	LDI  R26,HIGH(0xD5)
	CPC  R31,R26
	BRNE _0x220045
	__GETB1MN _dataStatus,2
	ANDI R30,LOW(0x14)
	BREQ _0x220046
	__GETWRN 18,19,1
_0x220046:
	RJMP _0x22000A
; 0011 004C         case SRC_SENS3_UPPEREXTREME      :  if(dataStatus[2]    &  DATA_UPPER_EXTREME)  res = 1;    break;
_0x220045:
	CPI  R30,LOW(0xD6)
	LDI  R26,HIGH(0xD6)
	CPC  R31,R26
	BRNE _0x220047
	__GETB1MN _dataStatus,2
	ANDI R30,LOW(0x8)
	BREQ _0x220048
	__GETWRN 18,19,1
_0x220048:
	RJMP _0x22000A
; 0011 004D         case SRC_SENS3_ERROR             :  if((sensorStatus[2] != SENS_NORMAL) &&
_0x220047:
	CPI  R30,LOW(0xD7)
	LDI  R26,HIGH(0xD7)
	CPC  R31,R26
	BRNE _0x220049
; 0011 004E                                                (sensorStatus[2] != SENS_ERR_UNKNOWN))   res = 1;    break;
	__GETB2MN _sensorStatus,2
	CPI  R26,LOW(0x0)
	BREQ _0x22004B
	__GETB2MN _sensorStatus,2
	CPI  R26,LOW(0xFF)
	BRNE _0x22004C
_0x22004B:
	RJMP _0x22004A
_0x22004C:
	__GETWRN 18,19,1
_0x22004A:
	RJMP _0x22000A
; 0011 004F 
; 0011 0050         case SRC_SENS4_EVENT             :  if(((sensorStatus[3]!= SENS_NORMAL) && (sensorStatus[3] != SENS_ERR_UNKNOWN)) ||
_0x220049:
	CPI  R30,LOW(0xD8)
	LDI  R26,HIGH(0xD8)
	CPC  R31,R26
	BRNE _0x22004D
; 0011 0051                                                 (dataStatus[3]  != DATA_NORMAL))        res = 1;    break;
	__GETB2MN _sensorStatus,3
	CPI  R26,LOW(0x0)
	BREQ _0x22004F
	__GETB2MN _sensorStatus,3
	CPI  R26,LOW(0xFF)
	BRNE _0x220051
_0x22004F:
	__GETB2MN _dataStatus,3
	CPI  R26,LOW(0x0)
	BREQ _0x22004E
_0x220051:
	__GETWRN 18,19,1
_0x22004E:
	RJMP _0x22000A
; 0011 0052         case SRC_SENS4_LOWER             :  if(dataStatus[3]    &  DATA_LOWER_LIMIT)    res = 1;    break;
_0x22004D:
	CPI  R30,LOW(0xD9)
	LDI  R26,HIGH(0xD9)
	CPC  R31,R26
	BRNE _0x220053
	__GETB1MN _dataStatus,3
	ANDI R30,LOW(0x1)
	BREQ _0x220054
	__GETWRN 18,19,1
_0x220054:
	RJMP _0x22000A
; 0011 0053         case SRC_SENS4_LOWERDELAY        :  if(dataStatus[3]    &  DATA_LOWER_DELAY)    res = 1;    break;
_0x220053:
	CPI  R30,LOW(0xDA)
	LDI  R26,HIGH(0xDA)
	CPC  R31,R26
	BRNE _0x220055
	__GETB1MN _dataStatus,3
	ANDI R30,LOW(0x11)
	BREQ _0x220056
	__GETWRN 18,19,1
_0x220056:
	RJMP _0x22000A
; 0011 0054         case SRC_SENS4_LOWEREXTREME      :  if(dataStatus[3]    &  DATA_LOWER_EXTREME)  res = 1;    break;
_0x220055:
	CPI  R30,LOW(0xDB)
	LDI  R26,HIGH(0xDB)
	CPC  R31,R26
	BRNE _0x220057
	__GETB1MN _dataStatus,3
	ANDI R30,LOW(0x2)
	BREQ _0x220058
	__GETWRN 18,19,1
_0x220058:
	RJMP _0x22000A
; 0011 0055         case SRC_SENS4_UPPER             :  if(dataStatus[3]    &  DATA_UPPER_LIMIT)    res = 1;    break;
_0x220057:
	CPI  R30,LOW(0xDC)
	LDI  R26,HIGH(0xDC)
	CPC  R31,R26
	BRNE _0x220059
	__GETB1MN _dataStatus,3
	ANDI R30,LOW(0x4)
	BREQ _0x22005A
	__GETWRN 18,19,1
_0x22005A:
	RJMP _0x22000A
; 0011 0056         case SRC_SENS4_UPPERDELAY        :  if(dataStatus[3]    &  DATA_UPPER_DELAY)    res = 1;    break;
_0x220059:
	CPI  R30,LOW(0xDD)
	LDI  R26,HIGH(0xDD)
	CPC  R31,R26
	BRNE _0x22005B
	__GETB1MN _dataStatus,3
	ANDI R30,LOW(0x14)
	BREQ _0x22005C
	__GETWRN 18,19,1
_0x22005C:
	RJMP _0x22000A
; 0011 0057         case SRC_SENS4_UPPEREXTREME      :  if(dataStatus[3]    &  DATA_UPPER_EXTREME)  res = 1;    break;
_0x22005B:
	CPI  R30,LOW(0xDE)
	LDI  R26,HIGH(0xDE)
	CPC  R31,R26
	BRNE _0x22005D
	__GETB1MN _dataStatus,3
	ANDI R30,LOW(0x8)
	BREQ _0x22005E
	__GETWRN 18,19,1
_0x22005E:
	RJMP _0x22000A
; 0011 0058         case SRC_SENS4_ERROR             :  if((sensorStatus[3] != SENS_NORMAL) &&
_0x22005D:
	CPI  R30,LOW(0xDF)
	LDI  R26,HIGH(0xDF)
	CPC  R31,R26
	BRNE _0x22005F
; 0011 0059                                                (sensorStatus[3] != SENS_ERR_UNKNOWN))   res = 1;    break;
	__GETB2MN _sensorStatus,3
	CPI  R26,LOW(0x0)
	BREQ _0x220061
	__GETB2MN _sensorStatus,3
	CPI  R26,LOW(0xFF)
	BRNE _0x220062
_0x220061:
	RJMP _0x220060
_0x220062:
	__GETWRN 18,19,1
_0x220060:
	RJMP _0x22000A
; 0011 005A 
; 0011 005B         case SRC_SENS5_EVENT             :  if(((sensorStatus[4]!= SENS_NORMAL) && (sensorStatus[4] != SENS_ERR_UNKNOWN)) ||
_0x22005F:
	CPI  R30,LOW(0xE0)
	LDI  R26,HIGH(0xE0)
	CPC  R31,R26
	BRNE _0x220063
; 0011 005C                                                 (dataStatus[4]  != DATA_NORMAL))        res = 1;    break;
	__GETB2MN _sensorStatus,4
	CPI  R26,LOW(0x0)
	BREQ _0x220065
	__GETB2MN _sensorStatus,4
	CPI  R26,LOW(0xFF)
	BRNE _0x220067
_0x220065:
	__GETB2MN _dataStatus,4
	CPI  R26,LOW(0x0)
	BREQ _0x220064
_0x220067:
	__GETWRN 18,19,1
_0x220064:
	RJMP _0x22000A
; 0011 005D         case SRC_SENS5_LOWER             :  if(dataStatus[4]    &  DATA_LOWER_LIMIT)    res = 1;    break;
_0x220063:
	CPI  R30,LOW(0xE1)
	LDI  R26,HIGH(0xE1)
	CPC  R31,R26
	BRNE _0x220069
	__GETB1MN _dataStatus,4
	ANDI R30,LOW(0x1)
	BREQ _0x22006A
	__GETWRN 18,19,1
_0x22006A:
	RJMP _0x22000A
; 0011 005E         case SRC_SENS5_LOWERDELAY        :  if(dataStatus[4]    &  DATA_LOWER_DELAY)    res = 1;    break;
_0x220069:
	CPI  R30,LOW(0xE2)
	LDI  R26,HIGH(0xE2)
	CPC  R31,R26
	BRNE _0x22006B
	__GETB1MN _dataStatus,4
	ANDI R30,LOW(0x11)
	BREQ _0x22006C
	__GETWRN 18,19,1
_0x22006C:
	RJMP _0x22000A
; 0011 005F         case SRC_SENS5_LOWEREXTREME      :  if(dataStatus[4]    &  DATA_LOWER_EXTREME)  res = 1;    break;
_0x22006B:
	CPI  R30,LOW(0xE3)
	LDI  R26,HIGH(0xE3)
	CPC  R31,R26
	BRNE _0x22006D
	__GETB1MN _dataStatus,4
	ANDI R30,LOW(0x2)
	BREQ _0x22006E
	__GETWRN 18,19,1
_0x22006E:
	RJMP _0x22000A
; 0011 0060         case SRC_SENS5_UPPER             :  if(dataStatus[4]    &  DATA_UPPER_LIMIT)    res = 1;    break;
_0x22006D:
	CPI  R30,LOW(0xE4)
	LDI  R26,HIGH(0xE4)
	CPC  R31,R26
	BRNE _0x22006F
	__GETB1MN _dataStatus,4
	ANDI R30,LOW(0x4)
	BREQ _0x220070
	__GETWRN 18,19,1
_0x220070:
	RJMP _0x22000A
; 0011 0061         case SRC_SENS5_UPPERDELAY        :  if(dataStatus[4]    &  DATA_UPPER_DELAY)    res = 1;    break;
_0x22006F:
	CPI  R30,LOW(0xE5)
	LDI  R26,HIGH(0xE5)
	CPC  R31,R26
	BRNE _0x220071
	__GETB1MN _dataStatus,4
	ANDI R30,LOW(0x14)
	BREQ _0x220072
	__GETWRN 18,19,1
_0x220072:
	RJMP _0x22000A
; 0011 0062         case SRC_SENS5_UPPEREXTREME      :  if(dataStatus[4]    &  DATA_UPPER_EXTREME)  res = 1;    break;
_0x220071:
	CPI  R30,LOW(0xE6)
	LDI  R26,HIGH(0xE6)
	CPC  R31,R26
	BRNE _0x220073
	__GETB1MN _dataStatus,4
	ANDI R30,LOW(0x8)
	BREQ _0x220074
	__GETWRN 18,19,1
_0x220074:
	RJMP _0x22000A
; 0011 0063         case SRC_SENS5_ERROR             :  if((sensorStatus[4] != SENS_NORMAL) &&
_0x220073:
	CPI  R30,LOW(0xE7)
	LDI  R26,HIGH(0xE7)
	CPC  R31,R26
	BRNE _0x220075
; 0011 0064                                                (sensorStatus[4] != SENS_ERR_UNKNOWN))   res = 1;    break;
	__GETB2MN _sensorStatus,4
	CPI  R26,LOW(0x0)
	BREQ _0x220077
	__GETB2MN _sensorStatus,4
	CPI  R26,LOW(0xFF)
	BRNE _0x220078
_0x220077:
	RJMP _0x220076
_0x220078:
	__GETWRN 18,19,1
_0x220076:
	RJMP _0x22000A
; 0011 0065 
; 0011 0066         case SRC_DI_EVENT_ANY            :  break;
_0x220075:
	CPI  R30,LOW(0x71)
	LDI  R26,HIGH(0x71)
	CPC  R31,R26
	BRNE _0x220079
	RJMP _0x22000A
; 0011 0067         case SRC_DI_RISING_ANY           :  for(i=0;i<USE_DIN;i++){
_0x220079:
	CPI  R30,LOW(0x72)
	LDI  R26,HIGH(0x72)
	CPC  R31,R26
	BRNE _0x22007A
	__GETWRN 16,17,0
	__CPWRN 16,17,2
	BRGE _0x22007D
; 0011 0068                                                 if(dinStatus[i] == DIN_RISING)          res = 1;    break;
	LDI  R26,LOW(_dinStatus)
	LDI  R27,HIGH(_dinStatus)
	ADD  R26,R16
	ADC  R27,R17
	LD   R26,X
	CPI  R26,LOW(0x1)
	BRNE _0x22007E
	__GETWRN 18,19,1
_0x22007E:
; 0011 0069                                             }
_0x22007D:
; 0011 006A                                             break;
	RJMP _0x22000A
; 0011 006B         case SRC_DI_FALLING_ANY          :  for(i=0;i<USE_DIN;i++){
_0x22007A:
	CPI  R30,LOW(0x73)
	LDI  R26,HIGH(0x73)
	CPC  R31,R26
	BRNE _0x22007F
	__GETWRN 16,17,0
	__CPWRN 16,17,2
	BRGE _0x220082
; 0011 006C                                                 if(dinStatus[i] == DIN_FALLING)         res = 1;    break;
	LDI  R26,LOW(_dinStatus)
	LDI  R27,HIGH(_dinStatus)
	ADD  R26,R16
	ADC  R27,R17
	LD   R30,X
	CPI  R30,0
	BRNE _0x220083
	__GETWRN 18,19,1
_0x220083:
; 0011 006D                                             }
_0x220082:
; 0011 006E                                             break;
	RJMP _0x22000A
; 0011 006F 
; 0011 0070         case SRC_DI_EVENT(0)             :  break;
_0x22007F:
	CPI  R30,LOW(0x40)
	LDI  R26,HIGH(0x40)
	CPC  R31,R26
	BRNE _0x220084
	RJMP _0x22000A
; 0011 0071         case SRC_DI_RISING(0)            :  if(dinStatus[0] == DIN_RISING) {
_0x220084:
	CPI  R30,LOW(0x50)
	LDI  R26,HIGH(0x50)
	CPC  R31,R26
	BRNE _0x220085
	LDS  R26,_dinStatus
	CPI  R26,LOW(0x1)
	BRNE _0x220086
; 0011 0072                                                 res = 1;
	__GETWRN 18,19,1
; 0011 0073 //                                                printDebug("DIN1 Rising Alarm \r\n");
; 0011 0074                                             }
; 0011 0075                                             break;
_0x220086:
	RJMP _0x22000A
; 0011 0076         case SRC_DI_FALLING(0)           :  if(dinStatus[0]     == DIN_FALLING)         res = 1;    break;
_0x220085:
	CPI  R30,LOW(0x60)
	LDI  R26,HIGH(0x60)
	CPC  R31,R26
	BRNE _0x220087
	LDS  R30,_dinStatus
	CPI  R30,0
	BRNE _0x220088
	__GETWRN 18,19,1
_0x220088:
	RJMP _0x22000A
; 0011 0077 
; 0011 0078         case SRC_DI_EVENT(1)             :  break;
_0x220087:
	CPI  R30,LOW(0x41)
	LDI  R26,HIGH(0x41)
	CPC  R31,R26
	BRNE _0x220089
	RJMP _0x22000A
; 0011 0079         case SRC_DI_RISING(1)            :  if(dinStatus[1]     == DIN_RISING)          res = 1;    break;
_0x220089:
	CPI  R30,LOW(0x51)
	LDI  R26,HIGH(0x51)
	CPC  R31,R26
	BRNE _0x22008A
	__GETB2MN _dinStatus,1
	CPI  R26,LOW(0x1)
	BRNE _0x22008B
	__GETWRN 18,19,1
_0x22008B:
	RJMP _0x22000A
; 0011 007A         case SRC_DI_FALLING(1)           :  if(dinStatus[1]     == DIN_FALLING)         res = 1;    break;
_0x22008A:
	CPI  R30,LOW(0x61)
	LDI  R26,HIGH(0x61)
	CPC  R31,R26
	BRNE _0x22008C
	__GETB1MN _dinStatus,1
	CPI  R30,0
	BRNE _0x22008D
	__GETWRN 18,19,1
_0x22008D:
	RJMP _0x22000A
; 0011 007B 
; 0011 007C         case SRC_MUTE_ALARM              :  break;
_0x22008C:
	CPI  R30,LOW(0x80)
	LDI  R26,HIGH(0x80)
	CPC  R31,R26
	BRNE _0x22008E
	RJMP _0x22000A
; 0011 007D         case SRC_MIP                     :  // --- wait for menu MIP --- //
_0x22008E:
	CPI  R30,LOW(0x81)
	LDI  R26,HIGH(0x81)
	CPC  R31,R26
	BRNE _0x22008F
; 0011 007E                                             break;
	RJMP _0x22000A
; 0011 007F         case SRC_POWER_DOWN              :  if(powerSrcStatus   == PWR_DOWN)            res = 1;    break;
_0x22008F:
	CPI  R30,LOW(0x82)
	LDI  R26,HIGH(0x82)
	CPC  R31,R26
	BRNE _0x220090
	LDS  R26,_powerSrcStatus
	CPI  R26,LOW(0x1)
	BRNE _0x220091
	__GETWRN 18,19,1
_0x220091:
	RJMP _0x22000A
; 0011 0080         case SRC_LOW_BATTERY             :  if(batteryStatus    == BATT_LOW)            res = 1;    break;
_0x220090:
	CPI  R30,LOW(0x83)
	LDI  R26,HIGH(0x83)
	CPC  R31,R26
	BRNE _0x220092
	LDS  R26,_batteryStatus
	CPI  R26,LOW(0x1)
	BRNE _0x220093
	__GETWRN 18,19,1
_0x220093:
	RJMP _0x22000A
; 0011 0081         case SRC_LOW_COMM_SIGNAL         :  break;
_0x220092:
	CPI  R30,LOW(0x84)
	LDI  R26,HIGH(0x84)
	CPC  R31,R26
	BRNE _0x220094
	RJMP _0x22000A
; 0011 0082         case SRC_LOW_MEMORY              :  if(memoryAlarm      == MEM_LOW)             res = 1;    break;
_0x220094:
	CPI  R30,LOW(0x85)
	LDI  R26,HIGH(0x85)
	CPC  R31,R26
	BRNE _0x220095
	LDS  R26,_memoryAlarm
	CPI  R26,LOW(0x1)
	BRNE _0x220096
	__GETWRN 18,19,1
_0x220096:
	RJMP _0x22000A
; 0011 0083         case SRC_MEMORY_ERROR            :  if(memoryAlarm      == MEM_ERROR)           res = 1;    break;
_0x220095:
	CPI  R30,LOW(0x86)
	LDI  R26,HIGH(0x86)
	CPC  R31,R26
	BRNE _0x220097
	LDS  R26,_memoryAlarm
	CPI  R26,LOW(0x2)
	BRNE _0x220098
	__GETWRN 18,19,1
_0x220098:
	RJMP _0x22000A
; 0011 0084         case SRC_LOST_OF_COMM            :  if(serverCommStatus == COMM_LOST) {
_0x220097:
	CPI  R30,LOW(0x87)
	LDI  R26,HIGH(0x87)
	CPC  R31,R26
	BRNE _0x220099
	LDS  R26,_serverCommStatus
	CPI  R26,LOW(0x2)
	BRNE _0x22009A
; 0011 0085                                                 res = 1;
	__GETWRN 18,19,1
; 0011 0086 //                                                printDebug("Comm Lost Alarm \r\n");
; 0011 0087                                             }
; 0011 0088 //                                            printDebug("Check Comm Lost \r\n");
; 0011 0089                                             break;
_0x22009A:
	RJMP _0x22000A
; 0011 008A         case SRC_GSM_LOW_SIGNAL          :
_0x220099:
	CPI  R30,LOW(0x90)
	LDI  R26,HIGH(0x90)
	CPC  R31,R26
	BREQ _0x22009C
; 0011 008B         case SRC_GSM_DATE_EXPIRED        :
	CPI  R30,LOW(0x91)
	LDI  R26,HIGH(0x91)
	CPC  R31,R26
	BRNE _0x22009D
_0x22009C:
; 0011 008C         case SRC_GSM_NO_OPERATOR         :
	RJMP _0x22009E
_0x22009D:
	CPI  R30,LOW(0x92)
	LDI  R26,HIGH(0x92)
	CPC  R31,R26
	BRNE _0x22009F
_0x22009E:
; 0011 008D         case SRC_GSM_TOP_UP              :
	RJMP _0x2200A0
_0x22009F:
	CPI  R30,LOW(0x93)
	LDI  R26,HIGH(0x93)
	CPC  R31,R26
	BRNE _0x2200A1
_0x2200A0:
; 0011 008E         case SRC_GSM_LOW_BALANCE         :
	RJMP _0x2200A2
_0x2200A1:
	CPI  R30,LOW(0x94)
	LDI  R26,HIGH(0x94)
	CPC  R31,R26
	BRNE _0x2200A3
_0x2200A2:
; 0011 008F         case SRC_GSM_UNKNOWN_FAILURE     :  printDebug("<checkAlarmFromSrc> GSM Not support yet [0x%02X]\r\n",alarmSrc);
	RJMP _0x2200A4
_0x2200A3:
	CPI  R30,LOW(0x9F)
	LDI  R26,HIGH(0x9F)
	CPC  R31,R26
	BRNE _0x2200A6
_0x2200A4:
	__POINTD1FN _0x220000,0
	RJMP _0x2200F1
; 0011 0090                                             break;
; 0011 0091 
; 0011 0092         default                          :  printDebug("<checkAlarmFromSrc> alarmSrc unknown [0x%02X]\r\n",alarmSrc);
_0x2200A6:
	__POINTD1FN _0x220000,51
_0x2200F1:
	CALL __PUTPARD1
	LDD  R30,Y+8
	CALL SUBOPT_0x27
; 0011 0093                                             break;
; 0011 0094     }
_0x22000A:
; 0011 0095 
; 0011 0096     return res;
	MOVW R30,R18
	CALL __LOADLOCR4
	ADIW R28,5
	RET
; 0011 0097 }
;/*============================================================*/
;
;/**************************************************************/
;/****************** Send Alarm Detection **********************/
;/**************************************************************/
;/*============================================================*/
;int checkSendMIPAlarm(unsigned char *code)
; 0011 009F {
_checkSendMIPAlarm:
; 0011 00A0     if(mtncStatus != mtncAlarm)
	ST   -Y,R27
	ST   -Y,R26
;	*code -> Y+0
	LDS  R30,_mtncAlarm
	LDS  R26,_mtncStatus
	CP   R30,R26
	BREQ _0x2200A7
; 0011 00A1     {
; 0011 00A2         mtncAlarm   = mtncStatus;
	LDS  R30,_mtncStatus
	STS  _mtncAlarm,R30
; 0011 00A3         *code       = mtncStatus;
	LDS  R30,_mtncStatus
	LD   R26,Y
	LDD  R27,Y+1
	ST   X,R30
; 0011 00A4         return 1;
	LDI  R30,LOW(1)
	LDI  R31,HIGH(1)
	RJMP _0x20E004B
; 0011 00A5     }
; 0011 00A6 
; 0011 00A7     return 0;
_0x2200A7:
	RJMP _0x20E004C
; 0011 00A8 }
;/*============================================================*/
;int checkSendPowerAlarm(unsigned char *code)
; 0011 00AB {
_checkSendPowerAlarm:
; 0011 00AC     static TIMER    t           = 0;
; 0011 00AD     static char     t_flag      = 0;
; 0011 00AE     static char     lastCheck   = 0x69;   // -- initial with any unuse value -- //

	.DSEG

	.CSEG
; 0011 00AF 
; 0011 00B0     if(powerSrcStatus != powerSrcAlarm)
	ST   -Y,R27
	ST   -Y,R26
;	*code -> Y+0
	LDS  R30,_powerSrcAlarm
	LDS  R26,_powerSrcStatus
	CP   R30,R26
	BRNE PC+3
	JMP _0x2200A9
; 0011 00B1     {
; 0011 00B2         if(powerSrcStatus != lastCheck){
	LDS  R30,_lastCheck_S0110003000
	CP   R30,R26
	BREQ _0x2200AA
; 0011 00B3             t_flag      = 0;
	LDI  R30,LOW(0)
	STS  _t_flag_S0110003000,R30
; 0011 00B4             lastCheck   = powerSrcStatus;
	LDS  R30,_powerSrcStatus
	STS  _lastCheck_S0110003000,R30
; 0011 00B5         }
; 0011 00B6 
; 0011 00B7         if(!t_flag){
_0x2200AA:
	LDS  R30,_t_flag_S0110003000
	CPI  R30,0
	BRNE _0x2200AB
; 0011 00B8             if(powerSrcStatus == PWR_DOWN){
	LDS  R26,_powerSrcStatus
	CPI  R26,LOW(0x1)
	BRNE _0x2200AC
; 0011 00B9                 TIMER_setTimer(&t,30);
	LDI  R30,LOW(_t_S0110003000)
	LDI  R31,HIGH(_t_S0110003000)
	CALL SUBOPT_0x15A
	RJMP _0x2200F2
; 0011 00BA             }
; 0011 00BB             else{
_0x2200AC:
; 0011 00BC                 TIMER_setTimer(&t,3);
	LDI  R30,LOW(_t_S0110003000)
	LDI  R31,HIGH(_t_S0110003000)
	ST   -Y,R31
	ST   -Y,R30
	CALL SUBOPT_0x1F1
_0x2200F2:
	CALL _TIMER_setTimer
; 0011 00BD             }
; 0011 00BE             t_flag              = 1;
	LDI  R30,LOW(1)
	STS  _t_flag_S0110003000,R30
; 0011 00BF         }
; 0011 00C0         else{
	RJMP _0x2200AE
_0x2200AB:
; 0011 00C1             if(TIMER_checkTimerExceed(t))
	LDS  R26,_t_S0110003000
	LDS  R27,_t_S0110003000+1
	LDS  R24,_t_S0110003000+2
	LDS  R25,_t_S0110003000+3
	CALL _TIMER_checkTimerExceed
	SBIW R30,0
	BREQ _0x2200AF
; 0011 00C2             {
; 0011 00C3                 powerSrcAlarm   = powerSrcStatus;
	LDS  R30,_powerSrcStatus
	STS  _powerSrcAlarm,R30
; 0011 00C4 
; 0011 00C5                 *code           = powerSrcStatus;
	LDS  R30,_powerSrcStatus
	CALL SUBOPT_0x1F2
; 0011 00C6 
; 0011 00C7                 t_flag          = 0;
	STS  _t_flag_S0110003000,R30
; 0011 00C8                 return 1;
	LDI  R30,LOW(1)
	LDI  R31,HIGH(1)
	RJMP _0x20E004B
; 0011 00C9             }
; 0011 00CA         }
_0x2200AF:
_0x2200AE:
; 0011 00CB     }
; 0011 00CC     else
	RJMP _0x2200B0
_0x2200A9:
; 0011 00CD     {
; 0011 00CE         t_flag = 0;
	LDI  R30,LOW(0)
	STS  _t_flag_S0110003000,R30
; 0011 00CF     }
_0x2200B0:
; 0011 00D0 
; 0011 00D1     return 0;
	RJMP _0x20E004C
; 0011 00D2 }
;/*============================================================*/
;int checkSendBatteryAlarm(unsigned char *code)
; 0011 00D5 {
_checkSendBatteryAlarm:
; 0011 00D6     static TIMER    t           = 0;
; 0011 00D7     static char     t_flag      = 0;
; 0011 00D8     static char     lastCheck   = 0x69;   // -- initial with any unuse value -- //

	.DSEG

	.CSEG
; 0011 00D9 
; 0011 00DA     if(env_config.batteryLevel > 0)
	ST   -Y,R27
	ST   -Y,R26
;	*code -> Y+0
	__GETD2MN _env_config,6
	CALL __CPD02
	BRGE _0x2200B2
; 0011 00DB     {
; 0011 00DC         if(batteryStatus != batteryAlarm)
	LDS  R30,_batteryAlarm
	LDS  R26,_batteryStatus
	CP   R30,R26
	BREQ _0x2200B3
; 0011 00DD         {
; 0011 00DE             if(batteryStatus != lastCheck)
	LDS  R30,_lastCheck_S0110004000
	CP   R30,R26
	BREQ _0x2200B4
; 0011 00DF             {
; 0011 00E0                 t_flag      = 0;
	LDI  R30,LOW(0)
	STS  _t_flag_S0110004000,R30
; 0011 00E1                 lastCheck   = batteryStatus;
	LDS  R30,_batteryStatus
	STS  _lastCheck_S0110004000,R30
; 0011 00E2             }
; 0011 00E3 
; 0011 00E4             if(!t_flag)
_0x2200B4:
	LDS  R30,_t_flag_S0110004000
	CPI  R30,0
	BRNE _0x2200B5
; 0011 00E5             {
; 0011 00E6                 if(batteryStatus == BATT_LOW){
; 0011 00E7                     TIMER_setTimer(&t,10);
; 0011 00E8                 }
; 0011 00E9                 else{
; 0011 00EA                     TIMER_setTimer(&t,10);
_0x2200F3:
	LDI  R30,LOW(_t_S0110004000)
	LDI  R31,HIGH(_t_S0110004000)
	CALL SUBOPT_0x25
; 0011 00EB                 }
; 0011 00EC                 t_flag              = 1;
	LDI  R30,LOW(1)
	STS  _t_flag_S0110004000,R30
; 0011 00ED             }
; 0011 00EE             else
	RJMP _0x2200B8
_0x2200B5:
; 0011 00EF             {
; 0011 00F0                 if(TIMER_checkTimerExceed(t))
	LDS  R26,_t_S0110004000
	LDS  R27,_t_S0110004000+1
	LDS  R24,_t_S0110004000+2
	LDS  R25,_t_S0110004000+3
	CALL _TIMER_checkTimerExceed
	SBIW R30,0
	BREQ _0x2200B9
; 0011 00F1                 {
; 0011 00F2                     batteryAlarm   = batteryStatus;
	LDS  R30,_batteryStatus
	STS  _batteryAlarm,R30
; 0011 00F3 
; 0011 00F4                     *code           = batteryStatus;
	LDS  R30,_batteryStatus
	CALL SUBOPT_0x1F2
; 0011 00F5 
; 0011 00F6                     t_flag          = 0;
	STS  _t_flag_S0110004000,R30
; 0011 00F7                     return 1;
	LDI  R30,LOW(1)
	LDI  R31,HIGH(1)
	RJMP _0x20E004B
; 0011 00F8                 }
; 0011 00F9             }
_0x2200B9:
_0x2200B8:
; 0011 00FA         }
; 0011 00FB         else
	RJMP _0x2200BA
_0x2200B3:
; 0011 00FC         {
; 0011 00FD             t_flag = 0;
	LDI  R30,LOW(0)
	STS  _t_flag_S0110004000,R30
; 0011 00FE         }
_0x2200BA:
; 0011 00FF     }
; 0011 0100     else                                // -- battery alarm disable -- //
	RJMP _0x2200BB
_0x2200B2:
; 0011 0101     {
; 0011 0102         t           = 0;
	LDI  R30,LOW(0)
	STS  _t_S0110004000,R30
	STS  _t_S0110004000+1,R30
	STS  _t_S0110004000+2,R30
	STS  _t_S0110004000+3,R30
; 0011 0103         t_flag      = 0;
	STS  _t_flag_S0110004000,R30
; 0011 0104         lastCheck   = 0x69;
	LDI  R30,LOW(105)
	STS  _lastCheck_S0110004000,R30
; 0011 0105         if(batteryAlarm != BATT_NORMAL)
	LDS  R30,_batteryAlarm
	CPI  R30,0
	BREQ _0x2200BC
; 0011 0106         {
; 0011 0107             batteryAlarm    = BATT_NORMAL;
	LDI  R30,LOW(0)
	STS  _batteryAlarm,R30
; 0011 0108             *code           = BATT_NORMAL;
	CALL SUBOPT_0x1F3
; 0011 0109             return 1;
	RJMP _0x20E004B
; 0011 010A         }
; 0011 010B     }
_0x2200BC:
_0x2200BB:
; 0011 010C 
; 0011 010D     return 0;
	RJMP _0x20E004C
; 0011 010E }
;/*============================================================*/
;int checkSendMemoryAlarm(unsigned char *code)
; 0011 0111 {
_checkSendMemoryAlarm:
; 0011 0112     static TIMER    t      = 0;
; 0011 0113     static char     t_flag = 0;
; 0011 0114 
; 0011 0115     if(env_config.memoryMin > 0)
	ST   -Y,R27
	ST   -Y,R26
;	*code -> Y+0
	__GETW2MN _env_config,16
	CALL __CPW02
	BRSH _0x2200BD
; 0011 0116     {
; 0011 0117         if(memoryStatus != memoryAlarm)
	LDS  R30,_memoryAlarm
	LDS  R26,_memoryStatus
	CP   R30,R26
	BREQ _0x2200BE
; 0011 0118         {
; 0011 0119             if(!t_flag){
	LDS  R30,_t_flag_S0110005000
	CPI  R30,0
	BRNE _0x2200BF
; 0011 011A                 TIMER_setTimer(&t,15);
	LDI  R30,LOW(_t_S0110005000)
	LDI  R31,HIGH(_t_S0110005000)
	CALL SUBOPT_0x2C
; 0011 011B                 t_flag          = 1;
	LDI  R30,LOW(1)
	STS  _t_flag_S0110005000,R30
; 0011 011C             }
; 0011 011D             else{
	RJMP _0x2200C0
_0x2200BF:
; 0011 011E                 if(TIMER_checkTimerExceed(t))
	LDS  R26,_t_S0110005000
	LDS  R27,_t_S0110005000+1
	LDS  R24,_t_S0110005000+2
	LDS  R25,_t_S0110005000+3
	CALL _TIMER_checkTimerExceed
	SBIW R30,0
	BREQ _0x2200C1
; 0011 011F                 {
; 0011 0120                     memoryAlarm     = memoryStatus;
	LDS  R30,_memoryStatus
	STS  _memoryAlarm,R30
; 0011 0121 
; 0011 0122                     *code           = memoryStatus;
	LDS  R30,_memoryStatus
	CALL SUBOPT_0x1F2
; 0011 0123 
; 0011 0124                     t_flag          = 0;
	STS  _t_flag_S0110005000,R30
; 0011 0125 
; 0011 0126                     return 1;
	LDI  R30,LOW(1)
	LDI  R31,HIGH(1)
	RJMP _0x20E004B
; 0011 0127                 }
; 0011 0128             }
_0x2200C1:
_0x2200C0:
; 0011 0129         }
; 0011 012A         else{
	RJMP _0x2200C2
_0x2200BE:
; 0011 012B             t_flag              = 0;
	LDI  R30,LOW(0)
	STS  _t_flag_S0110005000,R30
; 0011 012C         }
_0x2200C2:
; 0011 012D     }
; 0011 012E     else                                // -- battery alarm disable -- //
	RJMP _0x2200C3
_0x2200BD:
; 0011 012F     {
; 0011 0130         t           = 0;
	LDI  R30,LOW(0)
	STS  _t_S0110005000,R30
	STS  _t_S0110005000+1,R30
	STS  _t_S0110005000+2,R30
	STS  _t_S0110005000+3,R30
; 0011 0131         t_flag      = 0;
	STS  _t_flag_S0110005000,R30
; 0011 0132         if(batteryAlarm != MEM_NORMAL)
	LDS  R30,_batteryAlarm
	CPI  R30,0
	BREQ _0x2200C4
; 0011 0133         {
; 0011 0134             memoryAlarm     = MEM_NORMAL;
	LDI  R30,LOW(0)
	STS  _memoryAlarm,R30
; 0011 0135             *code           = MEM_NORMAL;
	CALL SUBOPT_0x1F3
; 0011 0136             return 1;
	RJMP _0x20E004B
; 0011 0137         }
; 0011 0138     }
_0x2200C4:
_0x2200C3:
; 0011 0139 
; 0011 013A     return 0;
_0x20E004C:
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
_0x20E004B:
	ADIW R28,2
	RET
; 0011 013B }
;/*============================================================*/
;int checkSendDinAlarm(int ch, unsigned char *code)
; 0011 013E {
_checkSendDinAlarm:
; 0011 013F     static TIMER    t[USE_DIN]         = {0,0};
; 0011 0140     static char     t_flag[USE_DIN]    = {0,0};
; 0011 0141     static char     lastCheck[USE_DIN] = {0x69,0x69};   // -- initial with any unuse value -- //

	.DSEG

	.CSEG
; 0011 0142 
; 0011 0143     if((ch < 0) || (ch >= USE_DIN)){
	CALL SUBOPT_0xF2
;	ch -> Y+2
;	*code -> Y+0
	BRMI _0x2200C7
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	SBIW R26,2
	BRLT _0x2200C6
_0x2200C7:
; 0011 0144         printDebug("<checkSendDinAlarm> channel out of range [%d]\r\n",ch);
	__POINTD1FN _0x220000,99
	CALL SUBOPT_0xEE
	CALL SUBOPT_0xD5
; 0011 0145         return 0;
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
	JMP  _0x20E0042
; 0011 0146     }
; 0011 0147 
; 0011 0148     if(dinStatus[ch] != dinAlarm[ch])
_0x2200C6:
	CALL SUBOPT_0x1F4
	SUBI R30,LOW(-_dinAlarm)
	SBCI R31,HIGH(-_dinAlarm)
	LD   R30,Z
	CP   R30,R26
	BRNE PC+3
	JMP _0x2200C9
; 0011 0149     {
; 0011 014A         if(dinStatus[ch] != lastCheck[ch]){
	CALL SUBOPT_0x1F4
	SUBI R30,LOW(-_lastCheck_S0110006000)
	SBCI R31,HIGH(-_lastCheck_S0110006000)
	LD   R30,Z
	CP   R30,R26
	BREQ _0x2200CA
; 0011 014B             t_flag[ch]          = 0;
	CALL SUBOPT_0x1F5
	LDI  R26,LOW(0)
	STD  Z+0,R26
; 0011 014C             lastCheck[ch]       = dinStatus[ch];
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	SUBI R26,LOW(-_lastCheck_S0110006000)
	SBCI R27,HIGH(-_lastCheck_S0110006000)
	CALL SUBOPT_0x1F6
; 0011 014D         }
; 0011 014E 
; 0011 014F         if(!t_flag[ch]){
_0x2200CA:
	CALL SUBOPT_0x1F5
	LD   R30,Z
	CPI  R30,0
	BRNE _0x2200CB
; 0011 0150             TIMER_setTimer(&t[ch],5);
	LDD  R30,Y+2
	LDD  R31,Y+2+1
	LDI  R26,LOW(_t_S0110006000)
	LDI  R27,HIGH(_t_S0110006000)
	CALL SUBOPT_0x1EA
	__GETD2N 0x5
	CALL _TIMER_setTimer
; 0011 0151             t_flag[ch]          = 1;
	CALL SUBOPT_0x1F5
	LDI  R26,LOW(1)
	STD  Z+0,R26
; 0011 0152         }
; 0011 0153         else{
	RJMP _0x2200CC
_0x2200CB:
; 0011 0154             if(TIMER_checkTimerExceed(t[ch]))
	LDD  R30,Y+2
	LDD  R31,Y+2+1
	LDI  R26,LOW(_t_S0110006000)
	LDI  R27,HIGH(_t_S0110006000)
	CALL SUBOPT_0x1DE
	CALL SUBOPT_0x1A
	BREQ _0x2200CD
; 0011 0155             {
; 0011 0156                 dinAlarm[ch]    = dinStatus[ch];
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	SUBI R26,LOW(-_dinAlarm)
	SBCI R27,HIGH(-_dinAlarm)
	CALL SUBOPT_0x1F6
; 0011 0157                 *code           = dinStatus[ch];
	LDD  R30,Y+2
	LDD  R31,Y+2+1
	SUBI R30,LOW(-_dinStatus)
	SBCI R31,HIGH(-_dinStatus)
	CALL SUBOPT_0x1F0
; 0011 0158                 t_flag[ch]      = 0;
	CALL SUBOPT_0x1F5
	LDI  R26,LOW(0)
	STD  Z+0,R26
; 0011 0159                 return 1;
	LDI  R30,LOW(1)
	LDI  R31,HIGH(1)
	RJMP _0x20E0042
; 0011 015A             }
; 0011 015B         }
_0x2200CD:
_0x2200CC:
; 0011 015C     }
; 0011 015D     else{
	RJMP _0x2200CE
_0x2200C9:
; 0011 015E         t_flag[ch]              =   0;
	CALL SUBOPT_0x1F5
	LDI  R26,LOW(0)
	STD  Z+0,R26
; 0011 015F     }
_0x2200CE:
; 0011 0160 
; 0011 0161     return 0;
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
	RJMP _0x20E0042
; 0011 0162 }
;/*============================================================*/
;int checkSendSensorAlarm(int ch, unsigned char *code)
; 0011 0165 {
_checkSendSensorAlarm:
; 0011 0166     static TIMER    t[MAX_SENS_CHANNEL]         = {0,0,0,0,0};
; 0011 0167     static char     t_flag[MAX_SENS_CHANNEL]    = {0,0,0,0,0};
; 0011 0168     static char     lastCheck[MAX_SENS_CHANNEL] = {0x69,0x69,0x69,0x69,0x69};   // -- initial with any unuse value -- //

	.DSEG

	.CSEG
; 0011 0169 
; 0011 016A     if(sensorStatus[ch] != sensorAlarm[ch])
	CALL SUBOPT_0x1F7
;	ch -> Y+2
;	*code -> Y+0
	SUBI R30,LOW(-_sensorStatus)
	SBCI R31,HIGH(-_sensorStatus)
	LD   R26,Z
	LDD  R30,Y+2
	LDD  R31,Y+2+1
	SUBI R30,LOW(-_sensorAlarm)
	SBCI R31,HIGH(-_sensorAlarm)
	LD   R30,Z
	CP   R30,R26
	BRNE PC+3
	JMP _0x2200D0
; 0011 016B     {
; 0011 016C         if(sensorStatus[ch] != lastCheck[ch]){
	CALL SUBOPT_0x1F8
	LD   R26,Z
	LDD  R30,Y+2
	LDD  R31,Y+2+1
	SUBI R30,LOW(-_lastCheck_S0110007000)
	SBCI R31,HIGH(-_lastCheck_S0110007000)
	LD   R30,Z
	CP   R30,R26
	BREQ _0x2200D1
; 0011 016D             t_flag[ch]          = 0;
	CALL SUBOPT_0x1F9
	LDI  R26,LOW(0)
	STD  Z+0,R26
; 0011 016E             lastCheck[ch]       = sensorStatus[ch];
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	SUBI R26,LOW(-_lastCheck_S0110007000)
	SBCI R27,HIGH(-_lastCheck_S0110007000)
	CALL SUBOPT_0x1F8
	LD   R30,Z
	ST   X,R30
; 0011 016F         }
; 0011 0170 
; 0011 0171         if(!t_flag[ch]){
_0x2200D1:
	CALL SUBOPT_0x1F9
	LD   R30,Z
	CPI  R30,0
	BRNE _0x2200D2
; 0011 0172             if(sensorStatus[ch] == SENS_ERR_UNKNOWN){
	CALL SUBOPT_0x1F8
	LD   R26,Z
	CPI  R26,LOW(0xFF)
	BRNE _0x2200D3
; 0011 0173                 TIMER_setTimer(&t[ch],30);
	CALL SUBOPT_0x1FA
	__GETD2N 0x1E
	RJMP _0x2200F4
; 0011 0174             }
; 0011 0175             else{
_0x2200D3:
; 0011 0176                 TIMER_setTimer(&t[ch],3);
	CALL SUBOPT_0x1FA
	CALL SUBOPT_0x1F1
_0x2200F4:
	CALL _TIMER_setTimer
; 0011 0177             }
; 0011 0178             t_flag[ch]          = 1;
	CALL SUBOPT_0x1F9
	LDI  R26,LOW(1)
	STD  Z+0,R26
; 0011 0179         }
; 0011 017A         else{
	RJMP _0x2200D5
_0x2200D2:
; 0011 017B             if(TIMER_checkTimerExceed(t[ch]))
	LDD  R30,Y+2
	LDD  R31,Y+2+1
	LDI  R26,LOW(_t_S0110007000)
	LDI  R27,HIGH(_t_S0110007000)
	CALL SUBOPT_0x1DE
	CALL SUBOPT_0x1A
	BREQ _0x2200D6
; 0011 017C             {
; 0011 017D                 sensorAlarm[ch] = sensorStatus[ch];
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	SUBI R26,LOW(-_sensorAlarm)
	SBCI R27,HIGH(-_sensorAlarm)
	CALL SUBOPT_0x1F8
	LD   R30,Z
	ST   X,R30
; 0011 017E 
; 0011 017F                 *code           = sensorStatus[ch];
	CALL SUBOPT_0x1F8
	CALL SUBOPT_0x1F0
; 0011 0180 
; 0011 0181                 t_flag[ch]      = 0;
	CALL SUBOPT_0x1F9
	LDI  R26,LOW(0)
	STD  Z+0,R26
; 0011 0182                 return 1;
	LDI  R30,LOW(1)
	LDI  R31,HIGH(1)
	RJMP _0x20E0042
; 0011 0183             }
; 0011 0184         }
_0x2200D6:
_0x2200D5:
; 0011 0185     }
; 0011 0186     else{
	RJMP _0x2200D7
_0x2200D0:
; 0011 0187         t_flag[ch]              =   0;
	CALL SUBOPT_0x1F9
	LDI  R26,LOW(0)
	STD  Z+0,R26
; 0011 0188     }
_0x2200D7:
; 0011 0189 
; 0011 018A     return 0;
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
	RJMP _0x20E0042
; 0011 018B 
; 0011 018C     /*
; 0011 018D     if(sensorStatus[ch] != sensorAlarm[ch])
; 0011 018E     {
; 0011 018F         sensorAlarm[ch] = sensorStatus[ch];
; 0011 0190 
; 0011 0191         *code           = sensorStatus[ch];
; 0011 0192 
; 0011 0193         return 1;
; 0011 0194     }
; 0011 0195     */
; 0011 0196 
; 0011 0197     /*
; 0011 0198     // -- mask for an error and compare with reported alarm -- //
; 0011 0199     if((sensorStatus[ch] & SENS_ERR_LOWER_BOUND) != (sensorAlarm[ch] & SENS_ERR_LOWER_BOUND))
; 0011 019A     {
; 0011 019B         // -- check if it's an error or recover -- //
; 0011 019C         if( (sensorStatus[ch] & SENS_ERR_LOWER_BOUND) == SENS_ERR_LOWER_BOUND )     // -- error -- //
; 0011 019D         {
; 0011 019E 
; 0011 019F         }
; 0011 01A0         else                                                                        // -- recover -- //
; 0011 01A1         {
; 0011 01A2 
; 0011 01A3         }
; 0011 01A4         sensorAlarm[ch] = sensorStatus[ch];
; 0011 01A5 
; 0011 01A6         *code           = sensorStatus[ch];
; 0011 01A7 
; 0011 01A8         return 1;
; 0011 01A9     }
; 0011 01AA 
; 0011 01AB     return 0;
; 0011 01AC     */
; 0011 01AD }
;/*============================================================*/
;int checkSendDataAlarm(int ch, unsigned char *code)
; 0011 01B0 {
_checkSendDataAlarm:
; 0011 01B1     static TIMER    t[MAX_SENS_CHANNEL]      = {0,0,0,0,0};
; 0011 01B2     static char     t_flag[MAX_SENS_CHANNEL] = {0,0,0,0,0};
; 0011 01B3 
; 0011 01B4     if(dataStatus[ch] != dataAlarm[ch])
	CALL SUBOPT_0x1F7
;	ch -> Y+2
;	*code -> Y+0
	SUBI R30,LOW(-_dataStatus)
	SBCI R31,HIGH(-_dataStatus)
	LD   R26,Z
	LDD  R30,Y+2
	LDD  R31,Y+2+1
	SUBI R30,LOW(-_dataAlarm)
	SBCI R31,HIGH(-_dataAlarm)
	LD   R30,Z
	CP   R30,R26
	BRNE PC+3
	JMP _0x2200D8
; 0011 01B5     {
; 0011 01B6         if(!t_flag[ch]){
	CALL SUBOPT_0x1FB
	LD   R30,Z
	CPI  R30,0
	BRNE _0x2200D9
; 0011 01B7             TIMER_setTimer(&t[ch],3);
	LDD  R30,Y+2
	LDD  R31,Y+2+1
	LDI  R26,LOW(_t_S0110008000)
	LDI  R27,HIGH(_t_S0110008000)
	CALL SUBOPT_0x1EA
	CALL SUBOPT_0x1F1
	CALL _TIMER_setTimer
; 0011 01B8             t_flag[ch]          = 1;
	CALL SUBOPT_0x1FB
	LDI  R26,LOW(1)
	STD  Z+0,R26
; 0011 01B9 //            printDebug("<checkSendDataAlarm> Probe %d dataAlarm[0x%02X] != dataStatus[0x%02X]\r\n",ch+1,dataAlarm[ch],dataStatus[ch]);
; 0011 01BA         }
; 0011 01BB         else{
	RJMP _0x2200DA
_0x2200D9:
; 0011 01BC             if(TIMER_checkTimerExceed(t[ch]))
	LDD  R30,Y+2
	LDD  R31,Y+2+1
	LDI  R26,LOW(_t_S0110008000)
	LDI  R27,HIGH(_t_S0110008000)
	CALL SUBOPT_0x1DE
	CALL SUBOPT_0x1A
	BREQ _0x2200DB
; 0011 01BD             {
; 0011 01BE                 dataAlarm[ch]   = dataStatus[ch];
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	SUBI R26,LOW(-_dataAlarm)
	SBCI R27,HIGH(-_dataAlarm)
	LDD  R30,Y+2
	LDD  R31,Y+2+1
	SUBI R30,LOW(-_dataStatus)
	SBCI R31,HIGH(-_dataStatus)
	LD   R30,Z
	ST   X,R30
; 0011 01BF 
; 0011 01C0                 *code           = dataStatus[ch];
	LDD  R30,Y+2
	LDD  R31,Y+2+1
	SUBI R30,LOW(-_dataStatus)
	SBCI R31,HIGH(-_dataStatus)
	CALL SUBOPT_0x1F0
; 0011 01C1 
; 0011 01C2                 t_flag[ch]      = 0;
	CALL SUBOPT_0x1FB
	LDI  R26,LOW(0)
	STD  Z+0,R26
; 0011 01C3 
; 0011 01C4                 printDebug("<checkSendDataAlarm> Probe %d dataAlarm[0x%02X]\r\n",ch+1,dataAlarm[ch]);
	__POINTD1FN _0x220000,147
	CALL SUBOPT_0xEE
	ADIW R30,1
	CALL __CWD1
	CALL SUBOPT_0x110
	SUBI R30,LOW(-_dataAlarm)
	SBCI R31,HIGH(-_dataAlarm)
	CALL SUBOPT_0x1FC
; 0011 01C5 
; 0011 01C6                 return 1;
	LDI  R30,LOW(1)
	LDI  R31,HIGH(1)
	RJMP _0x20E0042
; 0011 01C7             }
; 0011 01C8         }
_0x2200DB:
_0x2200DA:
; 0011 01C9     }
; 0011 01CA     else{
	RJMP _0x2200DC
_0x2200D8:
; 0011 01CB         t_flag[ch]              = 0;
	CALL SUBOPT_0x1FB
	LDI  R26,LOW(0)
	STD  Z+0,R26
; 0011 01CC     }
_0x2200DC:
; 0011 01CD 
; 0011 01CE     return 0;
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
	RJMP _0x20E0042
; 0011 01CF 
; 0011 01D0     /*
; 0011 01D1     if(dataStatus[ch] != dataAlarm[ch])
; 0011 01D2     {
; 0011 01D3         dataAlarm[ch]   = dataStatus[ch];
; 0011 01D4 
; 0011 01D5         *code           = dataStatus[ch];
; 0011 01D6 
; 0011 01D7         return 1;
; 0011 01D8     }
; 0011 01D9     */
; 0011 01DA 
; 0011 01DB }
;/*============================================================*/
;
;/**************************************************************/
;/****************** Alarm Mute Management *********************/
;/**************************************************************/
;char muteMode   = 0;
;TIMER muteAlarmExpired  = 0xFFFFFFFF;       // -- initial with maximum TIMER value -- //

	.DSEG
;/*============================================================*/
;int ALARM_mute(unsigned long int period)
; 0011 01E5 {

	.CSEG
_ALARM_mute:
; 0011 01E6     if(period == 0){
	CALL SUBOPT_0x74
;	period -> Y+0
	BRNE _0x2200DE
; 0011 01E7         muteAlarmExpired    = 0xFFFFFFFF;
	CALL SUBOPT_0x23
	CALL SUBOPT_0x24
; 0011 01E8         muteMode            = MUTE_PERMAMENT;
	LDI  R30,LOW(1)
	RJMP _0x2200F5
; 0011 01E9     }
; 0011 01EA     else{
_0x2200DE:
; 0011 01EB         TIMER_setTimer(&muteAlarmExpired,period);
	LDI  R30,LOW(_muteAlarmExpired)
	LDI  R31,HIGH(_muteAlarmExpired)
	ST   -Y,R31
	ST   -Y,R30
	CALL SUBOPT_0xA1
	CALL _TIMER_setTimer
; 0011 01EC         muteMode            = MUTE_TEMPORARY;
	LDI  R30,LOW(2)
_0x2200F5:
	STS  _muteMode,R30
; 0011 01ED     }
; 0011 01EE 
; 0011 01EF     return 0;
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
	RJMP _0x20E0042
; 0011 01F0 }
;/*============================================================*/
;int ALARM_checkMuteExpired(void)
; 0011 01F3 {
_ALARM_checkMuteExpired:
; 0011 01F4     switch(muteMode){
	LDS  R30,_muteMode
	CALL SUBOPT_0x18C
; 0011 01F5         case MUTE_PERMAMENT :   return 0;
	BREQ _0x20E0049
; 0011 01F6                                 break;
; 0011 01F7         case MUTE_TEMPORARY :   if( TIMER_checkTimerExceed(muteAlarmExpired) ){
	CPI  R30,LOW(0x2)
	LDI  R26,HIGH(0x2)
	CPC  R31,R26
	BRNE _0x2200E7
	LDS  R26,_muteAlarmExpired
	LDS  R27,_muteAlarmExpired+1
	LDS  R24,_muteAlarmExpired+2
	LDS  R25,_muteAlarmExpired+3
	CALL _TIMER_checkTimerExceed
	SBIW R30,0
	BRNE _0x20E004A
; 0011 01F8                                     return 1;
; 0011 01F9                                 }
; 0011 01FA                                 else{
; 0011 01FB                                     return 0;
	RJMP _0x20E0049
; 0011 01FC                                 }
; 0011 01FD                                 break;
; 0011 01FE         default :               printDebug("<ALARM_checkMuteExpired> invalid muteMode (%d)\r\n", muteMode);
_0x2200E7:
	__POINTD1FN _0x220000,197
	CALL __PUTPARD1
	LDS  R30,_muteMode
	CALL SUBOPT_0x27
; 0011 01FF                                 return 1;
_0x20E004A:
	LDI  R30,LOW(1)
	LDI  R31,HIGH(1)
	RET
; 0011 0200     }
; 0011 0201     return 0;
_0x20E0049:
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
	RET
; 0011 0202 }
;/*============================================================*/
;
;/**************************************************************/
;/****************** Sevice Alarm Function *********************/
;/**************************************************************/
;/*============================================================*/
;void resetAlarm(void)
; 0011 020A {
_resetAlarm:
; 0011 020B     int i;
; 0011 020C 
; 0011 020D     for(i=0;i<MAX_SENS_CHANNEL;i++){
	CALL SUBOPT_0x86
;	i -> R16,R17
_0x2200E9:
	__CPWRN 16,17,5
	BRGE _0x2200EA
; 0011 020E         sensorAlarm[i]      =   SENS_NORMAL;
	LDI  R26,LOW(_sensorAlarm)
	LDI  R27,HIGH(_sensorAlarm)
	CALL SUBOPT_0x135
; 0011 020F         dataAlarm[i]        =   DATA_NORMAL;
	LDI  R26,LOW(_dataAlarm)
	LDI  R27,HIGH(_dataAlarm)
	CALL SUBOPT_0x135
; 0011 0210     }
	__ADDWRN 16,17,1
	RJMP _0x2200E9
_0x2200EA:
; 0011 0211     for(i=0;i<MAX_DI_CHANNEL;i++){
	__GETWRN 16,17,0
_0x2200EC:
	__CPWRN 16,17,16
	BRGE _0x2200ED
; 0011 0212         dinAlarm[i]         =   UNKNOWN;
	LDI  R26,LOW(_dinAlarm)
	LDI  R27,HIGH(_dinAlarm)
	ADD  R26,R16
	ADC  R27,R17
	LDI  R30,LOW(255)
	ST   X,R30
; 0011 0213     }
	__ADDWRN 16,17,1
	RJMP _0x2200EC
_0x2200ED:
; 0011 0214     for(i=0;i<MAX_AI_CHANNEL;i++){
	__GETWRN 16,17,0
_0x2200EF:
	__CPWRN 16,17,16
	BRGE _0x2200F0
; 0011 0215         ainAlarm[i]         =   UNKNOWN;
	LDI  R26,LOW(_ainAlarm)
	LDI  R27,HIGH(_ainAlarm)
	ADD  R26,R16
	ADC  R27,R17
	LDI  R30,LOW(255)
	ST   X,R30
; 0011 0216     }
	__ADDWRN 16,17,1
	RJMP _0x2200EF
_0x2200F0:
; 0011 0217     muteAlarm                       = UNKNOWN;
	LDI  R30,LOW(255)
	MOV  R6,R30
; 0011 0218     mtncAlarm                       = MTNC_NORMAL;
	LDI  R30,LOW(0)
	STS  _mtncAlarm,R30
; 0011 0219     powerSrcAlarm                   = PWR_NORMAL;
	STS  _powerSrcAlarm,R30
; 0011 021A     batteryAlarm                    = BATT_NORMAL;
	STS  _batteryAlarm,R30
; 0011 021B     communicationAlarm              = COMM_NORMAL;
	STS  _communicationAlarm,R30
; 0011 021C     memoryAlarm                     = MEM_NORMAL;
	STS  _memoryAlarm,R30
; 0011 021D     gsmAlarm                        = GSM_NORMAL;
	STS  _gsmAlarm,R30
; 0011 021E     gsmBalanceAlarm                 = GBAL_NORMAL;
	STS  _gsmBalanceAlarm,R30
; 0011 021F 
; 0011 0220 }
	RJMP _0x20E0040
;/*============================================================*/
;#include <stdio.h>
;#include <stdlib.h>
;#include <string.h>
;#include <delay.h>
;#include "oled.h"
	#ifndef __SLEEP_DEFINED__
	#define __SLEEP_DEFINED__
	.EQU __se_bit=0x01
	.EQU __sm_mask=0x0E
	.EQU __sm_powerdown=0x04
	.EQU __sm_powersave=0x06
	.EQU __sm_standby=0x0C
	.EQU __sm_ext_standby=0x0E
	.EQU __sm_adc_noise_red=0x02
	.SET power_ctrl_reg=smcr
	#endif
;#include "ds1672.h"
;#include "status.h"
;#include "alarm.h"
;#include "sensor.h"
;#include "config.h"
;#include "timer.h"
;#include "debug.h"
;
;/**************************************************************/
;/***************** OLED Service Page Function *****************/
;/**************************************************************/
;/*============================================================*/
;void OLED_showDateTime(int timezone)
; 0012 0013 {

	.CSEG
; 0012 0014     struct  rtc_structure   currentTime;
; 0012 0015 
; 0012 0016     RTC_getDateTime(&currentTime,timezone);
;	timezone -> Y+26
;	currentTime -> Y+0
; 0012 0017     printOLED("DT%02d-%02d-%04d",currentTime.date,currentTime.month,currentTime.year);
; 0012 0018     printOLED("TM%02d:%02d",currentTime.hour,currentTime.min);
; 0012 0019 
; 0012 001A }
;/*============================================================*/
;void OLED_showSensorValue(void)
; 0012 001D {
; 0012 001E     int i;
; 0012 001F 
; 0012 0020     for(i=0;i<MAX_SENS_CHANNEL;i++)
;	i -> R16,R17
; 0012 0021     {
; 0012 0022 
; 0012 0023         if( operating_config.sensorEnable[i] ){
; 0012 0024 
; 0012 0025             switch (sensor[i].status)
; 0012 0026             {
; 0012 0027                 case SENS_NORMAL            :   printOLED("DV%1d%.1f",i+1,sensor[i].value);
; 0012 0028                                                 break;
; 0012 0029                 case SENS_ERR_LOWER_BOUND   :   printOLED("DV%1dERRLB",i+1);
; 0012 002A                                                 break;
; 0012 002B                 case SENS_ERR_UPPER_BOUND   :   printOLED("DV%1dERRUB",i+1);
; 0012 002C                                                 break;
; 0012 002D                 case SENS_ERR_DISCONNECT    :   printOLED("DV%1dERRNC",i+1);
; 0012 002E                                                 break;
; 0012 002F                 case SENS_ERR_SHORT         :   printOLED("DV%1dERRSH",i+1);
; 0012 0030                                                 break;
; 0012 0031                 case SENS_ERR_UNKNOWN       :   printOLED("DV%1dDETECTING",i+1);
; 0012 0032                                                 break;
; 0012 0033                 default                     :   printDebug("<OLED_showSensorValue> sensor[%d].status unknown [0x%02X]\r\n",i+1,sensor[i].status);
; 0012 0034                                                 return;
; 0012 0035             }
; 0012 0036         }
; 0012 0037         else{
; 0012 0038             printOLED("DV%1dN/A",i+1);
; 0012 0039         }
; 0012 003A     }
; 0012 003B 
; 0012 003C     return;
; 0012 003D 
; 0012 003E }
;/*============================================================*/
;void OLED_showPowerStatus(char pwrSrc,float batLevel)
; 0012 0041 {
; 0012 0042 
; 0012 0043     if(pwrSrc == PWR_NORMAL){
;	pwrSrc -> Y+4
;	batLevel -> Y+0
; 0012 0044         printOLED("CG1");
; 0012 0045     }
; 0012 0046     else{
; 0012 0047         //printDebug("<OLED_showPowerStatus> batt = %f\r\n",batLevel);
; 0012 0048         if(batLevel < 3.0){
; 0012 0049             printOLED("BL0");
; 0012 004A         }
; 0012 004B         else if((batLevel >= 3.0) && (batLevel < 3.3)){
; 0012 004C             printOLED("BL1");
; 0012 004D         }
; 0012 004E         else if((batLevel >= 3.3) && (batLevel < 3.7)){
; 0012 004F             printOLED("BL2");
; 0012 0050         }
; 0012 0051         else if((batLevel >= 3.7) && (batLevel < 4.0)){
; 0012 0052             printOLED("BL3");
; 0012 0053         }
; 0012 0054         else if(batLevel >= 4.0){
; 0012 0055             printOLED("BL4");
; 0012 0056         }
; 0012 0057     }
; 0012 0058 }
;/*============================================================*/
;void OLED_showInputStatus(int ch,char state)
; 0012 005B {
; 0012 005C     if((ch < 0) || (ch >= 8)){
;	ch -> Y+1
;	state -> Y+0
; 0012 005D         printDebug("<OLED_showInputStatus> ERR: ch value out of range.!!\r\n");
; 0012 005E         return;
; 0012 005F     }
; 0012 0060 
; 0012 0061     if(din_config[ch].channelEnable != 0x01){
; 0012 0062         return;
; 0012 0063     }
; 0012 0064 
; 0012 0065     if((state != DIN_FALLING) && (state != DIN_RISING)){
; 0012 0066         //printDebug("<OLED_showInputStatus> ERR: state invalid [0x%02X]!!\r\n",state);
; 0012 0067         return;
; 0012 0068     }
; 0012 0069 
; 0012 006A     printOLED("IP%1d%1d",ch,state);
; 0012 006B }
;/*============================================================*/
;void OLED_showOutputStatus(int ch,char state)
; 0012 006E {
; 0012 006F     if((ch < 0) || (ch >= 8)){
;	ch -> Y+1
;	state -> Y+0
; 0012 0070         printDebug("<OLED_showOutputStatus> ERR: ch value out of range.!!\r\n");
; 0012 0071         return;
; 0012 0072     }
; 0012 0073 
; 0012 0074     if(dout_config[ch].channelEnable != 0x01){
; 0012 0075         return;
; 0012 0076     }
; 0012 0077 
; 0012 0078     if((state != LOW) && (state != HIGH)){
; 0012 0079         //printDebug("<OLED_showInputStatus> ERR: state invalid [0x%02X]!!\r\n",state);
; 0012 007A         return;
; 0012 007B     }
; 0012 007C 
; 0012 007D     printOLED("OP%1d%1d",ch,state);
; 0012 007E }
;/*============================================================*/
;void OLED_showServerCommStatus(char state)
; 0012 0081 {
; 0012 0082     printOLED("SC%1d",state);
;	state -> Y+0
; 0012 0083 }
;/*============================================================*/
;void OLED_showLanStatus(char state)
; 0012 0086 {
; 0012 0087     printOLED("LC%1d",state);
;	state -> Y+0
; 0012 0088 }
;/*============================================================*/
;void OLED_showBuzzerStatus(char state)
; 0012 008B {
; 0012 008C     printOLED("BZ%1d",state);
;	state -> Y+0
; 0012 008D }
;/*============================================================*/
;void OLED_showMemoryStatus(char state)
; 0012 0090 {
; 0012 0091     printOLED("MS%1d",state);
;	state -> Y+0
; 0012 0092 }
;/*============================================================*/
;void OLED_showAlarmStatus(void)
; 0012 0095 {
; 0012 0096     int     i=0;
; 0012 0097     char    flagSens[5],flagData[5],flagBatt,flagMemo;
; 0012 0098 
; 0012 0099     for(i=0;i<MAX_SENS_CHANNEL;i++)
;	i -> R16,R17
;	flagSens -> Y+9
;	flagData -> Y+4
;	flagBatt -> R19
;	flagMemo -> R18
; 0012 009A     {
; 0012 009B         if(operating_config.sensorEnable[i]){
; 0012 009C 
; 0012 009D             flagSens[i]         = sensorAlarm[i] ? 1:0;
; 0012 009E 
; 0012 009F             if(sensor_config[i].alarmEnable){
; 0012 00A0                 flagData[i]     = dataAlarm[i] ? 1:0;
; 0012 00A1             }
; 0012 00A2             else{
; 0012 00A3                 flagData[i]     = 0;
; 0012 00A4             }
; 0012 00A5         }
; 0012 00A6         else{
; 0012 00A7             flagSens[i]         = 0;
; 0012 00A8             flagData[i]         = 0;
; 0012 00A9         }
; 0012 00AA 
; 0012 00AB     }
; 0012 00AC 
; 0012 00AD     if(env_config.batteryLevel > 0){
; 0012 00AE         flagBatt                = batteryAlarm ? 1:0;
; 0012 00AF     }
; 0012 00B0     else{
; 0012 00B1         flagBatt                = 0;
; 0012 00B2     }
; 0012 00B3 
; 0012 00B4     if(env_config.memoryMin > 0){
; 0012 00B5         flagMemo                = memoryAlarm ? 1:0;
; 0012 00B6     }
; 0012 00B7     else{
; 0012 00B8         flagMemo                = 0;
; 0012 00B9     }
; 0012 00BA 
; 0012 00BB     printOLED("AL%1d%1d%1d%1d%1d%1d%1d%1d%1d%1d%1d%1d",
; 0012 00BC         flagSens[0],flagSens[1],flagSens[2],flagSens[3],flagSens[4],
; 0012 00BD         flagData[0],flagData[1],flagData[2],flagData[3],flagData[4],
; 0012 00BE         flagBatt,flagMemo);
; 0012 00BF 
; 0012 00C0     return;
; 0012 00C1 }
;/*============================================================*/
;
;/**************************************************************/
;/*************** OLED Low Level Communication *****************/
;/**************************************************************/
;/*============================================================*/
;void printOLED(flash char *fmtstr, ...)
; 0012 00C9 {
; 0012 00CA     TIMER   timeout;
; 0012 00CB 
; 0012 00CC     char strcmd[60];
; 0012 00CD 
; 0012 00CE     va_list argptr;
; 0012 00CF 
; 0012 00D0     va_start(argptr, fmtstr);
;	*fmtstr -> Y+66
;	timeout -> Y+62
;	strcmd -> Y+2
;	*argptr -> R16,R17
; 0012 00D1     vsprintf(strcmd,fmtstr,argptr);
; 0012 00D2     va_end(argptr);
; 0012 00D3 
; 0012 00D4 //    if ( (strstr(strcmd,"DV") != NULL) ){
; 0012 00D5 //        printDebug("\r\n--%s--\r\n",strcmd);
; 0012 00D6 //    }
; 0012 00D7 
; 0012 00D8     flag_oled_ack = 0;
; 0012 00D9 
; 0012 00DA     putchar2(0x01);
; 0012 00DB     send_uart(2,strcmd);
; 0012 00DC     putchar2(0x04);
; 0012 00DD 
; 0012 00DE     TIMER_setTimer(&timeout, 3);
; 0012 00DF 
; 0012 00E0     /*bongkot OLED assume flag_oled_ack = 1(OLED has connect and ack);*/
; 0012 00E1     flag_oled_ack = 1;
; 0012 00E2     while( (!flag_oled_ack) && !TIMER_checkTimerExceed(timeout));
; 0012 00E3 
; 0012 00E4     if(!flag_oled_ack){
; 0012 00E5         printDebug("\r\n!!!! OLED Error !!!!\r\n");
; 0012 00E6     }
; 0012 00E7 
; 0012 00E8 }
;/*============================================================*/
;
;/**************************************************************/
;/****************** OLED Hardare Management *******************/
;/**************************************************************/
;/*============================================================*/
;void OLED_reset(void)
; 0012 00F0 {
_OLED_reset:
; 0012 00F1     OLED_RESET = 0;            // Active SOLED Reset
	CBI  0x14,5
; 0012 00F2     delay_ms(1);
	CALL SUBOPT_0x67
	CALL _delay_ms
; 0012 00F3     OLED_RESET = 1;            // Dective SOLED Reset for start use.
	SBI  0x14,5
; 0012 00F4     delay_ms(1);
	CALL SUBOPT_0x67
	CALL _delay_ms
; 0012 00F5 
; 0012 00F6 }
	RET
;/*============================================================*/
;void init_oled(void)
; 0012 00F9 {
_init_oled:
; 0012 00FA     printDebug("Initializing OLED.. ");
	__POINTD1FN _0x240000,408
	CALL SUBOPT_0x2
; 0012 00FB     flag_oled_ack = 0;
	CBI  0x1E,0
; 0012 00FC     OLED_reset();
	RCALL _OLED_reset
; 0012 00FD     printDebug("OK\r\n");
	__POINTD1FN _0x240000,429
	CALL __PUTPARD1
	LDI  R24,0
	CALL _printDebug
	RJMP _0x20E0042
; 0012 00FE }
;/*============================================================*/
;
;#include <stdio.h>
;#include <stdlib.h>
;#include <delay.h>
;#include "memcard.h"
;#include "debug.h"
;
;unsigned long int sdFreeSpace = 0;
;
;/*============================================================*/
;/* will hold the information for logical drive 0: */
;FATFS fat;
;/* pointer to the FATFS type structure */
;FATFS *pfat;
;/* root path */
;char root_path[] = "0:/";

	.DSEG
;/*============================================================*/        /* error message list */
;flash char * flash error_msg[]= {   "", /* not used */
;                                    "FR_DISK_ERR",
;                                    "FR_INT_ERR",
;                                    "FR_NOT_READY",
;                                    "FR_NO_FILE",
;                                    "FR_NO_PATH",
;                                    "FR_INVALID_NAME",
;                                    "FR_DENIED",
;                                    "FR_EXIST",
;                                    "FR_INVALID_OBJECT",
;                                    "FR_WRITE_PROTECTED",
;                                    "FR_INVALID_DRIVE",
;                                    "FR_NOT_ENABLED",
;                                    "FR_NO_FILESYSTEM",
;                                    "FR_MKFS_ABORTED",
;                                    "FR_TIMEOUT"  };
;/*============================================================*/        /* display error message and stop */
;void error(FRESULT res)
; 0013 0023 {

	.CSEG
_error:
; 0013 0024     if ((res>=FR_DISK_ERR) && (res<=FR_TIMEOUT))        printDebug("<ERR> %p.\r\n",error_msg[res]);     return;
	ST   -Y,R26
;	res -> Y+0
	LD   R26,Y
	CPI  R26,LOW(0x1)
	BRLO _0x260005
	CPI  R26,LOW(0x10)
	BRLO _0x260006
_0x260005:
	RJMP _0x260004
_0x260006:
	__POINTD1FN _0x260000,207
	CALL __PUTPARD1
	LDD  R30,Y+4
	LDI  R26,LOW(_error_msg*2)
	LDI  R27,HIGH(_error_msg*2)
	LDI  R24,BYTE3(_error_msg*2)
	CLR  R31
	CLR  R22
	CLR  R23
	CALL __LSLD1
	CALL __LSLD1
	CALL __ADDD12
	CALL __GETD1PF
	CALL SUBOPT_0x174
_0x260004:
	ADIW R28,1
	RET
; 0013 0025 }
;/*============================================================*/
;int SD_writeData(FIL *file, unsigned long int start, unsigned char *data, unsigned int len)
; 0013 0028 {
_SD_writeData:
; 0013 0029     FRESULT         res;
; 0013 002A     unsigned int    actual_write;
; 0013 002B 
; 0013 002C     if(sdFreeSpace == 0){ printDebug("<SD_writeData> SD Card not ready\r\n");       return -1;}
	CALL SUBOPT_0x6F
;	*file -> Y+12
;	start -> Y+8
;	*data -> Y+6
;	len -> Y+4
;	res -> R17
;	actual_write -> R18,R19
	CALL SUBOPT_0x1E6
	BRNE _0x260007
	__POINTD1FN _0x260000,219
	CALL SUBOPT_0x2
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E0047
; 0013 002D 
; 0013 002E     res = f_lseek(file,start);
_0x260007:
	CALL SUBOPT_0x1FD
; 0013 002F     if(res != FR_OK){
	BREQ _0x260008
; 0013 0030         printDebug("<SD_writeData> f_lseek(%u) failed!!\r\n", start);
	__POINTD1FN _0x260000,254
	CALL SUBOPT_0x7B
	CALL SUBOPT_0x174
; 0013 0031         error(res);
	CALL SUBOPT_0x1FE
; 0013 0032         return -1;
	RJMP _0x20E0047
; 0013 0033     }
; 0013 0034 
; 0013 0035     res = f_write(file,data,len,&actual_write);
_0x260008:
	LDD  R30,Y+12
	LDD  R31,Y+12+1
	CALL SUBOPT_0x1BF
	CALL SUBOPT_0x17D
	IN   R26,SPL
	IN   R27,SPH
	SBIW R26,1
	PUSH R19
	PUSH R18
	CALL _f_write
	POP  R18
	POP  R19
	MOV  R17,R30
; 0013 0036     if(res != FR_OK){
	CPI  R17,0
	BREQ _0x260009
; 0013 0037         printDebug("<SD_writeData> f_write() failed\r\n");
	__POINTD1FN _0x260000,292
	CALL SUBOPT_0x2
; 0013 0038         print_payload(data,len);
	CALL SUBOPT_0x144
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	CALL _print_payload
; 0013 0039         error(res);
	MOV  R26,R17
	RCALL _error
; 0013 003A         return -2;
	LDI  R30,LOW(65534)
	LDI  R31,HIGH(65534)
	RJMP _0x20E0047
; 0013 003B     }
; 0013 003C 
; 0013 003D     if(actual_write != len){
_0x260009:
	LDD  R30,Y+4
	LDD  R31,Y+4+1
	CP   R30,R18
	CPC  R31,R19
	BREQ _0x26000A
; 0013 003E         printDebug("<SD_writeData> actual_write[%u] != len[%u]\r\n",actual_write,len);
	__POINTD1FN _0x260000,326
	CALL SUBOPT_0x1FF
	LDD  R30,Y+12
	LDD  R31,Y+12+1
	CALL SUBOPT_0x127
; 0013 003F         return -3; // -- the caller should roll back the last data -- //
	LDI  R30,LOW(65533)
	LDI  R31,HIGH(65533)
	RJMP _0x20E0047
; 0013 0040     }
; 0013 0041 
; 0013 0042     return 0;
_0x26000A:
	RJMP _0x20E0048
; 0013 0043 }
;/*============================================================*/
;int SD_readData(FIL *file, unsigned long int start, unsigned char *data, unsigned int len)
; 0013 0046 {
_SD_readData:
; 0013 0047     FRESULT         res;
; 0013 0048     unsigned int    actual_read;
; 0013 0049 
; 0013 004A     if(sdFreeSpace == 0){ printDebug("<SD_readData> SD Card not ready\r\n");       return -1;}
	CALL SUBOPT_0x6F
;	*file -> Y+12
;	start -> Y+8
;	*data -> Y+6
;	len -> Y+4
;	res -> R17
;	actual_read -> R18,R19
	CALL SUBOPT_0x1E6
	BRNE _0x26000B
	__POINTD1FN _0x260000,371
	CALL SUBOPT_0x2
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E0047
; 0013 004B 
; 0013 004C     res = f_lseek(file,start);
_0x26000B:
	CALL SUBOPT_0x1FD
; 0013 004D     if(res != FR_OK){
	BREQ _0x26000C
; 0013 004E         printDebug("<SD_readData> f_lseek(%u) failed!!\r\n", start);
	__POINTD1FN _0x260000,405
	CALL SUBOPT_0x7B
	CALL SUBOPT_0x174
; 0013 004F         error(res);
	CALL SUBOPT_0x1FE
; 0013 0050         return -1;
	RJMP _0x20E0047
; 0013 0051     }
; 0013 0052 
; 0013 0053     res = f_read(file,data,len,&actual_read);
_0x26000C:
	LDD  R30,Y+12
	LDD  R31,Y+12+1
	CALL SUBOPT_0x1BF
	CALL SUBOPT_0x17D
	IN   R26,SPL
	IN   R27,SPH
	SBIW R26,1
	PUSH R19
	PUSH R18
	CALL _f_read
	POP  R18
	POP  R19
	MOV  R17,R30
; 0013 0054     if(res != FR_OK){
	CPI  R17,0
	BREQ _0x26000D
; 0013 0055         printDebug("<SD_readData> f_read() failed\r\n");
	__POINTD1FN _0x260000,442
	CALL SUBOPT_0x2
; 0013 0056         error(res);
	MOV  R26,R17
	RCALL _error
; 0013 0057         return -2;
	LDI  R30,LOW(65534)
	LDI  R31,HIGH(65534)
	RJMP _0x20E0047
; 0013 0058     }
; 0013 0059 
; 0013 005A     if(actual_read != len){
_0x26000D:
	LDD  R30,Y+4
	LDD  R31,Y+4+1
	CP   R30,R18
	CPC  R31,R19
	BREQ _0x26000E
; 0013 005B         printDebug("<SD_writeData> actual_read[%u] != len[%u]\r\n",actual_read,len);
	__POINTD1FN _0x260000,474
	CALL SUBOPT_0x1FF
	LDD  R30,Y+12
	LDD  R31,Y+12+1
	CALL SUBOPT_0x127
; 0013 005C         return -3; // -- the caller should roll back the last data -- //
	LDI  R30,LOW(65533)
	LDI  R31,HIGH(65533)
	RJMP _0x20E0047
; 0013 005D     }
; 0013 005E 
; 0013 005F     return 0;
_0x26000E:
_0x20E0048:
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
_0x20E0047:
	CALL __LOADLOCR4
	ADIW R28,14
	RET
; 0013 0060 }
;/*============================================================*/
;int SD_readMemoryRemain(unsigned long *free_kbytes)
; 0013 0063 {
_SD_readMemoryRemain:
; 0013 0064     FRESULT         res;
; 0013 0065     unsigned long   free_clusters;
; 0013 0066 
; 0013 0067     // ------ read available memory space ------- //
; 0013 0068     // return as percentage!!! //
; 0013 0069 
; 0013 006A     /* get the number of free clusters */
; 0013 006B     res = f_getfree(root_path,&free_clusters,&pfat);
	CALL SUBOPT_0xDA
;	*free_kbytes -> Y+5
;	res -> R17
;	free_clusters -> Y+1
	LDI  R30,LOW(_root_path)
	LDI  R31,HIGH(_root_path)
	CALL SUBOPT_0x200
	LDI  R26,LOW(_pfat)
	LDI  R27,HIGH(_pfat)
	CALL _f_getfree
	MOV  R17,R30
; 0013 006C     if ( res != FR_OK){
	CPI  R17,0
	BREQ _0x26000F
; 0013 006D        /* an error occured, display it and stop */
; 0013 006E        printDebug("<SD_readMemoryRemain> f_getfree(%s) error!!\r\n",root_path);
	__POINTD1FN _0x260000,518
	CALL SUBOPT_0x201
	CALL SUBOPT_0x10
; 0013 006F        error(res);
	MOV  R26,R17
	CALL SUBOPT_0x202
; 0013 0070        sdFreeSpace = 0;
; 0013 0071        return -1;
	RJMP _0x20E0046
; 0013 0072     }
; 0013 0073 
; 0013 0074     /* calculate the number of free bytes */
; 0013 0075     *free_kbytes = free_clusters * pfat->csize / 2;
_0x26000F:
	LDS  R30,_pfat
	LDS  R31,_pfat+1
	CALL SUBOPT_0x203
	CALL SUBOPT_0x204
	CALL SUBOPT_0x205
	CALL __LSRD1
	LDD  R26,Y+5
	LDD  R27,Y+5+1
	CALL __PUTDP1
; 0013 0076 
; 0013 0077     return 0;
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
_0x20E0046:
	LDD  R17,Y+0
	ADIW R28,7
	RET
; 0013 0078 }
;/*============================================================*/
;int SD_mount(void)
; 0013 007B {
_SD_mount:
; 0013 007C     FRESULT         res;
; 0013 007D 
; 0013 007E     /* mount logical drive 0: */
; 0013 007F     res = f_mount(0,&fat);
	ST   -Y,R17
;	res -> R17
	LDI  R30,LOW(0)
	ST   -Y,R30
	LDI  R26,LOW(_fat)
	LDI  R27,HIGH(_fat)
	CALL _f_mount
	MOV  R17,R30
; 0013 0080     if( res != FR_OK ){
	CPI  R17,0
	BREQ _0x260010
; 0013 0081         printDebug("Logical drive 0: mounted ERROR\r\n");
	__POINTD1FN _0x260000,564
	CALL SUBOPT_0x2
; 0013 0082         error(res);
	CALL SUBOPT_0x1FE
; 0013 0083         return -1;
	RJMP _0x20E0045
; 0013 0084     }
; 0013 0085 
; 0013 0086     printDebug("Logical drive 0: mounted OK\r\n");
_0x260010:
	__POINTD1FN _0x260000,597
	CALL SUBOPT_0x2
; 0013 0087     return 0;
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
_0x20E0045:
	LD   R17,Y+
	RET
; 0013 0088 }
;/*============================================================*/
;int SD_unmount(void)
; 0013 008B {
; 0013 008C     FRESULT         res;
; 0013 008D 
; 0013 008E     /* unmount logical drive 0: */
; 0013 008F     res = f_mount(0,NULL);
;	res -> R17
; 0013 0090     if( res != FR_OK ){
; 0013 0091         printDebug("Logical drive 0: unmounted ERROR\r\n");
; 0013 0092         error(res);
; 0013 0093         return -1;
; 0013 0094     }
; 0013 0095 
; 0013 0096     printDebug("Logical drive 0: unmounted OK\r\n");
; 0013 0097     return 0;
; 0013 0098 }
;/*============================================================*/
;int SD_remount(void)
; 0013 009B {
; 0013 009C     int res;
; 0013 009D 
; 0013 009E     res = SD_unmount();
;	res -> R16,R17
; 0013 009F     if(res < 0){
; 0013 00A0         printDebug("<SD_remount> SD_unmount() failed\r\n");
; 0013 00A1         return -1;
; 0013 00A2     }
; 0013 00A3     delay_ms(250);
; 0013 00A4     res = SD_mount();
; 0013 00A5     if(res < 0){
; 0013 00A6         printDebug("<SD_remount> SD_mount() failed\r\n");
; 0013 00A7         return -1;
; 0013 00A8     }
; 0013 00A9     delay_ms(250);
; 0013 00AA //
; 0013 00AB //    if(SD_createFile(LOG_PROTOCOL) < 0){
; 0013 00AC //        printDebug("Error creating new log file (Remount failed)\r\n");
; 0013 00AD //        return -1;
; 0013 00AE //    }
; 0013 00AF 
; 0013 00B0     return 0;
; 0013 00B1 }
;/*============================================================*/
;int SD_createFile(char *filename, unsigned char mode)
; 0013 00B4 {
_SD_createFile:
; 0013 00B5     FIL          file;
; 0013 00B6     FRESULT      res;
; 0013 00B7     char         filepath[50];
; 0013 00B8 
; 0013 00B9     if(sdFreeSpace == 0){ printDebug("<SD_createFile> SD Card not ready\r\n");      return -1;}
	ST   -Y,R26
	SBIW R28,63
	SBIW R28,19
	SUBI R29,2
	ST   -Y,R17
;	*filename -> Y+596
;	mode -> Y+595
;	file -> Y+51
;	res -> R17
;	filepath -> Y+1
	CALL SUBOPT_0x1E6
	BRNE _0x260014
	__POINTD1FN _0x260000,762
	CALL SUBOPT_0x2
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E0044
; 0013 00BA 
; 0013 00BB     sprintf(filepath,"%s%s",root_path,filename);
_0x260014:
	MOVW R30,R28
	ADIW R30,1
	ST   -Y,R31
	ST   -Y,R30
	CALL SUBOPT_0x206
	__GETW1SX 606
	CALL SUBOPT_0xDD
	LDI  R24,8
	CALL _sprintf
	ADIW R28,14
; 0013 00BC 
; 0013 00BD     if(mode == SD_FORCE)        // -- replace old file if exist -- //
	__GETB2SX 595
	CPI  R26,LOW(0x1)
	BRNE _0x260015
; 0013 00BE     {
; 0013 00BF         //printDebug("<SD_createFile> Force re-creating file %s.\r\n",filename);
; 0013 00C0         res = f_open(   &file,
; 0013 00C1                         filepath,
; 0013 00C2                         FA_CREATE_ALWAYS | FA_WRITE );
	MOVW R30,R28
	ADIW R30,51
	CALL SUBOPT_0x200
	LDI  R26,LOW(10)
	RJMP _0x260021
; 0013 00C3     }
; 0013 00C4     else                        // -- keep old file if exist -- //
_0x260015:
; 0013 00C5     {
; 0013 00C6         //printDebug("<SD_createFile> Try to creating file %s.\r\n",filename);
; 0013 00C7         res = f_open(   &file,
; 0013 00C8                         filepath,
; 0013 00C9                         FA_CREATE_NEW | FA_WRITE );
	MOVW R30,R28
	ADIW R30,51
	CALL SUBOPT_0x200
	LDI  R26,LOW(6)
_0x260021:
	CALL _f_open
	MOV  R17,R30
; 0013 00CA     }
; 0013 00CB 
; 0013 00CC     if( res == FR_EXIST){
	CPI  R17,8
	BRNE _0x260017
; 0013 00CD         //printDebug("<SD_createFile> %s already exist\r\n", filename);
; 0013 00CE 
; 0013 00CF //        res = f_close( &file );
; 0013 00D0 //        if( res != FR_OK ){
; 0013 00D1 //            printDebug("<SD_createFile> f_close() failed\r\n");
; 0013 00D2 //            error(res);
; 0013 00D3 //            return -1;
; 0013 00D4 //        }
; 0013 00D5 
; 0013 00D6         return 0;       // -- return 0 indicated that a file is already exist -- //
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
	RJMP _0x20E0044
; 0013 00D7     }
; 0013 00D8     else if( res != FR_OK){
_0x260017:
	CPI  R17,0
	BREQ _0x260019
; 0013 00D9         printDebug("<SD_createFile> f_open() failed\r\n");
	__POINTD1FN _0x260000,803
	CALL SUBOPT_0x2
; 0013 00DA         error(res);
	CALL SUBOPT_0x1FE
; 0013 00DB         return -1;
	RJMP _0x20E0044
; 0013 00DC     }
; 0013 00DD 
; 0013 00DE     //printDebug("<SD_createFile> '%s' created!!\r\n",filename);
; 0013 00DF 
; 0013 00E0     res = f_close( &file );
_0x260019:
	MOVW R26,R28
	ADIW R26,51
	CALL _f_close
	MOV  R17,R30
; 0013 00E1     if( res != FR_OK ){
	CPI  R17,0
	BREQ _0x26001A
; 0013 00E2         printDebug("<SD_createFile> f_close() failed\r\n");
	__POINTD1FN _0x260000,837
	CALL SUBOPT_0x2
; 0013 00E3         error(res);
	CALL SUBOPT_0x1FE
; 0013 00E4         return -1;
	RJMP _0x20E0044
; 0013 00E5     }
; 0013 00E6 
; 0013 00E7     return 1;   // -- return 1 indicated that it's a new file -- //
_0x26001A:
	LDI  R30,LOW(1)
	LDI  R31,HIGH(1)
_0x20E0044:
	LDD  R17,Y+0
	ADIW R28,63
	ADIW R28,23
	SUBI R29,-2
	RET
; 0013 00E8 }
;/*============================================================*/
;int SD_openFile(FIL *file, unsigned char *filename)
; 0013 00EB {
_SD_openFile:
; 0013 00EC     int     res;
; 0013 00ED     char    filepath[50];
; 0013 00EE 
; 0013 00EF     if(sdFreeSpace == 0){ printDebug("<SD_openFile> SD Card not ready\r\n");    return -1;}
	ST   -Y,R27
	ST   -Y,R26
	SBIW R28,50
	ST   -Y,R17
	ST   -Y,R16
;	*file -> Y+54
;	*filename -> Y+52
;	res -> R16,R17
;	filepath -> Y+2
	CALL SUBOPT_0x1E6
	BRNE _0x26001B
	__POINTD1FN _0x260000,872
	CALL SUBOPT_0x2
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E0043
; 0013 00F0 
; 0013 00F1     sprintf(filepath,"%s%s",root_path,filename);
_0x26001B:
	CALL SUBOPT_0x1BB
	CALL SUBOPT_0x206
	LDD  R30,Y+62
	LDD  R31,Y+62+1
	CALL SUBOPT_0xDD
	LDI  R24,8
	CALL _sprintf
	ADIW R28,14
; 0013 00F2 
; 0013 00F3     res = f_open( file, filepath, FA_WRITE | FA_READ | FA_OPEN_EXISTING);
	LDD  R30,Y+54
	LDD  R31,Y+54+1
	CALL SUBOPT_0x207
	LDI  R26,LOW(3)
	CALL _f_open
	MOV  R16,R30
	CLR  R17
; 0013 00F4     if( res != FR_OK){
	MOV  R0,R16
	OR   R0,R17
	BREQ _0x26001C
; 0013 00F5         printDebug("<SD_openFile> f_open() [%s] failed\r\n", filename);
	__POINTD1FN _0x260000,906
	CALL __PUTPARD1
	LDD  R30,Y+56
	LDD  R31,Y+56+1
	CALL SUBOPT_0xDD
	CALL SUBOPT_0x10
; 0013 00F6         error(res);
	MOV  R26,R16
	CALL SUBOPT_0x202
; 0013 00F7         sdFreeSpace = 0;
; 0013 00F8         return -1;
	RJMP _0x20E0043
; 0013 00F9     }
; 0013 00FA 
; 0013 00FB     return 0;
_0x26001C:
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
_0x20E0043:
	LDD  R17,Y+1
	LDD  R16,Y+0
	ADIW R28,56
	RET
; 0013 00FC }
;/*============================================================*/
;int SD_closeFile(FIL *file)
; 0013 00FF {
_SD_closeFile:
; 0013 0100     int res;
; 0013 0101 
; 0013 0102     if(sdFreeSpace == 0){ printDebug("<SD_closeFile> SD Card not ready\r\n");       return -1;}
	CALL SUBOPT_0x71
;	*file -> Y+2
;	res -> R16,R17
	CALL SUBOPT_0x1E6
	BRNE _0x26001D
	__POINTD1FN _0x260000,943
	CALL SUBOPT_0x2
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E0041
; 0013 0103 
; 0013 0104     res = f_close( file );
_0x26001D:
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	CALL _f_close
	MOV  R16,R30
	CLR  R17
; 0013 0105     if( res != FR_OK ){
	MOV  R0,R16
	OR   R0,R17
	BREQ _0x26001E
; 0013 0106         printDebug("<SD_closeFile> f_close() failed\r\n");
	__POINTD1FN _0x260000,978
	CALL SUBOPT_0x2
; 0013 0107         error(res);
	MOV  R26,R16
	RCALL _error
; 0013 0108         return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E0041
; 0013 0109     }
; 0013 010A 
; 0013 010B     return 0;
_0x26001E:
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
_0x20E0041:
	LDD  R17,Y+1
	LDD  R16,Y+0
_0x20E0042:
	ADIW R28,4
	RET
; 0013 010C }
;/*============================================================*/
;int SD_init(void)
; 0013 010F {
_SD_init:
; 0013 0110     int                 err;
; 0013 0111 
; 0013 0112     printDebug("<SD_init> Start initial memory card\r\n");
	ST   -Y,R17
	ST   -Y,R16
;	err -> R16,R17
	__POINTD1FN _0x260000,1012
	CALL SUBOPT_0x2
; 0013 0113 
; 0013 0114     /* point to the FATFS structure that holds
; 0013 0115     information for the logical drive 0: */
; 0013 0116     pfat=&fat;
	LDI  R30,LOW(_fat)
	LDI  R31,HIGH(_fat)
	STS  _pfat,R30
	STS  _pfat+1,R31
; 0013 0117 
; 0013 0118     delay_ms(1000);
	LDI  R26,LOW(1000)
	LDI  R27,HIGH(1000)
	CALL _delay_ms
; 0013 0119     printDebug("\r\n<SD_init> Mounting SD Card...");
	__POINTD1FN _0x260000,1050
	CALL SUBOPT_0x2
; 0013 011A     err = SD_mount();
	RCALL _SD_mount
	MOVW R16,R30
; 0013 011B     if(err < 0){
	TST  R17
	BRPL _0x26001F
; 0013 011C         printDebug("<SD_init> SD_mount() failed\r\n");
	__POINTD1FN _0x260000,1082
	CALL SUBOPT_0x2
; 0013 011D         return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E0040
; 0013 011E     }
; 0013 011F 
; 0013 0120 
; 0013 0121     printDebug("\r\n<SD_init> Check Card Size...");
_0x26001F:
	__POINTD1FN _0x260000,1112
	CALL SUBOPT_0x2
; 0013 0122 
; 0013 0123     delay_ms(1000);
	LDI  R26,LOW(1000)
	LDI  R27,HIGH(1000)
	CALL _delay_ms
; 0013 0124 
; 0013 0125     err = SD_readMemoryRemain(&sdFreeSpace);
	LDI  R26,LOW(_sdFreeSpace)
	LDI  R27,HIGH(_sdFreeSpace)
	RCALL _SD_readMemoryRemain
	MOVW R16,R30
; 0013 0126     if(err < 0){
	TST  R17
	BRPL _0x260020
; 0013 0127         printDebug("<SD_init> SD_readMemoryRemain() failed\r\n");
	__POINTD1FN _0x260000,1143
	CALL SUBOPT_0x2
; 0013 0128         return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E0040
; 0013 0129     }
; 0013 012A 
; 0013 012B     /* display the number of free kbytes */
; 0013 012C     printDebug("<SD_init> Free space on logical drive 0: %lu kbytes\r\n",sdFreeSpace);
_0x260020:
	__POINTD1FN _0x260000,1184
	CALL __PUTPARD1
	LDS  R30,_sdFreeSpace
	LDS  R31,_sdFreeSpace+1
	LDS  R22,_sdFreeSpace+2
	LDS  R23,_sdFreeSpace+3
	CALL SUBOPT_0x174
; 0013 012D 
; 0013 012E     return 0;
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
_0x20E0040:
	LD   R16,Y+
	LD   R17,Y+
	RET
; 0013 012F }
;/*============================================================*/
;
;#include <stdio.h>
;#include <stdlib.h>
;#include <string.h>
;#include "log.h"
;#include "debug.h"
;
;unsigned char LOGFILE_DATA[]            = "data.log";           // -- data log file name -- //

	.DSEG
;unsigned char LOGFILE_EVENT[]           = "event.log";          // -- event log file name -- //
;unsigned char LOGFILE_ERROR[]           = "error.log";          // -- error log file name -- //
;unsigned char LOG_INIT_STR[SIZE_RECORD] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF};
;/*============================================================*/
;
;/**************************************************************/
;/************** Function Pointer to memcard.h *****************/
;/**************************************************************/
;/*============================================================*/
;int (*LOG_openFile)(FIL *, unsigned char *) = &SD_openFile;
;int (*LOG_closeFile)(FIL *)                 = &SD_closeFile;
;/*============================================================*/
;
;/**************************************************************/
;/******************* Data Log Management **********************/
;/**************************************************************/
;char isDataLogEmpty     = 0;
;/*============================================================*/
;int LOG_insertData(FIL *file, unsigned long int timestamp, unsigned int channel, float value)
; 0014 001B {

	.CSEG
_LOG_insertData:
; 0014 001C     int                 res;
; 0014 001D     unsigned long int   index;
; 0014 001E     unsigned long int   startAddr;
; 0014 001F     unsigned char       flag;
; 0014 0020 
; 0014 0021     res             = LOG_getLastInsert(file, &index);
	CALL __PUTPARD2
	SBIW R28,8
	CALL __SAVELOCR4
;	*file -> Y+22
;	timestamp -> Y+18
;	channel -> Y+16
;	value -> Y+12
;	res -> R16,R17
;	index -> Y+8
;	startAddr -> Y+4
;	flag -> R19
	CALL SUBOPT_0x208
	CALL SUBOPT_0x209
; 0014 0022     if(res < 0){    printDebug("<LOG_insertData> LOG_getLastInsert() failed\r\n");      return -1;  }
	BRPL _0x280009
	__POINTD1FN _0x280000,0
	CALL SUBOPT_0x2
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E003F
; 0014 0023 
; 0014 0024     flag            = 'P';
_0x280009:
	LDI  R19,LOW(80)
; 0014 0025 
; 0014 0026     startAddr       = index2Addr(index,SIZE_LOG_DATA);
	CALL SUBOPT_0x20A
	CALL SUBOPT_0x20B
; 0014 0027 
; 0014 0028     res             = SD_writeData(file, startAddr+OFFSET_FLAG,         (unsigned char *) &flag,        SIZE_FLAG);
	CALL SUBOPT_0x208
	CALL SUBOPT_0x20C
	IN   R30,SPL
	IN   R31,SPH
	SBIW R30,1
	ST   -Y,R31
	ST   -Y,R30
	PUSH R20
	PUSH R19
	CALL SUBOPT_0x67
	RCALL _SD_writeData
	POP  R19
	POP  R20
	MOVW R16,R30
; 0014 0029     if(res < 0){    printDebug("<LOG_insertData> SD_writeData(flag) failed\r\n");       return -1;  }
	TST  R17
	BRPL _0x28000A
	__POINTD1FN _0x280000,46
	CALL SUBOPT_0x2
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E003F
; 0014 002A 
; 0014 002B     res             = SD_writeData(file, startAddr+OFFSET_TIMESTAMP,    (unsigned char *) &timestamp,   SIZE_TIMESTAMP);
_0x28000A:
	CALL SUBOPT_0x208
	CALL SUBOPT_0x20D
	CALL __PUTPARD1
	MOVW R30,R28
	ADIW R30,24
	CALL SUBOPT_0x20E
	CALL SUBOPT_0x20F
; 0014 002C     if(res < 0){    printDebug("<LOG_insertData> SD_writeData(timestamp) failed\r\n");  return -1;  }
	BRPL _0x28000B
	__POINTD1FN _0x280000,91
	CALL SUBOPT_0x2
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E003F
; 0014 002D 
; 0014 002E     res             = SD_writeData(file, startAddr+OFFSET_DATA_CHANNEL, (unsigned char *) &channel,     SIZE_CHANNEL);
_0x28000B:
	CALL SUBOPT_0x208
	CALL SUBOPT_0x210
	CALL SUBOPT_0x1DB
	CALL SUBOPT_0x65
	CALL SUBOPT_0x20F
; 0014 002F     if(res < 0){    printDebug("<LOG_insertData> SD_writeData(channel) failed\r\n");    return -1;  }
	BRPL _0x28000C
	__POINTD1FN _0x280000,141
	CALL SUBOPT_0x2
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E003F
; 0014 0030 
; 0014 0031     res             = SD_writeData(file, startAddr+OFFSET_DATA_VALUE,   (unsigned char *) &value,       SIZE_VALUE);
_0x28000C:
	CALL SUBOPT_0x208
	CALL SUBOPT_0x211
	CALL SUBOPT_0x5C
	CALL SUBOPT_0x69
	CALL SUBOPT_0x20F
; 0014 0032     if(res < 0){    printDebug("<LOG_insertData> SD_writeData(value) failed\r\n");      return -1;  }
	BRPL _0x28000D
	__POINTD1FN _0x280000,189
	CALL SUBOPT_0x2
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E003F
; 0014 0033 
; 0014 0034     res = LOG_setLastInsert(file,++index);
_0x28000D:
	CALL SUBOPT_0x208
	CALL SUBOPT_0x212
; 0014 0035     if(res < 0){    printDebug("<LOG_insertData> LOG_setLastInsert(%ld) failed\r\n",index);      return -1;  }
	BRPL _0x28000E
	__POINTD1FN _0x280000,235
	CALL SUBOPT_0x7B
	CALL SUBOPT_0x174
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E003F
; 0014 0036 
; 0014 0037     isDataLogEmpty  = 0;
_0x28000E:
	LDI  R30,LOW(0)
	STS  _isDataLogEmpty,R30
; 0014 0038     return index;
	LDD  R30,Y+8
	LDD  R31,Y+8+1
_0x20E003F:
	CALL __LOADLOCR4
	ADIW R28,24
	RET
; 0014 0039 }
;/*============================================================*/
;int LOG_readData(FIL *file, unsigned long int *timestamp, unsigned int *channel, float *value, unsigned long int *index)
; 0014 003C {
_LOG_readData:
; 0014 003D     int                 res;
; 0014 003E     unsigned long int   lastLogInsert;
; 0014 003F     unsigned long int   lastLogSend;
; 0014 0040     unsigned long int   startAddr;
; 0014 0041     unsigned char       flag;
; 0014 0042 
; 0014 0043 
; 0014 0044     res             = LOG_getLastInsert(file, &lastLogInsert);
	CALL SUBOPT_0xD4
;	*file -> Y+24
;	*timestamp -> Y+22
;	*channel -> Y+20
;	*value -> Y+18
;	*index -> Y+16
;	res -> R16,R17
;	lastLogInsert -> Y+12
;	lastLogSend -> Y+8
;	startAddr -> Y+4
;	flag -> R19
	CALL SUBOPT_0x213
	CALL SUBOPT_0x214
; 0014 0045     if(res < 0){    printDebug("<LOG_readData> LOG_getLastInsert() failed\r\n");        return -1;  }
	BRPL _0x28000F
	__POINTD1FN _0x280000,284
	CALL SUBOPT_0x2
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E003C
; 0014 0046     res             = LOG_getLastSend(file, &lastLogSend);
_0x28000F:
	CALL SUBOPT_0x213
	CALL SUBOPT_0x215
; 0014 0047     if(res < 0){    printDebug("<LOG_readData> LOG_getLastSend() failed\r\n");          return -1;  }
	BRPL _0x280010
	__POINTD1FN _0x280000,328
	CALL SUBOPT_0x2
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E003C
; 0014 0048 
; 0014 0049     printDebug("<LOG_readEvent> lastSend/lastInsert  --> %ld/%ld\r\n",lastLogSend,lastLogInsert);
_0x280010:
	CALL SUBOPT_0x216
	CALL SUBOPT_0x217
; 0014 004A 
; 0014 004B     if(lastLogSend >= lastLogInsert)
	CALL SUBOPT_0x218
	BRLO _0x280011
; 0014 004C     {
; 0014 004D         printDebug("<LOG_readData> Log empty..!!\r\n");
	__POINTD1FN _0x280000,421
	CALL SUBOPT_0x2
; 0014 004E 
; 0014 004F         res = LOG_createFile(LOGFILE_DATA,SD_FORCE,LOG_INIT_STR,SIZE_RECORD);
	CALL SUBOPT_0x219
; 0014 0050         if(res < 0)
	BRPL _0x280012
; 0014 0051         {
; 0014 0052             printDebug("<DEBUG_ClearLogFile> LOG_createFile(%s) failed\r\n",LOGFILE_DATA);
	__POINTD1FN _0x280000,452
	CALL SUBOPT_0x4F
; 0014 0053         }
; 0014 0054 
; 0014 0055         isDataLogEmpty  = 1;
_0x280012:
	LDI  R30,LOW(1)
	STS  _isDataLogEmpty,R30
; 0014 0056         return 0;
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
	RJMP _0x20E003C
; 0014 0057     }
; 0014 0058 
; 0014 0059     startAddr       = index2Addr(lastLogSend,SIZE_LOG_DATA);
_0x280011:
	CALL SUBOPT_0x20A
	CALL SUBOPT_0x20B
; 0014 005A 
; 0014 005B     res             = SD_readData(file, startAddr+OFFSET_FLAG,          (unsigned char *) &flag,        SIZE_FLAG);
	CALL SUBOPT_0x213
	CALL SUBOPT_0x20C
	IN   R30,SPL
	IN   R31,SPH
	SBIW R30,1
	ST   -Y,R31
	ST   -Y,R30
	PUSH R20
	PUSH R19
	CALL SUBOPT_0x67
	RCALL _SD_readData
	POP  R19
	POP  R20
	MOVW R16,R30
; 0014 005C     if(res < 0){    printDebug("<LOG_readData> SD_readData(flag) failed\r\n");          return -1;  }
	TST  R17
	BRPL _0x280013
	__POINTD1FN _0x280000,501
	CALL SUBOPT_0x2
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E003C
; 0014 005D 
; 0014 005E     res             = SD_readData(file, startAddr+OFFSET_TIMESTAMP,     (unsigned char *) timestamp,    SIZE_TIMESTAMP);
_0x280013:
	CALL SUBOPT_0x213
	CALL SUBOPT_0x20D
	CALL SUBOPT_0xDC
	CALL SUBOPT_0x20E
	CALL SUBOPT_0x21A
; 0014 005F     if(res < 0){    printDebug("<LOG_readData> SD_readData(timestamp) failed\r\n");     return -1;  }
	BRPL _0x280014
	__POINTD1FN _0x280000,543
	CALL SUBOPT_0x2
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E003C
; 0014 0060 
; 0014 0061     res             = SD_readData(file, startAddr+OFFSET_DATA_CHANNEL, (unsigned char *) channel,       SIZE_CHANNEL);
_0x280014:
	CALL SUBOPT_0x213
	CALL SUBOPT_0x210
	LDD  R30,Y+26
	LDD  R31,Y+26+1
	ST   -Y,R31
	ST   -Y,R30
	CALL SUBOPT_0x65
	CALL SUBOPT_0x21A
; 0014 0062     if(res < 0){    printDebug("<LOG_readData> SD_readData(channel) failed\r\n");       return -1;  }
	BRPL _0x280015
	__POINTD1FN _0x280000,590
	CALL SUBOPT_0x2
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E003C
; 0014 0063 
; 0014 0064     res             = SD_readData(file, startAddr+OFFSET_DATA_VALUE,    (unsigned char *) value,        SIZE_VALUE);
_0x280015:
	CALL SUBOPT_0x213
	CALL SUBOPT_0x211
	LDD  R30,Y+24
	LDD  R31,Y+24+1
	CALL SUBOPT_0x20E
	CALL SUBOPT_0x21A
; 0014 0065     if(res < 0){    printDebug("<LOG_readData> SD_readData(value) failed\r\n");         return -1;  }
	BRPL _0x280016
	__POINTD1FN _0x280000,635
	CALL SUBOPT_0x2
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E003C
; 0014 0066 
; 0014 0067     *index          = lastLogSend;
_0x280016:
	RJMP _0x20E003D
; 0014 0068 
; 0014 0069     return 1;
; 0014 006A }
;/*============================================================*/
;
;/**************************************************************/
;/******************* Event Log Management *********************/
;/**************************************************************/
;char isEventLogEmpty    = 0;
;/*============================================================*/
;int LOG_insertEvent(FIL *file, unsigned long int timestamp, unsigned char id, unsigned char status)
; 0014 0073 {
_LOG_insertEvent:
; 0014 0074     int                 res;
; 0014 0075     unsigned long int   index;
; 0014 0076     unsigned long int   startAddr;
; 0014 0077     unsigned char       flag;
; 0014 0078 
; 0014 0079     res = LOG_getLastInsert(file, &index);
	ST   -Y,R26
	SBIW R28,8
	CALL __SAVELOCR4
;	*file -> Y+18
;	timestamp -> Y+14
;	id -> Y+13
;	status -> Y+12
;	res -> R16,R17
;	index -> Y+8
;	startAddr -> Y+4
;	flag -> R19
	CALL SUBOPT_0x21B
	CALL SUBOPT_0x209
; 0014 007A     if(res < 0){    printDebug("<LOG_insertEvent> LOG_getLastInsert() failed\r\n");     return -1;  }
	BRPL _0x280017
	__POINTD1FN _0x280000,678
	CALL SUBOPT_0x2
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E003E
; 0014 007B 
; 0014 007C     flag            = 'P';
_0x280017:
	LDI  R19,LOW(80)
; 0014 007D 
; 0014 007E     startAddr       = index2Addr(index,SIZE_LOG_EVENT);
	CALL SUBOPT_0x21C
	CALL SUBOPT_0x20B
; 0014 007F 
; 0014 0080     res             = SD_writeData(file, startAddr+OFFSET_FLAG,         (unsigned char *) &flag,        SIZE_FLAG);
	CALL SUBOPT_0x21B
	CALL SUBOPT_0x20C
	IN   R30,SPL
	IN   R31,SPH
	SBIW R30,1
	ST   -Y,R31
	ST   -Y,R30
	PUSH R20
	PUSH R19
	CALL SUBOPT_0x67
	RCALL _SD_writeData
	POP  R19
	POP  R20
	MOVW R16,R30
; 0014 0081     if(res < 0){    printDebug("<LOG_insertEvent> SD_writeData(flag) failed\r\n");      return -1;  }
	TST  R17
	BRPL _0x280018
	__POINTD1FN _0x280000,725
	CALL SUBOPT_0x2
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E003E
; 0014 0082 
; 0014 0083     res             = SD_writeData(file, startAddr+OFFSET_TIMESTAMP,    (unsigned char *) &timestamp,   SIZE_TIMESTAMP);
_0x280018:
	CALL SUBOPT_0x21B
	CALL SUBOPT_0x20D
	CALL __PUTPARD1
	MOVW R30,R28
	ADIW R30,20
	CALL SUBOPT_0x20E
	CALL SUBOPT_0x20F
; 0014 0084     if(res < 0){    printDebug("<LOG_insertEvent> SD_writeData(timestamp) failed\r\n"); return -1;  }
	BRPL _0x280019
	__POINTD1FN _0x280000,771
	CALL SUBOPT_0x2
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E003E
; 0014 0085 
; 0014 0086     res             = SD_writeData(file, startAddr+OFFSET_EVENT_ID,     (unsigned char *) &id,          SIZE_ID);
_0x280019:
	CALL SUBOPT_0x21B
	CALL SUBOPT_0x210
	MOVW R30,R28
	ADIW R30,19
	ST   -Y,R31
	ST   -Y,R30
	CALL SUBOPT_0x67
	CALL SUBOPT_0x20F
; 0014 0087     if(res < 0){    printDebug("<LOG_insertEvent> SD_writeData(id) failed\r\n");        return -1;  }
	BRPL _0x28001A
	__POINTD1FN _0x280000,822
	CALL SUBOPT_0x2
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E003E
; 0014 0088 
; 0014 0089     res             = SD_writeData(file, startAddr+OFFSET_EVENT_STATUS, (unsigned char *) &status,      SIZE_STATUS);
_0x28001A:
	CALL SUBOPT_0x21B
	CALL SUBOPT_0x21D
	CALL SUBOPT_0x5C
	CALL SUBOPT_0x67
	CALL SUBOPT_0x20F
; 0014 008A     if(res < 0){    printDebug("<LOG_insertEvent> SD_writeData(status) failed\r\n");    return -1;  }
	BRPL _0x28001B
	__POINTD1FN _0x280000,866
	CALL SUBOPT_0x2
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E003E
; 0014 008B 
; 0014 008C     res = LOG_setLastInsert(file,++index);
_0x28001B:
	CALL SUBOPT_0x21B
	CALL SUBOPT_0x212
; 0014 008D     if(res < 0){    printDebug("<LOG_insertEvent> LOG_setLastInsert(%ld) failed\r\n",index);     return -1;  }
	BRPL _0x28001C
	__POINTD1FN _0x280000,914
	CALL SUBOPT_0x7B
	CALL SUBOPT_0x174
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E003E
; 0014 008E 
; 0014 008F     isEventLogEmpty = 0;
_0x28001C:
	LDI  R30,LOW(0)
	STS  _isEventLogEmpty,R30
; 0014 0090 
; 0014 0091     return index;
	LDD  R30,Y+8
	LDD  R31,Y+8+1
_0x20E003E:
	CALL __LOADLOCR4
	ADIW R28,20
	RET
; 0014 0092 }
;/*============================================================*/
;int LOG_readEvent(FIL *file, unsigned long int *timestamp, unsigned char *id, unsigned char *status, unsigned long int *index)
; 0014 0095 {
_LOG_readEvent:
; 0014 0096     int                 res;
; 0014 0097     unsigned long int   lastLogInsert;
; 0014 0098     unsigned long int   lastLogSend;
; 0014 0099     unsigned long int   startAddr;
; 0014 009A     unsigned char       flag;
; 0014 009B 
; 0014 009C 
; 0014 009D     res             = LOG_getLastInsert(file, &lastLogInsert);
	CALL SUBOPT_0xD4
;	*file -> Y+24
;	*timestamp -> Y+22
;	*id -> Y+20
;	*status -> Y+18
;	*index -> Y+16
;	res -> R16,R17
;	lastLogInsert -> Y+12
;	lastLogSend -> Y+8
;	startAddr -> Y+4
;	flag -> R19
	CALL SUBOPT_0x213
	CALL SUBOPT_0x214
; 0014 009E     if(res < 0){    printDebug("<LOG_readEvent> LOG_getLastInsert() failed\r\n");       return -1;  }
	BRPL _0x28001D
	__POINTD1FN _0x280000,964
	CALL SUBOPT_0x2
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E003C
; 0014 009F     res             = LOG_getLastSend(file, &lastLogSend);
_0x28001D:
	CALL SUBOPT_0x213
	CALL SUBOPT_0x215
; 0014 00A0     if(res < 0){    printDebug("<LOG_readEvent> LOG_getLastSend() failed\r\n");         return -1;  }
	BRPL _0x28001E
	__POINTD1FN _0x280000,1009
	CALL SUBOPT_0x2
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E003C
; 0014 00A1 
; 0014 00A2     printDebug("<LOG_readEvent> lastSend/lastInsert  --> %ld/%ld\r\n",lastLogSend,lastLogInsert);
_0x28001E:
	CALL SUBOPT_0x216
	CALL SUBOPT_0x217
; 0014 00A3 
; 0014 00A4     if(lastLogSend >= lastLogInsert)
	CALL SUBOPT_0x218
	BRLO _0x28001F
; 0014 00A5     {
; 0014 00A6         printDebug("<LOG_readEvent> Log empty..!!\r\n");
	__POINTD1FN _0x280000,1052
	CALL SUBOPT_0x2
; 0014 00A7 
; 0014 00A8         res = LOG_createFile(LOGFILE_EVENT,SD_FORCE,LOG_INIT_STR,SIZE_RECORD);
	CALL SUBOPT_0x21E
; 0014 00A9         if(res < 0)
	BRPL _0x280020
; 0014 00AA         {
; 0014 00AB             printDebug("<DEBUG_ClearLogFile> LOG_createFile(%s) failed\r\n",LOGFILE_EVENT);
	__POINTD1FN _0x280000,452
	CALL SUBOPT_0x5A
; 0014 00AC         }
; 0014 00AD 
; 0014 00AE         isEventLogEmpty     = 1;
_0x280020:
	LDI  R30,LOW(1)
	STS  _isEventLogEmpty,R30
; 0014 00AF         return 0;
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
	RJMP _0x20E003C
; 0014 00B0     }
; 0014 00B1 
; 0014 00B2     startAddr       = index2Addr(lastLogSend,SIZE_LOG_EVENT);
_0x28001F:
	CALL SUBOPT_0x21C
	CALL SUBOPT_0x20B
; 0014 00B3 
; 0014 00B4     res             = SD_readData(file, startAddr+OFFSET_FLAG,          (unsigned char *) &flag,        SIZE_FLAG);
	CALL SUBOPT_0x213
	CALL SUBOPT_0x20C
	IN   R30,SPL
	IN   R31,SPH
	SBIW R30,1
	ST   -Y,R31
	ST   -Y,R30
	PUSH R20
	PUSH R19
	CALL SUBOPT_0x67
	RCALL _SD_readData
	POP  R19
	POP  R20
	MOVW R16,R30
; 0014 00B5     if(res < 0){    printDebug("<LOG_readEvent> SD_readData(flag) failed\r\n");         return -1;  }
	TST  R17
	BRPL _0x280021
	__POINTD1FN _0x280000,1084
	CALL SUBOPT_0x2
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E003C
; 0014 00B6 
; 0014 00B7     res             = SD_readData(file, startAddr+OFFSET_TIMESTAMP,     (unsigned char *) timestamp,    SIZE_TIMESTAMP);
_0x280021:
	CALL SUBOPT_0x213
	CALL SUBOPT_0x20D
	CALL SUBOPT_0xDC
	CALL SUBOPT_0x20E
	CALL SUBOPT_0x21A
; 0014 00B8     if(res < 0){    printDebug("<LOG_readEvent> SD_readData(timestamp) failed\r\n");    return -1;  }
	BRPL _0x280022
	__POINTD1FN _0x280000,1127
	CALL SUBOPT_0x2
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E003C
; 0014 00B9 
; 0014 00BA     res             = SD_readData(file, startAddr+OFFSET_EVENT_ID,      (unsigned char *) id,           SIZE_ID);
_0x280022:
	CALL SUBOPT_0x213
	CALL SUBOPT_0x210
	LDD  R30,Y+26
	LDD  R31,Y+26+1
	ST   -Y,R31
	ST   -Y,R30
	CALL SUBOPT_0x67
	CALL SUBOPT_0x21A
; 0014 00BB     if(res < 0){    printDebug("<LOG_readEvent> SD_readData(id) failed\r\n");           return -1;  }
	BRPL _0x280023
	__POINTD1FN _0x280000,1175
	CALL SUBOPT_0x2
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E003C
; 0014 00BC 
; 0014 00BD     res             = SD_readData(file, startAddr+OFFSET_EVENT_STATUS,  (unsigned char *) status,       SIZE_STATUS);
_0x280023:
	CALL SUBOPT_0x213
	CALL SUBOPT_0x21D
	CALL SUBOPT_0x213
	CALL SUBOPT_0x67
	CALL SUBOPT_0x21A
; 0014 00BE     if(res < 0){    printDebug("<LOG_readEvent> SD_readData(status) failed\r\n");       return -1;  }
	BRPL _0x280024
	__POINTD1FN _0x280000,1216
	CALL SUBOPT_0x2
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E003C
; 0014 00BF 
; 0014 00C0     *index  = lastLogSend;
_0x280024:
_0x20E003D:
	__GETD1S 8
	LDD  R26,Y+16
	LDD  R27,Y+16+1
	CALL __PUTDP1
; 0014 00C1     return 1;
	LDI  R30,LOW(1)
	LDI  R31,HIGH(1)
_0x20E003C:
	CALL __LOADLOCR4
	ADIW R28,26
	RET
; 0014 00C2 }
;/*============================================================*/
;
;/**************************************************************/
;/******************* Log Indexing Function ********************/
;/**************************************************************/
;/*============================================================*/
;int LOG_getLastInsert(FIL *file, unsigned long int *index)
; 0014 00CA {
_LOG_getLastInsert:
; 0014 00CB     int             res;
; 0014 00CC 
; 0014 00CD     res = SD_readData(file, 0, (unsigned char *) index, sizeof(unsigned long int));
	CALL SUBOPT_0x71
;	*file -> Y+4
;	*index -> Y+2
;	res -> R16,R17
	CALL SUBOPT_0x21F
	CALL SUBOPT_0x220
	CALL SUBOPT_0x17D
	CALL SUBOPT_0x69
	CALL SUBOPT_0x21A
; 0014 00CE     if(res < 0)
	BRPL _0x280025
; 0014 00CF     {
; 0014 00D0         printDebug("<LOG_getLastInsert> SD_readData() failed\r\n");
	__POINTD1FN _0x280000,1261
	CALL SUBOPT_0x2
; 0014 00D1         return -1;
	CALL SUBOPT_0x11C
	JMP  _0x20E0034
; 0014 00D2     }
; 0014 00D3 
; 0014 00D4     printDebug("<LOG_getLastInsert> got %ld\r\n", *index);
_0x280025:
	__POINTD1FN _0x280000,1304
	CALL SUBOPT_0x12C
	CALL SUBOPT_0x114
; 0014 00D5 
; 0014 00D6     return 0;
	CALL SUBOPT_0xC3
	JMP  _0x20E0034
; 0014 00D7 }
;/*============================================================*/
;int LOG_setLastInsert(FIL *file, unsigned long int index)
; 0014 00DA {
_LOG_setLastInsert:
; 0014 00DB     int             res;
; 0014 00DC 
; 0014 00DD     printDebug("<LOG_setLastInsert> writing %ld\r\n", index);
	CALL SUBOPT_0x1BE
;	*file -> Y+6
;	index -> Y+2
;	res -> R16,R17
	__POINTD1FN _0x280000,1334
	CALL SUBOPT_0x1BD
; 0014 00DE     print_payload((unsigned char *) &index, sizeof(unsigned long int));
	CALL SUBOPT_0x1BB
	CALL SUBOPT_0x69
	CALL SUBOPT_0x14B
; 0014 00DF 
; 0014 00E0     res = SD_writeData(file, 0, (unsigned char *) &index, sizeof(unsigned long int));
	CALL SUBOPT_0x220
	MOVW R30,R28
	ADIW R30,8
	CALL SUBOPT_0x20E
	CALL SUBOPT_0x20F
; 0014 00E1     if(res < 0)
	BRPL _0x280026
; 0014 00E2     {
; 0014 00E3         printDebug("<LOG_setLastInsert> SD_readData() failed\r\n");
	__POINTD1FN _0x280000,1368
	CALL SUBOPT_0x2
; 0014 00E4         return -1;
	CALL SUBOPT_0x11C
	JMP  _0x20E0033
; 0014 00E5     }
; 0014 00E6 
; 0014 00E7     return 0;
_0x280026:
	CALL SUBOPT_0xC3
	JMP  _0x20E0033
; 0014 00E8 }
;/*============================================================*/
;int LOG_getLastSend(FIL *file, unsigned long int *index)
; 0014 00EB {
_LOG_getLastSend:
; 0014 00EC     int             res;
; 0014 00ED 
; 0014 00EE     res = SD_readData(file, 4, (unsigned char *) index, sizeof(unsigned long int));
	CALL SUBOPT_0x71
;	*file -> Y+4
;	*index -> Y+2
;	res -> R16,R17
	CALL SUBOPT_0x21F
	CALL SUBOPT_0x221
	CALL SUBOPT_0x17D
	CALL SUBOPT_0x69
	CALL SUBOPT_0x21A
; 0014 00EF     if(res < 0)
	BRPL _0x280027
; 0014 00F0     {
; 0014 00F1         printDebug("<LOG_getLastSend> SD_readData() failed\r\n");
	__POINTD1FN _0x280000,1411
	CALL SUBOPT_0x2
; 0014 00F2         return -1;
	CALL SUBOPT_0x11C
	JMP  _0x20E0034
; 0014 00F3     }
; 0014 00F4 
; 0014 00F5     printDebug("<LOG_getLastSend> got %ld\r\n", *index);
_0x280027:
	__POINTD1FN _0x280000,1452
	CALL SUBOPT_0x12C
	CALL SUBOPT_0x114
; 0014 00F6 
; 0014 00F7     return 0;
	CALL SUBOPT_0xC3
	JMP  _0x20E0034
; 0014 00F8 }
;/*============================================================*/
;int LOG_setLastSend(FIL *file, unsigned long int index)
; 0014 00FB {
_LOG_setLastSend:
; 0014 00FC     int             res;
; 0014 00FD 
; 0014 00FE     printDebug("<LOG_setLastSend> writing %ld\r\n", index);
	CALL SUBOPT_0x1BE
;	*file -> Y+6
;	index -> Y+2
;	res -> R16,R17
	__POINTD1FN _0x280000,1480
	CALL SUBOPT_0x1BD
; 0014 00FF     print_payload((unsigned char *) &index, sizeof(unsigned long int));
	CALL SUBOPT_0x1BB
	CALL SUBOPT_0x69
	CALL SUBOPT_0x14B
; 0014 0100 
; 0014 0101     res = SD_writeData(file, 4, (unsigned char *) &index, sizeof(unsigned long int));
	CALL SUBOPT_0x221
	MOVW R30,R28
	ADIW R30,8
	CALL SUBOPT_0x20E
	CALL SUBOPT_0x20F
; 0014 0102     if(res < 0)
	BRPL _0x280028
; 0014 0103     {
; 0014 0104         printDebug("<LOG_setLastSend> SD_readData() failed\r\n");
	__POINTD1FN _0x280000,1512
	CALL SUBOPT_0x2
; 0014 0105         return -1;
	CALL SUBOPT_0x11C
	JMP  _0x20E0033
; 0014 0106     }
; 0014 0107 
; 0014 0108     return 0;
_0x280028:
	CALL SUBOPT_0xC3
	JMP  _0x20E0033
; 0014 0109 }
;/*============================================================*/
;
;/**************************************************************/
;/********************* Support Function ***********************/
;/**************************************************************/
;/*============================================================*/
;unsigned long int index2Addr(unsigned long int index,int recordSize)
; 0014 0111 {
_index2Addr:
; 0014 0112     unsigned long int address=0;
; 0014 0113 
; 0014 0114     address = ( index * recordSize ) + SIZE_LAST_LOG_INDEX + SIZE_LAST_LOG_SENT + SIZE_PADDING;
	CALL SUBOPT_0x1A4
;	index -> Y+6
;	recordSize -> Y+4
;	address -> Y+0
	LDD  R30,Y+4
	LDD  R31,Y+4+1
	CALL SUBOPT_0x49
	CALL SUBOPT_0x205
	__ADDD1N 16
	CALL SUBOPT_0x8D
; 0014 0115 
; 0014 0116     return address;
	CALL SUBOPT_0x75
	ADIW R28,10
	RET
; 0014 0117 }
;/*============================================================*/
;int LOG_createFile(unsigned char *filename, unsigned char mode, unsigned char *initString, unsigned int len)
; 0014 011A {
_LOG_createFile:
; 0014 011B     FIL         file;
; 0014 011C     int         res;
; 0014 011D 
; 0014 011E     res = SD_createFile(filename,mode);
	ST   -Y,R27
	ST   -Y,R26
	SBIW R28,32
	SUBI R29,2
	ST   -Y,R17
	ST   -Y,R16
;	*filename -> Y+551
;	mode -> Y+550
;	*initString -> Y+548
;	len -> Y+546
;	file -> Y+2
;	res -> R16,R17
	__GETW1SX 551
	ST   -Y,R31
	ST   -Y,R30
	__GETB2SX 552
	RCALL _SD_createFile
	MOVW R16,R30
; 0014 011F     if(res < 0){
	TST  R17
	BRPL _0x280029
; 0014 0120         printDebug("<LOG_createFile> SD_createFile(%s) failed\r\n",filename);
	__POINTD1FN _0x280000,1553
	CALL SUBOPT_0x222
	CALL SUBOPT_0x10
; 0014 0121         return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E003A
; 0014 0122     }
; 0014 0123     else if(res == 0)
_0x280029:
	MOV  R0,R16
	OR   R0,R17
	BRNE _0x28002B
; 0014 0124     {
; 0014 0125         printDebug("<LOG_createFile> %s already exist\r\n", filename);
	__POINTD1FN _0x280000,1597
	CALL SUBOPT_0x222
	CALL SUBOPT_0x10
; 0014 0126         return 0;
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
	RJMP _0x20E003A
; 0014 0127     }
; 0014 0128     else
_0x28002B:
; 0014 0129     {
; 0014 012A         printDebug("<LOG_createFile> %s created\r\n", filename);
	__POINTD1FN _0x280000,1633
	CALL SUBOPT_0x222
	CALL SUBOPT_0x10
; 0014 012B         if(len == 0) // -- no initial data -- //
	__GETW1SX 546
	SBIW R30,0
	BRNE _0x28002D
; 0014 012C         {
; 0014 012D             printDebug("<LOG_createFile> %s contained no initial data\r\n");
	__POINTD1FN _0x280000,1663
	CALL SUBOPT_0x2
; 0014 012E             return 1;
	RJMP _0x20E003B
; 0014 012F         }
; 0014 0130 
; 0014 0131         // -- write the file initial data -- //
; 0014 0132         res = SD_openFile(&file,filename);
_0x28002D:
	CALL SUBOPT_0x1BB
	__GETW2SX 553
	RCALL _SD_openFile
	MOVW R16,R30
; 0014 0133         if(res < 0)
	TST  R17
	BRPL _0x28002E
; 0014 0134         {
; 0014 0135             printDebug("<LOG_createFile> SD_openFile(%s) failed\r\n",filename);
	__POINTD1FN _0x280000,1711
	CALL SUBOPT_0x222
	CALL SUBOPT_0x10
; 0014 0136             return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E003A
; 0014 0137         }
; 0014 0138         else
_0x28002E:
; 0014 0139         {
; 0014 013A             printDebug("<LOG_createFile> writing initial data\r\n");
	__POINTD1FN _0x280000,1753
	CALL SUBOPT_0x2
; 0014 013B             print_payload(initString,len);
	CALL SUBOPT_0x223
; 0014 013C             res = SD_writeData(&file,0,initString,len);
	CALL SUBOPT_0x1BB
	CALL SUBOPT_0x220
	__GETW1SX 554
	ST   -Y,R31
	ST   -Y,R30
	__GETW2SX 554
	CALL SUBOPT_0x20F
; 0014 013D             if(res < 0)
	BRPL _0x280030
; 0014 013E             {
; 0014 013F                 printDebug("<LOG_createFile> SD_writeData() failed Writing.. \r\n");
	__POINTD1FN _0x280000,1793
	CALL SUBOPT_0x2
; 0014 0140                 print_payload(initString,len);
	CALL SUBOPT_0x223
; 0014 0141                 return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E003A
; 0014 0142             }
; 0014 0143 
; 0014 0144             res = SD_closeFile(&file);
_0x280030:
	MOVW R26,R28
	ADIW R26,2
	RCALL _SD_closeFile
	MOVW R16,R30
; 0014 0145             if(res < 0)
	TST  R17
	BRPL _0x280031
; 0014 0146             {
; 0014 0147                 printDebug("<LOG_createFile> SD_closeFile() failed\r\n");
	__POINTD1FN _0x280000,1845
	CALL SUBOPT_0x2
; 0014 0148                 return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E003A
; 0014 0149             }
; 0014 014A         }
_0x280031:
; 0014 014B     }
; 0014 014C 
; 0014 014D 
; 0014 014E     return 1;
_0x20E003B:
	LDI  R30,LOW(1)
	LDI  R31,HIGH(1)
_0x20E003A:
	LDD  R17,Y+1
	LDD  R16,Y+0
	ADIW R28,41
	SUBI R29,-2
	RET
; 0014 014F }
;/*============================================================*/
;int LOG_init(void)
; 0014 0152 {
_LOG_init:
; 0014 0153     int         res,ret = 0;
; 0014 0154 
; 0014 0155     printDebug("<LOG_init> Initial log file\r\n");
	CALL __SAVELOCR4
;	res -> R16,R17
;	ret -> R18,R19
	__GETWRN 18,19,0
	__POINTD1FN _0x280000,1886
	CALL SUBOPT_0x2
; 0014 0156 
; 0014 0157 
; 0014 0158     res = LOG_createFile(LOGFILE_DATA,0,LOG_INIT_STR,sizeof(LOG_INIT_STR));
	LDI  R30,LOW(_LOGFILE_DATA)
	LDI  R31,HIGH(_LOGFILE_DATA)
	CALL SUBOPT_0xE0
	CALL SUBOPT_0x224
; 0014 0159     if(res < 0)
	BRPL _0x280032
; 0014 015A     {
; 0014 015B         printDebug("<LOG_init> LOG_createFile(%s) failed\r\n",LOGFILE_DATA);
	CALL SUBOPT_0x225
	CALL SUBOPT_0x4F
; 0014 015C         ret = ret-1;
	__SUBWRN 18,19,1
; 0014 015D     }
; 0014 015E 
; 0014 015F     res = LOG_createFile(LOGFILE_EVENT,0,LOG_INIT_STR,sizeof(LOG_INIT_STR));
_0x280032:
	LDI  R30,LOW(_LOGFILE_EVENT)
	LDI  R31,HIGH(_LOGFILE_EVENT)
	CALL SUBOPT_0xE0
	CALL SUBOPT_0x224
; 0014 0160     if(res < 0)
	BRPL _0x280033
; 0014 0161     {
; 0014 0162         printDebug("<LOG_init> LOG_createFile(%s) failed\r\n",LOGFILE_EVENT);
	CALL SUBOPT_0x225
	CALL SUBOPT_0x5A
; 0014 0163         ret = ret-1;
	__SUBWRN 18,19,1
; 0014 0164     }
; 0014 0165 
; 0014 0166     res = LOG_createFile(LOGFILE_ERROR,0,NULL,0);
_0x280033:
	LDI  R30,LOW(_LOGFILE_ERROR)
	LDI  R31,HIGH(_LOGFILE_ERROR)
	CALL SUBOPT_0xE0
	CALL SUBOPT_0x17F
	RCALL _LOG_createFile
	MOVW R16,R30
; 0014 0167     if(res < 0)
	TST  R17
	BRPL _0x280034
; 0014 0168     {
; 0014 0169         printDebug("<LOG_init> LOG_createFile(%s) failed\r\n",LOGFILE_ERROR);
	CALL SUBOPT_0x225
	CALL SUBOPT_0x226
	CALL SUBOPT_0x10
; 0014 016A         ret = ret-1;
	__SUBWRN 18,19,1
; 0014 016B     }
; 0014 016C 
; 0014 016D     return ret;
_0x280034:
	MOVW R30,R18
	CALL __LOADLOCR4
	JMP  _0x20E0032
; 0014 016E }
;/*============================================================*/
;
;#include <stdio.h>
;#include <stdlib.h>
;#include <string.h>
;#include "logqueue.h"
;#include "debug.h"
;
;struct event_log_st     eventLogQueue[MAX_EVENT_QUEUE];
;char                    eventLogQCount  = 0;
;
;struct data_log_st      dataLogQueue[MAX_DATA_QUEUE];
;char                    dataLogQCount   = 0;
;/*============================================================*/
;/* Data Log Queue */
;/*============================================================*/
;int addDataLogQueue(unsigned char id, unsigned long int timestamp, unsigned int channel, float value)
; 0015 0010 {

	.CSEG
_addDataLogQueue:
; 0015 0011     int slot;
; 0015 0012 
; 0015 0013     slot = findFreeSlotDataLogQueue();
	CALL SUBOPT_0x1BE
;	id -> Y+12
;	timestamp -> Y+8
;	channel -> Y+6
;	value -> Y+2
;	slot -> R16,R17
	RCALL _findFreeSlotDataLogQueue
	MOV  R16,R30
	CLR  R17
; 0015 0014     if(slot < 0)
	TST  R17
	BRPL _0x2A0003
; 0015 0015     {
; 0015 0016         printDebug("\r\n\r\n<addDataLogQueue> WARNING : dataLogQueue FULL\r\n\r\n");
	__POINTD1FN _0x2A0000,0
	CALL SUBOPT_0x2
; 0015 0017         return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E0039
; 0015 0018     }
; 0015 0019 
; 0015 001A     dataLogQueue[slot].id                    = id;
_0x2A0003:
	CALL SUBOPT_0x157
	SUBI R30,LOW(-_dataLogQueue)
	SBCI R31,HIGH(-_dataLogQueue)
	LDD  R26,Y+12
	STD  Z+0,R26
; 0015 001B     dataLogQueue[slot].data.timestamp        = timestamp;
	CALL SUBOPT_0x157
	__ADDW1MN _dataLogQueue,1
	CALL SUBOPT_0xC5
	CALL SUBOPT_0x1D8
; 0015 001C     dataLogQueue[slot].data.channel          = channel;
	CALL SUBOPT_0x157
	__ADDW1MN _dataLogQueue,5
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	STD  Z+0,R26
	STD  Z+1,R27
; 0015 001D     dataLogQueue[slot].data.value            = value;
	CALL SUBOPT_0x157
	__ADDW1MN _dataLogQueue,7
	CALL SUBOPT_0xA1
	CALL SUBOPT_0x1D8
; 0015 001E 
; 0015 001F     dataLogQCount++;
	LDS  R30,_dataLogQCount
	SUBI R30,-LOW(1)
	STS  _dataLogQCount,R30
; 0015 0020     printDebug("\r\n<addDataLogQueue>                           Added (%02X) to dataLogQueue[%d] Count = %d\r\n",id,slot,dataLogQCount);
	__POINTD1FN _0x2A0000,54
	CALL __PUTPARD1
	LDD  R30,Y+16
	CALL SUBOPT_0x55
	MOVW R30,R16
	CALL SUBOPT_0x227
	LDS  R30,_dataLogQCount
	CALL SUBOPT_0x55
	CALL SUBOPT_0x56
; 0015 0021     return dataLogQCount;
	LDS  R30,_dataLogQCount
	LDI  R31,0
_0x20E0039:
	LDD  R17,Y+1
	LDD  R16,Y+0
	ADIW R28,13
	RET
; 0015 0022 }
;/*============================================================*/
;int readDataLogQueue(unsigned char id, unsigned long int *timestamp, unsigned int *channel, float *value)
; 0015 0025 {
_readDataLogQueue:
; 0015 0026     int i;
; 0015 0027 
; 0015 0028     if(dataLogQCount == 0){
	CALL SUBOPT_0x71
;	id -> Y+8
;	*timestamp -> Y+6
;	*channel -> Y+4
;	*value -> Y+2
;	i -> R16,R17
	LDS  R30,_dataLogQCount
	CPI  R30,0
	BRNE _0x2A0004
; 0015 0029         printDebug("<readDataLogQueue> WARN: dataLogQueue empty!!\r\n");
	__POINTD1FN _0x2A0000,146
	CALL SUBOPT_0x2
; 0015 002A         return -1;
	RJMP _0x20E0036
; 0015 002B     }
; 0015 002C 
; 0015 002D     for(i=0;i<MAX_DATA_QUEUE;i++)
_0x2A0004:
	__GETWRN 16,17,0
_0x2A0006:
	__CPWRN 16,17,10
	BRGE _0x2A0007
; 0015 002E     {
; 0015 002F         if(id == dataLogQueue[i].id)                       // -- scan id in dataLogQueue
	CALL SUBOPT_0x157
	SUBI R30,LOW(-_dataLogQueue)
	SBCI R31,HIGH(-_dataLogQueue)
	LD   R30,Z
	LDD  R26,Y+8
	CP   R30,R26
	BRNE _0x2A0008
; 0015 0030         {
; 0015 0031             *timestamp      =   dataLogQueue[i].data.timestamp;
	CALL SUBOPT_0x157
	__ADDW1MN _dataLogQueue,1
	CALL SUBOPT_0x228
; 0015 0032             *channel        =   dataLogQueue[i].data.channel;
	CALL SUBOPT_0x157
	__ADDW1MN _dataLogQueue,5
	MOVW R26,R30
	CALL __GETW1P
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	ST   X+,R30
	ST   X,R31
; 0015 0033             *value          =   dataLogQueue[i].data.value;
	CALL SUBOPT_0x157
	__ADDW1MN _dataLogQueue,7
	MOVW R26,R30
	CALL __GETD1P
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	CALL __PUTDP1
; 0015 0034 
; 0015 0035             return i;
	MOVW R30,R16
	RJMP _0x20E0035
; 0015 0036         }
; 0015 0037     }
_0x2A0008:
	__ADDWRN 16,17,1
	RJMP _0x2A0006
_0x2A0007:
; 0015 0038 
; 0015 0039     printDebug("<readDataLogQueue> WARN: not found id[0x%02X] in dataLogQueue\r\n", id);
	__POINTD1FN _0x2A0000,194
	RJMP _0x20E0037
; 0015 003A     return -1;
; 0015 003B }
;/*============================================================*/
;int removeDataLogQueue(unsigned char id)
; 0015 003E {
_removeDataLogQueue:
; 0015 003F     char i;
; 0015 0040     for(i=0;i<MAX_DATA_QUEUE;i++)
	ST   -Y,R26
	ST   -Y,R17
;	id -> Y+1
;	i -> R17
	LDI  R17,LOW(0)
_0x2A000A:
	CPI  R17,10
	BRSH _0x2A000B
; 0015 0041     {
; 0015 0042         if(id == dataLogQueue[i].id)                       // -- scan id in dataLogQueue
	CALL SUBOPT_0x229
	LD   R30,Z
	LDD  R26,Y+1
	CP   R30,R26
	BRNE _0x2A000C
; 0015 0043         {
; 0015 0044             dataLogQueue[i].id                  = 0x00;
	CALL SUBOPT_0x229
	CALL SUBOPT_0x22A
; 0015 0045             dataLogQueue[i].data.timestamp      = 0;
; 0015 0046             dataLogQueue[i].data.channel        = 0;
; 0015 0047             dataLogQueue[i].data.value          = 0;
; 0015 0048             dataLogQCount--;
	LDS  R30,_dataLogQCount
	SUBI R30,LOW(1)
	STS  _dataLogQCount,R30
; 0015 0049 
; 0015 004A             printDebug("\r\n<removeDataLogQueue>                        Removed (%02X) from dataLogQueue[%d]\r\n", id, i);
	__POINTD1FN _0x2A0000,258
	CALL SUBOPT_0x1C5
	CALL SUBOPT_0x1C6
; 0015 004B             return dataLogQCount;
	LDS  R30,_dataLogQCount
	CALL SUBOPT_0x1C7
	JMP  _0x20E0031
; 0015 004C         }
; 0015 004D     }
_0x2A000C:
	SUBI R17,-1
	RJMP _0x2A000A
_0x2A000B:
; 0015 004E     printDebug("<removeDataLogQueue> WARN: not found id[0x%02X] in dataLogQueue\r\n", id);
	__POINTD1FN _0x2A0000,343
	CALL SUBOPT_0x1C8
; 0015 004F     return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	LDD  R17,Y+0
	JMP  _0x20E0031
; 0015 0050 }
;/*============================================================*/
;char findFreeSlotDataLogQueue(void)
; 0015 0053 {
_findFreeSlotDataLogQueue:
; 0015 0054     char i;
; 0015 0055     for(i=0;i<MAX_DATA_QUEUE;i++){
	ST   -Y,R17
;	i -> R17
	LDI  R17,LOW(0)
_0x2A000E:
	CPI  R17,10
	BRSH _0x2A000F
; 0015 0056         if(dataLogQueue[i].id == 0x00){
	CALL SUBOPT_0x229
	LD   R30,Z
	CPI  R30,0
	BRNE _0x2A0010
; 0015 0057             return i;
	MOV  R30,R17
	RJMP _0x20E0038
; 0015 0058         }
; 0015 0059     }
_0x2A0010:
	SUBI R17,-1
	RJMP _0x2A000E
_0x2A000F:
; 0015 005A     return -1;
	LDI  R30,LOW(255)
	RJMP _0x20E0038
; 0015 005B }
;/*============================================================*/
;void initDataLogQueue(void)
; 0015 005E {
_initDataLogQueue:
; 0015 005F     char i;
; 0015 0060 
; 0015 0061     for(i=0;i<MAX_DATA_QUEUE;i++){
	ST   -Y,R17
;	i -> R17
	LDI  R17,LOW(0)
_0x2A0012:
	CPI  R17,10
	BRSH _0x2A0013
; 0015 0062         dataLogQueue[i].id                  = 0x00;
	CALL SUBOPT_0x229
	CALL SUBOPT_0x22A
; 0015 0063         dataLogQueue[i].data.timestamp      = 0;
; 0015 0064         dataLogQueue[i].data.channel        = 0;
; 0015 0065         dataLogQueue[i].data.value          = 0;
; 0015 0066     }
	SUBI R17,-1
	RJMP _0x2A0012
_0x2A0013:
; 0015 0067     return;
_0x20E0038:
	LD   R17,Y+
	RET
; 0015 0068 }
;/*============================================================*/
;
;/*============================================================*/
;/* Event Log Queue */
;/*============================================================*/
;int addEventLogQueue(unsigned char id, unsigned long int timestamp, unsigned char eventID, unsigned char eventStatus)
; 0015 006F {
_addEventLogQueue:
; 0015 0070     int slot;
; 0015 0071 
; 0015 0072     slot = findFreeSlotEventLogQueue();
	ST   -Y,R26
	ST   -Y,R17
	ST   -Y,R16
;	id -> Y+8
;	timestamp -> Y+4
;	eventID -> Y+3
;	eventStatus -> Y+2
;	slot -> R16,R17
	RCALL _findFreeSlotEventLogQueue
	MOV  R16,R30
	CLR  R17
; 0015 0073     if(slot < 0)
	TST  R17
	BRPL _0x2A0014
; 0015 0074     {
; 0015 0075         printDebug("\r\n\r\n<addEventLogQueue> WARNING : eventLogQueue FULL\r\n\r\n");
	__POINTD1FN _0x2A0000,409
	CALL SUBOPT_0x2
; 0015 0076         return -1;
	RJMP _0x20E0036
; 0015 0077     }
; 0015 0078 
; 0015 0079     eventLogQueue[slot].id                  = id;
_0x2A0014:
	CALL SUBOPT_0x22B
	SUBI R30,LOW(-_eventLogQueue)
	SBCI R31,HIGH(-_eventLogQueue)
	LDD  R26,Y+8
	STD  Z+0,R26
; 0015 007A     eventLogQueue[slot].event.timestamp     = timestamp;
	CALL SUBOPT_0x22B
	__ADDW1MN _eventLogQueue,1
	CALL SUBOPT_0x96
	CALL SUBOPT_0x1D8
; 0015 007B     eventLogQueue[slot].event.eventID       = eventID;
	CALL SUBOPT_0x22B
	__ADDW1MN _eventLogQueue,5
	LDD  R26,Y+3
	STD  Z+0,R26
; 0015 007C     eventLogQueue[slot].event.eventStatus   = eventStatus;
	CALL SUBOPT_0x22B
	__ADDW1MN _eventLogQueue,6
	LDD  R26,Y+2
	STD  Z+0,R26
; 0015 007D 
; 0015 007E     eventLogQCount++;
	LDS  R30,_eventLogQCount
	SUBI R30,-LOW(1)
	STS  _eventLogQCount,R30
; 0015 007F     printDebug("\r\n<addEventLogQueue>                         Added (%02X) to eventLogQueue[%d] Count = %d\r\n",id,slot,eventLogQCount);
	__POINTD1FN _0x2A0000,465
	CALL __PUTPARD1
	LDD  R30,Y+12
	CALL SUBOPT_0x55
	MOVW R30,R16
	CALL SUBOPT_0x227
	LDS  R30,_eventLogQCount
	CALL SUBOPT_0x55
	CALL SUBOPT_0x56
; 0015 0080     return eventLogQCount;
	LDS  R30,_eventLogQCount
	LDI  R31,0
	RJMP _0x20E0035
; 0015 0081 }
;/*============================================================*/
;int readEventLogQueue(unsigned char id, unsigned long int *timestamp, unsigned char *eventID, unsigned char *eventStatus)
; 0015 0084 {
_readEventLogQueue:
; 0015 0085     int i;
; 0015 0086 
; 0015 0087     if(eventLogQCount == 0){
	CALL SUBOPT_0x71
;	id -> Y+8
;	*timestamp -> Y+6
;	*eventID -> Y+4
;	*eventStatus -> Y+2
;	i -> R16,R17
	LDS  R30,_eventLogQCount
	CPI  R30,0
	BRNE _0x2A0015
; 0015 0088         printDebug("<readEventLogQueue> WARN: eventLogQueue empty!!\r\n");
	__POINTD1FN _0x2A0000,557
	CALL SUBOPT_0x2
; 0015 0089         return -1;
	RJMP _0x20E0036
; 0015 008A     }
; 0015 008B 
; 0015 008C     for(i=0;i<MAX_EVENT_QUEUE;i++)
_0x2A0015:
	__GETWRN 16,17,0
_0x2A0017:
	__CPWRN 16,17,20
	BRGE _0x2A0018
; 0015 008D     {
; 0015 008E         if(id == eventLogQueue[i].id)                       // -- scan id in eventLogQueue
	CALL SUBOPT_0x22B
	SUBI R30,LOW(-_eventLogQueue)
	SBCI R31,HIGH(-_eventLogQueue)
	LD   R30,Z
	LDD  R26,Y+8
	CP   R30,R26
	BRNE _0x2A0019
; 0015 008F         {
; 0015 0090             *timestamp      =   eventLogQueue[i].event.timestamp;
	CALL SUBOPT_0x22B
	__ADDW1MN _eventLogQueue,1
	CALL SUBOPT_0x228
; 0015 0091             *eventID        =   eventLogQueue[i].event.eventID;
	CALL SUBOPT_0x22B
	__ADDW1MN _eventLogQueue,5
	LD   R30,Z
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	ST   X,R30
; 0015 0092             *eventStatus    =   eventLogQueue[i].event.eventStatus;
	CALL SUBOPT_0x22B
	__ADDW1MN _eventLogQueue,6
	LD   R30,Z
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	ST   X,R30
; 0015 0093 
; 0015 0094             return i;
	MOVW R30,R16
	RJMP _0x20E0035
; 0015 0095         }
; 0015 0096     }
_0x2A0019:
	__ADDWRN 16,17,1
	RJMP _0x2A0017
_0x2A0018:
; 0015 0097 
; 0015 0098     printDebug("<readEventLogQueue> WARN: not found id[0x%02X] in eventLogQueue\r\n", id);
	__POINTD1FN _0x2A0000,607
_0x20E0037:
	CALL __PUTPARD1
	LDD  R30,Y+12
	CALL SUBOPT_0x27
; 0015 0099     return -1;
_0x20E0036:
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
_0x20E0035:
	LDD  R17,Y+1
	LDD  R16,Y+0
	ADIW R28,9
	RET
; 0015 009A }
;/*============================================================*/
;int removeEventLogQueue(unsigned char id)
; 0015 009D {
_removeEventLogQueue:
; 0015 009E     char i;
; 0015 009F     for(i=0;i<MAX_EVENT_QUEUE;i++)
	ST   -Y,R26
	ST   -Y,R17
;	id -> Y+1
;	i -> R17
	LDI  R17,LOW(0)
_0x2A001B:
	CPI  R17,20
	BRSH _0x2A001C
; 0015 00A0     {
; 0015 00A1         if(id == eventLogQueue[i].id)                       // -- scan id in eventLogQueue
	CALL SUBOPT_0x22C
	LD   R30,Z
	LDD  R26,Y+1
	CP   R30,R26
	BRNE _0x2A001D
; 0015 00A2         {
; 0015 00A3             eventLogQueue[i].id                  = 0x00;
	CALL SUBOPT_0x22C
	CALL SUBOPT_0x22D
; 0015 00A4             eventLogQueue[i].event.timestamp     = 0;
	CALL SUBOPT_0x22E
; 0015 00A5             eventLogQueue[i].event.eventID       = 0;
; 0015 00A6             eventLogQueue[i].event.eventStatus   = 0;
	__ADDW1MN _eventLogQueue,6
	LDI  R26,LOW(0)
	STD  Z+0,R26
; 0015 00A7             eventLogQCount--;
	LDS  R30,_eventLogQCount
	SUBI R30,LOW(1)
	STS  _eventLogQCount,R30
; 0015 00A8 
; 0015 00A9             printDebug("\r\n<removeEventLogQueue>                      Removed (%02X) from eventLogQueue[%d]\r\n", id, i);
	__POINTD1FN _0x2A0000,673
	CALL SUBOPT_0x1C5
	CALL SUBOPT_0x1C6
; 0015 00AA             return eventLogQCount;
	LDS  R30,_eventLogQCount
	CALL SUBOPT_0x1C7
	JMP  _0x20E0031
; 0015 00AB         }
; 0015 00AC     }
_0x2A001D:
	SUBI R17,-1
	RJMP _0x2A001B
_0x2A001C:
; 0015 00AD     printDebug("<removeEventLogQueue> WARN: not found id[0x%02X] in eventLogQueue\r\n", id);
	__POINTD1FN _0x2A0000,758
	CALL SUBOPT_0x1C8
; 0015 00AE     return -1;
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	LDD  R17,Y+0
	JMP  _0x20E0031
; 0015 00AF }
;/*============================================================*/
;char findFreeSlotEventLogQueue(void)
; 0015 00B2 {
_findFreeSlotEventLogQueue:
; 0015 00B3     char i;
; 0015 00B4     for(i=0;i<MAX_EVENT_QUEUE;i++){
	ST   -Y,R17
;	i -> R17
	LDI  R17,LOW(0)
_0x2A001F:
	CPI  R17,20
	BRSH _0x2A0020
; 0015 00B5         if(eventLogQueue[i].id == 0x00){
	CALL SUBOPT_0x22C
	LD   R30,Z
	CPI  R30,0
	BRNE _0x2A0021
; 0015 00B6             return i;
	MOV  R30,R17
	JMP  _0x20E002F
; 0015 00B7         }
; 0015 00B8     }
_0x2A0021:
	SUBI R17,-1
	RJMP _0x2A001F
_0x2A0020:
; 0015 00B9     return -1;
	LDI  R30,LOW(255)
	JMP  _0x20E002F
; 0015 00BA }
;/*============================================================*/
;void initEventLogQueue(void)
; 0015 00BD {
_initEventLogQueue:
; 0015 00BE     char i;
; 0015 00BF 
; 0015 00C0     for(i=0;i<MAX_EVENT_QUEUE;i++){
	ST   -Y,R17
;	i -> R17
	LDI  R17,LOW(0)
_0x2A0023:
	CPI  R17,20
	BRSH _0x2A0024
; 0015 00C1         eventLogQueue[i].id                  = 0x00;
	CALL SUBOPT_0x22C
	CALL SUBOPT_0x22D
; 0015 00C2         eventLogQueue[i].event.timestamp     = 0;
	CALL SUBOPT_0x22E
; 0015 00C3         eventLogQueue[i].event.eventID       = 0;
; 0015 00C4         eventLogQueue[i].event.eventStatus   = 0;
	__ADDW1MN _eventLogQueue,6
	LDI  R26,LOW(0)
	STD  Z+0,R26
; 0015 00C5     }
	SUBI R17,-1
	RJMP _0x2A0023
_0x2A0024:
; 0015 00C6     return;
	JMP  _0x20E002F
; 0015 00C7 }
;/*============================================================*/
;#include <stdio.h>
;#include <stdlib.h>
;#include <string.h>
;#include "menu.h"
;#include "oled.h"
	#ifndef __SLEEP_DEFINED__
	#define __SLEEP_DEFINED__
	.EQU __se_bit=0x01
	.EQU __sm_mask=0x0E
	.EQU __sm_powerdown=0x04
	.EQU __sm_powersave=0x06
	.EQU __sm_standby=0x0C
	.EQU __sm_ext_standby=0x0E
	.EQU __sm_adc_noise_red=0x02
	.SET power_ctrl_reg=smcr
	#endif
;#include "io.h"
;#include "alarm.h"
;#include "config.h"
;#include "debug.h"
;
;
;eeprom char userPwd[4]              = {0,0,0,0};                    // -- default password for user permission -- //
;eeprom char servicePwd[4]           = {2,4,7,5};                    // -- default password for sevice permission -- //
;char currentPage                    = P_MONITOR;                    // -- track the currently displaying page -- //
;
;/**************************************************************/
;/************* Menu (Finite State Machine) Function ***********/
;/**************************************************************/
;/*============================================================*/
;void MENU_processKey(char key)
; 0016 0015 {

	.CSEG
; 0016 0016     int  i,j,res;
; 0016 0017     static signed char  cursor      = 0;
; 0016 0018     static char         tmpNextPage = 0;
; 0016 0019     static char         tmpPrevPage = 0;
; 0016 001A     static signed char  entPwd[4]   = {0,0,0,0};
; 0016 001B     static signed char  newPwd[4]   = {0,0,0,0};
; 0016 001C     static signed char  confPwd[4]  = {0,0,0,0};
; 0016 001D 
; 0016 001E     static char setIp[12]           = {0,0,0,0,0,0,0,0,0,0,0,0};
; 0016 001F     static char setMask[12]         = {0,0,0,0,0,0,0,0,0,0,0,0};
; 0016 0020     static char setGw[12]           = {0,0,0,0,0,0,0,0,0,0,0,0};
; 0016 0021     static char setServer[12]       = {0,0,0,0,0,0,0,0,0,0,0,0};
; 0016 0022 
; 0016 0023     unsigned char *msg;
; 0016 0024     unsigned int  msg_len           = 0;
; 0016 0025 
; 0016 0026     static char devEn               = 0;
; 0016 0027     static char almEn               = 0;
; 0016 0028     static char prbEn[5]            = {0,0,0,0,0};
; 0016 0029 
; 0016 002A     static char mute                = 0;
; 0016 002B 
; 0016 002C     static char vRef[3]             = {0,0,0};
; 0016 002D 
; 0016 002E     static char prb1                = 0;
; 0016 002F     static char prb2                = 0;
; 0016 0030     static unsigned char calPnt[6]  = {0,0,0,0,0,0};
; 0016 0031 
; 0016 0032     char eeprom *uPwd = userPwd;
; 0016 0033     char eeprom *sPwd = servicePwd;
; 0016 0034 
; 0016 0035     char str[20];
; 0016 0036     char cmd[50];
; 0016 0037     int  digit      = 0;
; 0016 0038 
; 0016 0039     if      ( currentPage == P_MONITOR )
;	key -> Y+86
;	i -> R16,R17
;	j -> R18,R19
;	res -> R20,R21
;	*msg -> Y+84
;	msg_len -> Y+82
;	*uPwd -> Y+80
;	*sPwd -> Y+78
;	str -> Y+58
;	cmd -> Y+8
;	digit -> Y+6
; 0016 003A     {
; 0016 003B         if(key == KEY_MODE){
; 0016 003C             currentPage     = P_MAIN_MENU;
; 0016 003D             cursor          = 0;
; 0016 003E             printOLED("M1%1d",cursor);
; 0016 003F         }
; 0016 0040     }
; 0016 0041     else if ( currentPage == P_MAIN_MENU )
; 0016 0042     {
; 0016 0043         switch(key){
; 0016 0044         case KEY_MODE   :   currentPage = P_MONITOR;        cursor  = 0;        printOLED("M0");            break;
; 0016 0045         case KEY_UP     :   if(--cursor < 0){               cursor  = 3;    }   printOLED("MA%1d",cursor);  break;
; 0016 0046         case KEY_DOWN   :   if(++cursor > 3){               cursor  = 0;    }   printOLED("MA%1d",cursor);  break;
; 0016 0047         case KEY_OK     :   if(cursor == 0){            // -- Device Config
; 0016 0048                                 currentPage = P_DEV_MENU;
; 0016 0049                                 cursor      = 0;
; 0016 004A                                 printOLED("M2%1d",cursor);
; 0016 004B                             }
; 0016 004C                             else if(cursor == 1){       // -- Probe Config
; 0016 004D                                 currentPage = P_PRB_MENU;
; 0016 004E                                 cursor      = 0;
; 0016 004F                                 printOLED("M3%1d",cursor);
; 0016 0050                             }
; 0016 0051                             else if(cursor == 2){       // -- Management
; 0016 0052                                 currentPage = P_MANAGE_MENU;
; 0016 0053                                 cursor      = 0;
; 0016 0054                                 printOLED("M4%1d",cursor);
; 0016 0055                             }
; 0016 0056                             else if(cursor == 3){       // -- Maintenance
; 0016 0057                                 currentPage = P_ENTER_M_PASS;
; 0016 0058                                 tmpNextPage = P_MTNC_MENU;
; 0016 0059                                 tmpPrevPage = P_MAIN_MENU;
; 0016 005A                                 memset(entPwd,0xFF,sizeof(entPwd));
; 0016 005B                                 cursor      = 0;
; 0016 005C                                 printOLED("P1");
; 0016 005D                             }
; 0016 005E                             else{                       // -- Exit -- should not occur
; 0016 005F                                 currentPage = P_MONITOR;
; 0016 0060                                 cursor      = 0;
; 0016 0061                                 printOLED("M0");
; 0016 0062                             }
; 0016 0063             break;
; 0016 0064         }
; 0016 0065     }
; 0016 0066     else if ( currentPage == P_DEV_MENU )
; 0016 0067     {
; 0016 0068         switch(key){
; 0016 0069         case KEY_MODE   :   currentPage = P_MAIN_MENU;      cursor  = 0;            printOLED("M1%1d",cursor);  break;
; 0016 006A         case KEY_UP     :   if(--cursor < 0){               cursor  = 1;    }       printOLED("MA%1d",cursor);  break;
; 0016 006B         case KEY_DOWN   :   if(++cursor > 1){               cursor  = 0;    }       printOLED("MA%1d",cursor);  break;
; 0016 006C         case KEY_OK     :   if(cursor == 0){            // -- View Device Config
; 0016 006D                                 currentPage = P_DEV_V_MENU;
; 0016 006E                                 cursor      = 0;
; 0016 006F                                 printOLED("M5%1d",cursor);
; 0016 0070                             }
; 0016 0071                             else if(cursor == 1){       // -- Set Device Config
; 0016 0072                                 currentPage = P_ENTER_U_PASS;
; 0016 0073                                 tmpNextPage = P_DEV_S_MENU;
; 0016 0074                                 tmpPrevPage = P_DEV_MENU;
; 0016 0075                                 memset(entPwd,0xFF,sizeof(entPwd));
; 0016 0076                                 cursor      = 0;
; 0016 0077                                 printOLED("P0");
; 0016 0078                             }
; 0016 0079                             else{                       // -- Exit -- should not occur
; 0016 007A                                 currentPage = P_MONITOR;
; 0016 007B                                 cursor      = 0;
; 0016 007C                                 printOLED("M0");
; 0016 007D                             }
; 0016 007E             break;
; 0016 007F         }
; 0016 0080     }
; 0016 0081     else if ( currentPage == P_DEV_V_MENU )
; 0016 0082     {
; 0016 0083         switch(key){
; 0016 0084         case KEY_MODE   :   currentPage = P_DEV_MENU;       cursor  = 0;            printOLED("M2%1d",cursor);  break;
; 0016 0085         /* // -- disable network view -- //
; 0016 0086         case KEY_UP     :   if(--cursor < 0){               cursor  = 1;    }       printOLED("MA%1d",cursor);  break;
; 0016 0087         case KEY_DOWN   :   if(++cursor > 1){               cursor  = 0;    }       printOLED("MA%1d",cursor);  break;
; 0016 0088         */
; 0016 0089         // -- enable network view -- //
; 0016 008A         case KEY_UP     :   if(--cursor < 0){               cursor  = 2;    }       printOLED("MA%1d",cursor);  break;
; 0016 008B         case KEY_DOWN   :   if(++cursor > 2){               cursor  = 0;    }       printOLED("MA%1d",cursor);  break;
; 0016 008C         case KEY_OK     :   if(cursor == 0){            // -- View Properties
; 0016 008D                                 currentPage = P_DEV_V_PROP;
; 0016 008E                                 cursor      = 0;
; 0016 008F                                 printDebug("<MENU_processKey> VP%s,%s,%s,",  properties_config.deviceID,
; 0016 0090                                                                             properties_config.hostID,
; 0016 0091                                                                             properties_config.firmwareVersion);
; 0016 0092 
; 0016 0093                                 printOLED("VP%s,%s,%s,", properties_config.deviceID,
; 0016 0094                                                         properties_config.hostID,
; 0016 0095                                                         properties_config.firmwareVersion);
; 0016 0096                             }
; 0016 0097                             else if(cursor == 1){       // -- View Operate Config
; 0016 0098                                 currentPage = P_DEV_V_OPER;
; 0016 0099                                 cursor      = 0;
; 0016 009A 
; 0016 009B                                 memset(cmd,'\0',sizeof(cmd));   sprintf(cmd,"");
; 0016 009C                                 memset(str,'\0',sizeof(str));
; 0016 009D                                 if(     operating_config.mode == MODE_REALTIME){    sprintf(str,"Realtime,");   }
; 0016 009E                                 else if(operating_config.mode == MODE_DATALOGGER){  sprintf(str,"Datalogger,"); }
; 0016 009F                                 else{                                               sprintf(str,"Unknown,");    }
; 0016 00A0                                 strcat(cmd,str);
; 0016 00A1 
; 0016 00A2                                 memset(str,'\0',sizeof(str));
; 0016 00A3                                 if(     operating_config.deviceEnable == 0x01   ){  sprintf(str,"Enable,");     }
; 0016 00A4                                 else{                                               sprintf(str,"Disable,");    }
; 0016 00A5                                 strcat(cmd,str);
; 0016 00A6 
; 0016 00A7                                 memset(str,'\0',sizeof(str));
; 0016 00A8                                 if(     operating_config.alarmEnable  == 0x01   ){  sprintf(str,"Enable,");     }
; 0016 00A9                                 else{                                               sprintf(str,"Disable,");    }
; 0016 00AA                                 strcat(cmd,str);
; 0016 00AB 
; 0016 00AC                                 memset(str,'\0',sizeof(str));
; 0016 00AD                                 for(i=0,j=0;i<MAX_SENS_CHANNEL;i++){
; 0016 00AE                                     if(operating_config.sensorEnable[i]==0x01   ){  str[j++] = 'E';             }
; 0016 00AF                                     else{                                           str[j++] = 'D';             }
; 0016 00B0                                     if( i < MAX_SENS_CHANNEL-1){
; 0016 00B1                                         str[j++] = '/';
; 0016 00B2                                     }
; 0016 00B3 
; 0016 00B4                                 }
; 0016 00B5                                 str[j++]    = ',';
; 0016 00B6                                 str[j++]    = '\0';
; 0016 00B7                                 strcat(cmd,str);
; 0016 00B8 
; 0016 00B9 
; 0016 00BA                                 printDebug("<MENU_processKey> VO%s", cmd);
; 0016 00BB                                 printOLED("VO%s", cmd);
; 0016 00BC                             }
; 0016 00BD                             else if(cursor == 2){       // -- View Network Config
; 0016 00BE 
; 0016 00BF                                 memset(cmd,'\0',sizeof(cmd));   sprintf(cmd,"");
; 0016 00C0 
; 0016 00C1                                 msg = (unsigned char *) malloc( sizeof(char) * CONF_READ_BUFFER );
; 0016 00C2                                 if(msg == NULL){
; 0016 00C3                                     printDebug("<MENU_processKey> malloc(CONF_READ_BUFFER) failed\r\n");
; 0016 00C4                                     currentPage = P_DEV_MENU;       cursor  = 0;            printOLED("M2%1d",cursor);  break;
; 0016 00C5                                 }
; 0016 00C6 
; 0016 00C7                                 res = ETH_getConfig(msg,&msg_len);
; 0016 00C8                                 if(res < 0){
; 0016 00C9                                     printDebug("<MENU_processKey> ETH_getConfig() failed\r\n");
; 0016 00CA                                 }
; 0016 00CB                                 else{
; 0016 00CC                                     printDebug("<MENU_processKey> ETH_getConfig() success\r\n");
; 0016 00CD                                     printDebug("\r\n\r\n<MENU_processKey> read[%d] -->\r\n",msg_len);
; 0016 00CE                                     for(i=0;i<msg_len;i++){
; 0016 00CF                                         putchar3(msg[i]);
; 0016 00D0                                     }
; 0016 00D1                                     printDebug("\r\n");
; 0016 00D2                                 }
; 0016 00D3 
; 0016 00D4                                 res = getNetworkInfo(msg,&setIp[0],&setMask[0],&setGw[0],&setServer[0]);
; 0016 00D5                                 if(res<0){
; 0016 00D6                                     printDebug("<MENU_processKey> getNetworkInfo() failed\r\n");
; 0016 00D7                                     return;
; 0016 00D8                                 }
; 0016 00D9 
; 0016 00DA                                 currentPage = P_DEV_V_NETW;
; 0016 00DB                                 cursor      = 0;
; 0016 00DC 
; 0016 00DD                                 printDebug("<MENU_processKey> VN%u.%u.%u.%u,%u.%u.%u.%u,%u.%u.%u.%u,%u.%u.%u.%u,\r\n",
; 0016 00DE                                             (setIp[0]    *100) + (setIp[1]     *10) + setIp[2],
; 0016 00DF                                             (setIp[3]    *100) + (setIp[4]     *10) + setIp[5],
; 0016 00E0                                             (setIp[6]    *100) + (setIp[7]     *10) + setIp[8],
; 0016 00E1                                             (setIp[9]    *100) + (setIp[10]    *10) + setIp[11],
; 0016 00E2                                             (setMask[0]  *100) + (setMask[1]   *10) + setMask[2],
; 0016 00E3                                             (setMask[3]  *100) + (setMask[4]   *10) + setMask[5],
; 0016 00E4                                             (setMask[6]  *100) + (setMask[7]   *10) + setMask[8],
; 0016 00E5                                             (setMask[9]  *100) + (setMask[10]  *10) + setMask[11],
; 0016 00E6                                             (setGw[0]    *100) + (setGw[1]     *10) + setGw[2],
; 0016 00E7                                             (setGw[3]    *100) + (setGw[4]     *10) + setGw[5],
; 0016 00E8                                             (setGw[6]    *100) + (setGw[7]     *10) + setGw[8],
; 0016 00E9                                             (setGw[9]    *100) + (setGw[10]    *10) + setGw[11],
; 0016 00EA                                             (setServer[0]*100) + (setServer[1] *10) + setServer[2],
; 0016 00EB                                             (setServer[3]*100) + (setServer[4] *10) + setServer[5],
; 0016 00EC                                             (setServer[6]*100) + (setServer[7] *10) + setServer[8],
; 0016 00ED                                             (setServer[9]*100) + (setServer[10]*10) + setServer[11]);
; 0016 00EE 
; 0016 00EF                                 printOLED("VN%u.%u.%u.%u,%u.%u.%u.%u,%u.%u.%u.%u,%u.%u.%u.%u,",
; 0016 00F0                                             (setIp[0]    *100) + (setIp[1]     *10) + setIp[2],
; 0016 00F1                                             (setIp[3]    *100) + (setIp[4]     *10) + setIp[5],
; 0016 00F2                                             (setIp[6]    *100) + (setIp[7]     *10) + setIp[8],
; 0016 00F3                                             (setIp[9]    *100) + (setIp[10]    *10) + setIp[11],
; 0016 00F4                                             (setMask[0]  *100) + (setMask[1]   *10) + setMask[2],
; 0016 00F5                                             (setMask[3]  *100) + (setMask[4]   *10) + setMask[5],
; 0016 00F6                                             (setMask[6]  *100) + (setMask[7]   *10) + setMask[8],
; 0016 00F7                                             (setMask[9]  *100) + (setMask[10]  *10) + setMask[11],
; 0016 00F8                                             (setGw[0]    *100) + (setGw[1]     *10) + setGw[2],
; 0016 00F9                                             (setGw[3]    *100) + (setGw[4]     *10) + setGw[5],
; 0016 00FA                                             (setGw[6]    *100) + (setGw[7]     *10) + setGw[8],
; 0016 00FB                                             (setGw[9]    *100) + (setGw[10]    *10) + setGw[11],
; 0016 00FC                                             (setServer[0]*100) + (setServer[1] *10) + setServer[2],
; 0016 00FD                                             (setServer[3]*100) + (setServer[4] *10) + setServer[5],
; 0016 00FE                                             (setServer[6]*100) + (setServer[7] *10) + setServer[8],
; 0016 00FF                                             (setServer[9]*100) + (setServer[10]*10) + setServer[11]);
; 0016 0100                                 free( msg );
; 0016 0101                             }
; 0016 0102                             else{                       // -- Exit -- should not occur
; 0016 0103                                 currentPage = P_MONITOR;
; 0016 0104                                 cursor      = 0;
; 0016 0105                                 printOLED("M0");
; 0016 0106                             }
; 0016 0107             break;
; 0016 0108         }
; 0016 0109     }
; 0016 010A     else if ( currentPage == P_DEV_V_PROP )
; 0016 010B     {
; 0016 010C         switch(key){
; 0016 010D         case KEY_UP     :   /* no operation */                                                                  break;
; 0016 010E         case KEY_DOWN   :   /* no operation */                                                                  break;
; 0016 010F         case KEY_MODE   :
; 0016 0110         case KEY_OK     :   currentPage = P_DEV_V_MENU;
; 0016 0111                             cursor      = 0;
; 0016 0112                             printOLED("M5%1d",cursor);
; 0016 0113                         break;
; 0016 0114         }
; 0016 0115     }
; 0016 0116     else if ( currentPage == P_DEV_V_OPER )
; 0016 0117     {
; 0016 0118         switch(key){
; 0016 0119         case KEY_UP     :   /* no operation */                                                                  break;
; 0016 011A         case KEY_DOWN   :   /* no operation */                                                                  break;
; 0016 011B         case KEY_MODE   :
; 0016 011C         case KEY_OK     :   currentPage = P_DEV_V_MENU;
; 0016 011D                             cursor      = 1;
; 0016 011E                             printOLED("M5%1d",cursor);
; 0016 011F                         break;
; 0016 0120         }
; 0016 0121     }
; 0016 0122     else if ( currentPage == P_DEV_V_NETW )
; 0016 0123     {
; 0016 0124         switch(key){
; 0016 0125         case KEY_UP     :   /* no operation */                                                                  break;
; 0016 0126         case KEY_DOWN   :   /* no operation */                                                                  break;
; 0016 0127         case KEY_MODE   :
; 0016 0128         case KEY_OK     :   currentPage = P_DEV_V_MENU;
; 0016 0129                             cursor      = 2;
; 0016 012A                             printOLED("M5%1d",cursor);
; 0016 012B                         break;
; 0016 012C         }
; 0016 012D     }
; 0016 012E     else if ( currentPage == P_DEV_S_MENU )
; 0016 012F     {
; 0016 0130         switch(key){
; 0016 0131         case KEY_MODE   :   currentPage = P_DEV_MENU;       cursor  = 1;            printOLED("M2%1d",cursor);  break;
; 0016 0132         //case KEY_UP     :   break;
; 0016 0133         //case KEY_DOWN   :   break;
; 0016 0134         // -- enable network configuration -- //
; 0016 0135         case KEY_UP     :   if(--cursor < 0){               cursor  = 1;    }       printOLED("MA%1d",cursor);  break;
; 0016 0136         case KEY_DOWN   :   if(++cursor > 1){               cursor  = 0;    }       printOLED("MA%1d",cursor);  break;
; 0016 0137 
; 0016 0138         case KEY_OK     :   if(cursor == 0){            // -- Set Operate Config
; 0016 0139                                 currentPage = P_DEV_S_OPER;
; 0016 013A                                 cursor      = 0;
; 0016 013B                                 devEn       = operating_config.deviceEnable;
; 0016 013C                                 almEn       = operating_config.alarmEnable;
; 0016 013D                                 printDebug("<MENU_processKey> devEn[%d] almEn[%d]",devEn,almEn);
; 0016 013E                                 printOLED("SO%1d",cursor);
; 0016 013F                                 printOLED("ED2%1d",devEn);
; 0016 0140                                 printOLED("ED3%1d",almEn);
; 0016 0141                             }
; 0016 0142                             else if(cursor == 1){       // -- Set Network Config
; 0016 0143                                 currentPage = P_DEV_S_IP;
; 0016 0144                                 cursor      = 0;
; 0016 0145                                 printOLED("SI");
; 0016 0146                                 for(i=0;i<12;i++){
; 0016 0147                                     printOLED("ID%1X%1d",i,setIp[i]);
; 0016 0148                                 }
; 0016 0149                             }
; 0016 014A                             else{                       // -- Exit -- should not occur
; 0016 014B                                 currentPage = P_MONITOR;
; 0016 014C                                 cursor      = 0;
; 0016 014D                                 printOLED("M0");
; 0016 014E                             }
; 0016 014F             break;
; 0016 0150         }
; 0016 0151     }
; 0016 0152     else if ( currentPage == P_DEV_S_OPER )
; 0016 0153     {
; 0016 0154         switch(key){
; 0016 0155         case KEY_MODE   :   currentPage = P_DEV_S_MENU;     cursor  = 0;            printOLED("M6%1d",cursor);  break;
; 0016 0156         case KEY_UP     :   if(--cursor < 0){               cursor  = 2;    }       printOLED("SO%1d",cursor);  break;
; 0016 0157         case KEY_DOWN   :   if(++cursor > 2){               cursor  = 0;    }       printOLED("SO%1d",cursor);  break;
; 0016 0158         case KEY_OK     :   if(cursor == 0){            // -- Set Device Enable
; 0016 0159                                 devEn       = !devEn;
; 0016 015A                                 printDebug("<MENU_processKey> devEn -> ED%1d%1d",cursor+2,devEn);
; 0016 015B                                 printOLED("ED%1d%1d",cursor+2,devEn);
; 0016 015C                             }
; 0016 015D                             else if(cursor == 1){       // -- Set Alarm Enable
; 0016 015E                                 almEn       = !almEn;
; 0016 015F                                 printDebug("<MENU_processKey> almEn -> ED%1d%1d",cursor+2,almEn);
; 0016 0160                                 printOLED("ED%1d%1d",cursor+2,almEn);
; 0016 0161                             }
; 0016 0162                             else if(cursor == 2){       // -- Display Finish page
; 0016 0163 
; 0016 0164                                 operating_config.deviceEnable   = devEn;
; 0016 0165                                 operating_config.alarmEnable    = almEn;
; 0016 0166                                 res = setOperatingConfig(&operating_config);
; 0016 0167                                 if(res < 0){
; 0016 0168                                     printDebug("<MENU_processKey> setOperatingConfig() failed\r\n");
; 0016 0169                                     currentPage = P_FAILED;
; 0016 016A                                     tmpNextPage = P_DEV_S_MENU;
; 0016 016B                                     tmpPrevPage = P_DEV_S_OPER;
; 0016 016C                                     cursor      = 0;
; 0016 016D                                     printOLED("FL");
; 0016 016E                                 }
; 0016 016F                                 else{
; 0016 0170                                     currentPage = P_FINISH;
; 0016 0171                                     tmpNextPage = P_DEV_S_MENU;
; 0016 0172                                     tmpPrevPage = P_DEV_S_OPER;
; 0016 0173                                     cursor      = 0;
; 0016 0174                                     printOLED("FI");
; 0016 0175                                 }
; 0016 0176                             }
; 0016 0177                             else{                       // -- Exit -- should not occur
; 0016 0178                                 currentPage = P_MONITOR;
; 0016 0179                                 cursor      = 0;
; 0016 017A                                 printOLED("M0");
; 0016 017B                             }
; 0016 017C             break;
; 0016 017D         }
; 0016 017E     }
; 0016 017F     else if ( currentPage == P_DEV_S_IP )
; 0016 0180     {
; 0016 0181         switch(key){
; 0016 0182         case KEY_MODE   :   currentPage = P_DEV_S_MENU;     cursor  = 1;            printOLED("M6%1d",cursor);              break;
; 0016 0183         case KEY_UP     :   if(++cursor > 12){              cursor  = 0;    }       printOLED("IA%1X",cursor);              break;
; 0016 0184         case KEY_DOWN   :   if(--cursor < 0){               cursor  = 12;   }       printOLED("IA%1X",cursor);              break;
; 0016 0185         case KEY_OK     :   if(cursor == 12){
; 0016 0186                                 cursor = 0;
; 0016 0187                                 currentPage = P_DEV_S_MASK;
; 0016 0188                                 printOLED("SM");
; 0016 0189                                 for(i=0;i<12;i++){
; 0016 018A                                     printOLED("ID%1X%1d",i,setMask[i]);
; 0016 018B                                 }
; 0016 018C                             }
; 0016 018D                             else if(cursor < 12){
; 0016 018E                                 if((cursor%3) == 0){
; 0016 018F                                     if(++setIp[cursor] >2)  setIp[cursor] = 0;
; 0016 0190                                 }
; 0016 0191                                 else{
; 0016 0192                                     if(++setIp[cursor] >9)  setIp[cursor] = 0;
; 0016 0193                                 }
; 0016 0194                                 //if(++setIp[cursor] >9)  setIp[cursor] = 0;
; 0016 0195                                 printOLED("ID%1X%1d",cursor, setIp[cursor]);
; 0016 0196                             }
; 0016 0197                             else{                       // -- Exit -- should not occur
; 0016 0198                                 currentPage = P_MONITOR;
; 0016 0199                                 cursor      = 0;
; 0016 019A                                 printOLED("M0");
; 0016 019B                             }
; 0016 019C             break;
; 0016 019D         }
; 0016 019E     }
; 0016 019F     else if ( currentPage == P_DEV_S_MASK )
; 0016 01A0     {
; 0016 01A1         switch(key){
; 0016 01A2         case KEY_MODE   :   currentPage = P_DEV_S_IP;       cursor  = 0;            printOLED("SI");                        break;
; 0016 01A3         case KEY_UP     :   if(++cursor > 12){              cursor  = 0;    }       printOLED("IA%1X",cursor);              break;
; 0016 01A4         case KEY_DOWN   :   if(--cursor < 0){               cursor  = 12;   }       printOLED("IA%1X",cursor);              break;
; 0016 01A5         case KEY_OK     :   if(cursor == 12){
; 0016 01A6                                 cursor = 0;
; 0016 01A7                                 currentPage = P_DEV_S_GATEWAY;
; 0016 01A8                                 printOLED("SG");
; 0016 01A9                                 for(i=0;i<12;i++){
; 0016 01AA                                     printOLED("ID%1X%1d",i,setGw[i]);
; 0016 01AB                                 }
; 0016 01AC                             }
; 0016 01AD                             else if(cursor < 12){
; 0016 01AE                                 if((cursor%3) == 0){
; 0016 01AF                                     if(++setMask[cursor] >2)  setMask[cursor] = 0;
; 0016 01B0                                 }
; 0016 01B1                                 else{
; 0016 01B2                                     if(++setMask[cursor] >9)  setMask[cursor] = 0;
; 0016 01B3                                 }
; 0016 01B4                                 //if(++setMask[cursor] >9)  setMask[cursor] = 0;
; 0016 01B5                                 printOLED("ID%1X%1d",cursor, setMask[cursor]);
; 0016 01B6                             }
; 0016 01B7                             else{                       // -- Exit -- should not occur
; 0016 01B8                                 currentPage = P_MONITOR;
; 0016 01B9                                 cursor      = 0;
; 0016 01BA                                 printOLED("M0");
; 0016 01BB                             }
; 0016 01BC             break;
; 0016 01BD         }
; 0016 01BE     }
; 0016 01BF     else if ( currentPage == P_DEV_S_GATEWAY )
; 0016 01C0     {
; 0016 01C1         switch(key){
; 0016 01C2         case KEY_MODE   :   currentPage = P_DEV_S_MASK;     cursor  = 0;            printOLED("SM");                        break;
; 0016 01C3         case KEY_UP     :   if(++cursor > 12){              cursor  = 0;    }       printOLED("IA%1X",cursor);              break;
; 0016 01C4         case KEY_DOWN   :   if(--cursor < 0){               cursor  = 12;   }       printOLED("IA%1X",cursor);              break;
; 0016 01C5         case KEY_OK     :   if(cursor == 12){
; 0016 01C6                                 cursor = 0;
; 0016 01C7                                 currentPage = P_DEV_S_SERVER;
; 0016 01C8                                 printOLED("SS");
; 0016 01C9                                 for(i=0;i<12;i++){
; 0016 01CA                                     printOLED("ID%1X%1d",i,setServer[i]);
; 0016 01CB                                 }
; 0016 01CC                             }
; 0016 01CD                             else if(cursor < 12){
; 0016 01CE                                 if((cursor%3) == 0){
; 0016 01CF                                     if(++setGw[cursor] >2)  setGw[cursor] = 0;
; 0016 01D0                                 }
; 0016 01D1                                 else{
; 0016 01D2                                     if(++setGw[cursor] >9)  setGw[cursor] = 0;
; 0016 01D3                                 }
; 0016 01D4                                 //if(++setGw[cursor] >9)  setGw[cursor] = 0;
; 0016 01D5                                 printOLED("ID%1X%1d",cursor, setGw[cursor]);
; 0016 01D6                             }
; 0016 01D7                             else{                       // -- Exit -- should not occur
; 0016 01D8                                 currentPage = P_MONITOR;
; 0016 01D9                                 cursor      = 0;
; 0016 01DA                                 printOLED("M0");
; 0016 01DB                             }
; 0016 01DC             break;
; 0016 01DD         }
; 0016 01DE     }
; 0016 01DF     else if ( currentPage == P_DEV_S_SERVER )
; 0016 01E0     {
; 0016 01E1         switch(key){
; 0016 01E2         case KEY_MODE   :   currentPage = P_DEV_S_GATEWAY;  cursor  = 0;            printOLED("SG");                        break;
; 0016 01E3         case KEY_UP     :   if(++cursor > 12){              cursor  = 0;    }       printOLED("IA%1X",cursor);              break;
; 0016 01E4         case KEY_DOWN   :   if(--cursor < 0){               cursor  = 12;   }       printOLED("IA%1X",cursor);              break;
; 0016 01E5         case KEY_OK     :   if(cursor == 12){
; 0016 01E6                                 currentPage = P_DEV_S_CONFIRM;
; 0016 01E7                                 cursor      = 0;
; 0016 01E8                                 printOLED("SF%u.%u.%u.%u,%u.%u.%u.%u,%u.%u.%u.%u,%u.%u.%u.%u,",
; 0016 01E9                                             (setIp[0]    *100) + (setIp[1]     *10) + setIp[2],
; 0016 01EA                                             (setIp[3]    *100) + (setIp[4]     *10) + setIp[5],
; 0016 01EB                                             (setIp[6]    *100) + (setIp[7]     *10) + setIp[8],
; 0016 01EC                                             (setIp[9]    *100) + (setIp[10]    *10) + setIp[11],
; 0016 01ED                                             (setMask[0]  *100) + (setMask[1]   *10) + setMask[2],
; 0016 01EE                                             (setMask[3]  *100) + (setMask[4]   *10) + setMask[5],
; 0016 01EF                                             (setMask[6]  *100) + (setMask[7]   *10) + setMask[8],
; 0016 01F0                                             (setMask[9]  *100) + (setMask[10]  *10) + setMask[11],
; 0016 01F1                                             (setGw[0]    *100) + (setGw[1]     *10) + setGw[2],
; 0016 01F2                                             (setGw[3]    *100) + (setGw[4]     *10) + setGw[5],
; 0016 01F3                                             (setGw[6]    *100) + (setGw[7]     *10) + setGw[8],
; 0016 01F4                                             (setGw[9]    *100) + (setGw[10]    *10) + setGw[11],
; 0016 01F5                                             (setServer[0]*100) + (setServer[1] *10) + setServer[2],
; 0016 01F6                                             (setServer[3]*100) + (setServer[4] *10) + setServer[5],
; 0016 01F7                                             (setServer[6]*100) + (setServer[7] *10) + setServer[8],
; 0016 01F8                                             (setServer[9]*100) + (setServer[10]*10) + setServer[11]);
; 0016 01F9                             }
; 0016 01FA                             else if(cursor < 12){
; 0016 01FB                                 if((cursor%3) == 0){
; 0016 01FC                                     if(++setServer[cursor] >2)  setServer[cursor] = 0;
; 0016 01FD                                 }
; 0016 01FE                                 else{
; 0016 01FF                                     if(++setServer[cursor] >9)  setServer[cursor] = 0;
; 0016 0200                                 }
; 0016 0201                                 //if(++setServer[cursor] >9)  setServer[cursor] = 0;
; 0016 0202                                 printOLED("ID%1X%1d",cursor, setServer[cursor]);
; 0016 0203                             }
; 0016 0204                             else{                       // -- Exit -- should not occur
; 0016 0205                                 currentPage = P_MONITOR;
; 0016 0206                                 cursor      = 0;
; 0016 0207                                 printOLED("M0");
; 0016 0208                             }
; 0016 0209             break;
; 0016 020A         }
; 0016 020B     }
; 0016 020C     else if ( currentPage == P_DEV_S_CONFIRM )
; 0016 020D     {
; 0016 020E         switch(key){
; 0016 020F         case KEY_MODE   :   currentPage = P_DEV_S_MENU;     cursor  = 1;    printOLED("M6%1d",cursor);  break;
; 0016 0210         case KEY_UP     :   /* no operation */                                                          break;
; 0016 0211         case KEY_DOWN   :   /* no operation */                                                          break;
; 0016 0212         case KEY_OK     :   currentPage = P_FINISH;
; 0016 0213                             tmpNextPage = P_DEV_S_MENU;
; 0016 0214                             tmpPrevPage = P_DEV_S_CONFIRM;
; 0016 0215                             cursor      = 0;
; 0016 0216                             // -- set network -- //
; 0016 0217                             res = ETH_setConfig(setIp,setMask,setGw,setServer);
; 0016 0218                             //res = setNetworkInfo(setIp,setMask,setGw,setServer);
; 0016 0219                             if(res<0){
; 0016 021A                                 printDebug("<MENU_processKey> ETH_setConfig() failed \r\n");
; 0016 021B                             }
; 0016 021C 
; 0016 021D                             // ----------------- //
; 0016 021E                             printOLED("FI");
; 0016 021F                             break;
; 0016 0220         }
; 0016 0221     }
; 0016 0222     else if ( currentPage == P_PRB_MENU )
; 0016 0223     {
; 0016 0224         switch(key){
; 0016 0225         case KEY_MODE   :   currentPage = P_MAIN_MENU;      cursor  = 1;            printOLED("M1%1d",cursor);  break;
; 0016 0226         case KEY_UP     :   if(--cursor < 0){               cursor  = 1;    }       printOLED("MA%1d",cursor);  break;
; 0016 0227         case KEY_DOWN   :   if(++cursor > 1){               cursor  = 0;    }       printOLED("MA%1d",cursor);  break;
; 0016 0228         case KEY_OK     :   if(cursor == 0){            // -- View Probe Config
; 0016 0229                                 currentPage = P_PRB_V;
; 0016 022A                                 cursor      = 0;
; 0016 022B                                 showProbeConfig(cursor);
; 0016 022C 
; 0016 022D                             }
; 0016 022E                             else if(cursor == 1){       // -- Set Probe Config
; 0016 022F                                 currentPage = P_ENTER_U_PASS;
; 0016 0230                                 tmpNextPage = P_PRB_S;
; 0016 0231                                 tmpPrevPage = P_PRB_MENU;
; 0016 0232                                 memset(entPwd,0xFF,sizeof(entPwd));
; 0016 0233                                 cursor      = 0;
; 0016 0234                                 printOLED("P0");
; 0016 0235                             }
; 0016 0236                             else{                       // -- Exit -- should not occur
; 0016 0237                                 currentPage = P_MONITOR;
; 0016 0238                                 cursor      = 0;
; 0016 0239                                 printOLED("M0");
; 0016 023A                             }
; 0016 023B             break;
; 0016 023C         }
; 0016 023D     }
; 0016 023E     else if ( currentPage == P_PRB_V )
; 0016 023F     {
; 0016 0240         switch(key){
; 0016 0241         case KEY_MODE   :   currentPage = P_PRB_MENU;       cursor  = 0;            printOLED("M3%1d",cursor);  break;
; 0016 0242         case KEY_UP     :   if(++cursor > 4){               cursor  = 0;    }       showProbeConfig(cursor);    break;
; 0016 0243         case KEY_DOWN   :   if(--cursor < 0){               cursor  = 4;    }       showProbeConfig(cursor);    break;
; 0016 0244         case KEY_OK     :   currentPage = P_PRB_MENU;       cursor  = 0;            printOLED("M3%1d",cursor);  break;
; 0016 0245         }
; 0016 0246     }
; 0016 0247     else if ( currentPage == P_PRB_S )
; 0016 0248     {
; 0016 0249         switch(key){
; 0016 024A         case KEY_MODE   :   currentPage = P_PRB_MENU;       cursor  = 1;            printOLED("M3%1d",cursor);  break;
; 0016 024B         case KEY_UP     :   if(--cursor < 0){               cursor  = 5;    }       printOLED("MA%1d",cursor);  break;
; 0016 024C         case KEY_DOWN   :   if(++cursor > 5){               cursor  = 0;    }       printOLED("MA%1d",cursor);  break;
; 0016 024D         case KEY_OK     :   if(cursor < 5){
; 0016 024E                                 prbEn[cursor] = !prbEn[cursor];
; 0016 024F                                 printOLED("ED%1d%1d",cursor,prbEn[cursor]);
; 0016 0250                             }
; 0016 0251                             else if(cursor == 5){       // -- Display Finish page
; 0016 0252                                 currentPage = P_FINISH;
; 0016 0253                                 tmpNextPage = P_PRB_MENU;
; 0016 0254                                 cursor      = 0;
; 0016 0255                                 for(i=0;i<MAX_SENS_CHANNEL;i++){
; 0016 0256                                     operating_config.sensorEnable[i]    = prbEn[i];
; 0016 0257                                 }
; 0016 0258 
; 0016 0259                                 res = setOperatingConfig(&operating_config);
; 0016 025A                                 if(res < 0){
; 0016 025B                                     printDebug("<MENU_processKey> setOperatingConfig() failed\r\n");
; 0016 025C                                     currentPage = P_FAILED;
; 0016 025D                                     tmpNextPage = P_PRB_MENU;
; 0016 025E                                     tmpPrevPage = P_PRB_S;
; 0016 025F                                     cursor      = 0;
; 0016 0260                                     printOLED("FL");
; 0016 0261                                 }
; 0016 0262                                 else{
; 0016 0263                                     currentPage = P_FINISH;
; 0016 0264                                     tmpNextPage = P_PRB_MENU;
; 0016 0265                                     tmpPrevPage = P_PRB_S;
; 0016 0266                                     cursor      = 0;
; 0016 0267                                     printOLED("FI");
; 0016 0268                                 }
; 0016 0269                             }
; 0016 026A                             else{                       // -- Exit -- should not occur
; 0016 026B                                 currentPage = P_MONITOR;
; 0016 026C                                 cursor      = 0;
; 0016 026D                                 printOLED("M0");
; 0016 026E                             }
; 0016 026F             break;
; 0016 0270         }
; 0016 0271     }
; 0016 0272     else if ( currentPage == P_MANAGE_MENU )
; 0016 0273     {
; 0016 0274         switch(key){
; 0016 0275         case KEY_MODE   :   currentPage = P_MAIN_MENU;      cursor  = 2;            printOLED("M1%1d",cursor);  break;
; 0016 0276         case KEY_UP     :   if(--cursor < 0){               cursor  = 1;    }       printOLED("MA%1d",cursor);  break;
; 0016 0277         case KEY_DOWN   :   if(++cursor > 1){               cursor  = 0;    }       printOLED("MA%1d",cursor);  break;
; 0016 0278         case KEY_OK     :   if(cursor == 0){            // -- Set Mute
; 0016 0279                                 currentPage = P_MUTE_MENU;
; 0016 027A                                 cursor      = 0;
; 0016 027B                                 mute        = muteMode;
; 0016 027C                                 printOLED("MU%1d",cursor);
; 0016 027D                                 printOLED("ED%1d%1d",cursor+2,mute);
; 0016 027E                             }
; 0016 027F                             else if(cursor == 1){       // -- Set New User Password
; 0016 0280                                 currentPage = P_ENTER_U_PASS;
; 0016 0281                                 tmpNextPage = P_PASS_NEW;
; 0016 0282                                 tmpPrevPage = P_MANAGE_MENU;
; 0016 0283                                 memset(entPwd,0xFF,sizeof(entPwd));
; 0016 0284                                 cursor      = 0;
; 0016 0285                                 printOLED("P0");
; 0016 0286                             }
; 0016 0287                             else{                       // -- Exit -- should not occur
; 0016 0288                                 currentPage = P_MONITOR;
; 0016 0289                                 cursor      = 0;
; 0016 028A                                 printOLED("M0");
; 0016 028B                             }
; 0016 028C             break;
; 0016 028D         }
; 0016 028E     }
; 0016 028F     else if ( currentPage == P_MUTE_MENU )
; 0016 0290     {
; 0016 0291         switch(key){
; 0016 0292         case KEY_MODE   :   currentPage = P_MANAGE_MENU;    cursor  = 0;            printOLED("M4%1d",cursor);  break;
; 0016 0293         case KEY_UP     :   if(--cursor < 0){               cursor  = 1;    }       printOLED("MU%1d",cursor);  break;
; 0016 0294         case KEY_DOWN   :   if(++cursor > 1){               cursor  = 0;    }       printOLED("MU%1d",cursor);  break;
; 0016 0295         case KEY_OK     :   if(cursor == 0){            // -- Set Device Enable
; 0016 0296                                 mute       = !mute;
; 0016 0297                                 printOLED("ED%1d%1d",cursor+2,mute);
; 0016 0298                             }
; 0016 0299                             else if(cursor == 1){       // -- Display Finish page
; 0016 029A                                 currentPage = P_FINISH;
; 0016 029B                                 tmpNextPage = P_MANAGE_MENU;
; 0016 029C                                 tmpPrevPage = P_MUTE_MENU;
; 0016 029D                                 muteMode    = mute;
; 0016 029E                                 cursor      = 0;
; 0016 029F                                 printOLED("FI");
; 0016 02A0                             }
; 0016 02A1                             else{                       // -- Exit -- should not occur
; 0016 02A2                                 currentPage = P_MONITOR;
; 0016 02A3                                 cursor      = 0;
; 0016 02A4                                 printOLED("M0");
; 0016 02A5                             }
; 0016 02A6             break;
; 0016 02A7         }
; 0016 02A8     }
; 0016 02A9     else if ( currentPage == P_PASS_NEW )
; 0016 02AA     {
; 0016 02AB         switch(key){
; 0016 02AC         case KEY_MODE   :   currentPage = P_MANAGE_MENU;    cursor  = 1;        printOLED("M4%1d",cursor);      break;
; 0016 02AD         case KEY_UP     :   if(cursor < 4){     printOLED("PD%1d*",cursor); }
; 0016 02AE                             if(++cursor > 4){   cursor  = 0;                }   printOLED("PA%1d",cursor);      break;
; 0016 02AF         case KEY_DOWN   :   if(cursor < 4){     printOLED("PD%1d*",cursor); }
; 0016 02B0                             if(--cursor < 0){   cursor  = 4;                }   printOLED("PA%1d",cursor);      break;
; 0016 02B1         case KEY_OK     :   if(cursor == 4){
; 0016 02B2                                 currentPage = P_PASS_CONFIRM;
; 0016 02B3                                 memset(confPwd,0xFF,sizeof(confPwd));
; 0016 02B4                                 cursor      = 0;
; 0016 02B5                                 printOLED("P5");
; 0016 02B6                             }
; 0016 02B7                             else if(cursor < 4){
; 0016 02B8                                 if(++newPwd[cursor] >9) newPwd[cursor] = 0;
; 0016 02B9                                 printOLED("PD%1d%1d",cursor, newPwd[cursor]);
; 0016 02BA                             }
; 0016 02BB                             break;
; 0016 02BC         }
; 0016 02BD     }
; 0016 02BE     else if ( currentPage == P_PASS_CONFIRM )
; 0016 02BF     {
; 0016 02C0         switch(key){
; 0016 02C1         case KEY_MODE   :   currentPage = P_MANAGE_MENU;    cursor  = 1;        printOLED("M4%1d",cursor);      break;
; 0016 02C2         case KEY_UP     :   if(cursor < 4){     printOLED("PD%1d*",cursor); }
; 0016 02C3                             if(++cursor > 4){   cursor  = 0;                }   printOLED("PA%1d",cursor);      break;
; 0016 02C4         case KEY_DOWN   :   if(cursor < 4){     printOLED("PD%1d*",cursor); }
; 0016 02C5                             if(--cursor < 0){   cursor  = 4;                }   printOLED("PA%1d",cursor);      break;
; 0016 02C6         case KEY_OK     :   if(cursor == 4){
; 0016 02C7                                 // -- checkValidation -- //
; 0016 02C8                                 if(memcmp(newPwd,confPwd,sizeof(newPwd)) != 0){
; 0016 02C9                                     printDebug("<MENU_processKey> newPwd & confPwd not match\r\n");
; 0016 02CA                                     memset(newPwd,0xFF,sizeof(newPwd));
; 0016 02CB                                     memset(confPwd,0xFF,sizeof(confPwd));
; 0016 02CC                                     currentPage = P_FAILED;
; 0016 02CD                                     tmpNextPage = P_MANAGE_MENU;
; 0016 02CE                                     tmpPrevPage = P_PASS_CONFIRM;
; 0016 02CF                                     cursor      = 0;
; 0016 02D0                                     printOLED("FL");
; 0016 02D1                                 }
; 0016 02D2                                 else{
; 0016 02D3                                     r2ecpy(uPwd,(unsigned char *) confPwd,sizeof(userPwd));
; 0016 02D4                                     currentPage = P_FINISH;
; 0016 02D5                                     tmpNextPage = P_MANAGE_MENU;
; 0016 02D6                                     tmpPrevPage = P_PASS_CONFIRM;
; 0016 02D7                                     cursor      = 0;
; 0016 02D8                                     printOLED("FI");
; 0016 02D9                                 }
; 0016 02DA                             }
; 0016 02DB                             else if(cursor < 4){
; 0016 02DC                                 if(++confPwd[cursor] >9) confPwd[cursor] = 0;
; 0016 02DD                                 printOLED("PD%1d%1d",cursor, confPwd[cursor]);
; 0016 02DE                             }
; 0016 02DF 
; 0016 02E0                             break;
; 0016 02E1         }
; 0016 02E2     }
; 0016 02E3     else if ( currentPage == P_MTNC_MENU )
; 0016 02E4     {
; 0016 02E5         switch(key){
; 0016 02E6         case KEY_MODE   :   currentPage = P_MAIN_MENU;      cursor  = 3;            printOLED("M1%1d",cursor);  break;
; 0016 02E7         case KEY_UP     :   if(--cursor < 0){               cursor  = 3;    }       printOLED("MA%1d",cursor);  break;
; 0016 02E8         case KEY_DOWN   :   if(++cursor > 3){               cursor  = 0;    }       printOLED("MA%1d",cursor);  break;
; 0016 02E9         case KEY_OK     :   if(cursor == 0){            // -- Set Voltage Reference
; 0016 02EA                                 currentPage = P_SET_VREF;
; 0016 02EB                                 cursor      = 0;
; 0016 02EC                                 res = get_current_vref(&vRef[0]);
; 0016 02ED                                 if(res < 0){
; 0016 02EE                                     vRef[0] = 2;
; 0016 02EF                                     vRef[1] = 5;
; 0016 02F0                                     vRef[2] = 6;
; 0016 02F1                                 }
; 0016 02F2                                 printOLED("SV");
; 0016 02F3                                 for(i=0;i<3;i++){
; 0016 02F4                                     printOLED("VD%1d%1d",i,vRef[i]);
; 0016 02F5                                 }
; 0016 02F6                             }
; 0016 02F7                             else if(cursor == 1){       // -- Calibrate method 1
; 0016 02F8                                 currentPage = P_CAL1_SEL_REF_PRB;
; 0016 02F9                                 cursor      = 0;
; 0016 02FA                                 prb1        = 0;
; 0016 02FB                                 printOLED("S1%1d",prb1+1);
; 0016 02FC                             }
; 0016 02FD                             else if(cursor == 2){       // -- Calibrate method 2
; 0016 02FE                                 currentPage = P_CAL2_SEL_PRB;
; 0016 02FF                                 cursor      = 0;
; 0016 0300                                 prb1        = 0;
; 0016 0301                                 printOLED("S2%1d",prb1+1);
; 0016 0302                             }
; 0016 0303                             else if(cursor == 3){       // -- Reset User Password
; 0016 0304                                 currentPage = P_RESET_CONFIRM;
; 0016 0305                                 cursor      = 0;
; 0016 0306                                 printOLED("RC");
; 0016 0307                             }
; 0016 0308                             else{                       // -- Exit -- should not occur
; 0016 0309                                 currentPage = P_MONITOR;
; 0016 030A                                 cursor      = 0;
; 0016 030B                                 printOLED("M0");
; 0016 030C                             }
; 0016 030D             break;
; 0016 030E         }
; 0016 030F     }
; 0016 0310     else if ( currentPage == P_SET_VREF )
; 0016 0311     {
; 0016 0312         switch(key){
; 0016 0313         case KEY_MODE   :   currentPage = P_MTNC_MENU;      cursor  = 0;            printOLED("M7%1d",cursor);              break;
; 0016 0314         case KEY_UP     :   if(++cursor > 3){   cursor  = 0;                }       printOLED("VA%1d",cursor);              break;
; 0016 0315         case KEY_DOWN   :   if(--cursor < 0){   cursor  = 3;                }       printOLED("VA%1d",cursor);              break;
; 0016 0316         case KEY_OK     :   if(cursor == 3){
; 0016 0317                                 currentPage = P_FINISH;
; 0016 0318                                 tmpNextPage = P_MTNC_MENU;
; 0016 0319                                 tmpPrevPage = P_SET_VREF;
; 0016 031A                                 set_vref(&vRef[0]);
; 0016 031B                                 cursor = 0;
; 0016 031C                                 printOLED("FI");
; 0016 031D                             }
; 0016 031E                             else if(cursor < 3){
; 0016 031F                                 if(++vRef[cursor] >9) vRef[cursor] = 0;
; 0016 0320                                 printOLED("VD%1d%1d",cursor, vRef[cursor]);
; 0016 0321                             }
; 0016 0322                             else{                       // -- Exit -- should not occur
; 0016 0323                                 currentPage = P_MONITOR;
; 0016 0324                                 cursor      = 0;
; 0016 0325                                 printOLED("M0");
; 0016 0326                             }
; 0016 0327             break;
; 0016 0328         }
; 0016 0329     }
; 0016 032A     else if ( currentPage == P_CAL1_SEL_REF_PRB )
; 0016 032B     {
; 0016 032C         switch(key){
; 0016 032D         case KEY_MODE   :   currentPage = P_MTNC_MENU;      cursor  = 1;    prb1 = 0;   printOLED("M7%1d",cursor);  break;
; 0016 032E         case KEY_UP     :   if(++cursor > 1){               cursor  = 0;    }           printOLED("SA%1d",cursor);  break;
; 0016 032F         case KEY_DOWN   :   if(--cursor < 0){               cursor  = 1;    }           printOLED("SA%1d",cursor);  break;
; 0016 0330         case KEY_OK     :   if(cursor == 0){
; 0016 0331                                 if(++prb1 > 4){ prb1 = 0; }
; 0016 0332                                 printOLED("PN%1d",prb1+1);
; 0016 0333                             }
; 0016 0334                             else if(cursor == 1){
; 0016 0335                                 currentPage = P_CAL1_SEL_CAL_PRB;
; 0016 0336                                 cursor      = 0;
; 0016 0337                                 prb2        = 0;
; 0016 0338                                 printOLED("S2%1d",prb2+1);
; 0016 0339                             }
; 0016 033A                             else{                       // -- Exit -- should not occur
; 0016 033B                                 currentPage = P_MONITOR;
; 0016 033C                                 cursor      = 0;
; 0016 033D                                 printOLED("M0");
; 0016 033E                             }
; 0016 033F             break;
; 0016 0340         }
; 0016 0341     }
; 0016 0342     else if ( currentPage == P_CAL1_SEL_CAL_PRB )
; 0016 0343     {
; 0016 0344         switch(key){
; 0016 0345         case KEY_MODE   :   currentPage = P_CAL1_SEL_REF_PRB;   cursor  = 0;    prb2 = 0;   printOLED("S1%1d",prb1+1);  break;
; 0016 0346         case KEY_UP     :   if(++cursor > 1){                   cursor  = 0;    }           printOLED("SA%1d",cursor);  break;
; 0016 0347         case KEY_DOWN   :   if(--cursor < 0){                   cursor  = 1;    }           printOLED("SA%1d",cursor);  break;
; 0016 0348         case KEY_OK     :   if(cursor == 0){
; 0016 0349                                 if(++prb2 > 4){ prb2 = 0; }
; 0016 034A                                 printOLED("PN%1d",prb2+1);
; 0016 034B                             }
; 0016 034C                             else if(cursor == 1){
; 0016 034D                                 currentPage = P_CAL1_CONFIRM;
; 0016 034E                                 cursor      = 0;
; 0016 034F                                 printOLED("CC%1d",prb2+1);
; 0016 0350                             }
; 0016 0351                             else{                       // -- Exit -- should not occur
; 0016 0352                                 currentPage = P_MONITOR;
; 0016 0353                                 cursor      = 0;
; 0016 0354                                 printOLED("M0");
; 0016 0355                             }
; 0016 0356             break;
; 0016 0357         }
; 0016 0358     }
; 0016 0359 //    else if ( currentPage == P_CAL1_CONFIRM )
; 0016 035A //    {
; 0016 035B //        switch(key){
; 0016 035C //        case KEY_MODE   :   currentPage = P_CAL1_SEL_CAL_PRB;   cursor  = 0;        printOLED("S2%1d",prb2+1);  break;
; 0016 035D //        case KEY_UP     :   /* no operation */                                                                  break;
; 0016 035E //        case KEY_DOWN   :   /* no operation */                                                                  break;
; 0016 035F //        case KEY_OK     :   res = sensorCalibrate1(prb1,prb2);
; 0016 0360 //                            if(res < 0){
; 0016 0361 //                                currentPage = P_FAILED;
; 0016 0362 //                                tmpNextPage = P_CAL1_SEL_CAL_PRB;
; 0016 0363 //                                tmpPrevPage = P_CAL1_CONFIRM;
; 0016 0364 //                                cursor      = 0;
; 0016 0365 //                                printOLED("FL");
; 0016 0366 //                            }
; 0016 0367 //                            else{
; 0016 0368 //                                currentPage = P_FINISH;
; 0016 0369 //                                tmpNextPage = P_CAL1_SEL_CAL_PRB;
; 0016 036A //                                tmpPrevPage = P_CAL1_CONFIRM;
; 0016 036B //                                cursor      = 0;
; 0016 036C //                                printOLED("FI");
; 0016 036D //                            }
; 0016 036E //                            break;
; 0016 036F //        }
; 0016 0370 //    }
; 0016 0371     else if ( currentPage == P_CAL2_SEL_PRB )
; 0016 0372     {
; 0016 0373         switch(key){
; 0016 0374         case KEY_MODE   :   currentPage = P_MTNC_MENU;      cursor  = 2;            printOLED("M7%1d",cursor);  break;
; 0016 0375         case KEY_UP     :   if(++cursor > 1){               cursor  = 0;    }       printOLED("SA%1d",cursor);  break;
; 0016 0376         case KEY_DOWN   :   if(--cursor < 0){               cursor  = 1;    }       printOLED("SA%1d",cursor);  break;
; 0016 0377         case KEY_OK     :   if(cursor == 0){
; 0016 0378                                 if(++prb1 > 4){ prb1 = 0; }
; 0016 0379                                 printOLED("PN%1d",prb1+1);
; 0016 037A                             }
; 0016 037B                             else if(cursor == 1){
; 0016 037C                                 currentPage = P_CAL2_MENU;
; 0016 037D                                 cursor      = 0;
; 0016 037E                                 printOLED("M8%1d",cursor);
; 0016 037F                             }
; 0016 0380                             else{                       // -- Exit -- should not occur
; 0016 0381                                 currentPage = P_MONITOR;
; 0016 0382                                 cursor      = 0;
; 0016 0383                                 printOLED("M0");
; 0016 0384                             }
; 0016 0385             break;
; 0016 0386         }
; 0016 0387     }
; 0016 0388 //    else if ( currentPage == P_CAL2_MENU )
; 0016 0389 //    {
; 0016 038A //        switch(key){
; 0016 038B //        case KEY_MODE   :   currentPage = P_CAL2_SEL_PRB;   cursor  = 0;        printOLED("S2%1d",prb1+1);  break;
; 0016 038C //        case KEY_UP     :   if(--cursor < 0){               cursor  = 3;    }   printOLED("MA%1d",cursor);  break;
; 0016 038D //        case KEY_DOWN   :   if(++cursor > 3){               cursor  = 0;    }   printOLED("MA%1d",cursor);  break;
; 0016 038E //        case KEY_OK     :   if(cursor < 3){
; 0016 038F //                                if(cursor == 0){        currentPage = P_CAL2_SPT1;  }
; 0016 0390 //                                else if(cursor == 1){   currentPage = P_CAL2_SPT2;  }
; 0016 0391 //                                else if(cursor == 2){   currentPage = P_CAL2_SPT3;  }
; 0016 0392 //
; 0016 0393 //                                printOLED("CP%1d%1d",cursor+1,prb1+1);
; 0016 0394 //
; 0016 0395 //                                res = sensorGetCurrentSetPoint(prb1,CALPOINT(cursor+1),&calPnt[0]);
; 0016 0396 //                                if(res<0){          memset(&calPnt[0],0x00,sizeof(calPnt));     }
; 0016 0397 //                                for(i=0;i<6;i++){   printOLED("CD%1d%1d",i,calPnt[i]);
; 0016 0398 //                                                    printDebug("calPnt[%1d] = %1d\r\n",i,calPnt[i]);         }
; 0016 0399 //                                cursor      = 0;
; 0016 039A //                            }
; 0016 039B //                            else if(cursor == 3){       // -- Calculate
; 0016 039C //                                currentPage = P_CAL2_CONFIRM;
; 0016 039D //                                cursor      = 0;
; 0016 039E //                                printOLED("CC%1d",prb1+1);
; 0016 039F //                            }
; 0016 03A0 //                            else{                       // -- Exit -- should not occur
; 0016 03A1 //                                currentPage = P_MONITOR;
; 0016 03A2 //                                cursor      = 0;
; 0016 03A3 //                                printOLED("M0");
; 0016 03A4 //                            }
; 0016 03A5 //            break;
; 0016 03A6 //        }
; 0016 03A7 //    }
; 0016 03A8 //    else if ((currentPage == P_CAL2_SPT1) || (currentPage == P_CAL2_SPT2) || (currentPage == P_CAL2_SPT3))
; 0016 03A9 //    {
; 0016 03AA //        switch(key){
; 0016 03AB //        case KEY_MODE   :   currentPage = P_CAL2_MENU;
; 0016 03AC //                            if(currentPage == P_CAL2_SPT1){         cursor  = 0;    }
; 0016 03AD //                            else if(currentPage == P_CAL2_SPT2){    cursor  = 1;    }
; 0016 03AE //                            else if(currentPage == P_CAL2_SPT3){    cursor  = 2;    }
; 0016 03AF //                            printOLED("M8%1d",cursor);                                                                      break;
; 0016 03B0 //        case KEY_UP     :   if(++cursor > 6){                       cursor  = 0;    }       printOLED("CA%1d",cursor);      break;
; 0016 03B1 //        case KEY_DOWN   :   if(--cursor < 0){                       cursor  = 6;    }       printOLED("CA%1d",cursor);      break;
; 0016 03B2 //        case KEY_OK     :   if(cursor == 6){
; 0016 03B3 //
; 0016 03B4 //                                if(currentPage == P_CAL2_SPT1){
; 0016 03B5 //                                    res = sensorSetCurrentSetPoint(prb1,CALPOINT(1),&calPnt[0]);
; 0016 03B6 //                                }
; 0016 03B7 //                                else if(currentPage == P_CAL2_SPT2){
; 0016 03B8 //                                    res = sensorSetCurrentSetPoint(prb1,CALPOINT(2),&calPnt[0]);
; 0016 03B9 //                                }
; 0016 03BA //                                else if(currentPage == P_CAL2_SPT3){
; 0016 03BB //                                    res = sensorSetCurrentSetPoint(prb1,CALPOINT(3),&calPnt[0]);
; 0016 03BC //                                }
; 0016 03BD //                                else{
; 0016 03BE //                                    // -- should not occur -- //
; 0016 03BF //                                    res = -1;
; 0016 03C0 //                                }
; 0016 03C1 //
; 0016 03C2 //                                if(res < 0){
; 0016 03C3 //                                    currentPage = P_FAILED;
; 0016 03C4 //                                    tmpNextPage = P_CAL2_MENU;
; 0016 03C5 //                                    tmpPrevPage = currentPage;
; 0016 03C6 //                                    cursor      = 0;
; 0016 03C7 //                                    printOLED("FL");
; 0016 03C8 //                                }
; 0016 03C9 //                                else{
; 0016 03CA //                                    currentPage = P_FINISH;
; 0016 03CB //                                    tmpNextPage = P_CAL2_MENU;
; 0016 03CC //                                    tmpPrevPage = currentPage;
; 0016 03CD //                                    cursor      = 0;
; 0016 03CE //                                    printOLED("FI");
; 0016 03CF //                                }
; 0016 03D0 //                            }
; 0016 03D1 //                            else if(cursor == 0){   // toggle '+' & '-'
; 0016 03D2 //                                if(++calPnt[cursor] > 1){ calPnt[cursor] = 0;   }
; 0016 03D3 //                                printOLED("CD%1d%1d",cursor,calPnt[cursor]);
; 0016 03D4 //                            }
; 0016 03D5 //                            else if(cursor < 6){
; 0016 03D6 //                                if(++calPnt[cursor] > 9){ calPnt[cursor] = 0;   }
; 0016 03D7 //                                printOLED("CD%1d%1d",cursor,calPnt[cursor]);
; 0016 03D8 //                            }
; 0016 03D9 //                            else{                       // -- Exit -- should not occur
; 0016 03DA //                                currentPage = P_MONITOR;
; 0016 03DB //                                cursor      = 0;
; 0016 03DC //                                printOLED("M0");
; 0016 03DD //                            }
; 0016 03DE //            break;
; 0016 03DF //        }
; 0016 03E0 //    }
; 0016 03E1 //    else if ( currentPage == P_CAL2_CONFIRM )
; 0016 03E2 //    {
; 0016 03E3 //        switch(key){
; 0016 03E4 //        case KEY_MODE   :   currentPage = P_CAL2_MENU;      cursor  = 1;            printOLED("M8%1d",cursor);  break;
; 0016 03E5 //        case KEY_UP     :   /* no operation */                                                                  break;
; 0016 03E6 //        case KEY_DOWN   :   /* no operation */                                                                  break;
; 0016 03E7 //        case KEY_OK     :   res = sensorCalibrate2(prb1);
; 0016 03E8 //                            if(res < 0){
; 0016 03E9 //                                currentPage = P_FAILED;
; 0016 03EA //                                tmpNextPage = P_CAL2_MENU;
; 0016 03EB //                                tmpPrevPage = P_CAL2_CONFIRM;
; 0016 03EC //                                cursor      = 0;
; 0016 03ED //                                printOLED("FL");
; 0016 03EE //                            }
; 0016 03EF //                            else{
; 0016 03F0 //                                currentPage = P_FINISH;
; 0016 03F1 //                                tmpNextPage = P_CAL2_MENU;
; 0016 03F2 //                                tmpPrevPage = P_CAL2_CONFIRM;
; 0016 03F3 //                                cursor      = 0;
; 0016 03F4 //                                printOLED("FI");
; 0016 03F5 //                            }
; 0016 03F6 //                            break;
; 0016 03F7 //        }
; 0016 03F8 //    }
; 0016 03F9     else if ( currentPage == P_RESET_CONFIRM )
; 0016 03FA     {
; 0016 03FB         switch(key){
; 0016 03FC         case KEY_MODE   :   currentPage = P_MTNC_MENU;      cursor  = 3;            printOLED("M7%1d",cursor);  break;
; 0016 03FD         case KEY_UP     :   /* no operation */                                                                  break;
; 0016 03FE         case KEY_DOWN   :   /* no operation */                                                                  break;
; 0016 03FF         case KEY_OK     :   memset(newPwd,0x00,sizeof(newPwd));
; 0016 0400                             r2ecpy(uPwd,(unsigned char *) newPwd,sizeof(userPwd));
; 0016 0401                             currentPage = P_FINISH;
; 0016 0402                             tmpNextPage = P_MTNC_MENU;
; 0016 0403                             tmpPrevPage = P_RESET_CONFIRM;
; 0016 0404                             cursor      = 0;
; 0016 0405                             printOLED("FI");
; 0016 0406                             break;
; 0016 0407         }
; 0016 0408     }
; 0016 0409     else if ( currentPage == P_ENTER_U_PASS )
; 0016 040A     {
; 0016 040B         switch(key){
; 0016 040C         case KEY_MODE   :   switch(tmpPrevPage){
; 0016 040D                             case P_DEV_MENU     : currentPage = P_DEV_MENU;     cursor  = 1;    printOLED("M2%1d",cursor);  break;
; 0016 040E                             case P_PRB_MENU     : currentPage = P_PRB_MENU;     cursor  = 1;    printOLED("M3%1d",cursor);  break;
; 0016 040F                             case P_MANAGE_MENU  : currentPage = P_MANAGE_MENU;  cursor  = 1;    printOLED("M4%1d",cursor);  break;
; 0016 0410                             }
; 0016 0411                             // --- clear entered password
; 0016 0412                             memset(entPwd,0xFF,sizeof(entPwd));                                                             break;
; 0016 0413         case KEY_UP     :   if(cursor < 4){     printOLED("PD%1d*",cursor); }
; 0016 0414                             if(++cursor > 4){   cursor  = 0;                }   printOLED("PA%1d",cursor);                  break;
; 0016 0415         case KEY_DOWN   :   if(cursor < 4){     printOLED("PD%1d*",cursor); }
; 0016 0416                             if(--cursor < 0){   cursor  = 4;                }   printOLED("PA%1d",cursor);                  break;
; 0016 0417         case KEY_OK     :   if(cursor == 4){
; 0016 0418 
; 0016 0419                                 // -- verifyPassword -- //
; 0016 041A                                 if(recmp((unsigned char *) entPwd,uPwd,sizeof(entPwd)) != 0){
; 0016 041B                                     currentPage = P_WRONG_PASS;  cursor = 0;    printOLED("WP");
; 0016 041C                                     memset(entPwd,0xFF,sizeof(entPwd));
; 0016 041D                                     break;
; 0016 041E                                 }
; 0016 041F 
; 0016 0420                                 // -- else, allow access -- //
; 0016 0421                                 switch(tmpNextPage){
; 0016 0422                                 case P_DEV_S_MENU   : currentPage = P_DEV_S_MENU;   cursor  = 0;    printOLED("M6%1d",cursor);  break;
; 0016 0423                                 case P_PRB_S        : currentPage = P_PRB_S;        cursor  = 0;    printOLED("PS");
; 0016 0424                                                       for(i=0;i<MAX_SENS_CHANNEL;i++){
; 0016 0425                                                         prbEn[i]  = operating_config.sensorEnable[i];
; 0016 0426                                                         printOLED("ED%1d%1d",i,prbEn[i]);
; 0016 0427                                                       }
; 0016 0428                                                       break;
; 0016 0429                                 case P_PASS_NEW     : currentPage = P_PASS_NEW;
; 0016 042A                                                       memset(newPwd,0xFF,sizeof(newPwd));
; 0016 042B                                                       cursor  = 0;
; 0016 042C                                                       printOLED("P4");
; 0016 042D                                                       break;
; 0016 042E                                 default             : // -- Exit -- should not occur
; 0016 042F                                                       currentPage = P_MONITOR;
; 0016 0430                                                       cursor      = 0;
; 0016 0431                                                       printOLED("M0");
; 0016 0432                                                       break;
; 0016 0433                                 }
; 0016 0434                             }
; 0016 0435                             else if(cursor < 4){
; 0016 0436                                 if(++entPwd[cursor] >9) entPwd[cursor] = 0;
; 0016 0437                                 printOLED("PD%1d%1d",cursor, entPwd[cursor]);
; 0016 0438                             }
; 0016 0439             break;
; 0016 043A         }
; 0016 043B     }
; 0016 043C     else if ( currentPage == P_ENTER_M_PASS )
; 0016 043D     {
; 0016 043E         switch(key){
; 0016 043F         case KEY_MODE   :   currentPage = P_MAIN_MENU;      cursor  = 3;            printOLED("M1%1d",cursor);  break;
; 0016 0440         case KEY_UP     :   if(cursor < 4){     printOLED("PD%1d*",cursor); }
; 0016 0441                             if(++cursor > 4){   cursor  = 0;                }       printOLED("PA%1d",cursor);  break;
; 0016 0442         case KEY_DOWN   :   if(cursor < 4){     printOLED("PD%1d*",cursor); }
; 0016 0443                             if(--cursor < 0){   cursor  = 4;                }       printOLED("PA%1d",cursor);  break;
; 0016 0444         case KEY_OK     :   if(cursor == 4){
; 0016 0445 
; 0016 0446                                 // -- verifyPassword -- //
; 0016 0447                                 if(recmp((unsigned char *) entPwd,sPwd,sizeof(entPwd)) != 0){
; 0016 0448                                     tmpPrevPage = P_MAIN_MENU;
; 0016 0449                                     currentPage = P_WRONG_PASS; cursor  = 0;    printOLED("WP");
; 0016 044A                                     memset(entPwd,0xFF,sizeof(entPwd));
; 0016 044B                                     break;
; 0016 044C                                 }
; 0016 044D 
; 0016 044E                                 // -- else, allow access -- //
; 0016 044F                                 currentPage = P_MTNC_MENU;     cursor  = 0;     printOLED("M7%1d",cursor);
; 0016 0450                                 memset(entPwd,0xFF,sizeof(entPwd));
; 0016 0451                                 break;
; 0016 0452                             }
; 0016 0453                             else if(cursor < 4){
; 0016 0454                                 if(++entPwd[cursor] >9) entPwd[cursor] = 0;
; 0016 0455                                 printOLED("PD%1d%1d",cursor, entPwd[cursor]);
; 0016 0456                             }
; 0016 0457             break;
; 0016 0458 
; 0016 0459 
; 0016 045A 
; 0016 045B             break;
; 0016 045C         }
; 0016 045D     }
; 0016 045E     else if ( currentPage == P_WRONG_PASS )
; 0016 045F     {
; 0016 0460         switch(key){
; 0016 0461         case KEY_MODE   :   /* no operation */                                                                              break;
; 0016 0462         case KEY_UP     :   /* no operation */                                                                              break;
; 0016 0463         case KEY_DOWN   :   /* no operation */                                                                              break;
; 0016 0464         case KEY_OK     :   switch(tmpPrevPage){
; 0016 0465                             case P_MAIN_MENU    : currentPage = P_MAIN_MENU;    cursor  = 3;    printOLED("M1%1d",cursor);  break;
; 0016 0466                             case P_DEV_MENU     : currentPage = P_DEV_MENU;     cursor  = 1;    printOLED("M2%1d",cursor);  break;
; 0016 0467                             case P_PRB_MENU     : currentPage = P_PRB_MENU;     cursor  = 1;    printOLED("M3%1d",cursor);  break;
; 0016 0468                             case P_MANAGE_MENU  : currentPage = P_MANAGE_MENU;  cursor  = 1;    printOLED("M4%1d",cursor);  break;
; 0016 0469                             }
; 0016 046A 
; 0016 046B 
; 0016 046C             break;
; 0016 046D         }
; 0016 046E     }
; 0016 046F     else if ((currentPage == P_FINISH) || (currentPage == P_FAILED) )
; 0016 0470     {
; 0016 0471         switch(key){
; 0016 0472         case KEY_MODE   :   /* no operation */                                                                              break;
; 0016 0473         case KEY_UP     :   /* no operation */                                                                              break;
; 0016 0474         case KEY_DOWN   :   /* no operation */                                                                              break;
; 0016 0475         case KEY_OK     :   switch(tmpNextPage){
; 0016 0476                             case P_DEV_S_MENU       :   currentPage = P_DEV_S_MENU;
; 0016 0477                                                         if(       tmpPrevPage == P_DEV_S_OPER){       cursor  = 0;    }
; 0016 0478                                                         else if(  tmpPrevPage == P_DEV_S_CONFIRM){    cursor  = 1;    }
; 0016 0479                                                         printOLED("M6%1d",cursor);                                                  break;
; 0016 047A                             case P_PRB_MENU         :   currentPage = P_PRB_MENU;     cursor = 1;     printOLED("M3%1d",cursor);    break;
; 0016 047B                             case P_MANAGE_MENU      :   currentPage = P_MANAGE_MENU;
; 0016 047C                                                         if(       tmpPrevPage == P_MUTE_MENU){        cursor  = 0;    }
; 0016 047D                                                         else if(  tmpPrevPage == P_PASS_CONFIRM){     cursor  = 1;    }
; 0016 047E                                                         printOLED("M4%1d",cursor);                                                  break;
; 0016 047F                             case P_MTNC_MENU        :   currentPage = P_MTNC_MENU;
; 0016 0480                                                         if(       tmpPrevPage == P_SET_VREF){         cursor  = 0;    }
; 0016 0481                                                         else if(  tmpPrevPage == P_CAL2_MENU){        cursor  = 2;    }
; 0016 0482                                                         else if(  tmpPrevPage == P_RESET_CONFIRM){    cursor  = 3;    }
; 0016 0483                                                         printOLED("M7%1d",cursor);                                                  break;
; 0016 0484                             case P_CAL1_SEL_CAL_PRB :   currentPage = P_CAL1_SEL_CAL_PRB;
; 0016 0485                                                         cursor      = 0;
; 0016 0486                                                         printOLED("S2%1d",prb2+1);                                                  break;
; 0016 0487                             case P_CAL2_MENU        :   currentPage = P_CAL2_MENU;
; 0016 0488                                                         if(       tmpPrevPage == P_CAL2_SPT1){        cursor  = 0;    }
; 0016 0489                                                         else if(  tmpPrevPage == P_CAL2_SPT2){        cursor  = 1;    }
; 0016 048A                                                         else if(  tmpPrevPage == P_CAL2_SPT3){        cursor  = 2;    }
; 0016 048B                                                         else if(  tmpPrevPage == P_CAL2_CONFIRM){     cursor  = 3;    }
; 0016 048C                                                         printOLED("M8%1d",cursor);                                                  break;
; 0016 048D                             }
; 0016 048E 
; 0016 048F 
; 0016 0490             break;
; 0016 0491         }
; 0016 0492     }
; 0016 0493 
; 0016 0494     return;
; 0016 0495 }
;/*============================================================*/
;
;/**************************************************************/
;/*********************** Service Function *********************/
;/**************************************************************/
;/*============================================================*/
;void showProbeConfig(int id)
; 0016 049D {
; 0016 049E     int         res         = 0;
; 0016 049F     int         sampling    = 0;
; 0016 04A0     signed char val[4]      = {0,0,0,0};
; 0016 04A1     char        str1[8]     = {0,0,0,0,0,0,0,0};
; 0016 04A2     char        str2[8]     = {0,0,0,0,0,0,0,0};
; 0016 04A3 
; 0016 04A4 
; 0016 04A5     res = get_current_sampling(sensor_config[id].samplingRate,&val[0]);
;	id -> Y+24
;	res -> R16,R17
;	sampling -> R18,R19
;	val -> Y+20
;	str1 -> Y+12
;	str2 -> Y+4
; 0016 04A6 
; 0016 04A7     if(res < 0){
; 0016 04A8         val[0] = 0;
; 0016 04A9         val[1] = 0;
; 0016 04AA         val[2] = 0;
; 0016 04AB         val[3] = 0;
; 0016 04AC     }
; 0016 04AD 
; 0016 04AE     sampling = 0;
; 0016 04AF     sampling += val[0] * 100;
; 0016 04B0     sampling += val[1] * 10;
; 0016 04B1     sampling += val[2];
; 0016 04B2 
; 0016 04B3     memset(str1,'\0',sizeof(str1));
; 0016 04B4     if( operating_config.sensorEnable[id]==0x01 ){  sprintf(str1,"[E]");        }
; 0016 04B5     else{                                           sprintf(str1,"[D]");        }
; 0016 04B6 
; 0016 04B7     memset(str2,'\0',sizeof(str2));
; 0016 04B8     if( sensor_config[id].alarmEnable == 0x01   ){  sprintf(str2,"Enable");     }
; 0016 04B9     else{                                           sprintf(str2,"Disable");    }
; 0016 04BA 
; 0016 04BB 
; 0016 04BC     printDebug("<showProbeConfig> PC%1d%1d%d,%s,%s,%.1f,%d,%.1f,%.1f,%d,%.1f",
; 0016 04BD                 id,val[3],sampling,
; 0016 04BE                 str1,str2,
; 0016 04BF                 sensor_config[id].lowerLimit,
; 0016 04C0                 sensor_config[id].lowerDelay,
; 0016 04C1                 sensor_config[id].lowerExtreme,
; 0016 04C2                 sensor_config[id].upperLimit,
; 0016 04C3                 sensor_config[id].upperDelay,
; 0016 04C4                 sensor_config[id].upperExtreme);
; 0016 04C5 
; 0016 04C6     printOLED("PC%1d%1d%d,%s,%s,%.1f,%d,%.1f,%.1f,%d,%.1f",
; 0016 04C7                 id,val[3],sampling,
; 0016 04C8                 str1,str2,
; 0016 04C9                 sensor_config[id].lowerLimit,
; 0016 04CA                 sensor_config[id].lowerDelay,
; 0016 04CB                 sensor_config[id].lowerExtreme,
; 0016 04CC                 sensor_config[id].upperLimit,
; 0016 04CD                 sensor_config[id].upperDelay,
; 0016 04CE                 sensor_config[id].upperExtreme);
; 0016 04CF 
; 0016 04D0 }
;/*============================================================*/
;int get_current_sampling(unsigned int period, signed char *val)
; 0016 04D3 {
; 0016 04D4     unsigned int min, min_c;
; 0016 04D5     unsigned int hr, hr_c;
; 0016 04D6 
; 0016 04D7     printDebug("\r\n<get_current_sampling> real value (%l sec.)\r\n");
;	period -> Y+10
;	*val -> Y+8
;	min -> R16,R17
;	min_c -> R18,R19
;	hr -> R20,R21
;	hr_c -> Y+6
; 0016 04D8     // -- display as hour unit -- //
; 0016 04D9     hr   = period / 3600;
; 0016 04DA     hr_c = period % 3600;
; 0016 04DB     if((hr > 0) && (hr < 1000) && (hr_c == 0)){
; 0016 04DC         printDebug("<get_current_sampling> %d hr.\r\n",hr);
; 0016 04DD         val[0] = hr / 100;
; 0016 04DE         val[1] = (hr % 100) / 10;
; 0016 04DF         val[2] = ((hr % 100) % 10);
; 0016 04E0         val[3] = 2;
; 0016 04E1         return 0;
; 0016 04E2     }
; 0016 04E3 
; 0016 04E4     // -- display as minute unit -- //
; 0016 04E5     min   = period / 60;
; 0016 04E6     min_c = period % 60;
; 0016 04E7     if((min > 0) && (min < 1000)  && (min_c == 0)){
; 0016 04E8         printDebug("<get_current_sampling> %d min.\r\n",min);
; 0016 04E9         val[0] = min / 100;
; 0016 04EA         val[1] = (min % 100) / 10;
; 0016 04EB         val[2] = ((min % 100) % 10);
; 0016 04EC         val[3] = 1;
; 0016 04ED         return 0;
; 0016 04EE     }
; 0016 04EF 
; 0016 04F0     // -- display as second unit -- //
; 0016 04F1     if(period < 1000){           // show only 0 - 999
; 0016 04F2         printDebug("<get_current_sampling> %d sec.\r\n",period);
; 0016 04F3         val[0] = period / 100;
; 0016 04F4         val[1] = (period % 100) / 10;
; 0016 04F5         val[2] = ((period % 100) % 10);
; 0016 04F6         val[3] = 0;
; 0016 04F7         return 0;
; 0016 04F8     }
; 0016 04F9 
; 0016 04FA     if(min < 1000){
; 0016 04FB         printDebug("<get_current_sampling> %d min. %d sec. ",min,min_c);
; 0016 04FC         if(min_c > 30){
; 0016 04FD             min++;
; 0016 04FE         }
; 0016 04FF         printDebug("--> %d min.\r\n",min);
; 0016 0500         val[0] = min / 100;
; 0016 0501         val[1] = (min % 100) / 10;
; 0016 0502         val[2] = ((min % 100) % 10);
; 0016 0503         val[3] = 1;
; 0016 0504         return 0;
; 0016 0505     }
; 0016 0506 
; 0016 0507     if(hr < 1000){
; 0016 0508         min   = hr_c / 60;
; 0016 0509         min_c = hr_c % 60;
; 0016 050A         printDebug("<get_current_sampling> %d hr. %d min. %d sec. ",hr,min,min_c);
; 0016 050B         if(min > 30){
; 0016 050C             hr++;
; 0016 050D         }
; 0016 050E         printDebug("--> %d hr.\r\n",hr);
; 0016 050F         val[0] = hr / 100;
; 0016 0510         val[1] = (hr % 100) / 10;
; 0016 0511         val[2] = ((hr % 100) % 10);
; 0016 0512         val[3] = 2;
; 0016 0513         return 0;
; 0016 0514     }
; 0016 0515 
; 0016 0516     printDebug("<get_current_sampling> Can't Show.\r\n");
; 0016 0517     return -1;
; 0016 0518 
; 0016 0519 }
;/*============================================================*/
;int get_current_vref(char *buf)
; 0016 051C {
; 0016 051D     char    valTmp[10];
; 0016 051E     float   vref;
; 0016 051F     int     i;
; 0016 0520     int tmp;
; 0016 0521     int d2;
; 0016 0522     int d1;
; 0016 0523     int d0;
; 0016 0524 
; 0016 0525     if(eep_vref_val > 10.0){
;	*buf -> Y+24
;	valTmp -> Y+14
;	vref -> Y+10
;	i -> R16,R17
;	tmp -> R18,R19
;	d2 -> R20,R21
;	d1 -> Y+8
;	d0 -> Y+6
; 0016 0526         return -1;
; 0016 0527     }
; 0016 0528 
; 0016 0529     vref = eep_vref_val;
; 0016 052A     ftoa(vref,2,valTmp);
; 0016 052B 
; 0016 052C     if(strlen(valTmp) != 4){ return -1; }
; 0016 052D 
; 0016 052E     /*
; 0016 052F     tmp = (int)(eep_vref_val * 100);
; 0016 0530 
; 0016 0531     d2  = tmp / 100;
; 0016 0532     d1  = (tmp % 100) / 10;
; 0016 0533     d0  = tmp % 10;
; 0016 0534 
; 0016 0535     printDebug("<get_current_vref> vref(%f) tmp = %d -> [%d][%d][%d]\r\n",eep_vref_val,tmp,d2,d1,d0);
; 0016 0536     buf[0]  = d2;
; 0016 0537     buf[1]  = d1;
; 0016 0538     buf[2]  = d0;
; 0016 0539     */
; 0016 053A     printDebug("<get_current_vref> vref(%f) valTmp = %s\r\n",eep_vref_val,valTmp);
; 0016 053B     buf[0]  = valTmp[0]-0x30;
; 0016 053C     buf[1]  = valTmp[2]-0x30;
; 0016 053D     buf[2]  = valTmp[3]-0x30;
; 0016 053E 
; 0016 053F     printDebug("<get_current_vref> buf -> ");
; 0016 0540     for(i=0;i<3;i++){
; 0016 0541         printDebug("[%c]",buf[i]);
; 0016 0542     }
; 0016 0543     printDebug("\r\n");
; 0016 0544 
; 0016 0545     return 0;
; 0016 0546 }
;/*============================================================*/
;int getNetworkInfo(char *msg, char *ip, char *mask, char *gw, char *server)
; 0016 0549 {
; 0016 054A     int i,offset;
; 0016 054B     //char msg[] = "0008DC135E2401C0A80B03FFFFFF00C0A80B011388C0A80B011388FE08000100000000000000000003010000000000000000002020202020202020202020200202020202020202020202020202020202020012B2B2B0020202020202020202020202020202020202020202020202020202020202020002020202020202020020202020202020202020202020202020202020202020000000000000000000FF\r\n";
; 0016 054C     char dIp[4];
; 0016 054D     char dMask[4];
; 0016 054E     char dGw[4];
; 0016 054F     char dServer[4];
; 0016 0550 
; 0016 0551     offset = 7;
;	*msg -> Y+28
;	*ip -> Y+26
;	*mask -> Y+24
;	*gw -> Y+22
;	*server -> Y+20
;	i -> R16,R17
;	offset -> R18,R19
;	dIp -> Y+16
;	dMask -> Y+12
;	dGw -> Y+8
;	dServer -> Y+4
; 0016 0552     for(i=offset;i<(offset+4);i++){
; 0016 0553         dIp[i-offset]                   = (h2i(msg[i*2]) * 16) + h2i(msg[(i*2) + 1]);
; 0016 0554         ip[(i-offset) * 3]              = (dIp[i-offset]/100);
; 0016 0555         ip[((i-offset) * 3) + 1]        = (dIp[i-offset]%100) / 10;
; 0016 0556         ip[((i-offset) * 3) + 2]        = (dIp[i-offset]%10);
; 0016 0557     }
; 0016 0558 
; 0016 0559     offset = 11;
; 0016 055A     for(i=offset;i<(offset+4);i++){
; 0016 055B         dMask[i-offset]                 = (h2i(msg[i*2]) * 16) + h2i(msg[(i*2) + 1]);
; 0016 055C         mask[(i-offset) * 3]            = (dMask[i-offset]/100);
; 0016 055D         mask[((i-offset) * 3) + 1]      = (dMask[i-offset]%100) / 10;
; 0016 055E         mask[((i-offset) * 3) + 2]      = (dMask[i-offset]%10);
; 0016 055F     }
; 0016 0560 
; 0016 0561     offset = 15;
; 0016 0562     for(i=offset;i<(offset+4);i++){
; 0016 0563         dGw[i-offset]                   = (h2i(msg[i*2]) * 16) + h2i(msg[(i*2) + 1]);
; 0016 0564         gw[(i-offset) * 3]              = (dGw[i-offset]/100);
; 0016 0565         gw[((i-offset) * 3) + 1]        = (dGw[i-offset]%100) / 10;
; 0016 0566         gw[((i-offset) * 3) + 2]        = (dGw[i-offset]%10);
; 0016 0567     }
; 0016 0568 
; 0016 0569     offset = 21;
; 0016 056A     for(i=offset;i<(offset+4);i++){
; 0016 056B         dServer[i-offset]               = (h2i(msg[i*2]) * 16) + h2i(msg[(i*2) + 1]);
; 0016 056C         server[(i-offset) * 3]          = (dServer[i-offset]/100);
; 0016 056D         server[((i-offset) * 3) + 1]    = (dServer[i-offset]%100) / 10;
; 0016 056E         server[((i-offset) * 3) + 2]    = (dServer[i-offset]%10);
; 0016 056F     }
; 0016 0570 
; 0016 0571     printDebug("<getNetworkInfo> LIP : %u.%u.%u.%u\r\n",dIp[0],dIp[1],dIp[2],dIp[3]);
; 0016 0572     printDebug("<getNetworkInfo> MSK : %u.%u.%u.%u\r\n",dMask[0],dMask[1],dMask[2],dMask[3]);
; 0016 0573     printDebug("<getNetworkInfo> DGW : %u.%u.%u.%u\r\n",dGw[0],dGw[1],dGw[2],dGw[3]);
; 0016 0574     printDebug("<getNetworkInfo> SIP : %u.%u.%u.%u\r\n",dServer[0],dServer[1],dServer[2],dServer[3]);
; 0016 0575 
; 0016 0576     return 0;
; 0016 0577 }
;/*============================================================*/
;/*
;int setNetworkInfo(char *ip, char *mask, char *gw, char *server)
;{
;    char    *msg;
;    int     msg_len;
;    int     i=0,res=0;
;
;    // -- read -- <S0008DC18BDDC01C0A801FCFFFFFF00C0A80101232EC0A80101271AF4080001000000000005000001040100010000000000000020202020202020202020202020202020202020202020202020202020202020002B2B2B00202020202020202020202020202020202020202020202020202020202020200020202020202020202020202020202020202020202020202020202020202020000000000000000000FF -- //
;    // -- write - >W01[IP(4)][MSK(4)][GW(4)]
;    msg = (unsigned char *) malloc( sizeof(char) * CONF_READ_BUFFER );
;    if(msg == NULL){
;        printDebug("<setNetworkInfo> malloc(CONF_READ_BUFFER) failed\r\n");
;        return -1;
;    }
;
;    res = ETH_getConfig(msg,&msg_len);
;    if(res < 0){
;        printDebug("<setNetworkInfo> ETH_getConfig() failed\r\n");
;    }
;    else{
;        printDebug("<setNetworkInfo> ETH_getConfig() success\r\n");
;        printDebug("\r\n\r\n<setNetworkInfo> read[%d] -->\r\n",msg_len);
;        for(i=0;i<msg_len;i++){
;            putchar3(msg[i]);
;        }
;        printDebug("\r\n");
;    }
;
;    printDebug("<setNetworkInfo> Network Configuring\r\n");
;    printDebug("<setNetworkInfo> LIP       : ");
;    printDebug("%u.%u.%u.%u  -- %02X,%02X,%02X,%02X\r\n",
;                (ip[0]    *100) + (ip[1]     *10) + ip[2],
;                (ip[3]    *100) + (ip[4]     *10) + ip[5],
;                (ip[6]    *100) + (ip[7]     *10) + ip[8],
;                (ip[9]    *100) + (ip[10]    *10) + ip[11],
;                (ip[0]    *100) + (ip[1]     *10) + ip[2],
;                (ip[3]    *100) + (ip[4]     *10) + ip[5],
;                (ip[6]    *100) + (ip[7]     *10) + ip[8],
;                (ip[9]    *100) + (ip[10]    *10) + ip[11]);
;
;    printDebug("<setNetworkInfo> MASK      : ");
;    printDebug("%u.%u.%u.%u  -- %02X,%02X,%02X,%02X\r\n",
;                (mask[0]  *100) + (mask[1]   *10) + mask[2],
;                (mask[3]  *100) + (mask[4]   *10) + mask[5],
;                (mask[6]  *100) + (mask[7]   *10) + mask[8],
;                (mask[9]  *100) + (mask[10]  *10) + mask[11],
;                (mask[0]  *100) + (mask[1]   *10) + mask[2],
;                (mask[3]  *100) + (mask[4]   *10) + mask[5],
;                (mask[6]  *100) + (mask[7]   *10) + mask[8],
;                (mask[9]  *100) + (mask[10]  *10) + mask[11]);
;    printDebug("<setNetworkInfo> GATEWAY   : ");
;    printDebug("%u.%u.%u.%u  -- %02X,%02X,%02X,%02X\r\n",
;                (gw[0]    *100) + (gw[1]     *10) + gw[2],
;                (gw[3]    *100) + (gw[4]     *10) + gw[5],
;                (gw[6]    *100) + (gw[7]     *10) + gw[8],
;                (gw[9]    *100) + (gw[10]    *10) + gw[11],
;                (gw[0]    *100) + (gw[1]     *10) + gw[2],
;                (gw[3]    *100) + (gw[4]     *10) + gw[5],
;                (gw[6]    *100) + (gw[7]     *10) + gw[8],
;                (gw[9]    *100) + (gw[10]    *10) + gw[11]);
;    printDebug("<setNetworkInfo> SIP       : ");
;    printDebug("%u.%u.%u.%u  -- %02X,%02X,%02X,%02X\r\n",
;                (server[0]*100) + (server[1] *10) + server[2],
;                (server[3]*100) + (server[4] *10) + server[5],
;                (server[6]*100) + (server[7] *10) + server[8],
;                (server[9]*100) + (server[10]*10) + server[11],
;                (server[0]*100) + (server[1] *10) + server[2],
;                (server[3]*100) + (server[4] *10) + server[5],
;                (server[6]*100) + (server[7] *10) + server[8],
;                (server[9]*100) + (server[10]*10) + server[11]);
;
;
;    sprintf(setStr,"%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X",
;                (ip[0]    *100) + (ip[1]     *10) + ip[2],
;                (ip[3]    *100) + (ip[4]     *10) + ip[5],
;                (ip[6]    *100) + (ip[7]     *10) + ip[8],
;                (ip[9]    *100) + (ip[10]    *10) + ip[11],
;                (mask[0]  *100) + (mask[1]   *10) + mask[2],
;                (mask[3]  *100) + (mask[4]   *10) + mask[5],
;                (mask[6]  *100) + (mask[7]   *10) + mask[8],
;                (mask[9]  *100) + (mask[10]  *10) + mask[11],
;                (gw[0]    *100) + (gw[1]     *10) + gw[2],
;                (gw[3]    *100) + (gw[4]     *10) + gw[5],
;                (gw[6]    *100) + (gw[7]     *10) + gw[8],
;                (gw[9]    *100) + (gw[10]    *10) + gw[11]);
;
;    return 0;
;}
;*/
;/*============================================================*/
;int set_vref(char *buf)
; 0016 05D4 {
; 0016 05D5     int     tmp;
; 0016 05D6     float   tmpf;
; 0016 05D7 
; 0016 05D8     tmp = (buf[0] * 100) + (buf[1] * 10) + buf[2];
;	*buf -> Y+6
;	tmp -> R16,R17
;	tmpf -> Y+2
; 0016 05D9     tmpf = (float) (tmp / 100.0);
; 0016 05DA 
; 0016 05DB     printDebug("<set_vref> [%d][%d][%d] -> %d -> %f\r\n",buf[0],buf[1],buf[2],tmp,tmpf);
; 0016 05DC 
; 0016 05DD     eep_vref_val = tmpf;
; 0016 05DE 
; 0016 05DF     return 0;
; 0016 05E0 }
;/*============================================================*/
;
;/**************************************************************/
;/*********************** Support Function *********************/
;/**************************************************************/
;/*============================================================*/
;int h2i(char hex)
; 0016 05E8 {
; 0016 05E9     if      ((hex >= 'A') && (hex <= 'F')){ return hex - 0x37;  }
;	hex -> Y+0
; 0016 05EA     else if ((hex >= 'a') && (hex <= 'f')){ return hex - 0x57;  }
; 0016 05EB     else if ((hex >= '0') && (hex <= '9')){ return hex - 0x30;  }
; 0016 05EC 
; 0016 05ED     return 0;
; 0016 05EE }
;/*============================================================*/
;int e2rcpy(char *dest, char eeprom *src, int len)
; 0016 05F1 {
; 0016 05F2     int i;
; 0016 05F3 
; 0016 05F4     for(i=0;i<len;i++){
;	*dest -> Y+6
;	*src -> Y+4
;	len -> Y+2
;	i -> R16,R17
; 0016 05F5         dest[i] = src[i];
; 0016 05F6     }
; 0016 05F7     return 0;
; 0016 05F8 }
;/*============================================================*/
;int r2ecpy(char eeprom *dest, char *src, int len)
; 0016 05FB {
; 0016 05FC     int i;
; 0016 05FD     for(i=0;i<len;i++){
;	*dest -> Y+6
;	*src -> Y+4
;	len -> Y+2
;	i -> R16,R17
; 0016 05FE         dest[i] = src[i];
; 0016 05FF     }
; 0016 0600     return 0;
; 0016 0601 }
;/*============================================================*/
;int recmp(char *src1, char eeprom *src2, int len)
; 0016 0604 {
; 0016 0605     int i;
; 0016 0606 
; 0016 0607     for(i=0;i<len;i++){
;	*src1 -> Y+6
;	*src2 -> Y+4
;	len -> Y+2
;	i -> R16,R17
; 0016 0608         printDebug("<recmp> src1[%02X] src2[%02X] user[%02X] service[%02X]\r\n",src1[i],src2[i],userPwd[i],servicePwd[i]);
; 0016 0609     }
; 0016 060A 
; 0016 060B     for(i=0;i<len;i++){
; 0016 060C         if(src1[i] != src2[i]){
; 0016 060D             return -1;
; 0016 060E         }
; 0016 060F     }
; 0016 0610     return 0;
; 0016 0611 }
;/*============================================================*/
;#include <stdio.h>
;#include <stdlib.h>
;#include <string.h>
;#include <stdarg.h>
;#include <delay.h>
;#include <ctype.h>
;#include "debug.h"
;#include "adc.h"
	#ifndef __SLEEP_DEFINED__
	#define __SLEEP_DEFINED__
	.EQU __se_bit=0x01
	.EQU __sm_mask=0x0E
	.EQU __sm_powerdown=0x04
	.EQU __sm_powersave=0x06
	.EQU __sm_standby=0x0C
	.EQU __sm_ext_standby=0x0E
	.EQU __sm_adc_noise_red=0x02
	.SET power_ctrl_reg=smcr
	#endif
;#include "ds1672.h"
;#include "alarm.h"
;#include "log.h"
;#include "io.h"
;#include "ethcomm.h"
;#include "calibration.h"
;#include "sensor.h"
;//sensorGetValue(u int)
;extern ST_CAL_CONFIG sensorCalConfig;
;extern eeprom  ST_CAL sensorCalulate;          //improtance    extern from  calibration.h
;extern void (*pfCalibrate) (ST_CAL_CONFIG calConfig);   //pointer function of calibation set  extern from  calibration.h
;
;flash unsigned char cmdSetRTCDateTime[]     = "$CMDSDT";        // -- Set Date/Time -- //
;flash unsigned char cmdResetAlarmStatus[]   = "$CMDRAS";        // -- Re-initiate all alarm flag -- //
;flash unsigned char cmdClearLogFile[]       = "$CMDCLF";        // -- Re-initiate log file -- //
;flash unsigned char cmdSetVref[]            = "$CMDSVR";        // -- Set Vref measure from multimeter -- //
;flash unsigned char cmdSensorSelect[]       = "$CMDSNS";        // -- Select Sensor for Hardware Calibration [Disable mode require] -- //
;flash unsigned char cmdDeviceEnable[]       = "$CMDDEN";        // -- Enable Device -- //
;flash unsigned char cmdDeviceDisable[]      = "$CMDDDS";        // -- Disable Device -- //
;flash unsigned char cmdSetSerialNumber[]    = "$CMDSSN";        // -- Set Serial Number -- //
;flash unsigned char cmdReadSerialNumber[]   = "$CMDRSN";        // -- Read Serial Number -- //
;
;flash unsigned char cmdGetCal[]             = "$CMDGCL";         // -- Get calibrate value -- //      $CMDRCL,1#        ,chID(1)
;flash unsigned char cmdSetCal[]             = "$CMDSCL";         // -- Set calibrate value -- //      $CMDSCL,1,1,29.20     ,chID(1),pointID(1),std1Value(29.20)#
;flash unsigned char cmdConfirmCal[]         = "$CMDCCL";         // -- Confirm calibrate type -- //   ,chID(1),calType(1) 0:defualt-1:offset-2:linear-3:polynomail
;flash unsigned char cmdGetCurSensor[]       = "$CMDGCS";         // -- Get current sensor value -- //   ,chID(1)
;/*============================================================*/
;
;unsigned int hwCalId    = 9;

	.DSEG
;
;/**************************************************************/
;/************* Service Debug Command Function *****************/
;/**************************************************************/
;/*============================================================*/
;int debugGetCurSensor(){
; 0017 002B int debugGetCurSensor(){

	.CSEG
_debugGetCurSensor:
; 0017 002C     unsigned char i=0;
; 0017 002D     unsigned char buffer[2];
; 0017 002E     unsigned int channelID;
; 0017 002F 
; 0017 0030     printDebug("\r\n<Debug>GetCurSensor: \r\n");
	SBIW R28,2
	CALL __SAVELOCR4
;	i -> R17
;	buffer -> Y+4
;	channelID -> R18,R19
	LDI  R17,0
	__POINTD1FN _0x2E0000,0
	CALL SUBOPT_0x2
; 0017 0031     memset(buffer,0,sizeof(buffer));
	MOVW R30,R28
	ADIW R30,4
	CALL SUBOPT_0xE0
	CALL SUBOPT_0x65
	CALL _memset
; 0017 0032     for(i=0;i<1;i++){
	LDI  R17,LOW(0)
_0x2E0005:
	CPI  R17,1
	BRSH _0x2E0006
; 0017 0033        buffer[i] = rxPackage3[i+8];
	CALL SUBOPT_0x99
	CALL SUBOPT_0x150
	CALL SUBOPT_0x22F
; 0017 0034     }
	SUBI R17,-1
	RJMP _0x2E0005
_0x2E0006:
; 0017 0035     channelID = atoi(buffer);
	CALL SUBOPT_0x230
; 0017 0036     printDebug("Channel ID:%d \r\n",channelID);
	CALL SUBOPT_0x10
; 0017 0037     printDebug("\r\n");
	CALL SUBOPT_0x231
; 0017 0038 
; 0017 0039     if( channelID>0 && channelID<6 ){           //max 5 ch
	CLR  R0
	CP   R0,R18
	CPC  R0,R19
	BRSH _0x2E0008
	__CPWRN 18,19,6
	BRLO _0x2E0009
_0x2E0008:
	RJMP _0x2E0007
_0x2E0009:
; 0017 003A        printDebug("current sensor ch[%d] , value:%0.2f\r\n",channelID,sensorGetValue(channelID));
	__POINTD1FN _0x2E0000,43
	CALL SUBOPT_0x1FF
	MOVW R26,R18
	CALL _sensorGetValue
	CALL SUBOPT_0x1F
; 0017 003B     }else{
	RJMP _0x2E000A
_0x2E0007:
; 0017 003C         printDebug("Channel ID is in range.\r\n");
	__POINTD1FN _0x2E0000,81
	CALL SUBOPT_0x2
; 0017 003D     }
_0x2E000A:
; 0017 003E 
; 0017 003F     return 0;
	CALL SUBOPT_0x136
_0x20E0034:
	ADIW R28,6
	RET
; 0017 0040 }
;int debugGetCal(){
; 0017 0041 int debugGetCal(){
_debugGetCal:
; 0017 0042     unsigned char i=0;
; 0017 0043     unsigned char buffer[4];
; 0017 0044     unsigned int channelID;
; 0017 0045 
; 0017 0046     printDebug("\r\n<Debug>GetCal: \r\n");
	SBIW R28,4
	CALL __SAVELOCR4
;	i -> R17
;	buffer -> Y+4
;	channelID -> R18,R19
	LDI  R17,0
	__POINTD1FN _0x2E0000,107
	CALL SUBOPT_0x2
; 0017 0047     memset(buffer,0,sizeof(buffer));
	MOVW R30,R28
	ADIW R30,4
	CALL SUBOPT_0xE0
	CALL SUBOPT_0x69
	CALL _memset
; 0017 0048     for(i=0;i<1;i++){
	LDI  R17,LOW(0)
_0x2E000C:
	CPI  R17,1
	BRSH _0x2E000D
; 0017 0049        buffer[i] = rxPackage3[i+8];
	CALL SUBOPT_0x99
	CALL SUBOPT_0x150
	CALL SUBOPT_0x22F
; 0017 004A     }
	SUBI R17,-1
	RJMP _0x2E000C
_0x2E000D:
; 0017 004B     channelID = atoi(buffer);
	CALL SUBOPT_0x230
; 0017 004C     printDebug("Channel ID:%d \r\n",channelID);
	CALL SUBOPT_0x10
; 0017 004D     printDebug("\r\n");
	CALL SUBOPT_0x231
; 0017 004E 
; 0017 004F     if( channelID>0 && channelID<6 ){           //max 5 ch
	CLR  R0
	CP   R0,R18
	CPC  R0,R19
	BRSH _0x2E000F
	__CPWRN 18,19,6
	BRLO _0x2E0010
_0x2E000F:
	RJMP _0x2E000E
_0x2E0010:
; 0017 0050        for(i=0;i<3;i++){
	LDI  R17,LOW(0)
_0x2E0012:
	CPI  R17,3
	BRSH _0x2E0013
; 0017 0051            printDebug("stdRef[%d] : %0.2f , ",i+1,sensorCalulate.sChennel[channelID-1].stdRef[i]);
	__POINTD1FN _0x2E0000,127
	CALL SUBOPT_0x232
	ADIW R30,1
	CALL SUBOPT_0x227
	CALL SUBOPT_0x233
	SUBI R30,LOW(-_sensorCalulate)
	SBCI R31,HIGH(-_sensorCalulate)
	MOVW R26,R30
	CALL SUBOPT_0x99
	CALL SUBOPT_0x1D9
	CALL __EEPROMRDD
	CALL SUBOPT_0x1F
; 0017 0052            printDebug("sensorRef[%d] : %0.2f\r\n",i+1,sensorCalulate.sChennel[channelID-1].sensorRef[i]);
	__POINTD1FN _0x2E0000,149
	CALL SUBOPT_0x232
	ADIW R30,1
	CALL SUBOPT_0x227
	CALL SUBOPT_0x233
	__ADDW1MN _sensorCalulate,12
	MOVW R26,R30
	CALL SUBOPT_0x99
	CALL SUBOPT_0x1D9
	CALL __EEPROMRDD
	CALL SUBOPT_0x1F
; 0017 0053        }
	SUBI R17,-1
	RJMP _0x2E0012
_0x2E0013:
; 0017 0054        switch(sensorCalulate.sChennel[channelID-1].calType){
	CALL SUBOPT_0x233
	__ADDW1MN _sensorCalulate,24
	MOVW R26,R30
	CALL __EEPROMRDW
; 0017 0055             case CAL_DEFAULT:{               //0
	SBIW R30,0
	BRNE _0x2E0017
; 0017 0056                 printDebug("CalType : CAL_DEFAULT");
	__POINTD1FN _0x2E0000,173
	RJMP _0x2E0099
; 0017 0057                 break;
; 0017 0058             }
; 0017 0059             case CAL_EXTOFFSET:{             //1
_0x2E0017:
	CPI  R30,LOW(0x1)
	LDI  R26,HIGH(0x1)
	CPC  R31,R26
	BRNE _0x2E0018
; 0017 005A                 printDebug("CalType : CAL_EXTOFFSET");
	__POINTD1FN _0x2E0000,195
	RJMP _0x2E0099
; 0017 005B                 break;
; 0017 005C             }
; 0017 005D             case CAL_EXTLINEAR:{             //2
_0x2E0018:
	CPI  R30,LOW(0x2)
	LDI  R26,HIGH(0x2)
	CPC  R31,R26
	BRNE _0x2E0019
; 0017 005E                 printDebug("CalType : CAL_EXTLINEAR");
	__POINTD1FN _0x2E0000,219
	RJMP _0x2E0099
; 0017 005F                 break;
; 0017 0060             }
; 0017 0061             case CAL_EXTPOLYNOMIAL:{         //3
_0x2E0019:
	CPI  R30,LOW(0x3)
	LDI  R26,HIGH(0x3)
	CPC  R31,R26
	BRNE _0x2E0016
; 0017 0062                 printDebug("CalType : CAL_EXTPOLYNOMIAL");
	__POINTD1FN _0x2E0000,243
_0x2E0099:
	CALL __PUTPARD1
	CALL SUBOPT_0x30
; 0017 0063                 break;
; 0017 0064             }
; 0017 0065        }
_0x2E0016:
; 0017 0066        printDebug("\r\n");
	__POINTD1FN _0x2E0000,23
	RJMP _0x2E009A
; 0017 0067     }else{
_0x2E000E:
; 0017 0068         printDebug("Channel ID is in range.\r\n");
	__POINTD1FN _0x2E0000,81
_0x2E009A:
	CALL __PUTPARD1
	CALL SUBOPT_0x30
; 0017 0069     }
; 0017 006A 
; 0017 006B     return 0;
	CALL SUBOPT_0x136
_0x20E0033:
	ADIW R28,8
	RET
; 0017 006C }
;int debugSetCal(){
; 0017 006D int debugSetCal(){
_debugSetCal:
; 0017 006E     unsigned char i=0;
; 0017 006F     unsigned char buffer[6];
; 0017 0070     unsigned int channelID;
; 0017 0071     unsigned int pointID;
; 0017 0072     float pointValue;         //std value
; 0017 0073 
; 0017 0074     //void (*pfnCalibrate) (ST_CAL_CONFIG calConfig);
; 0017 0075 
; 0017 0076     pfCalibrate = &calSet;
	SBIW R28,10
	CALL __SAVELOCR6
;	i -> R17
;	buffer -> Y+10
;	channelID -> R18,R19
;	pointID -> R20,R21
;	pointValue -> Y+6
	LDI  R17,0
	LDI  R30,LOW(_pfCalibrate)
	LDI  R31,HIGH(_pfCalibrate)
	MOVW R26,R30
	MOVW R24,R22
	__POINTD1M _calSet
	CALL __PUTDP1
; 0017 0077 
; 0017 0078     printDebug("\r\n<Debug>SetCal: \r\n");
	__POINTD1FN _0x2E0000,271
	CALL SUBOPT_0x2
; 0017 0079     memset(buffer,0,sizeof(buffer));
	CALL SUBOPT_0x3F
	CALL SUBOPT_0x234
; 0017 007A     for(i=0;i<1;i++){
	LDI  R17,LOW(0)
_0x2E001D:
	CPI  R17,1
	BRSH _0x2E001E
; 0017 007B        buffer[i] = rxPackage3[i+8];
	CALL SUBOPT_0x99
	CALL SUBOPT_0x235
	CALL SUBOPT_0x22F
; 0017 007C     }
	SUBI R17,-1
	RJMP _0x2E001D
_0x2E001E:
; 0017 007D     channelID = atoi(buffer);
	MOVW R26,R28
	ADIW R26,10
	CALL SUBOPT_0x236
; 0017 007E     sensorCalConfig.channelID =  channelID;
; 0017 007F     printDebug("Channel ID:%d \r\n",channelID);
	CALL SUBOPT_0x10
; 0017 0080 
; 0017 0081     memset(buffer,0,sizeof(buffer));
	CALL SUBOPT_0x3F
	CALL SUBOPT_0x234
; 0017 0082     for(i=0;i<1;i++){
	LDI  R17,LOW(0)
_0x2E0020:
	CPI  R17,1
	BRSH _0x2E0021
; 0017 0083        buffer[i] = rxPackage3[i+10];
	CALL SUBOPT_0x99
	CALL SUBOPT_0x235
	__ADDW1MN _rxPackage3,10
	LD   R30,Z
	ST   X,R30
; 0017 0084     }
	SUBI R17,-1
	RJMP _0x2E0020
_0x2E0021:
; 0017 0085     pointID = atoi(buffer);
	MOVW R26,R28
	ADIW R26,10
	CALL _atoi
	MOVW R20,R30
; 0017 0086     sensorCalConfig.pointID =  pointID;
	__PUTWMRN _sensorCalConfig,4,20,21
; 0017 0087     printDebug("Point ID:%d \r\n",pointID);
	__POINTD1FN _0x2E0000,291
	CALL __PUTPARD1
	MOVW R30,R20
	CALL SUBOPT_0xDD
	CALL SUBOPT_0x10
; 0017 0088 
; 0017 0089     memset(buffer,0,sizeof(buffer));
	CALL SUBOPT_0x3F
	CALL SUBOPT_0x234
; 0017 008A     for(i=0;i<5;i++){
	LDI  R17,LOW(0)
_0x2E0023:
	CPI  R17,5
	BRSH _0x2E0024
; 0017 008B        buffer[i] = rxPackage3[i+12];
	CALL SUBOPT_0x99
	CALL SUBOPT_0x235
	__ADDW1MN _rxPackage3,12
	LD   R30,Z
	ST   X,R30
; 0017 008C     }
	SUBI R17,-1
	RJMP _0x2E0023
_0x2E0024:
; 0017 008D     pointValue = atof(buffer);
	MOVW R26,R28
	ADIW R26,10
	CALL _atof
	CALL SUBOPT_0x9D
; 0017 008E     sensorCalConfig.pointValue =  pointValue;     //std value for meter
	__PUTD1MN _sensorCalConfig,6
; 0017 008F     printDebug("pointValue(meterRef) :%0.2f \r\n",pointValue);
	__POINTD1FN _0x2E0000,306
	CALL SUBOPT_0x47
	CALL SUBOPT_0x10
; 0017 0090     printDebug("\r\n");
	CALL SUBOPT_0x231
; 0017 0091 
; 0017 0092     pfCalibrate(sensorCalConfig);
	CALL SUBOPT_0x237
; 0017 0093 
; 0017 0094     return 0;
	ADIW R28,16
	RET
; 0017 0095 }
;int debugConfirmCal(){
; 0017 0096 int debugConfirmCal(){
_debugConfirmCal:
; 0017 0097     unsigned char i=0;
; 0017 0098     unsigned char buffer[6];
; 0017 0099     unsigned int channelID;
; 0017 009A     unsigned int calType;
; 0017 009B 
; 0017 009C     pfCalibrate = &calSetConfirm;
	SBIW R28,6
	CALL __SAVELOCR6
;	i -> R17
;	buffer -> Y+6
;	channelID -> R18,R19
;	calType -> R20,R21
	LDI  R17,0
	LDI  R30,LOW(_pfCalibrate)
	LDI  R31,HIGH(_pfCalibrate)
	MOVW R26,R30
	MOVW R24,R22
	__POINTD1M _calSetConfirm
	CALL __PUTDP1
; 0017 009D 
; 0017 009E     printDebug("\r\n<Debug>ConfirmCal: \r\n");
	__POINTD1FN _0x2E0000,337
	CALL SUBOPT_0x2
; 0017 009F     memset(buffer,0,sizeof(buffer));
	CALL SUBOPT_0x46
	CALL SUBOPT_0x234
; 0017 00A0     for(i=0;i<1;i++){
	LDI  R17,LOW(0)
_0x2E0026:
	CPI  R17,1
	BRSH _0x2E0027
; 0017 00A1        buffer[i] = rxPackage3[i+8];
	CALL SUBOPT_0x99
	MOVW R26,R28
	ADIW R26,6
	CALL SUBOPT_0x238
; 0017 00A2     }
	SUBI R17,-1
	RJMP _0x2E0026
_0x2E0027:
; 0017 00A3     channelID = atoi(buffer);
	MOVW R26,R28
	ADIW R26,6
	CALL SUBOPT_0x236
; 0017 00A4     sensorCalConfig.channelID =  channelID;
; 0017 00A5     printDebug("Channel ID:%d \r\n",channelID);
	CALL SUBOPT_0x10
; 0017 00A6 
; 0017 00A7     memset(buffer,0,sizeof(buffer));
	CALL SUBOPT_0x46
	CALL SUBOPT_0x234
; 0017 00A8     for(i=0;i<1;i++){
	LDI  R17,LOW(0)
_0x2E0029:
	CPI  R17,1
	BRSH _0x2E002A
; 0017 00A9        buffer[i] = rxPackage3[i+10];
	CALL SUBOPT_0x99
	MOVW R26,R28
	ADIW R26,6
	ADD  R26,R30
	ADC  R27,R31
	__ADDW1MN _rxPackage3,10
	LD   R30,Z
	ST   X,R30
; 0017 00AA     }
	SUBI R17,-1
	RJMP _0x2E0029
_0x2E002A:
; 0017 00AB     calType = atoi(buffer);
	MOVW R26,R28
	ADIW R26,6
	CALL _atoi
	MOVW R20,R30
; 0017 00AC     sensorCalConfig.calType =  calType;
	__PUTWMRN _sensorCalConfig,10,20,21
; 0017 00AD     //printDebug("calType :%d \r\n",calType);
; 0017 00AE     switch(sensorCalConfig.calType){
	__GETW1MN _sensorCalConfig,10
; 0017 00AF         case CAL_DEFAULT:{               //0
	SBIW R30,0
	BRNE _0x2E002E
; 0017 00B0             printDebug("CalType : CAL_DEFAULT");
	__POINTD1FN _0x2E0000,173
	RJMP _0x2E009B
; 0017 00B1             break;
; 0017 00B2         }
; 0017 00B3         case CAL_EXTOFFSET:{             //2
_0x2E002E:
	CPI  R30,LOW(0x1)
	LDI  R26,HIGH(0x1)
	CPC  R31,R26
	BRNE _0x2E002F
; 0017 00B4             printDebug("CalType : CAL_EXTOFFSET");
	__POINTD1FN _0x2E0000,195
	RJMP _0x2E009B
; 0017 00B5             break;
; 0017 00B6         }
; 0017 00B7         case CAL_EXTLINEAR:{             //3
_0x2E002F:
	CPI  R30,LOW(0x2)
	LDI  R26,HIGH(0x2)
	CPC  R31,R26
	BRNE _0x2E0030
; 0017 00B8             printDebug("CalType : CAL_EXTLINEAR");
	__POINTD1FN _0x2E0000,219
	RJMP _0x2E009B
; 0017 00B9             break;
; 0017 00BA         }
; 0017 00BB         case CAL_EXTPOLYNOMIAL:{         //4
_0x2E0030:
	CPI  R30,LOW(0x3)
	LDI  R26,HIGH(0x3)
	CPC  R31,R26
	BRNE _0x2E002D
; 0017 00BC             printDebug("CalType : CAL_EXTPOLYNOMIAL");
	__POINTD1FN _0x2E0000,243
_0x2E009B:
	CALL __PUTPARD1
	CALL SUBOPT_0x30
; 0017 00BD             break;
; 0017 00BE         }
; 0017 00BF     }
_0x2E002D:
; 0017 00C0     printDebug("\r\n");
	CALL SUBOPT_0x231
; 0017 00C1 
; 0017 00C2     pfCalibrate(sensorCalConfig);
	CALL SUBOPT_0x237
; 0017 00C3 
; 0017 00C4     return 0;
	ADIW R28,12
	RET
; 0017 00C5 }
;
;int DEBUG_setDateTime(void)
; 0017 00C8 {
_DEBUG_setDateTime:
; 0017 00C9     unsigned char   i;
; 0017 00CA     unsigned char   buffer[32];
; 0017 00CB     int             tz;
; 0017 00CC 
; 0017 00CD     struct rtc_structure rtcSet;
; 0017 00CE 
; 0017 00CF     for(i=0;i<4;i++)
	SBIW R28,58
	CALL __SAVELOCR4
;	i -> R17
;	buffer -> Y+30
;	tz -> R18,R19
;	rtcSet -> Y+4
	LDI  R17,LOW(0)
_0x2E0033:
	CPI  R17,4
	BRSH _0x2E0034
; 0017 00D0     {
; 0017 00D1         buffer[i] = rxPackage3[i+8];
	CALL SUBOPT_0x99
	MOVW R26,R28
	ADIW R26,30
	CALL SUBOPT_0x238
; 0017 00D2     }
	SUBI R17,-1
	RJMP _0x2E0033
_0x2E0034:
; 0017 00D3     buffer[4] = 0;
	CALL SUBOPT_0x239
; 0017 00D4 
; 0017 00D5     rtcSet.year = atol(buffer);
	CALL SUBOPT_0x95
; 0017 00D6 
; 0017 00D7     printDebug("get year = %d\r\n",rtcSet.year);
	__POINTD1FN _0x2E0000,361
	CALL SUBOPT_0x1BA
	CALL SUBOPT_0x174
; 0017 00D8 
; 0017 00D9     for(i=0;i<2;i++)
	LDI  R17,LOW(0)
_0x2E0036:
	CPI  R17,2
	BRSH _0x2E0037
; 0017 00DA     {
; 0017 00DB         buffer[i] = rxPackage3[i+13];
	CALL SUBOPT_0x99
	CALL SUBOPT_0x23A
	__ADDW1MN _rxPackage3,13
	LD   R30,Z
	ST   X,R30
; 0017 00DC     }
	SUBI R17,-1
	RJMP _0x2E0036
_0x2E0037:
; 0017 00DD     buffer[2] = 0;
	CALL SUBOPT_0x23B
; 0017 00DE 
; 0017 00DF     rtcSet.month = atol(buffer);
	CALL SUBOPT_0x23C
; 0017 00E0 
; 0017 00E1     printDebug("get month = %d\r\n",rtcSet.month);
	__POINTD1FN _0x2E0000,377
	CALL SUBOPT_0x7B
	CALL SUBOPT_0x174
; 0017 00E2 
; 0017 00E3     for(i=0;i<2;i++)
	LDI  R17,LOW(0)
_0x2E0039:
	CPI  R17,2
	BRSH _0x2E003A
; 0017 00E4     {
; 0017 00E5         buffer[i] = rxPackage3[i+16];
	CALL SUBOPT_0x99
	CALL SUBOPT_0x23A
	__ADDW1MN _rxPackage3,16
	LD   R30,Z
	ST   X,R30
; 0017 00E6     }
	SUBI R17,-1
	RJMP _0x2E0039
_0x2E003A:
; 0017 00E7     buffer[2] = 0;
	CALL SUBOPT_0x23B
; 0017 00E8 
; 0017 00E9     rtcSet.date = atol(buffer);
	CALL SUBOPT_0xD6
; 0017 00EA 
; 0017 00EB     printDebug("get date = %d\r\n",rtcSet.date);
	__POINTD1FN _0x2E0000,394
	CALL SUBOPT_0x4B
	CALL SUBOPT_0x10
; 0017 00EC 
; 0017 00ED     for(i=0;i<2;i++)
	LDI  R17,LOW(0)
_0x2E003C:
	CPI  R17,2
	BRSH _0x2E003D
; 0017 00EE     {
; 0017 00EF         buffer[i] = rxPackage3[i+19];
	CALL SUBOPT_0x99
	CALL SUBOPT_0x23A
	__ADDW1MN _rxPackage3,19
	LD   R30,Z
	ST   X,R30
; 0017 00F0     }
	SUBI R17,-1
	RJMP _0x2E003C
_0x2E003D:
; 0017 00F1     buffer[2] = 0;
	CALL SUBOPT_0x23B
; 0017 00F2 
; 0017 00F3     rtcSet.hour = atol(buffer);
	CALL SUBOPT_0x23D
; 0017 00F4 
; 0017 00F5     printDebug("get hour = %d\r\n",rtcSet.hour);
	__POINTD1FN _0x2E0000,410
	CALL __PUTPARD1
	CALL SUBOPT_0xC9
	CALL SUBOPT_0x174
; 0017 00F6 
; 0017 00F7     for(i=0;i<2;i++)
	LDI  R17,LOW(0)
_0x2E003F:
	CPI  R17,2
	BRSH _0x2E0040
; 0017 00F8     {
; 0017 00F9         buffer[i] = rxPackage3[i+22];
	CALL SUBOPT_0x99
	CALL SUBOPT_0x23A
	__ADDW1MN _rxPackage3,22
	LD   R30,Z
	ST   X,R30
; 0017 00FA     }
	SUBI R17,-1
	RJMP _0x2E003F
_0x2E0040:
; 0017 00FB     buffer[2] = 0;
	CALL SUBOPT_0x23B
; 0017 00FC 
; 0017 00FD     rtcSet.min = atol(buffer);
	CALL SUBOPT_0x23E
; 0017 00FE 
; 0017 00FF     printDebug("get min = %d\r\n",rtcSet.min);
	__POINTD1FN _0x2E0000,426
	CALL __PUTPARD1
	CALL SUBOPT_0xCA
	CALL SUBOPT_0x174
; 0017 0100 
; 0017 0101     for(i=0;i<2;i++)
	LDI  R17,LOW(0)
_0x2E0042:
	CPI  R17,2
	BRSH _0x2E0043
; 0017 0102     {
; 0017 0103         buffer[i] = rxPackage3[i+25];
	CALL SUBOPT_0x99
	CALL SUBOPT_0x23A
	__ADDW1MN _rxPackage3,25
	LD   R30,Z
	ST   X,R30
; 0017 0104     }
	SUBI R17,-1
	RJMP _0x2E0042
_0x2E0043:
; 0017 0105     buffer[2] = 0;
	CALL SUBOPT_0x23B
; 0017 0106 
; 0017 0107     rtcSet.sec = atol(buffer);
	CALL SUBOPT_0x23F
; 0017 0108 
; 0017 0109     printDebug("get sec = %d\r\n",rtcSet.sec);
	__POINTD1FN _0x2E0000,441
	CALL __PUTPARD1
	__GETD1S 28
	CALL SUBOPT_0x174
; 0017 010A 
; 0017 010B     for(i=0;i<3;i++)
	LDI  R17,LOW(0)
_0x2E0045:
	CPI  R17,3
	BRSH _0x2E0046
; 0017 010C     {
; 0017 010D         buffer[i] = rxPackage3[i+28];
	CALL SUBOPT_0x99
	CALL SUBOPT_0x23A
	__ADDW1MN _rxPackage3,28
	LD   R30,Z
	ST   X,R30
; 0017 010E     }
	SUBI R17,-1
	RJMP _0x2E0045
_0x2E0046:
; 0017 010F     buffer[4] = 0;
	CALL SUBOPT_0x239
; 0017 0110 
; 0017 0111     tz = atol(buffer);
	MOVW R18,R30
; 0017 0112 
; 0017 0113     printDebug("get timezone = %+d\r\n",tz);
	__POINTD1FN _0x2E0000,456
	CALL SUBOPT_0xF
	CALL SUBOPT_0x10
; 0017 0114 
; 0017 0115     RTC_setDateTime(rtcSet,tz);
	MOVW R30,R28
	ADIW R30,4
	LDI  R26,26
	CALL __PUTPARL
	MOVW R26,R18
	CALL _RTC_setDateTime
; 0017 0116 
; 0017 0117     return 0;
	CALL SUBOPT_0x136
	ADIW R28,62
	RET
; 0017 0118 }
;/*============================================================*/
;void DEBUG_resetAlarm(void)
; 0017 011B {
_DEBUG_resetAlarm:
; 0017 011C     resetAlarm();
	CALL _resetAlarm
; 0017 011D 
; 0017 011E     printDebug("\r\n<DEBUG> Alarm Status Reset..!!\r\n");
	__POINTD1FN _0x2E0000,477
	CALL __PUTPARD1
	LDI  R24,0
	RCALL _printDebug
_0x20E0032:
	ADIW R28,4
; 0017 011F }
	RET
;/*============================================================*/
;void DEBUG_ClearLogFile(void)
; 0017 0122 {
_DEBUG_ClearLogFile:
; 0017 0123     int         res;
; 0017 0124 
; 0017 0125     printDebug("<DEBUG_ClearLogFile> Re-initiate log file\r\n");
	ST   -Y,R17
	ST   -Y,R16
;	res -> R16,R17
	__POINTD1FN _0x2E0000,512
	CALL SUBOPT_0x2
; 0017 0126 
; 0017 0127     res = LOG_createFile(LOGFILE_DATA,SD_FORCE,LOG_INIT_STR,SIZE_RECORD);
	CALL SUBOPT_0x219
; 0017 0128     if(res < 0)
	BRPL _0x2E0047
; 0017 0129     {
; 0017 012A         printDebug("<DEBUG_ClearLogFile> LOG_createFile(%s) failed\r\n",LOGFILE_DATA);
	CALL SUBOPT_0x240
	CALL SUBOPT_0x4F
; 0017 012B     }
; 0017 012C 
; 0017 012D     res = LOG_createFile(LOGFILE_EVENT,SD_FORCE,LOG_INIT_STR,SIZE_RECORD);
_0x2E0047:
	CALL SUBOPT_0x21E
; 0017 012E     if(res < 0)
	BRPL _0x2E0048
; 0017 012F     {
; 0017 0130         printDebug("<DEBUG_ClearLogFile> LOG_createFile(%s) failed\r\n",LOGFILE_EVENT);
	CALL SUBOPT_0x240
	CALL SUBOPT_0x5A
; 0017 0131     }
; 0017 0132 
; 0017 0133     res = LOG_createFile(LOGFILE_ERROR,1,NULL,0);
_0x2E0048:
	LDI  R30,LOW(_LOGFILE_ERROR)
	LDI  R31,HIGH(_LOGFILE_ERROR)
	ST   -Y,R31
	ST   -Y,R30
	LDI  R30,LOW(1)
	ST   -Y,R30
	CALL SUBOPT_0x17F
	CALL _LOG_createFile
	MOVW R16,R30
; 0017 0134     if(res < 0)
	TST  R17
	BRPL _0x2E0049
; 0017 0135     {
; 0017 0136         printDebug("<DEBUG_ClearLogFile> LOG_createFile(%s) failed\r\n",LOGFILE_ERROR);
	CALL SUBOPT_0x240
	CALL SUBOPT_0x226
	CALL SUBOPT_0x10
; 0017 0137     }
; 0017 0138 
; 0017 0139     return;
_0x2E0049:
	LD   R16,Y+
	LD   R17,Y+
	RET
; 0017 013A }
;/*============================================================*/
;void DEBUG_setRealVref(void)
; 0017 013D {
_DEBUG_setRealVref:
; 0017 013E     unsigned char i;
; 0017 013F     unsigned char rxStrSetVREF[6];
; 0017 0140 
; 0017 0141     for(i=0;i<=5;i++)
	SBIW R28,6
	ST   -Y,R17
;	i -> R17
;	rxStrSetVREF -> Y+1
	LDI  R17,LOW(0)
_0x2E004B:
	CPI  R17,6
	BRSH _0x2E004C
; 0017 0142     {
; 0017 0143         rxStrSetVREF[i] = rxPackage3[i+8];
	CALL SUBOPT_0x99
	MOVW R26,R28
	ADIW R26,1
	CALL SUBOPT_0x238
; 0017 0144     }
	SUBI R17,-1
	RJMP _0x2E004B
_0x2E004C:
; 0017 0145     rxStrSetVREF[5] = '\0';
	LDI  R30,LOW(0)
	STD  Y+6,R30
; 0017 0146     printDebug("<DEBUG_setRealVref> get set Vref<string> %s\r\n",rxStrSetVREF);
	__POINTD1FN _0x2E0000,605
	CALL __PUTPARD1
	MOVW R30,R28
	ADIW R30,5
	CALL SUBOPT_0xDD
	CALL SUBOPT_0x10
; 0017 0147     eep_vref_val = (atof(rxStrSetVREF));
	MOVW R26,R28
	ADIW R26,1
	CALL _atof
	LDI  R26,LOW(_eep_vref_val)
	LDI  R27,HIGH(_eep_vref_val)
	CALL __EEPROMWRD
; 0017 0148     printDebug("<DEBUG_setRealVref> After convert = %f\r\n",eep_vref_val);
	__POINTD1FN _0x2E0000,651
	CALL __PUTPARD1
	LDI  R26,LOW(_eep_vref_val)
	LDI  R27,HIGH(_eep_vref_val)
	CALL SUBOPT_0x134
; 0017 0149 }
	LDD  R17,Y+0
	ADIW R28,7
	RET
;/*============================================================*/
;void DEBUG_sensorSelect(void)
; 0017 014C {
_DEBUG_sensorSelect:
; 0017 014D     unsigned char ch[2];
; 0017 014E 
; 0017 014F     if(TEMP_SEL != TEMP_TYPE_K){
	SBIW R28,2
;	ch -> Y+0
	CALL SUBOPT_0x84
	BREQ _0x2E004D
; 0017 0150         printDebug("<DEBUG_sensorSelect> This TEMP_SEL not support\r\n\r\n");
	__POINTD1FN _0x2E0000,692
	CALL SUBOPT_0x2
; 0017 0151         return;
	RJMP _0x20E0031
; 0017 0152     }
; 0017 0153 
; 0017 0154     if(rxPackage3[8] == 'N'){
_0x2E004D:
	__GETB2MN _rxPackage3,8
	CPI  R26,LOW(0x4E)
	BRNE _0x2E004E
; 0017 0155         hwCalId     = 9;
	CALL SUBOPT_0x241
; 0017 0156         printDebug("<DEBUG_sensorSelect> Deselect sensor\r\n\r\n");
	__POINTD1FN _0x2E0000,743
	CALL SUBOPT_0x2
; 0017 0157     }
; 0017 0158     else if(isdigit(rxPackage3[8])){
	RJMP _0x2E004F
_0x2E004E:
	__GETB2MN _rxPackage3,8
	CALL _isdigit
	CPI  R30,0
	BREQ _0x2E0050
; 0017 0159         ch[0]       = rxPackage3[8];
	__GETB1MN _rxPackage3,8
	ST   Y,R30
; 0017 015A         ch[1]       = '\0';
	LDI  R30,LOW(0)
	STD  Y+1,R30
; 0017 015B         hwCalId     = atoi(ch);
	MOVW R26,R28
	CALL _atoi
	STS  _hwCalId,R30
	STS  _hwCalId+1,R31
; 0017 015C 
; 0017 015D         SENSOR_SELECT(hwCalId);
	CALL SUBOPT_0x8E
	LDS  R30,_hwCalId
	LSL  R30
	OR   R30,R26
	MOV  R26,R0
	ST   X,R30
; 0017 015E         delay_ms(50);           // -- for multiplex stable -- //
	CALL SUBOPT_0x6C
	CALL _delay_ms
; 0017 015F 
; 0017 0160         printDebug("<DEBUG_sensorSelect> Selected sensor %d\r\n\r\n",hwCalId);
	__POINTD1FN _0x2E0000,784
	CALL __PUTPARD1
	LDS  R30,_hwCalId
	LDS  R31,_hwCalId+1
	CALL SUBOPT_0xDD
	CALL SUBOPT_0x10
; 0017 0161     }
; 0017 0162     else{
	RJMP _0x2E0051
_0x2E0050:
; 0017 0163         hwCalId     = 9;
	CALL SUBOPT_0x241
; 0017 0164         printDebug("<DEBUG_sensorSelect> ERROR : Selecting sensor [%c][0x%02X]\r\n\r\n",rxPackage3[8],rxPackage3[8]);
	__POINTD1FN _0x2E0000,828
	CALL __PUTPARD1
	__GETB1MN _rxPackage3,8
	CALL SUBOPT_0x55
	__GETB1MN _rxPackage3,8
	CLR  R31
	CLR  R22
	CLR  R23
	CALL SUBOPT_0x1F
; 0017 0165     }
_0x2E0051:
_0x2E004F:
; 0017 0166 
; 0017 0167     return;
_0x20E0031:
	ADIW R28,2
	RET
; 0017 0168 }
;/*============================================================*/
;void DEBUG_setDeviceEnable(char flag)
; 0017 016B {
_DEBUG_setDeviceEnable:
; 0017 016C     if(flag){
	ST   -Y,R26
;	flag -> Y+0
	LD   R30,Y
	CPI  R30,0
	BREQ _0x2E0052
; 0017 016D         config_oper.deviceEnable        =   0x01;
	__POINTW2MN _config_oper,1
	LDI  R30,LOW(1)
	RJMP _0x2E009C
; 0017 016E     }
; 0017 016F     else{
_0x2E0052:
; 0017 0170         config_oper.deviceEnable        =   0x00;
	__POINTW2MN _config_oper,1
	LDI  R30,LOW(0)
_0x2E009C:
	CALL __EEPROMWRB
; 0017 0171     }
; 0017 0172 
; 0017 0173     config_oper_flag                    =   0x01;
	LDI  R26,LOW(_config_oper_flag)
	LDI  R27,HIGH(_config_oper_flag)
	CALL SUBOPT_0x11B
; 0017 0174     is_operating_config_update          =   1;
	STS  _is_operating_config_update,R30
; 0017 0175 
; 0017 0176     return;
	ADIW R28,1
	RET
; 0017 0177 }
;/*============================================================*/
;void DEBUG_setSerialNumber(void)
; 0017 017A {
_DEBUG_setSerialNumber:
; 0017 017B     // -- assume input is "$CMDSSN,01,02,03,04,05,06,07,08#" -- //
; 0017 017C     unsigned char i;
; 0017 017D     unsigned char set_str[24];
; 0017 017E 
; 0017 017F     for(i=0;i<24;i++){
	SBIW R28,24
	ST   -Y,R17
;	i -> R17
;	set_str -> Y+1
	LDI  R17,LOW(0)
_0x2E0055:
	CPI  R17,24
	BRSH _0x2E0056
; 0017 0180         if( ( rxPackage3[i+7] != ',') && !isxdigit(rxPackage3[i+7])){
	CALL SUBOPT_0x99
	__ADDW1MN _rxPackage3,7
	LD   R26,Z
	CPI  R26,LOW(0x2C)
	BREQ _0x2E0058
	CALL _isxdigit
	CPI  R30,0
	BREQ _0x2E0059
_0x2E0058:
	RJMP _0x2E0057
_0x2E0059:
; 0017 0181             printDebug("<DEBUG_setSerialNumber> invalid setting string (%c)[0x%02]\r\n",rxPackage3[i+7],rxPackage3[i+7]);
	__POINTD1FN _0x2E0000,891
	CALL SUBOPT_0x232
	__ADDW1MN _rxPackage3,7
	LD   R30,Z
	CALL SUBOPT_0x55
	CALL SUBOPT_0x99
	__ADDW1MN _rxPackage3,7
	CALL SUBOPT_0x1FC
; 0017 0182             return;
	RJMP _0x20E0030
; 0017 0183         }
; 0017 0184         set_str[i] = tolower(rxPackage3[i+7]);           // -- copy only ",01,02,03,04,05,06,07,08" -- //
_0x2E0057:
	CALL SUBOPT_0x99
	MOVW R0,R30
	MOVW R26,R28
	ADIW R26,1
	ADD  R30,R26
	ADC  R31,R27
	PUSH R31
	PUSH R30
	MOVW R30,R0
	__ADDW1MN _rxPackage3,7
	LD   R26,Z
	CALL _tolower
	POP  R26
	POP  R27
	ST   X,R30
; 0017 0185     }
	SUBI R17,-1
	RJMP _0x2E0055
_0x2E0056:
; 0017 0186 
; 0017 0187     printDebug("<DEBUG_setSerialNumber> Replacing DEVICE_SERIAL..\r\n");
	__POINTD1FN _0x2E0000,952
	CALL SUBOPT_0x2
; 0017 0188 
; 0017 0189     printDebug("<DEBUG_setSerialNumber> Set String --> ");
	__POINTD1FN _0x2E0000,1004
	CALL SUBOPT_0x2
; 0017 018A     for(i=0;i<24;i++){
	LDI  R17,LOW(0)
_0x2E005B:
	CPI  R17,24
	BRLO PC+3
	JMP _0x2E005C
; 0017 018B         if((i%3) == 0)      {   continue;                       }
	CALL SUBOPT_0x242
	SBIW R30,0
	BRNE _0x2E005D
	RJMP _0x2E005A
; 0017 018C         else if((i%3) == 1) {
_0x2E005D:
	CALL SUBOPT_0x242
	CPI  R30,LOW(0x1)
	LDI  R26,HIGH(0x1)
	CPC  R31,R26
	BRNE _0x2E005F
; 0017 018D 
; 0017 018E             printDebug("[%c",set_str[i]);
	__POINTD1FN _0x2E0000,1044
	CALL SUBOPT_0x232
	MOVW R26,R28
	ADIW R26,5
	CALL SUBOPT_0x16C
; 0017 018F 
; 0017 0190             DEVICE_SERIAL[i/3]      = 0x00;
	CALL SUBOPT_0x243
	MOVW R26,R30
	LDI  R30,LOW(0)
	CALL __EEPROMWRB
; 0017 0191 
; 0017 0192             if(isdigit(set_str[i])){
	CALL SUBOPT_0x99
	CALL SUBOPT_0x244
	CALL SUBOPT_0x245
	BREQ _0x2E0060
; 0017 0193                 DEVICE_SERIAL[i/3]  = (set_str[i] - 48) << 4;
	CALL SUBOPT_0x243
	MOVW R0,R30
	CALL SUBOPT_0x99
	CALL SUBOPT_0x244
	LD   R30,X
	SUBI R30,LOW(48)
	RJMP _0x2E009D
; 0017 0194             }
; 0017 0195             else{
_0x2E0060:
; 0017 0196                 DEVICE_SERIAL[i/3]  = (set_str[i] - 87) << 4;
	CALL SUBOPT_0x243
	MOVW R0,R30
	CALL SUBOPT_0x99
	CALL SUBOPT_0x244
	LD   R30,X
	SUBI R30,LOW(87)
_0x2E009D:
	SWAP R30
	ANDI R30,0xF0
	MOVW R26,R0
	CALL __EEPROMWRB
; 0017 0197             }
; 0017 0198         }
; 0017 0199         else if((i%3) == 2) {
	RJMP _0x2E0062
_0x2E005F:
	CALL SUBOPT_0x242
	CPI  R30,LOW(0x2)
	LDI  R26,HIGH(0x2)
	CPC  R31,R26
	BRNE _0x2E0063
; 0017 019A 
; 0017 019B             printDebug("%c]",set_str[i]);
	__POINTD1FN _0x2E0000,1048
	CALL SUBOPT_0x232
	MOVW R26,R28
	ADIW R26,5
	CALL SUBOPT_0x16C
; 0017 019C 
; 0017 019D             if(isdigit(set_str[i])){
	CALL SUBOPT_0x99
	CALL SUBOPT_0x244
	CALL SUBOPT_0x245
	BREQ _0x2E0064
; 0017 019E                 DEVICE_SERIAL[i/3]  |= (set_str[i] - 48);
	CALL SUBOPT_0x243
	CALL SUBOPT_0x246
	CALL SUBOPT_0x244
	LD   R30,X
	SUBI R30,LOW(48)
	RJMP _0x2E009E
; 0017 019F             }
; 0017 01A0             else{
_0x2E0064:
; 0017 01A1                 DEVICE_SERIAL[i/3]  |= (set_str[i] - 87);
	CALL SUBOPT_0x243
	CALL SUBOPT_0x246
	CALL SUBOPT_0x244
	LD   R30,X
	SUBI R30,LOW(87)
_0x2E009E:
	OR   R30,R0
	MOVW R26,R22
	CALL __EEPROMWRB
; 0017 01A2             }
; 0017 01A3         }
; 0017 01A4     }
_0x2E0063:
_0x2E0062:
_0x2E005A:
	SUBI R17,-1
	RJMP _0x2E005B
_0x2E005C:
; 0017 01A5 
; 0017 01A6     printDebug("<DEBUG_setSerialNumber> Success!! DEV_SERIAL ==> ");
	__POINTD1FN _0x2E0000,1052
	CALL SUBOPT_0x2
; 0017 01A7     for(i=0;i<8;i++){
	LDI  R17,LOW(0)
_0x2E0067:
	CPI  R17,8
	BRSH _0x2E0068
; 0017 01A8         printDebug("[%02X]",DEVICE_SERIAL[i]);
	CALL SUBOPT_0x247
; 0017 01A9     }
	SUBI R17,-1
	RJMP _0x2E0067
_0x2E0068:
; 0017 01AA     printDebug("\r\n");
	CALL SUBOPT_0x231
; 0017 01AB 
; 0017 01AC     return;
_0x20E0030:
	LDD  R17,Y+0
	ADIW R28,25
	RET
; 0017 01AD }
;/*============================================================*/
;void DEBUG_readSerialNumber(void)
; 0017 01B0 {
_DEBUG_readSerialNumber:
; 0017 01B1     unsigned char i;
; 0017 01B2 
; 0017 01B3     printDebug("<DEBUG_readSerialNumber> DEV_SERIAL ==> ");
	ST   -Y,R17
;	i -> R17
	__POINTD1FN _0x2E0000,1109
	CALL SUBOPT_0x2
; 0017 01B4     for(i=0;i<8;i++){
	LDI  R17,LOW(0)
_0x2E006A:
	CPI  R17,8
	BRSH _0x2E006B
; 0017 01B5         printDebug("[%02X]",DEVICE_SERIAL[i]);
	CALL SUBOPT_0x247
; 0017 01B6     }
	SUBI R17,-1
	RJMP _0x2E006A
_0x2E006B:
; 0017 01B7     printDebug("\r\n");
	CALL SUBOPT_0x231
; 0017 01B8 
; 0017 01B9     return;
_0x20E002F:
	LD   R17,Y+
	RET
; 0017 01BA }
;/*============================================================*/
;
;/**************************************************************/
;/****************** Debug Support Function ********************/
;/**************************************************************/
;/*============================================================*/
;void debug_req(void)
; 0017 01C2 {
_debug_req:
; 0017 01C3     flag_PackageTerminate3 = 0;
	LDI  R30,LOW(0)
	STS  _flag_PackageTerminate3,R30
; 0017 01C4 
; 0017 01C5     printDebug("Get Debug Req.:");
	__POINTD1FN _0x2E0000,1150
	CALL SUBOPT_0x2
; 0017 01C6 
; 0017 01C7 
; 0017 01C8     if(!strncmpf(rxPackage3,cmdSetRTCDateTime,7)){
	CALL SUBOPT_0x248
	__POINTD1FN _cmdSetRTCDateTime,0
	CALL SUBOPT_0x249
	BRNE _0x2E006C
; 0017 01C9         DEBUG_setDateTime();
	RCALL _DEBUG_setDateTime
; 0017 01CA     }
; 0017 01CB     else if(!strncmpf(rxPackage3,cmdResetAlarmStatus,7)){
	RJMP _0x2E006D
_0x2E006C:
	CALL SUBOPT_0x248
	__POINTD1FN _cmdResetAlarmStatus,0
	CALL SUBOPT_0x249
	BRNE _0x2E006E
; 0017 01CC         DEBUG_resetAlarm();
	RCALL _DEBUG_resetAlarm
; 0017 01CD     }
; 0017 01CE     else if(!strncmpf(rxPackage3,cmdClearLogFile,7)){
	RJMP _0x2E006F
_0x2E006E:
	CALL SUBOPT_0x248
	__POINTD1FN _cmdClearLogFile,0
	CALL SUBOPT_0x249
	BRNE _0x2E0070
; 0017 01CF         DEBUG_ClearLogFile();
	RCALL _DEBUG_ClearLogFile
; 0017 01D0     }
; 0017 01D1     else if(!strncmpf(rxPackage3,cmdSetVref,7)){
	RJMP _0x2E0071
_0x2E0070:
	CALL SUBOPT_0x248
	__POINTD1FN _cmdSetVref,0
	CALL SUBOPT_0x249
	BRNE _0x2E0072
; 0017 01D2         DEBUG_setRealVref();
	RCALL _DEBUG_setRealVref
; 0017 01D3     }
; 0017 01D4     else if(!strncmpf(rxPackage3,cmdSensorSelect,7)){
	RJMP _0x2E0073
_0x2E0072:
	CALL SUBOPT_0x248
	__POINTD1FN _cmdSensorSelect,0
	CALL SUBOPT_0x249
	BRNE _0x2E0074
; 0017 01D5         DEBUG_sensorSelect();
	RCALL _DEBUG_sensorSelect
; 0017 01D6     }
; 0017 01D7     else if(!strncmpf(rxPackage3,cmdDeviceEnable,7)){
	RJMP _0x2E0075
_0x2E0074:
	CALL SUBOPT_0x248
	__POINTD1FN _cmdDeviceEnable,0
	CALL SUBOPT_0x249
	BRNE _0x2E0076
; 0017 01D8         DEBUG_setDeviceEnable(1);
	LDI  R26,LOW(1)
	RCALL _DEBUG_setDeviceEnable
; 0017 01D9     }
; 0017 01DA     else if(!strncmpf(rxPackage3,cmdDeviceDisable,7)){
	RJMP _0x2E0077
_0x2E0076:
	CALL SUBOPT_0x248
	__POINTD1FN _cmdDeviceDisable,0
	CALL SUBOPT_0x249
	BRNE _0x2E0078
; 0017 01DB         DEBUG_setDeviceEnable(0);
	LDI  R26,LOW(0)
	RCALL _DEBUG_setDeviceEnable
; 0017 01DC     }
; 0017 01DD     else if(!strncmpf(rxPackage3,cmdSetSerialNumber,7)){
	RJMP _0x2E0079
_0x2E0078:
	CALL SUBOPT_0x248
	__POINTD1FN _cmdSetSerialNumber,0
	CALL SUBOPT_0x249
	BRNE _0x2E007A
; 0017 01DE         DEBUG_setSerialNumber();
	RCALL _DEBUG_setSerialNumber
; 0017 01DF     }
; 0017 01E0     else if(!strncmpf(rxPackage3,cmdReadSerialNumber,7)){
	RJMP _0x2E007B
_0x2E007A:
	CALL SUBOPT_0x248
	__POINTD1FN _cmdReadSerialNumber,0
	CALL SUBOPT_0x249
	BRNE _0x2E007C
; 0017 01E1         DEBUG_readSerialNumber();
	RCALL _DEBUG_readSerialNumber
; 0017 01E2     }else if(!strncmpf(rxPackage3,cmdGetCal,7)){
	RJMP _0x2E007D
_0x2E007C:
	CALL SUBOPT_0x248
	__POINTD1FN _cmdGetCal,0
	CALL SUBOPT_0x249
	BRNE _0x2E007E
; 0017 01E3         debugGetCal();
	RCALL _debugGetCal
; 0017 01E4     }else if(!strncmpf(rxPackage3,cmdSetCal,7)){
	RJMP _0x2E007F
_0x2E007E:
	CALL SUBOPT_0x248
	__POINTD1FN _cmdSetCal,0
	CALL SUBOPT_0x249
	BRNE _0x2E0080
; 0017 01E5         debugSetCal();
	RCALL _debugSetCal
; 0017 01E6     }else if(!strncmpf(rxPackage3,cmdConfirmCal,7)){
	RJMP _0x2E0081
_0x2E0080:
	CALL SUBOPT_0x248
	__POINTD1FN _cmdConfirmCal,0
	CALL SUBOPT_0x249
	BRNE _0x2E0082
; 0017 01E7         debugConfirmCal();
	RCALL _debugConfirmCal
; 0017 01E8     }else if(!strncmpf(rxPackage3,cmdGetCurSensor,7)){
	RJMP _0x2E0083
_0x2E0082:
	CALL SUBOPT_0x248
	__POINTD1FN _cmdGetCurSensor,0
	CALL SUBOPT_0x249
	BRNE _0x2E0084
; 0017 01E9         debugGetCurSensor();
	RCALL _debugGetCurSensor
; 0017 01EA     }
; 0017 01EB     return;
_0x2E0084:
_0x2E0083:
_0x2E0081:
_0x2E007F:
_0x2E007D:
_0x2E007B:
_0x2E0079:
_0x2E0077:
_0x2E0075:
_0x2E0073:
_0x2E0071:
_0x2E006F:
_0x2E006D:
	RET
; 0017 01EC }
;/*============================================================*/
;void printDebug(flash char *fmtstr, ...)
; 0017 01EF {
_printDebug:
	PUSH R15
	MOV  R15,R24
; 0017 01F0     char textBuffer[256];
; 0017 01F1     va_list argptr;
; 0017 01F2 
; 0017 01F3     va_start(argptr, fmtstr);
	SUBI R29,1
	ST   -Y,R17
	ST   -Y,R16
;	*fmtstr -> Y+258
;	textBuffer -> Y+2
;	*argptr -> R16,R17
	MOVW R26,R28
	SUBI R26,LOW(-(254))
	SBCI R27,HIGH(-(254))
	CALL __ADDW2R15
	MOVW R16,R26
; 0017 01F4     vsprintf(textBuffer,fmtstr,argptr);
	CALL SUBOPT_0x1BB
	MOVW R26,R28
	SUBI R26,LOW(-(260))
	SBCI R27,HIGH(-(260))
	CALL SUBOPT_0x24A
	MOVW R26,R16
	CALL _vsprintf
; 0017 01F5     send_uart(3,textBuffer);
	LDI  R30,LOW(3)
	ST   -Y,R30
	MOVW R26,R28
	ADIW R26,3
	CALL _send_uart
; 0017 01F6     va_end(argptr);
; 0017 01F7 
; 0017 01F8     return;
	LDD  R17,Y+1
	LDD  R16,Y+0
	ADIW R28,2
	SUBI R29,-1
	POP  R15
	RET
; 0017 01F9 }
;/*============================================================*/
;void print_hex_ascii_line(const unsigned char *payload, int len, int offset)
; 0017 01FC {
_print_hex_ascii_line:
; 0017 01FD 
; 0017 01FE     int i;
; 0017 01FF     int gap;
; 0017 0200     const unsigned char *ch;
; 0017 0201 
; 0017 0202     // offset //
; 0017 0203     printDebug("%05d   ", offset);
	CALL SUBOPT_0x193
;	*payload -> Y+10
;	len -> Y+8
;	offset -> Y+6
;	i -> R16,R17
;	gap -> R18,R19
;	*ch -> R20,R21
	__POINTD1FN _0x2E0000,1166
	CALL SUBOPT_0x110
	CALL SUBOPT_0xD5
; 0017 0204 
; 0017 0205 
; 0017 0206     // hex //
; 0017 0207     ch = payload;
	__GETWRS 20,21,10
; 0017 0208     for(i = 0; i < len; i++) {
	__GETWRN 16,17,0
_0x2E0086:
	LDD  R30,Y+8
	LDD  R31,Y+8+1
	CP   R16,R30
	CPC  R17,R31
	BRGE _0x2E0087
; 0017 0209         printDebug("%02x ", *ch);
	__POINTD1FN _0x2E0000,1174
	CALL SUBOPT_0x24B
; 0017 020A 
; 0017 020B         ch++;
	__ADDWRN 20,21,1
; 0017 020C         // print extra space after 8th byte for visual aid //
; 0017 020D         if (i == 7){
	LDI  R30,LOW(7)
	LDI  R31,HIGH(7)
	CP   R30,R16
	CPC  R31,R17
	BRNE _0x2E0088
; 0017 020E             printDebug(" ");
	CALL SUBOPT_0x24C
; 0017 020F 
; 0017 0210         }
; 0017 0211     }
_0x2E0088:
	__ADDWRN 16,17,1
	RJMP _0x2E0086
_0x2E0087:
; 0017 0212     // print space to handle line less than 8 bytes //
; 0017 0213     if (len < 8){
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	SBIW R26,8
	BRGE _0x2E0089
; 0017 0214         printDebug(" ");
	CALL SUBOPT_0x24C
; 0017 0215 
; 0017 0216     }
; 0017 0217 
; 0017 0218     // fill hex gap with spaces if not full line //
; 0017 0219     if (len < 16) {
_0x2E0089:
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	SBIW R26,16
	BRGE _0x2E008A
; 0017 021A         gap = 16 - len;
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	LDI  R30,LOW(16)
	LDI  R31,HIGH(16)
	SUB  R30,R26
	SBC  R31,R27
	MOVW R18,R30
; 0017 021B         for (i = 0; i < gap; i++) {
	__GETWRN 16,17,0
_0x2E008C:
	__CPWRR 16,17,18,19
	BRGE _0x2E008D
; 0017 021C             printDebug("   ");
	CALL SUBOPT_0x24D
; 0017 021D 
; 0017 021E         }
	__ADDWRN 16,17,1
	RJMP _0x2E008C
_0x2E008D:
; 0017 021F     }
; 0017 0220     printDebug("   ");
_0x2E008A:
	CALL SUBOPT_0x24D
; 0017 0221 
; 0017 0222 
; 0017 0223     // ascii (if printable) //
; 0017 0224     ch = payload;
	__GETWRS 20,21,10
; 0017 0225     for(i = 0; i < len; i++) {
	__GETWRN 16,17,0
_0x2E008F:
	LDD  R30,Y+8
	LDD  R31,Y+8+1
	CP   R16,R30
	CPC  R17,R31
	BRGE _0x2E0090
; 0017 0226         if (isprint(*ch)){
	MOVW R26,R20
	LD   R26,X
	CALL _isprint
	CPI  R30,0
	BREQ _0x2E0091
; 0017 0227             printDebug("%c", *ch);
	__POINTD1FN _0x2E0000,1045
	CALL SUBOPT_0x24B
; 0017 0228 
; 0017 0229         }
; 0017 022A         else{
	RJMP _0x2E0092
_0x2E0091:
; 0017 022B             printDebug(".");
	__POINTD1FN _0x2E0000,1180
	CALL SUBOPT_0x2
; 0017 022C 
; 0017 022D         }
_0x2E0092:
; 0017 022E         ch++;
	__ADDWRN 20,21,1
; 0017 022F     }
	__ADDWRN 16,17,1
	RJMP _0x2E008F
_0x2E0090:
; 0017 0230 
; 0017 0231     printDebug("\r\n");
	CALL SUBOPT_0x231
; 0017 0232 
; 0017 0233 
; 0017 0234 return;
	CALL __LOADLOCR6
	JMP  _0x20E002C
; 0017 0235 }
;/*============================================================*/
;void print_payload(const unsigned char *payload, int len)
; 0017 0238 {
_print_payload:
; 0017 0239 
; 0017 023A     int len_rem = len;
; 0017 023B     int line_width = 16;            // number of bytes per line //
; 0017 023C     int line_len;
; 0017 023D     int offset = 0;                    // zero-based offset counter //
; 0017 023E     const unsigned char *ch = payload;
; 0017 023F 
; 0017 0240     if (len <= 0)
	ST   -Y,R27
	ST   -Y,R26
	SBIW R28,4
	LDI  R30,LOW(0)
	STD  Y+2,R30
	STD  Y+3,R30
	CALL __SAVELOCR6
;	*payload -> Y+12
;	len -> Y+10
;	len_rem -> R16,R17
;	line_width -> R18,R19
;	line_len -> R20,R21
;	offset -> Y+8
;	*ch -> Y+6
	__GETWRS 16,17,10
	__GETWRN 18,19,16
	LDD  R30,Y+12
	LDD  R31,Y+12+1
	STD  Y+6,R30
	STD  Y+6+1,R31
	LDD  R26,Y+10
	LDD  R27,Y+10+1
	CALL __CPW02
	BRGE _0x20E002E
; 0017 0241         return;
; 0017 0242 
; 0017 0243     // data fits on one line //
; 0017 0244     if (len <= line_width) {
	CP   R18,R26
	CPC  R19,R27
	BRLT _0x2E0094
; 0017 0245         print_hex_ascii_line(ch, len, offset);
	CALL SUBOPT_0x144
	CALL SUBOPT_0x24E
	RCALL _print_hex_ascii_line
; 0017 0246         return;
	RJMP _0x20E002E
; 0017 0247     }
; 0017 0248     // data spans multiple lines //
; 0017 0249     for ( ;; ) {
_0x2E0094:
_0x2E0096:
; 0017 024A         // compute current line length //
; 0017 024B         line_len = line_width % len_rem;
	MOVW R30,R16
	MOVW R26,R18
	CALL __MODW21
	MOVW R20,R30
; 0017 024C         // print line //
; 0017 024D         print_hex_ascii_line(ch, line_len, offset);
	CALL SUBOPT_0x144
	ST   -Y,R21
	ST   -Y,R20
	LDD  R26,Y+12
	LDD  R27,Y+12+1
	RCALL _print_hex_ascii_line
; 0017 024E         // compute total remaining //
; 0017 024F         len_rem = len_rem - line_len;
	__SUBWRR 16,17,20,21
; 0017 0250         // shift pointer to remaining bytes to print //
; 0017 0251         ch = ch + line_len;
	MOVW R30,R20
	CALL SUBOPT_0x191
; 0017 0252         // add offset //
; 0017 0253         offset = offset + line_width;
	MOVW R30,R18
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	ADD  R30,R26
	ADC  R31,R27
	STD  Y+8,R30
	STD  Y+8+1,R31
; 0017 0254         // check if we have line width chars or less //
; 0017 0255         if (len_rem <= line_width) {
	__CPWRR 18,19,16,17
	BRLT _0x2E0098
; 0017 0256             // print last line and get out //
; 0017 0257             print_hex_ascii_line(ch, len_rem, offset);
	CALL SUBOPT_0x144
	ST   -Y,R17
	ST   -Y,R16
	LDD  R26,Y+12
	LDD  R27,Y+12+1
	RCALL _print_hex_ascii_line
; 0017 0258             break;
	RJMP _0x2E0097
; 0017 0259         }
; 0017 025A     }
_0x2E0098:
	RJMP _0x2E0096
_0x2E0097:
; 0017 025B 
; 0017 025C     return;
_0x20E002E:
	CALL __LOADLOCR6
	ADIW R28,14
	RET
; 0017 025D }
;/*============================================================*/
;
;#include <stdlib.h>
;#include "debug.h"
;
;// -- for polynomial interpolation by gaussian elimination -- //
;int n = 3;

	.DSEG
;float a[3][4];
;
;/*============================================================*/
;void forwardSubstitution()
; 0018 000A {

	.CSEG
_forwardSubstitution:
; 0018 000B     int i, j, k, max;
; 0018 000C     float t;
; 0018 000D     for (i = 0; i < n; ++i) {
	SBIW R28,6
	CALL SUBOPT_0x36
;	i -> R16,R17
;	j -> R18,R19
;	k -> R20,R21
;	max -> Y+10
;	t -> Y+6
_0x300005:
	CALL SUBOPT_0x24F
	CP   R16,R30
	CPC  R17,R31
	BRLT PC+3
	JMP _0x300006
; 0018 000E 
; 0018 000F         max = i;
	__PUTWSR 16,17,10
; 0018 0010         for (j = i + 1; j < n; ++j)
	MOVW R30,R16
	ADIW R30,1
	MOVW R18,R30
_0x300008:
	CALL SUBOPT_0x24F
	CP   R18,R30
	CPC  R19,R31
	BRGE _0x300009
; 0018 0011             if (a[j][i] > a[max][i])
	CALL SUBOPT_0x250
	CALL SUBOPT_0x251
	PUSH R23
	PUSH R22
	PUSH R31
	PUSH R30
	CALL SUBOPT_0x252
	CALL SUBOPT_0x251
	POP  R26
	POP  R27
	POP  R24
	POP  R25
	CALL __CMPF12
	BREQ PC+2
	BRCC PC+3
	JMP  _0x30000A
; 0018 0012                 max = j;
	__PUTWSR 18,19,10
; 0018 0013 
; 0018 0014         for (j = 0; j < n + 1; ++j) {
_0x30000A:
	__ADDWRN 18,19,1
	RJMP _0x300008
_0x300009:
	__GETWRN 18,19,0
_0x30000C:
	CALL SUBOPT_0x24F
	ADIW R30,1
	CP   R18,R30
	CPC  R19,R31
	BRGE _0x30000D
; 0018 0015             t = a[max][j];
	CALL SUBOPT_0x252
	CALL SUBOPT_0x253
	CALL SUBOPT_0xA3
; 0018 0016             a[max][j] = a[i][j];
	CALL SUBOPT_0x252
	CALL SUBOPT_0x254
	MOVW R0,R30
	CALL SUBOPT_0x255
	CALL SUBOPT_0x253
	MOVW R26,R0
	CALL __PUTDP1
; 0018 0017             a[i][j] = t;
	CALL SUBOPT_0x255
	CALL SUBOPT_0x254
	CALL SUBOPT_0x1D0
; 0018 0018         }
	__ADDWRN 18,19,1
	RJMP _0x30000C
_0x30000D:
; 0018 0019 
; 0018 001A         /*
; 0018 001B         printDebug("\r\n-- fw_sub_swap(%d) --\r\n",i);
; 0018 001C         for (k = 0; k < n; ++k) {
; 0018 001D             printDebug("\t\t\t");
; 0018 001E             for (j = 0; j < n + 1; ++j)
; 0018 001F                 printDebug("%.2f\t", a[k][j]);
; 0018 0020             printDebug("\r\n");
; 0018 0021         }
; 0018 0022         printDebug("\r\n");
; 0018 0023         */
; 0018 0024 
; 0018 0025         //printDebug("\r\n-- fw_sub_calculate(%d) --\r\n",i);
; 0018 0026         for (j = n; j >= i; --j){
	__GETWRMN 18,19,0,_n
_0x30000F:
	__CPWRR 18,19,16,17
	BRGE PC+3
	JMP _0x300010
; 0018 0027             for (k = i + 1; k < n; ++k){
	MOVW R30,R16
	ADIW R30,1
	MOVW R20,R30
_0x300012:
	CALL SUBOPT_0x24F
	CP   R20,R30
	CPC  R21,R31
	BRGE _0x300013
; 0018 0028                 a[k][j] -= a[k][i]/a[i][i] * a[i][j];
	MOVW R30,R20
	CALL __LSLW4
	SUBI R30,LOW(-_a)
	SBCI R31,HIGH(-_a)
	MOVW R0,R30
	CALL SUBOPT_0x254
	PUSH R31
	PUSH R30
	MOVW R26,R30
	CALL __GETD1P
	PUSH R23
	PUSH R22
	PUSH R31
	PUSH R30
	MOVW R26,R0
	MOVW R30,R16
	CALL SUBOPT_0x1DE
	PUSH R23
	PUSH R22
	PUSH R31
	PUSH R30
	CALL SUBOPT_0x255
	CALL SUBOPT_0x251
	POP  R26
	POP  R27
	POP  R24
	POP  R25
	CALL __DIVF21
	PUSH R23
	PUSH R22
	PUSH R31
	PUSH R30
	CALL SUBOPT_0x255
	CALL SUBOPT_0x253
	POP  R26
	POP  R27
	POP  R24
	POP  R25
	CALL __MULF12
	POP  R26
	POP  R27
	POP  R24
	POP  R25
	CALL SUBOPT_0x1D5
	POP  R26
	POP  R27
	CALL __PUTDP1
; 0018 0029                 //printDebug("\t\t\t\t\t\t%f (%f/%f * %f)\r\n",a[k][j],a[k][i],a[i][i],a[i][j]);
; 0018 002A             }
	__ADDWRN 20,21,1
	RJMP _0x300012
_0x300013:
; 0018 002B         }
	__SUBWRN 18,19,1
	RJMP _0x30000F
_0x300010:
; 0018 002C         //printDebug("\r\n");
; 0018 002D 
; 0018 002E 
; 0018 002F         /*
; 0018 0030         printDebug("\r\n-- fw_sub_res(%d) --\r\n",i);
; 0018 0031         for (k = 0; k < n; ++k) {
; 0018 0032             printDebug("\t\t");
; 0018 0033             for (j = 0; j < n + 1; ++j)
; 0018 0034                 printDebug("%.2f\t", a[k][j]);
; 0018 0035             printDebug("\r\n");
; 0018 0036         }
; 0018 0037         printDebug("\r\n");
; 0018 0038         */
; 0018 0039     }
	__ADDWRN 16,17,1
	RJMP _0x300005
_0x300006:
; 0018 003A }
	CALL __LOADLOCR6
	JMP  _0x20E002C
;
;void reverseElimination()
; 0018 003D {
_reverseElimination:
; 0018 003E     int i, j, k;
; 0018 003F     for (i = n - 1; i >= 0; --i) {
	CALL __SAVELOCR6
;	i -> R16,R17
;	j -> R18,R19
;	k -> R20,R21
	CALL SUBOPT_0x24F
	SBIW R30,1
	MOVW R16,R30
_0x300015:
	TST  R17
	BRPL PC+3
	JMP _0x300016
; 0018 0040         a[i][n] = a[i][n] / a[i][i];
	CALL SUBOPT_0x255
	MOVW R26,R30
	CALL SUBOPT_0x24F
	CALL SUBOPT_0x1CD
	PUSH R31
	PUSH R30
	CALL SUBOPT_0x255
	MOVW R26,R30
	CALL SUBOPT_0x24F
	CALL SUBOPT_0x1DE
	PUSH R23
	PUSH R22
	PUSH R31
	PUSH R30
	CALL SUBOPT_0x255
	CALL SUBOPT_0x251
	POP  R26
	POP  R27
	POP  R24
	POP  R25
	CALL __DIVF21
	POP  R26
	POP  R27
	CALL __PUTDP1
; 0018 0041         a[i][i] = 1;
	CALL SUBOPT_0x255
	MOVW R26,R30
	MOVW R30,R16
	CALL SUBOPT_0x1D9
	CALL SUBOPT_0x256
	CALL __PUTDP1
; 0018 0042         for (j = i - 1; j >= 0; --j) {
	MOVW R30,R16
	SBIW R30,1
	MOVW R18,R30
_0x300018:
	TST  R19
	BRMI _0x300019
; 0018 0043             a[j][n] -= a[j][i] * a[i][n];
	CALL SUBOPT_0x250
	MOVW R0,R30
	MOVW R26,R30
	CALL SUBOPT_0x24F
	CALL SUBOPT_0x1CD
	PUSH R31
	PUSH R30
	MOVW R26,R30
	CALL __GETD1P
	PUSH R23
	PUSH R22
	PUSH R31
	PUSH R30
	MOVW R26,R0
	MOVW R30,R16
	CALL SUBOPT_0x1DE
	PUSH R23
	PUSH R22
	PUSH R31
	PUSH R30
	CALL SUBOPT_0x255
	MOVW R26,R30
	CALL SUBOPT_0x24F
	CALL SUBOPT_0x1DE
	POP  R26
	POP  R27
	POP  R24
	POP  R25
	CALL __MULF12
	POP  R26
	POP  R27
	POP  R24
	POP  R25
	CALL SUBOPT_0x1D5
	POP  R26
	POP  R27
	CALL __PUTDP1
; 0018 0044             a[j][i] = 0;
	CALL SUBOPT_0x250
	MOVW R26,R30
	MOVW R30,R16
	CALL SUBOPT_0x1D9
	CALL SUBOPT_0x7C
; 0018 0045         }
	__SUBWRN 18,19,1
	RJMP _0x300018
_0x300019:
; 0018 0046 
; 0018 0047         /*
; 0018 0048         printDebug("\r\n-- rev_Eli(%d) --\r\n",i);
; 0018 0049         for (k = 0; k < n; ++k) {
; 0018 004A             printDebug("\t\t");
; 0018 004B             for (j = 0; j < n + 1; ++j)
; 0018 004C                 printDebug("%.2f\t", a[k][j]);
; 0018 004D             printDebug("\r\n");
; 0018 004E         }
; 0018 004F         printDebug("\r\n");
; 0018 0050         */
; 0018 0051     }
	__SUBWRN 16,17,1
	RJMP _0x300015
_0x300016:
; 0018 0052 }
	CALL __LOADLOCR6
	ADIW R28,6
	RET
;
;void gaussian(float factor1, float factor2, float factor3, float ref1, float ref2, float ref3, float *resA, float *resB, float *resC)
; 0018 0055 {
_gaussian:
; 0018 0056     int i, j;
; 0018 0057 
; 0018 0058     // -- form matrix -- //
; 0018 0059     a[0][0] = 1.0;      a[0][1] = factor1;     a[0][2] = factor1 * factor1;  a[0][3] = ref1;
	CALL SUBOPT_0x6F
;	factor1 -> Y+30
;	factor2 -> Y+26
;	factor3 -> Y+22
;	ref1 -> Y+18
;	ref2 -> Y+14
;	ref3 -> Y+10
;	*resA -> Y+8
;	*resB -> Y+6
;	*resC -> Y+4
;	i -> R16,R17
;	j -> R18,R19
	CALL SUBOPT_0x256
	STS  _a,R30
	STS  _a+1,R31
	STS  _a+2,R22
	STS  _a+3,R23
	CALL SUBOPT_0xA8
	__PUTD1MN _a,4
	CALL SUBOPT_0xA8
	CALL SUBOPT_0xAA
	CALL __MULF12
	__PUTD1MN _a,8
	CALL SUBOPT_0xC1
	__PUTD1MN _a,12
; 0018 005A     a[1][0] = 1.0;      a[1][1] = factor2;     a[1][2] = factor2 * factor2;  a[1][3] = ref2;
	__POINTW1MN _a,16
	CALL SUBOPT_0x257
	CALL SUBOPT_0xBE
	__PUTD1MN _a,20
	CALL SUBOPT_0xBE
	CALL SUBOPT_0xA6
	CALL __MULF12
	__PUTD1MN _a,24
	CALL SUBOPT_0x50
	__PUTD1MN _a,28
; 0018 005B     a[2][0] = 1.0;      a[2][1] = factor3;     a[2][2] = factor3 * factor3;  a[2][3] = ref3;
	__POINTW1MN _a,32
	CALL SUBOPT_0x257
	CALL SUBOPT_0xAF
	__PUTD1MN _a,36
	CALL SUBOPT_0xAF
	CALL SUBOPT_0xBF
	CALL __MULF12
	__PUTD1MN _a,40
	CALL SUBOPT_0xC2
	__PUTD1MN _a,44
; 0018 005C 
; 0018 005D 
; 0018 005E //    printDebug("\r\n<gaussian> --- start ---\r\n");
; 0018 005F //    for (i = 0; i < n; ++i) {
; 0018 0060 //        printDebug("\t\t");
; 0018 0061 //        for (j = 0; j < n + 1; ++j)
; 0018 0062 //            printDebug("%.2f\t", a[i][j]);
; 0018 0063 //        printDebug("\r\n");
; 0018 0064 //    }
; 0018 0065 
; 0018 0066     forwardSubstitution();
	RCALL _forwardSubstitution
; 0018 0067     reverseElimination();
	RCALL _reverseElimination
; 0018 0068 
; 0018 0069 //    printDebug("\r\n<gaussian> --- finish ---\r\n");
; 0018 006A //    for (i = 0; i < n; ++i) {
; 0018 006B //        printDebug("\t\t");
; 0018 006C //        for (j = 0; j < n + 1; ++j)
; 0018 006D //            printDebug("%.2f\t", a[i][j]);
; 0018 006E //        printDebug("\r\n");
; 0018 006F //    }
; 0018 0070 
; 0018 0071     *resA = a[2][3];
	__GETD1MN _a,44
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	CALL __PUTDP1
; 0018 0072     *resB = a[1][3];
	__GETD1MN _a,28
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	CALL __PUTDP1
; 0018 0073     *resC = a[0][3];
	__GETD1MN _a,12
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	CALL __PUTDP1
; 0018 0074 
; 0018 0075    // printDebug("\r\n<gaussian> y = %f(x^2) + %f(x) + %f\r\n",*resA,*resB,*resC);
; 0018 0076 
; 0018 0077     return;
	CALL __LOADLOCR4
	ADIW R28,34
	RET
; 0018 0078 }
;#include <mega2560.h>
	#ifndef __SLEEP_DEFINED__
	#define __SLEEP_DEFINED__
	.EQU __se_bit=0x01
	.EQU __sm_mask=0x0E
	.EQU __sm_powerdown=0x04
	.EQU __sm_powersave=0x06
	.EQU __sm_standby=0x0C
	.EQU __sm_ext_standby=0x0E
	.EQU __sm_adc_noise_red=0x02
	.SET power_ctrl_reg=smcr
	#endif
;#include <delay.h>
;#include <stdio.h>
;#include <stdlib.h>
;#include <string.h>
;#include "dht11.h"
;#include "timer.h"
;#include "debug.h"
;
;/**
;*
;//Brif use timer5
;**/
;void MCUSignalOut(int status){
; 0019 000E void MCUSignalOut(int status){

	.CSEG
_MCUSignalOut:
; 0019 000F //    DDRL.0  = 1;   //set output
; 0019 0010     char tempRegister = 0;
; 0019 0011     DDRJ |= 0x04;    //oboooo o10o
	ST   -Y,R27
	ST   -Y,R26
	ST   -Y,R17
;	status -> Y+1
;	tempRegister -> R17
	LDI  R17,0
	LDS  R30,260
	ORI  R30,4
	STS  260,R30
; 0019 0012     if(status==1){
	LDD  R26,Y+1
	LDD  R27,Y+1+1
	SBIW R26,1
	BRNE _0x320003
; 0019 0013        PORTJ |= 0x04; //0b0000 0100
	LDS  R30,261
	ORI  R30,4
	RJMP _0x320020
; 0019 0014     }else{
_0x320003:
; 0019 0015         PORTJ &= 0xFB;//0b1111 1011
	LDS  R30,261
	ANDI R30,0xFB
_0x320020:
	STS  261,R30
; 0019 0016     }
; 0019 0017 }
	LDD  R17,Y+0
	ADIW R28,3
	RET
;int DHT11SignalIn(){
; 0019 0018 int DHT11SignalIn(){
_DHT11SignalIn:
; 0019 0019 //    DDRL.0   = 0;   //set input
; 0019 001A //    return DHT11_TO_MCU_PIN;
; 0019 001B     DDRJ &= 0xFB;
	LDS  R30,260
	ANDI R30,0xFB
	STS  260,R30
; 0019 001C     if((PINJ & 0x04)==0x04){
	LDS  R30,259
	ANDI R30,LOW(0x4)
	CPI  R30,LOW(0x4)
	BRNE _0x320005
; 0019 001D        return 0x01;
	LDI  R30,LOW(1)
	LDI  R31,HIGH(1)
	RET
; 0019 001E     }else{
_0x320005:
; 0019 001F        return 0x00;
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
	RET
; 0019 0020     }
; 0019 0021 
; 0019 0022 }
	RET
;int DHT11Read(ST_DHT11 *dhtDevice){
; 0019 0023 int DHT11Read(ST_DHT11 *dhtDevice){
_DHT11Read:
; 0019 0024     int i, j, temp;
; 0019 0025     int buffer = 0;
; 0019 0026     int count = 0;
; 0019 0027 	int data[5] = {0x00, 0x00, 0x00, 0x00, 0x00};
; 0019 0028 
; 0019 0029     /*start condition*/
; 0019 002A     dhtDevice->status = DHT11_ERROR_TIMEOUT;
	ST   -Y,R27
	ST   -Y,R26
	SBIW R28,14
	LDI  R24,14
	LDI  R26,LOW(0)
	LDI  R27,HIGH(0)
	LDI  R30,LOW(_0x320007*2)
	LDI  R31,HIGH(_0x320007*2)
	LDI  R22,BYTE3(_0x320007*2)
	CALL __INITLOCB
	CALL __SAVELOCR6
;	*dhtDevice -> Y+20
;	i -> R16,R17
;	j -> R18,R19
;	temp -> R20,R21
;	buffer -> Y+18
;	count -> Y+16
;	data -> Y+6
	CALL SUBOPT_0x258
; 0019 002B     //MCUSignalOut(MCU_SIGNAL_LOW);
; 0019 002C     //delay_ms(4);
; 0019 002D     MCUSignalOut(MCU_SIGNAL_HIGH);
	CALL SUBOPT_0x67
	RCALL _MCUSignalOut
; 0019 002E     delay_ms(4);
	CALL SUBOPT_0x69
	CALL _delay_ms
; 0019 002F 
; 0019 0030 //    TCCR5A=0x00;
; 0019 0031 //    TCCR5B=0x05;     //count = 128 microsec , 128 * 7812 = about 1sec
; 0019 0032 //
; 0019 0033 //    TCNT5H=0x00;     //timer count clearing
; 0019 0034 //    TCNT5L=0x00;
; 0019 0035 
; 0019 0036     MCUSignalOut(MCU_SIGNAL_LOW);
	LDI  R26,LOW(0)
	LDI  R27,0
	RCALL _MCUSignalOut
; 0019 0037     //while((TCNT5H <<8 | TCNT5L)<160);           //about 20 ms
; 0019 0038     delay_ms(20);
	CALL SUBOPT_0x8F
; 0019 0039 
; 0019 003A     /*set clk/8
; 0019 003B     *clk@8Mhz/prescaling 8
; 0019 003C     *get count every 1 us
; 0019 003D     */
; 0019 003E //    TCCR5A=0x00;
; 0019 003F //    TCCR5B=0x02;     //count = 1 microsec
; 0019 0040 //
; 0019 0041 //    TCNT5H=0x00;     //timer count clearing
; 0019 0042 //    TCNT5L=0x00;
; 0019 0043 
; 0019 0044     MCUSignalOut(MCU_SIGNAL_HIGH);
	CALL SUBOPT_0x67
	RCALL _MCUSignalOut
; 0019 0045     delay_us(40);
	__DELAY_USB 107
; 0019 0046     /*end start condition*/
; 0019 0047    // printDebug("DHT11: end Condition \r\n");
; 0019 0048 
; 0019 0049     TCCR5A=0x00;
	LDI  R30,LOW(0)
	STS  288,R30
; 0019 004A     TCCR5B=0x02;     //count = 1 microsec
	LDI  R30,LOW(2)
	CALL SUBOPT_0x82
; 0019 004B     TCNT5H=0x00;     //timer count clearing
; 0019 004C     TCNT5L=0x00;
; 0019 004D     while(DHT11SignalIn()==0){
_0x320008:
	RCALL _DHT11SignalIn
	SBIW R30,0
	BRNE _0x32000A
; 0019 004E         if((TCNT5H <<8 | TCNT5L)>100){       //about 80 us      //if((TCNT5H <<8 | TCNT5L)>100){       //about 80 us
	CALL SUBOPT_0x259
	CPI  R30,LOW(0x65)
	LDI  R26,HIGH(0x65)
	CPC  R31,R26
	BRLT _0x32000B
; 0019 004F             dhtDevice->status = DHT11_ERROR_TIMEOUT;
	CALL SUBOPT_0x258
; 0019 0050            return DHT11_ERROR_TIMEOUT;
	LDI  R30,LOW(3)
	LDI  R31,HIGH(3)
	RJMP _0x20E002D
; 0019 0051         }
; 0019 0052     }
_0x32000B:
	RJMP _0x320008
_0x32000A:
; 0019 0053 
; 0019 0054     TCNT5H=0x00;     //timer count clearing
	CALL SUBOPT_0x25A
; 0019 0055     TCNT5L=0x00;
; 0019 0056     while(DHT11SignalIn()==1){
_0x32000C:
	RCALL _DHT11SignalIn
	CPI  R30,LOW(0x1)
	LDI  R26,HIGH(0x1)
	CPC  R31,R26
	BRNE _0x32000E
; 0019 0057         if((TCNT5H <<8 | TCNT5L)>100){       //about 80 us        //if((TCNT5H <<8 | TCNT5L)>100){       //about 80 us
	CALL SUBOPT_0x259
	CPI  R30,LOW(0x65)
	LDI  R26,HIGH(0x65)
	CPC  R31,R26
	BRLT _0x32000F
; 0019 0058             dhtDevice->status = DHT11_ERROR_TIMEOUT;
	CALL SUBOPT_0x258
; 0019 0059            return DHT11_ERROR_TIMEOUT;
	LDI  R30,LOW(3)
	LDI  R31,HIGH(3)
	RJMP _0x20E002D
; 0019 005A         }
; 0019 005B     }
_0x32000F:
	RJMP _0x32000C
_0x32000E:
; 0019 005C 
; 0019 005D     //Read 40 bits (8*5)
; 0019 005E 	for(j = 0; j < 5; ++j) {
	__GETWRN 18,19,0
_0x320011:
	__CPWRN 18,19,5
	BRLT PC+3
	JMP _0x320012
; 0019 005F 		for(i = 0; i < 8; ++i) {
	__GETWRN 16,17,0
_0x320014:
	__CPWRN 16,17,8
	BRLT PC+3
	JMP _0x320015
; 0019 0060 
; 0019 0061 			//LOW for 50us
; 0019 0062 			TCNT5H=0x00;     //timer count clearing
	CALL SUBOPT_0x25A
; 0019 0063             TCNT5L=0x00;
; 0019 0064             while(DHT11SignalIn()==0){
_0x320016:
	RCALL _DHT11SignalIn
	SBIW R30,0
	BRNE _0x320018
; 0019 0065                 if((TCNT5H <<8 | TCNT5L)>70){       //about 50 us            //if((TCNT5H <<8 | TCNT5L)>70){
	CALL SUBOPT_0x259
	CPI  R30,LOW(0x47)
	LDI  R26,HIGH(0x47)
	CPC  R31,R26
	BRLT _0x320019
; 0019 0066                     dhtDevice->status = DHT11_ERROR_TIMEOUT;
	CALL SUBOPT_0x258
; 0019 0067                    return DHT11_ERROR_TIMEOUT;
	LDI  R30,LOW(3)
	LDI  R31,HIGH(3)
	RJMP _0x20E002D
; 0019 0068                 }
; 0019 0069             }
_0x320019:
	RJMP _0x320016
_0x320018:
; 0019 006A 
; 0019 006B 			//Start counter
; 0019 006C 			//buffer = 0;
; 0019 006D 			//HIGH for 26-28us = 0 / 70us = 1
; 0019 006E 
; 0019 006F 			TCNT5H=0x00;     //timer count clearing
	CALL SUBOPT_0x25A
; 0019 0070             TCNT5L=0x00;
; 0019 0071             while(DHT11SignalIn()==1){
_0x32001A:
	RCALL _DHT11SignalIn
	CPI  R30,LOW(0x1)
	LDI  R26,HIGH(0x1)
	CPC  R31,R26
	BRNE _0x32001C
; 0019 0072                 count = (TCNT5H <<8 | TCNT5L);
	CALL SUBOPT_0x259
	CALL SUBOPT_0x25B
; 0019 0073                 if(count>90){       //about 70 us                //if(count>90){
	CPI  R26,LOW(0x5B)
	LDI  R30,HIGH(0x5B)
	CPC  R27,R30
	BRLT _0x32001D
; 0019 0074                     dhtDevice->status = DHT11_ERROR_TIMEOUT;
	CALL SUBOPT_0x258
; 0019 0075                    return DHT11_ERROR_TIMEOUT;
	LDI  R30,LOW(3)
	LDI  R31,HIGH(3)
	RJMP _0x20E002D
; 0019 0076                 }
; 0019 0077 
; 0019 0078             }
_0x32001D:
	RJMP _0x32001A
_0x32001C:
; 0019 0079 
; 0019 007A //            if(count > 40){
; 0019 007B //               buffer = 1;
; 0019 007C //            }
; 0019 007D 			//Calc amount of time passed
; 0019 007E 			temp = count;
	__GETWRS 20,21,16
; 0019 007F 
; 0019 0080 			//shift 0
; 0019 0081 			data[j] = data[j] << 1;
	CALL SUBOPT_0x25C
	ADD  R30,R26
	ADC  R31,R27
	MOVW R0,R30
	CALL SUBOPT_0x25C
	CALL SUBOPT_0x25D
	LSL  R30
	ROL  R31
	MOVW R26,R0
	ST   X+,R30
	ST   X,R31
; 0019 0082 
; 0019 0083 			//if > 30us it's 1
; 0019 0084 			if(temp > 40)
	__CPWRN 20,21,41
	BRLT _0x32001E
; 0019 0085 				data[j] = data[j]+1;
	CALL SUBOPT_0x25C
	ADD  R30,R26
	ADC  R31,R27
	MOVW R0,R30
	CALL SUBOPT_0x25C
	CALL SUBOPT_0x25D
	ADIW R30,1
	MOVW R26,R0
	ST   X+,R30
	ST   X,R31
; 0019 0086 		}
_0x32001E:
	__ADDWRN 16,17,1
	RJMP _0x320014
_0x320015:
; 0019 0087 	}
	__ADDWRN 18,19,1
	RJMP _0x320011
_0x320012:
; 0019 0088 
; 0019 0089     //MCUSignalOut(MCU_SIGNAL_HIGH);
; 0019 008A 
; 0019 008B     //verify the Checksum
; 0019 008C 	if(data[4] != (data[0] + data[2])){
	LDD  R30,Y+10
	LDD  R31,Y+10+1
	CALL SUBOPT_0x25E
	LDD  R26,Y+14
	LDD  R27,Y+14+1
	CP   R30,R26
	CPC  R31,R27
	BREQ _0x32001F
; 0019 008D         dhtDevice->status = DHT11_ERROR_CHECKSUM;
	LDD  R26,Y+20
	LDD  R27,Y+20+1
	ADIW R26,8
	LDI  R30,LOW(2)
	LDI  R31,HIGH(2)
	ST   X+,R30
	ST   X,R31
; 0019 008E         return DHT11_ERROR_CHECKSUM;
	RJMP _0x20E002D
; 0019 008F     }
; 0019 0090 
; 0019 0091 
; 0019 0092 
; 0019 0093     dhtDevice->temp = (float)data[2];
_0x32001F:
	LDD  R30,Y+10
	LDD  R31,Y+10+1
	CALL SUBOPT_0x25F
	LDD  R26,Y+20
	LDD  R27,Y+20+1
	CALL __PUTDP1
; 0019 0094     dhtDevice->humi = (float)data[0];
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	CALL SUBOPT_0x25F
	__PUTD1SNS 20,4
; 0019 0095     dhtDevice->status = DHT11_SUCCESS;
	LDD  R26,Y+20
	LDD  R27,Y+20+1
	ADIW R26,8
	LDI  R30,LOW(1)
	LDI  R31,HIGH(1)
	ST   X+,R30
	ST   X,R31
; 0019 0096     return DHT11_SUCCESS;
_0x20E002D:
	CALL __LOADLOCR6
	ADIW R28,22
	RET
; 0019 0097 }
;#include <stdlib.h>
;#include <string.h>
;#include <stdio.h>
;#include <delay.h>
;#include "calibration.h"
	#ifndef __SLEEP_DEFINED__
	#define __SLEEP_DEFINED__
	.EQU __se_bit=0x01
	.EQU __sm_mask=0x0E
	.EQU __sm_powerdown=0x04
	.EQU __sm_powersave=0x06
	.EQU __sm_standby=0x0C
	.EQU __sm_ext_standby=0x0E
	.EQU __sm_adc_noise_red=0x02
	.SET power_ctrl_reg=smcr
	#endif
;#include "timer.h"
;#include "gaussian.h"
;#include "debug.h"
;//#include "sensor.h"
;
;//typedef struct{
;//   ST_CAL_CHANNEL sChennel[5];
;//}ST_CAL;
;//
;
;ST_CAL_CONFIG sensorCalConfig;
;eeprom  ST_CAL sensorCalulate = {
;  {
;    {{0.0,0.0,0.0},{0.0,0.0,0.0},0},
;    {{0.0,0.0,0.0},{0.0,0.0,0.0},0},
;    {{0.0,0.0,0.0},{0.0,0.0,0.0},0},
;    {{0.0,0.0,0.0},{0.0,0.0,0.0},0},
;    {{0.0,0.0,0.0},{0.0,0.0,0.0},0}
;  }
;};          //improtance
;
;//eeprom float calOffset = 0.0;
;
;void (*pfCalibrate) (ST_CAL_CONFIG calConfig);   //pointer function of calibation set
;
;
;/**
;**@fn name   calGet
;**@header   name        type            des
;**@param    channelID   unsigned int    channel of sensor = 5(max)
;**@return   none        void
;**/
;void calGet(ST_CAL_CONFIG calConfig){
; 001A 0026 void calGet(ST_CAL_CONFIG calConfig){

	.CSEG
; 001A 0027     unsigned int i=0;
; 001A 0028     unsigned int offsetMember       = 1;     //use 1 point
; 001A 0029     unsigned int linearMember       = 2;     //use 2 point
; 001A 002A     unsigned int polynomailMember   = 3;     //use 3 point
; 001A 002B     if(calConfig.prop=CAL_GET){
;	calConfig -> Y+8
;	i -> R16,R17
;	offsetMember -> R18,R19
;	linearMember -> R20,R21
;	polynomailMember -> Y+6
; 001A 002C         printDebug("<Cal Std ref>ch[%d],formatType:%0.2f\r\n",calConfig.channelID,calConfig.calType);
; 001A 002D         switch(calConfig.calType){
; 001A 002E             case CAL_EXTOFFSET :{
; 001A 002F                 for(i=0;i<offsetMember;i++){
; 001A 0030                    printDebug("stdRef:%0.2f,sensorRef:%0.2f\r\n",sensorCalulate.sChennel[calConfig.channelID-1].stdRef[i],sensorCalulate.sChennel[calConfig.channelID-1].sensorRef[i]);
; 001A 0031                 }
; 001A 0032                 break;
; 001A 0033             }
; 001A 0034             case CAL_EXTLINEAR :{
; 001A 0035                 for(i=0;i<linearMember;i++){
; 001A 0036                    printDebug("stdRef:%0.2f,sensorRef:%0.2f\r\n",sensorCalulate.sChennel[calConfig.channelID-1].stdRef[i],sensorCalulate.sChennel[calConfig.channelID-1].sensorRef[i]);
; 001A 0037                 }
; 001A 0038                 break;
; 001A 0039             }
; 001A 003A             case CAL_EXTPOLYNOMIAL :{
; 001A 003B                 for(i=0;i<polynomailMember;i++){
; 001A 003C                    printDebug("stdRef:%0.2f,sensorRef:%0.2f\r\n",sensorCalulate.sChennel[calConfig.channelID-1].stdRef[i],sensorCalulate.sChennel[calConfig.channelID-1].sensorRef[i]);
; 001A 003D                 }
; 001A 003E                 break;
; 001A 003F             }
; 001A 0040             defualt:{
; 001A 0041                 break;
; 001A 0042             }
; 001A 0043         }
; 001A 0044     }else{
; 001A 0045        printDebug("<calibration>Cal properties:set can not get value.");
; 001A 0046     }
; 001A 0047 }
;void calSet(ST_CAL_CONFIG calConfig){
; 001A 0048 void calSet(ST_CAL_CONFIG calConfig){
_calSet:
; 001A 0049     if(calConfig.prop=CAL_SET){
;	calConfig -> Y+0
	LDI  R30,LOW(1)
	LDI  R31,HIGH(1)
	ST   Y,R30
	STD  Y+1,R31
	SBIW R30,0
	BREQ _0x340015
; 001A 004A         sensorCalulate.sChennel[calConfig.channelID-1].stdRef[calConfig.pointID-1] =  calConfig.pointValue;
	CALL SUBOPT_0x260
	SUBI R30,LOW(-_sensorCalulate)
	SBCI R31,HIGH(-_sensorCalulate)
	MOVW R26,R30
	LDD  R30,Y+4
	LDD  R31,Y+4+1
	SBIW R30,1
	CALL __LSLW2
	ADD  R26,R30
	ADC  R27,R31
	CALL SUBOPT_0xA2
	CALL __EEPROMWRD
; 001A 004B         sensorCalulate.sChennel[calConfig.channelID-1].sensorRef[calConfig.pointID-1] = adcData[calConfig.channelID-1];
	LDD  R30,Y+2
	LDD  R31,Y+2+1
	SBIW R30,1
	MOVW R22,R30
	CALL SUBOPT_0x261
	__ADDW1MN _sensorCalulate,12
	MOVW R26,R30
	LDD  R30,Y+4
	LDD  R31,Y+4+1
	SBIW R30,1
	CALL SUBOPT_0x1CD
	MOVW R0,R30
	MOVW R30,R22
	CALL SUBOPT_0x90
	CALL SUBOPT_0x19
	MOVW R26,R0
	CALL __EEPROMWRD
; 001A 004C     }else{
	RJMP _0x340016
_0x340015:
; 001A 004D        printDebug("<calibration>Cal properties:get can not set value.");
	CALL SUBOPT_0x262
; 001A 004E     }
_0x340016:
; 001A 004F }
	RJMP _0x20E002C
;void calSetConfirm(ST_CAL_CONFIG calConfig){
; 001A 0050 void calSetConfirm(ST_CAL_CONFIG calConfig){
_calSetConfirm:
; 001A 0051     if(calConfig.prop=CAL_SET){
;	calConfig -> Y+0
	LDI  R30,LOW(1)
	LDI  R31,HIGH(1)
	ST   Y,R30
	STD  Y+1,R31
	SBIW R30,0
	BREQ _0x340017
; 001A 0052         printDebug("<Cal Std ref>ch[%d],formatType:%d\r\n",calConfig.channelID,calConfig.calType);
	__POINTD1FN _0x340000,172
	CALL SUBOPT_0xEE
	CALL SUBOPT_0xDD
	LDD  R30,Y+18
	LDD  R31,Y+18+1
	CALL SUBOPT_0x127
; 001A 0053         switch(calConfig.calType){
	LDD  R30,Y+10
	LDD  R31,Y+10+1
; 001A 0054             case CAL_EXTOFFSET :{
	CPI  R30,LOW(0x1)
	LDI  R26,HIGH(0x1)
	CPC  R31,R26
	BRNE _0x34001B
; 001A 0055                 sensorCalulate.sChennel[calConfig.channelID-1].calType = CAL_EXTOFFSET;
	CALL SUBOPT_0x260
	__ADDW1MN _sensorCalulate,24
	MOVW R26,R30
	LDI  R30,LOW(1)
	LDI  R31,HIGH(1)
	RJMP _0x34002A
; 001A 0056                 break;
; 001A 0057             }
; 001A 0058             case CAL_EXTLINEAR :{
_0x34001B:
	CPI  R30,LOW(0x2)
	LDI  R26,HIGH(0x2)
	CPC  R31,R26
	BRNE _0x34001C
; 001A 0059                 sensorCalulate.sChennel[calConfig.channelID-1].calType = CAL_EXTLINEAR;
	CALL SUBOPT_0x260
	__ADDW1MN _sensorCalulate,24
	MOVW R26,R30
	LDI  R30,LOW(2)
	LDI  R31,HIGH(2)
	RJMP _0x34002A
; 001A 005A                 break;
; 001A 005B             }
; 001A 005C             case CAL_EXTPOLYNOMIAL :{
_0x34001C:
	CPI  R30,LOW(0x3)
	LDI  R26,HIGH(0x3)
	CPC  R31,R26
	BRNE _0x34001D
; 001A 005D                 sensorCalulate.sChennel[calConfig.channelID-1].calType = CAL_EXTPOLYNOMIAL;
	CALL SUBOPT_0x260
	__ADDW1MN _sensorCalulate,24
	MOVW R26,R30
	LDI  R30,LOW(3)
	LDI  R31,HIGH(3)
	RJMP _0x34002A
; 001A 005E                 break;
; 001A 005F             }
; 001A 0060             case CAL_DEFAULT:{
_0x34001D:
	SBIW R30,0
	BRNE _0x34001A
; 001A 0061                 sensorCalulate.sChennel[calConfig.channelID-1].calType = CAL_DEFAULT;
	CALL SUBOPT_0x260
	__ADDW1MN _sensorCalulate,24
	MOVW R26,R30
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
_0x34002A:
	CALL __EEPROMWRW
; 001A 0062                 break;
; 001A 0063             }
; 001A 0064         }
_0x34001A:
; 001A 0065     }else{
	RJMP _0x34001F
_0x340017:
; 001A 0066        printDebug("<calibration>Cal properties:get can not set value.");
	CALL SUBOPT_0x262
; 001A 0067     }
_0x34001F:
; 001A 0068 }
_0x20E002C:
	ADIW R28,12
	RET
;void calSetClearPoint(ST_CAL_CONFIG calConfig){
; 001A 0069 void calSetClearPoint(ST_CAL_CONFIG calConfig){
; 001A 006A    if(calConfig.prop=CAL_SET){
;	calConfig -> Y+0
; 001A 006B       sensorCalulate.sChennel[calConfig.channelID-1].stdRef[calConfig.pointID] =  0;
; 001A 006C       sensorCalulate.sChennel[calConfig.channelID-1].sensorRef[calConfig.pointID] = 0;
; 001A 006D    }else{
; 001A 006E       printDebug("<calibration>Cal properties:get can not set value.");
; 001A 006F    }
; 001A 0070 }
;
;float calProcessValue(float sensorValue,unsigned int channelID){
; 001A 0072 float calProcessValue(float sensorValue,unsigned int channelID){
_calProcessValue:
; 001A 0073     float offset = 0.0;
; 001A 0074     float sensorRef1 = 0.0,sensorRef2 = 0.0,sensorRef3 = 0.0;
; 001A 0075     float stdMeter1 = 0.0,stdMeter2 = 0.0,stdMeter3 = 0.0;        //standrad  meter
; 001A 0076     float lowRange = 0.0;
; 001A 0077     float stdMeterRange = 0.0;
; 001A 0078     float factorA = 0.0,factorB = 0.0,factorC = 0.0;
; 001A 0079 
; 001A 007A     switch(sensorCalulate.sChennel[channelID-1].calType){
	ST   -Y,R27
	ST   -Y,R26
	SBIW R28,48
	LDI  R24,48
	LDI  R26,LOW(0)
	LDI  R27,HIGH(0)
	LDI  R30,LOW(_0x340022*2)
	LDI  R31,HIGH(_0x340022*2)
	LDI  R22,BYTE3(_0x340022*2)
	CALL __INITLOCB
;	sensorValue -> Y+50
;	channelID -> Y+48
;	offset -> Y+44
;	sensorRef1 -> Y+40
;	sensorRef2 -> Y+36
;	sensorRef3 -> Y+32
;	stdMeter1 -> Y+28
;	stdMeter2 -> Y+24
;	stdMeter3 -> Y+20
;	lowRange -> Y+16
;	stdMeterRange -> Y+12
;	factorA -> Y+8
;	factorB -> Y+4
;	factorC -> Y+0
	CALL SUBOPT_0x263
	__ADDW1MN _sensorCalulate,24
	MOVW R26,R30
	CALL __EEPROMRDW
; 001A 007B         case CAL_EXTOFFSET :{
	CPI  R30,LOW(0x1)
	LDI  R26,HIGH(0x1)
	CPC  R31,R26
	BRNE _0x340026
; 001A 007C             offset =  sensorCalulate.sChennel[channelID-1].stdRef[CAL_POINT1] - sensorCalulate.sChennel[channelID-1].sensorRef[CAL_POINT1];
	CALL SUBOPT_0x263
	MOVW R0,R30
	CALL SUBOPT_0x264
	PUSH R23
	PUSH R22
	PUSH R31
	PUSH R30
	MOVW R30,R0
	CALL SUBOPT_0x265
	POP  R26
	POP  R27
	POP  R24
	POP  R25
	CALL SUBOPT_0x1D5
	__PUTD1S 44
; 001A 007D             sensorValue += offset;
	__GETD2S 50
	CALL SUBOPT_0x266
; 001A 007E             break;
	RJMP _0x340025
; 001A 007F         }
; 001A 0080         case CAL_EXTLINEAR :{
_0x340026:
	CPI  R30,LOW(0x2)
	LDI  R26,HIGH(0x2)
	CPC  R31,R26
	BRNE _0x340027
; 001A 0081             //sensorValue = (((H28-$B$28)*$E$28)/$F$28)+$A$28;
; 001A 0082             sensorRef1 = sensorCalulate.sChennel[channelID-1].sensorRef[CAL_POINT1];
	CALL SUBOPT_0x263
	CALL SUBOPT_0x265
	CALL SUBOPT_0x267
; 001A 0083             sensorRef2 = sensorCalulate.sChennel[channelID-1].sensorRef[CAL_POINT2];
	CALL SUBOPT_0x268
; 001A 0084             stdMeter1  = sensorCalulate.sChennel[channelID-1].stdRef[CAL_POINT1];
	CALL SUBOPT_0x264
	CALL SUBOPT_0x269
; 001A 0085             stdMeter2  = sensorCalulate.sChennel[channelID-1].stdRef[CAL_POINT2];
	CALL SUBOPT_0x26A
; 001A 0086             lowRange   =  sensorRef2 - sensorRef1;
	__GETD2S 40
	__GETD1S 36
	CALL __SUBF12
	CALL SUBOPT_0x23D
; 001A 0087             stdMeterRange = stdMeter2 - stdMeter1;
	__GETD2S 28
	CALL SUBOPT_0xCA
	CALL __SUBF12
	CALL SUBOPT_0xD6
; 001A 0088             sensorValue = (((sensorValue-sensorRef1)*stdMeterRange)/lowRange)+stdMeter1;
	__GETD2S 40
	CALL SUBOPT_0x26B
	CALL __SUBF12
	CALL SUBOPT_0x9
	CALL __MULF12
	MOVW R26,R30
	MOVW R24,R22
	CALL SUBOPT_0xA
	CALL __DIVF21
	__GETD2S 28
	CALL SUBOPT_0x266
; 001A 0089             break;
	RJMP _0x340025
; 001A 008A         }
; 001A 008B         case CAL_EXTPOLYNOMIAL :{
_0x340027:
	CPI  R30,LOW(0x3)
	LDI  R26,HIGH(0x3)
	CPC  R31,R26
	BREQ PC+3
	JMP _0x340028
; 001A 008C             sensorRef1 = sensorCalulate.sChennel[channelID-1].sensorRef[CAL_POINT1];
	CALL SUBOPT_0x263
	CALL SUBOPT_0x265
	CALL SUBOPT_0x267
; 001A 008D             sensorRef2 = sensorCalulate.sChennel[channelID-1].sensorRef[CAL_POINT2];
	CALL SUBOPT_0x268
; 001A 008E             sensorRef3 = sensorCalulate.sChennel[channelID-1].sensorRef[CAL_POINT3];
	__ADDW1MN _sensorCalulate,20
	MOVW R26,R30
	CALL __EEPROMRDD
	__PUTD1S 32
; 001A 008F             stdMeter1  = sensorCalulate.sChennel[channelID-1].stdRef[CAL_POINT1];
	CALL SUBOPT_0x263
	CALL SUBOPT_0x264
	CALL SUBOPT_0x269
; 001A 0090             stdMeter2  = sensorCalulate.sChennel[channelID-1].stdRef[CAL_POINT2];
	CALL SUBOPT_0x26A
; 001A 0091             stdMeter3  = sensorCalulate.sChennel[channelID-1].stdRef[CAL_POINT3];
	CALL SUBOPT_0x263
	__ADDW1MN _sensorCalulate,8
	MOVW R26,R30
	CALL __EEPROMRDD
	CALL SUBOPT_0x23E
; 001A 0092 
; 001A 0093             gaussian(sensorRef1,  sensorRef2,  sensorRef3, stdMeter1, stdMeter2, stdMeter3, &factorA, &factorB, &factorC);
	CALL SUBOPT_0x26C
	CALL SUBOPT_0x26C
	CALL SUBOPT_0x26C
	MOVW R30,R28
	ADIW R30,32
	ST   -Y,R31
	ST   -Y,R30
	CALL SUBOPT_0x1DA
	MOVW R26,R28
	ADIW R26,28
	CALL _gaussian
; 001A 0094             sensorValue = (factorA*sensorValue*sensorValue) + (factorB*sensorValue) + factorC;      //polynomail formula
	CALL SUBOPT_0x26B
	CALL SUBOPT_0xC5
	CALL __MULF12
	__GETD2S 50
	CALL __MULF12
	PUSH R23
	PUSH R22
	PUSH R31
	PUSH R30
	CALL SUBOPT_0x26B
	CALL SUBOPT_0x96
	CALL __MULF12
	POP  R26
	POP  R27
	POP  R24
	POP  R25
	CALL __ADDF12
	CALL SUBOPT_0x7A
	CALL SUBOPT_0x266
; 001A 0095 
; 001A 0096             break;
; 001A 0097         }
; 001A 0098         case CAL_DEFAULT:{
_0x340028:
; 001A 0099             break;
; 001A 009A         }
; 001A 009B     }
_0x340025:
; 001A 009C     return sensorValue;
	CALL SUBOPT_0x26B
	ADIW R28,54
	RET
; 001A 009D }

	.CSEG
_fabs:
	CALL __PUTPARD2
    ld   r30,y+
    ld   r31,y+
    ld   r22,y+
    ld   r23,y+
    cbr  r23,0x80
    ret
_atoi:
	ST   -Y,R27
	ST   -Y,R26
   	ldd  r27,y+1
   	ld   r26,y
__atoi0:
   	ld   r30,x
        mov  r24,r26
	MOV  R26,R30
	CALL _isspace
        mov  r26,r24
   	tst  r30
   	breq __atoi1
   	adiw r26,1
   	rjmp __atoi0
__atoi1:
   	clt
   	ld   r30,x
   	cpi  r30,'-'
   	brne __atoi2
   	set
   	rjmp __atoi3
__atoi2:
   	cpi  r30,'+'
   	brne __atoi4
__atoi3:
   	adiw r26,1
__atoi4:
   	clr  r22
   	clr  r23
__atoi5:
   	ld   r30,x
        mov  r24,r26
	MOV  R26,R30
	CALL _isdigit
        mov  r26,r24
   	tst  r30
   	breq __atoi6
   	movw r30,r22
   	lsl  r22
   	rol  r23
   	lsl  r22
   	rol  r23
   	add  r22,r30
   	adc  r23,r31
   	lsl  r22
   	rol  r23
   	ld   r30,x+
   	clr  r31
   	subi r30,'0'
   	add  r22,r30
   	adc  r23,r31
   	rjmp __atoi5
__atoi6:
   	movw r30,r22
   	brtc __atoi7
   	com  r30
   	com  r31
   	adiw r30,1
__atoi7:
   	adiw r28,2
   	ret
_atol:
	ST   -Y,R27
	ST   -Y,R26
    ldd  r27,y+1
    ld   r26,y
__atol0:
    ld   r30,x
    push r26
	MOV  R26,R30
	CALL _isspace
    pop  r26
    tst  r30
    breq __atol1
    adiw r26,1
    rjmp __atol0
__atol1:
    clt
    ld   r30,x
    cpi  r30,'-'
    brne __atol2
    set
    rjmp __atol3
__atol2:
    cpi  r30,'+'
    brne __atol4
__atol3:
    adiw r26,1
__atol4:
    clr  r0
    clr  r1
    clr  r24
    clr  r25
__atol5:
    ld   r30,x
    push r26
	MOV  R26,R30
	CALL _isdigit
    pop  r26
    tst  r30
    breq __atol6
    movw r30,r0
    movw r22,r24
    rcall __atol8
    rcall __atol8
    add  r0,r30
    adc  r1,r31
    adc  r24,r22
    adc  r25,r23
    rcall __atol8
    ld   r30,x+
    clr  r31
    subi r30,'0'
    add  r0,r30
    adc  r1,r31
    adc  r24,r31
    adc  r25,r31
    rjmp __atol5
__atol6:
    movw r30,r0
    movw r22,r24
    brtc __atol7
    com  r30
    com  r31
    com  r22
    com  r23
    clr  r24
    adiw r30,1
    adc  r22,r24
    adc  r23,r24
__atol7:
    adiw r28,2
    ret

__atol8:
    lsl  r0
    rol  r1
    rol  r24
    rol  r25
    ret
_ftoa:
	ST   -Y,R27
	ST   -Y,R26
	SBIW R28,4
	CALL SUBOPT_0x1DD
	LDI  R30,LOW(63)
	STD  Y+3,R30
	ST   -Y,R17
	ST   -Y,R16
	LDD  R30,Y+11
	LDD  R31,Y+11+1
	CPI  R30,LOW(0xFFFF)
	LDI  R26,HIGH(0xFFFF)
	CPC  R31,R26
	BRNE _0x200000D
	CALL SUBOPT_0x144
	__POINTD2FN _0x2000000,0
	CALL _strcpyf
	RJMP _0x20E002B
_0x200000D:
	CPI  R30,LOW(0x7FFF)
	LDI  R26,HIGH(0x7FFF)
	CPC  R31,R26
	BRNE _0x200000C
	CALL SUBOPT_0x144
	__POINTD2FN _0x2000000,1
	CALL _strcpyf
	RJMP _0x20E002B
_0x200000C:
	LDD  R26,Y+12
	TST  R26
	BRPL _0x200000F
	CALL SUBOPT_0x5B
	CALL __ANEGF1
	CALL SUBOPT_0x26D
	CALL SUBOPT_0x26E
	LDI  R30,LOW(45)
	ST   X,R30
_0x200000F:
	LDD  R26,Y+8
	CPI  R26,LOW(0x7)
	BRLO _0x2000010
	LDI  R30,LOW(6)
	STD  Y+8,R30
_0x2000010:
	LDD  R17,Y+8
_0x2000011:
	MOV  R30,R17
	SUBI R17,1
	CPI  R30,0
	BREQ _0x2000013
	CALL SUBOPT_0x26F
	CALL SUBOPT_0x9F
	RJMP _0x2000011
_0x2000013:
	CALL SUBOPT_0x270
	CALL __ADDF12
	CALL SUBOPT_0x26D
	LDI  R17,LOW(0)
	CALL SUBOPT_0x256
	CALL SUBOPT_0x9F
_0x2000014:
	CALL SUBOPT_0x270
	CALL __CMPF12
	BRLO _0x2000016
	CALL SUBOPT_0xA1
	CALL SUBOPT_0x271
	CALL SUBOPT_0x9F
	SUBI R17,-LOW(1)
	CPI  R17,39
	BRLO _0x2000017
	CALL SUBOPT_0x144
	__POINTD2FN _0x2000000,5
	CALL _strcpyf
	RJMP _0x20E002B
_0x2000017:
	RJMP _0x2000014
_0x2000016:
	CPI  R17,0
	BRNE _0x2000018
	CALL SUBOPT_0x26E
	LDI  R30,LOW(48)
	ST   X,R30
	RJMP _0x2000019
_0x2000018:
_0x200001A:
	MOV  R30,R17
	SUBI R17,1
	CPI  R30,0
	BREQ _0x200001C
	CALL SUBOPT_0x26F
	CALL SUBOPT_0x272
	CALL SUBOPT_0x8A
	CALL _floor
	CALL SUBOPT_0x9F
	CALL SUBOPT_0x270
	CALL __DIVF21
	CALL __CFD1U
	MOV  R16,R30
	CALL SUBOPT_0x26E
	CALL SUBOPT_0x273
	CALL SUBOPT_0x1DF
	CALL __MULF12
	CALL SUBOPT_0x274
	CALL SUBOPT_0x1D5
	CALL SUBOPT_0x26D
	RJMP _0x200001A
_0x200001C:
_0x2000019:
	LDD  R30,Y+8
	CPI  R30,0
	BREQ _0x20E002A
	CALL SUBOPT_0x26E
	LDI  R30,LOW(46)
	ST   X,R30
_0x200001E:
	LDD  R30,Y+8
	SUBI R30,LOW(1)
	STD  Y+8,R30
	SUBI R30,-LOW(1)
	BREQ _0x2000020
	CALL SUBOPT_0x274
	CALL SUBOPT_0x271
	CALL SUBOPT_0x26D
	CALL SUBOPT_0x5B
	CALL __CFD1U
	MOV  R16,R30
	CALL SUBOPT_0x26E
	CALL SUBOPT_0x273
	CALL SUBOPT_0x274
	CALL SUBOPT_0x25F
	CALL SUBOPT_0x1D5
	CALL SUBOPT_0x26D
	RJMP _0x200001E
_0x2000020:
_0x20E002A:
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	LDI  R30,LOW(0)
	ST   X,R30
_0x20E002B:
	LDD  R17,Y+1
	LDD  R16,Y+0
	ADIW R28,13
	RET
_atof:
	ST   -Y,R27
	ST   -Y,R26
	SBIW R28,10
	CALL __SAVELOCR6
	LDI  R30,LOW(0)
	__CLRD1S 8
_0x200003C:
	LDD  R26,Y+16
	LDD  R27,Y+16+1
	LD   R30,X
	MOV  R21,R30
	MOV  R26,R30
	CALL _isspace
	CPI  R30,0
	BREQ _0x200003E
	CALL SUBOPT_0x275
	RJMP _0x200003C
_0x200003E:
	LDI  R30,LOW(0)
	STD  Y+7,R30
	CPI  R21,43
	BREQ _0x2000073
	CPI  R21,45
	BRNE _0x2000041
	LDI  R30,LOW(1)
	STD  Y+7,R30
_0x2000073:
	LDD  R30,Y+16
	LDD  R31,Y+16+1
	ADIW R30,1
	STD  Y+16,R30
	STD  Y+16+1,R31
_0x2000041:
	LDI  R30,LOW(0)
	MOV  R20,R30
	MOV  R21,R30
	__GETWRS 16,17,16
_0x2000042:
	LDD  R26,Y+16
	LDD  R27,Y+16+1
	CALL SUBOPT_0x245
	BRNE _0x2000045
	LDD  R26,Y+16
	LDD  R27,Y+16+1
	LD   R26,X
	LDI  R30,LOW(46)
	CALL __EQB12
	MOV  R21,R30
	CPI  R30,0
	BREQ _0x2000044
_0x2000045:
	OR   R20,R21
	CALL SUBOPT_0x275
	RJMP _0x2000042
_0x2000044:
	__GETWRS 18,19,16
	CPI  R20,0
	BREQ _0x2000047
	LDD  R30,Y+16
	LDD  R31,Y+16+1
	SBIW R30,1
	STD  Y+16,R30
	STD  Y+16+1,R31
_0x2000048:
	LDD  R26,Y+16
	LDD  R27,Y+16+1
	LD   R26,X
	CPI  R26,LOW(0x2E)
	BREQ _0x200004A
	CALL SUBOPT_0x276
	CALL SUBOPT_0xC5
	CALL SUBOPT_0x25F
	CALL SUBOPT_0x8A
	CALL SUBOPT_0x8B
	CALL __DIVF21
	CALL SUBOPT_0x23C
	LDD  R30,Y+16
	LDD  R31,Y+16+1
	SBIW R30,1
	STD  Y+16,R30
	STD  Y+16+1,R31
	RJMP _0x2000048
_0x200004A:
_0x2000047:
	CALL SUBOPT_0x256
	CALL SUBOPT_0xD6
_0x200004B:
	LDD  R26,Y+16
	LDD  R27,Y+16+1
	SBIW R26,1
	STD  Y+16,R26
	STD  Y+16+1,R27
	CP   R26,R16
	CPC  R27,R17
	BRLO _0x200004D
	CALL SUBOPT_0x276
	CALL SUBOPT_0x9
	CALL SUBOPT_0x25F
	CALL __MULF12
	CALL SUBOPT_0xC5
	CALL __ADDF12
	CALL SUBOPT_0x23C
	CALL SUBOPT_0x277
	CALL SUBOPT_0xD6
	RJMP _0x200004B
_0x200004D:
	MOVW R26,R18
	__ADDWRN 18,19,1
	LD   R21,X
	CPI  R21,101
	BREQ _0x200004F
	CPI  R21,69
	BREQ _0x200004F
	RJMP _0x200004E
_0x200004F:
	LDI  R30,LOW(0)
	MOV  R20,R30
	STD  Y+6,R30
	MOVW R26,R18
	LD   R21,X
	CPI  R21,43
	BREQ _0x2000074
	CPI  R21,45
	BRNE _0x2000053
	LDI  R30,LOW(1)
	STD  Y+6,R30
_0x2000074:
	__ADDWRN 18,19,1
_0x2000053:
_0x2000054:
	MOVW R26,R18
	__ADDWRN 18,19,1
	LD   R30,X
	MOV  R21,R30
	MOV  R26,R30
	CALL _isdigit
	CPI  R30,0
	BREQ _0x2000056
	LDI  R26,LOW(10)
	MULS R20,R26
	MOVW R30,R0
	ADD  R30,R21
	SUBI R30,LOW(48)
	MOV  R20,R30
	RJMP _0x2000054
_0x2000056:
	CPI  R20,39
	BRLO _0x2000057
	LDD  R30,Y+7
	CPI  R30,0
	BREQ _0x2000058
	__GETD1N 0xFF7FFFFF
	RJMP _0x20E0029
_0x2000058:
	__GETD1N 0x7F7FFFFF
	RJMP _0x20E0029
_0x2000057:
	LDI  R21,LOW(32)
	CALL SUBOPT_0x256
	CALL SUBOPT_0xD6
_0x2000059:
	CPI  R21,0
	BREQ _0x200005B
	CALL SUBOPT_0xC6
	CALL SUBOPT_0x9
	CALL SUBOPT_0x278
	MOV  R30,R20
	AND  R30,R21
	BREQ _0x200005C
	CALL SUBOPT_0x277
	CALL SUBOPT_0xD6
_0x200005C:
	LSR  R21
	RJMP _0x2000059
_0x200005B:
	LDD  R30,Y+6
	CPI  R30,0
	BREQ _0x200005D
	CALL SUBOPT_0xC6
	CALL SUBOPT_0xC5
	CALL __DIVF21
	RJMP _0x2000075
_0x200005D:
	CALL SUBOPT_0xC6
	CALL SUBOPT_0xC5
	CALL __MULF12
_0x2000075:
	__PUTD1S 8
_0x200004E:
	LDD  R30,Y+7
	CPI  R30,0
	BREQ _0x200005F
	CALL SUBOPT_0x3E
	CALL __ANEGF1
	CALL SUBOPT_0x23C
_0x200005F:
	CALL SUBOPT_0x3E
_0x20E0029:
	CALL __LOADLOCR6
	ADIW R28,18
	RET

	.DSEG

	.CSEG
_srand:
	CALL SUBOPT_0x83
	CALL __CWD1
	CALL SUBOPT_0x279
	RJMP _0x20E0027
_rand:
	LDS  R30,__seed_G100
	LDS  R31,__seed_G100+1
	LDS  R22,__seed_G100+2
	LDS  R23,__seed_G100+3
	__GETD2N 0x41C64E6D
	CALL __MULD12U
	__ADDD1N 30562
	CALL SUBOPT_0x279
	movw r30,r22
	andi r31,0x7F
	RET
_allocate_block_G100:
	ST   -Y,R27
	ST   -Y,R26
	SBIW R28,2
	CALL __SAVELOCR6
	__GETWRN 16,17,7562
	MOVW R26,R16
	CALL SUBOPT_0xFC
_0x2000061:
	MOV  R0,R16
	OR   R0,R17
	BREQ _0x2000063
	MOVW R26,R16
	CALL __GETW1P
	ADD  R30,R16
	ADC  R31,R17
	ADIW R30,4
	MOVW R20,R30
	ADIW R26,2
	CALL __GETW1P
	MOVW R18,R30
	SBIW R30,0
	BREQ _0x2000064
	__PUTWSR 18,19,6
	RJMP _0x2000065
_0x2000064:
	LDI  R30,LOW(8704)
	LDI  R31,HIGH(8704)
	STD  Y+6,R30
	STD  Y+6+1,R31
_0x2000065:
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	SUB  R26,R20
	SBC  R27,R21
	LDD  R30,Y+8
	LDD  R31,Y+8+1
	ADIW R30,4
	CP   R26,R30
	CPC  R27,R31
	BRLO _0x2000066
	MOVW R30,R20
	__PUTW1RNS 16,2
	MOVW R30,R18
	__PUTW1RNS 20,2
	LDD  R30,Y+8
	LDD  R31,Y+8+1
	MOVW R26,R20
	ST   X+,R30
	ST   X,R31
	__ADDWRN 20,21,4
	MOVW R30,R20
	RJMP _0x20E0028
_0x2000066:
	MOVW R16,R18
	RJMP _0x2000061
_0x2000063:
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
_0x20E0028:
	CALL __LOADLOCR6
	ADIW R28,10
	RET
_find_prev_block_G100:
	CALL SUBOPT_0x6F
	__GETWRN 16,17,7562
_0x2000067:
	MOV  R0,R16
	OR   R0,R17
	BREQ _0x2000069
	MOVW R26,R16
	ADIW R26,2
	CALL __GETW1P
	MOVW R18,R30
	MOVW R26,R30
	LDD  R30,Y+4
	LDD  R31,Y+4+1
	CP   R30,R26
	CPC  R31,R27
	BRNE _0x200006A
	MOVW R30,R16
	CALL __LOADLOCR4
	ADIW R28,6
	RET
_0x200006A:
	MOVW R16,R18
	RJMP _0x2000067
_0x2000069:
	CALL SUBOPT_0x136
	JMP  _0x20E001D
_realloc:
	ST   -Y,R27
	ST   -Y,R26
	SBIW R28,2
	CALL __SAVELOCR6
	LDD  R30,Y+10
	LDD  R31,Y+10+1
	SBIW R30,0
	BREQ _0x200006B
	SBIW R30,4
	MOVW R16,R30
	MOVW R26,R16
	RCALL _find_prev_block_G100
	MOVW R18,R30
	SBIW R30,0
	BREQ _0x200006C
	MOVW R26,R16
	ADIW R26,2
	CALL __GETW1P
	__PUTW1RNS 18,2
	LDD  R30,Y+8
	LDD  R31,Y+8+1
	SBIW R30,0
	BREQ _0x200006D
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	RCALL _allocate_block_G100
	MOVW R20,R30
	SBIW R30,0
	BREQ _0x200006E
	MOVW R26,R16
	CALL SUBOPT_0x27A
	MOVW R26,R30
	LDD  R30,Y+8
	LDD  R31,Y+8+1
	CP   R26,R30
	CPC  R27,R31
	BRSH _0x200006F
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	STD  Y+8,R30
	STD  Y+8+1,R31
_0x200006F:
	ST   -Y,R21
	ST   -Y,R20
	CALL SUBOPT_0x24E
	CALL _memmove
	JMP  _0x20E001F
_0x200006E:
	MOVW R30,R16
	__PUTW1RNS 18,2
_0x200006D:
_0x200006C:
_0x200006B:
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
	JMP  _0x20E001E
_malloc:
	CALL SUBOPT_0x71
	__GETWRN 16,17,0
	LDD  R30,Y+2
	LDD  R31,Y+2+1
	SBIW R30,0
	BREQ _0x2000070
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	RCALL _allocate_block_G100
	MOVW R16,R30
	SBIW R30,0
	BREQ _0x2000071
	ST   -Y,R17
	ST   -Y,R16
	LDI  R30,LOW(0)
	ST   -Y,R30
	LDD  R26,Y+5
	LDD  R27,Y+5+1
	CALL _memset
_0x2000071:
_0x2000070:
	MOVW R30,R16
	LDD  R17,Y+1
	LDD  R16,Y+0
	JMP  _0x20E0026
_free:
	CALL SUBOPT_0x83
	CALL SUBOPT_0xDF
	RCALL _realloc
_0x20E0027:
	ADIW R28,2
	RET

	.CSEG
_memcpy:
	ST   -Y,R27
	ST   -Y,R26
    ldd  r25,y+1
    ld   r24,y
    adiw r24,0
    breq memcpy1
    ldd  r27,y+5
    ldd  r26,y+4
    ldd  r31,y+3
    ldd  r30,y+2
memcpy0:
    ld   r22,z+
    st   x+,r22
    sbiw r24,1
    brne memcpy0
memcpy1:
    ldd  r31,y+5
    ldd  r30,y+4
	JMP  _0x20E001D
_memcpyf:
	ST   -Y,R27
	ST   -Y,R26
    ldd  r25,y+1
    ld   r24,y
    adiw r24,0
    breq memcpyf1
    ldd  r27,y+7
    ldd  r26,y+6
    ldd  r22,y+4
    ldd  r31,y+3
    ldd  r30,y+2
    out  rampz,r22
memcpyf0:
    elpm r0,z+
    st   x+,r0
    sbiw r24,1
    brne memcpyf0
memcpyf1:
    ldd  r31,y+7
    ldd  r30,y+6
	JMP  _0x20E0020
_memmove:
	ST   -Y,R27
	ST   -Y,R26
    ldd  r25,y+1
    ld   r24,y
    adiw r24,0
    breq memmove3
    ldd  r27,y+5
    ldd  r26,y+4
    ldd  r31,y+3
    ldd  r30,y+2
    cp   r30,r26
    cpc  r31,r27
    breq memmove3
    brlt memmove1
memmove0:
    ld   r22,z+
    st   x+,r22
    sbiw r24,1
    brne memmove0
    rjmp memmove3
memmove1:
    add  r26,r24
    adc  r27,r25
    add  r30,r24
    adc  r31,r25
memmove2:
    ld   r22,-z
    st   -x,r22
    sbiw r24,1
    brne memmove2
memmove3:
    ldd  r31,y+5
    ldd  r30,y+4
	JMP  _0x20E001D
_memset:
	ST   -Y,R27
	ST   -Y,R26
    ldd  r27,y+1
    ld   r26,y
    adiw r26,0
    breq memset1
    ldd  r31,y+4
    ldd  r30,y+3
    ldd  r22,y+2
memset0:
    st   z+,r22
    sbiw r26,1
    brne memset0
memset1:
    ldd  r30,y+3
    ldd  r31,y+4
	ADIW R28,5
	RET
_strcpyf:
	CALL __PUTPARD2
    ld   r30,y+
    ld   r31,y+
    ld   r22,y+
    ld   r23,y+
    ld   r26,y+
    ld   r27,y+
    movw r24,r26
    out  rampz,r22
strcpyf0:
    elpm r0,z+
    st   x+,r0
    tst  r0
    brne strcpyf0
    movw r30,r24
    ret
_strcspn:
	ST   -Y,R27
	ST   -Y,R26
    ldd  r27,y+3
    ldd  r26,y+2
    clr  r24
    clr  r25
strcspn0:
    ld   r22,x+
    tst  r22
    breq strcspn2
    ldd  r31,y+1
    ld   r30,y
strcspn1:
    ld   r23,z+
    tst  r23
    breq strcspn3
    cp   r22,r23
    breq strcspn2
    rjmp strcspn1
strcspn3:
    adiw r24,1
    rjmp strcspn0
strcspn2:
    movw r30,r24
_0x20E0026:
	ADIW R28,4
	RET
_strlen:
	ST   -Y,R27
	ST   -Y,R26
    ld   r26,y+
    ld   r27,y+
    clr  r30
    clr  r31
strlen0:
    ld   r22,x+
    tst  r22
    breq strlen1
    adiw r30,1
    rjmp strlen0
strlen1:
    ret
_strlenf:
	CALL __PUTPARD2
    clr  r26
    clr  r27
    ld   r30,y+
    ld   r31,y+
    ld   r22,y+
    ld   r23,y+
    out  rampz,r22
strlenf0:
    elpm r0,z+
    tst  r0
    breq strlenf1
    adiw r26,1
    rjmp strlenf0
strlenf1:
    movw r30,r26
    ret
_strncmpf:
	ST   -Y,R26
    ld   r23,y+
    ld   r30,y+
    ld   r31,y+
    ld   r22,y+
    ld   r0,y+
    ld   r26,y+
    ld   r27,y+
    clr  r0
    clr  r1
    out  rampz,r22
strncmpf0:
    tst  r23
    breq strncmpf1
    dec  r23
    ld   r1,x+
    elpm r0,z+
    cp   r0,r1
    brne strncmpf1
    tst  r0
    brne strncmpf0
strncmpf3:
    clr  r30
    rjmp strncmpf2
strncmpf1:
    sub  r1,r0
    breq strncmpf3
    ldi  r30,1
    brcc strncmpf2
    subi r30,2
strncmpf2:
    ret
	#ifndef __SLEEP_DEFINED__
	#define __SLEEP_DEFINED__
	.EQU __se_bit=0x01
	.EQU __sm_mask=0x0E
	.EQU __sm_powerdown=0x04
	.EQU __sm_powersave=0x06
	.EQU __sm_standby=0x0C
	.EQU __sm_ext_standby=0x0E
	.EQU __sm_adc_noise_red=0x02
	.SET power_ctrl_reg=smcr
	#endif

	.DSEG

	.CSEG
_wait_ready_G102:
	ST   -Y,R17
	LDI  R30,LOW(50)
	STS  _timer2_G102,R30
	LDI  R30,LOW(255)
	OUT  0x2E,R30
_0x2040004:
	IN   R30,0x2D
	SBRS R30,7
	RJMP _0x2040004
_0x2040008:
	LDI  R30,LOW(255)
	OUT  0x2E,R30
_0x204000A:
	IN   R30,0x2D
	SBRS R30,7
	RJMP _0x204000A
	IN   R17,46
	CPI  R17,255
	BREQ _0x204000D
	LDS  R30,_timer2_G102
	CPI  R30,0
	BRNE _0x204000E
_0x204000D:
	RJMP _0x2040009
_0x204000E:
	RJMP _0x2040008
_0x2040009:
	MOV  R30,R17
	LD   R17,Y+
	RET
_release_spi_G102:
	SBI  0x5,0
	LDI  R30,LOW(255)
	OUT  0x2E,R30
_0x204000F:
	IN   R30,0x2D
	SBRS R30,7
	RJMP _0x204000F
	RET
_rx_datablock_G102:
	ST   -Y,R27
	ST   -Y,R26
	CALL __SAVELOCR4
	LDI  R30,LOW(10)
	STS  _timer1_G102,R30
_0x2040013:
	LDI  R30,LOW(255)
	OUT  0x2E,R30
_0x2040015:
	IN   R30,0x2D
	SBRS R30,7
	RJMP _0x2040015
	IN   R17,46
	CPI  R17,255
	BRNE _0x2040018
	LDS  R30,_timer1_G102
	CPI  R30,0
	BRNE _0x2040019
_0x2040018:
	RJMP _0x2040014
_0x2040019:
	RJMP _0x2040013
_0x2040014:
	CPI  R17,254
	BREQ _0x204001A
	LDI  R30,LOW(0)
	CALL __LOADLOCR4
	RJMP _0x20E0020
_0x204001A:
	__GETWRS 18,19,6
_0x204001C:
	LDI  R30,LOW(255)
	OUT  0x2E,R30
_0x204001E:
	IN   R30,0x2D
	SBRS R30,7
	RJMP _0x204001E
	PUSH R19
	PUSH R18
	__ADDWRN 18,19,1
	IN   R30,0x2E
	POP  R26
	POP  R27
	ST   X,R30
	LDI  R30,LOW(255)
	OUT  0x2E,R30
_0x2040021:
	IN   R30,0x2D
	SBRS R30,7
	RJMP _0x2040021
	PUSH R19
	PUSH R18
	__ADDWRN 18,19,1
	IN   R30,0x2E
	POP  R26
	POP  R27
	ST   X,R30
	LDI  R30,LOW(255)
	OUT  0x2E,R30
_0x2040024:
	IN   R30,0x2D
	SBRS R30,7
	RJMP _0x2040024
	PUSH R19
	PUSH R18
	__ADDWRN 18,19,1
	IN   R30,0x2E
	POP  R26
	POP  R27
	ST   X,R30
	LDI  R30,LOW(255)
	OUT  0x2E,R30
_0x2040027:
	IN   R30,0x2D
	SBRS R30,7
	RJMP _0x2040027
	PUSH R19
	PUSH R18
	__ADDWRN 18,19,1
	IN   R30,0x2E
	POP  R26
	POP  R27
	ST   X,R30
	LDD  R30,Y+4
	LDD  R31,Y+4+1
	SBIW R30,4
	STD  Y+4,R30
	STD  Y+4+1,R31
	BRNE _0x204001C
	LDI  R30,LOW(255)
	OUT  0x2E,R30
_0x204002A:
	IN   R30,0x2D
	SBRS R30,7
	RJMP _0x204002A
	LDI  R30,LOW(255)
	OUT  0x2E,R30
_0x204002D:
	IN   R30,0x2D
	SBRS R30,7
	RJMP _0x204002D
	LDI  R30,LOW(1)
	CALL __LOADLOCR4
	RJMP _0x20E0020
_tx_datablock_G102:
	ST   -Y,R26
	CALL __SAVELOCR4
	RCALL _wait_ready_G102
	CPI  R30,LOW(0xFF)
	BREQ _0x2040030
	LDI  R30,LOW(0)
	CALL __LOADLOCR4
	RJMP _0x20E0021
_0x2040030:
	LDD  R30,Y+4
	OUT  0x2E,R30
_0x2040031:
	IN   R30,0x2D
	SBRS R30,7
	RJMP _0x2040031
	LDD  R26,Y+4
	CPI  R26,LOW(0xFD)
	BREQ _0x2040034
	LDI  R16,LOW(0)
	__GETWRS 18,19,5
_0x2040036:
	MOVW R26,R18
	__ADDWRN 18,19,1
	LD   R30,X
	OUT  0x2E,R30
_0x2040038:
	IN   R30,0x2D
	SBRS R30,7
	RJMP _0x2040038
	MOVW R26,R18
	__ADDWRN 18,19,1
	LD   R30,X
	OUT  0x2E,R30
_0x204003B:
	IN   R30,0x2D
	SBRS R30,7
	RJMP _0x204003B
	SUBI R16,LOW(1)
	CPI  R16,0
	BRNE _0x2040036
	LDI  R30,LOW(255)
	OUT  0x2E,R30
_0x204003E:
	IN   R30,0x2D
	SBRS R30,7
	RJMP _0x204003E
	LDI  R30,LOW(255)
	OUT  0x2E,R30
_0x2040041:
	IN   R30,0x2D
	SBRS R30,7
	RJMP _0x2040041
	LDI  R30,LOW(255)
	OUT  0x2E,R30
_0x2040044:
	IN   R30,0x2D
	SBRS R30,7
	RJMP _0x2040044
	IN   R17,46
	MOV  R30,R17
	ANDI R30,LOW(0x1F)
	CPI  R30,LOW(0x5)
	BREQ _0x2040047
	LDI  R30,LOW(0)
	CALL __LOADLOCR4
	RJMP _0x20E0021
_0x2040047:
_0x2040034:
	LDI  R30,LOW(1)
	CALL __LOADLOCR4
	RJMP _0x20E0021
_send_cmd_G102:
	CALL __PUTPARD2
	ST   -Y,R17
	ST   -Y,R16
	LDD  R30,Y+6
	ANDI R30,LOW(0x80)
	BREQ _0x2040048
	LDD  R30,Y+6
	ANDI R30,0x7F
	STD  Y+6,R30
	LDI  R30,LOW(119)
	ST   -Y,R30
	__GETD2N 0x0
	RCALL _send_cmd_G102
	MOV  R16,R30
	CPI  R16,2
	BRLO _0x2040049
	MOV  R30,R16
	LDD  R17,Y+1
	LDD  R16,Y+0
	RJMP _0x20E0021
_0x2040049:
_0x2040048:
	SBI  0x5,0
	CBI  0x5,0
	RCALL _wait_ready_G102
	CPI  R30,LOW(0xFF)
	BREQ _0x204004A
	LDI  R30,LOW(255)
	LDD  R17,Y+1
	LDD  R16,Y+0
	RJMP _0x20E0021
_0x204004A:
	LDD  R30,Y+6
	OUT  0x2E,R30
_0x204004B:
	IN   R30,0x2D
	SBRS R30,7
	RJMP _0x204004B
	LDD  R30,Y+5
	OUT  0x2E,R30
_0x204004E:
	IN   R30,0x2D
	SBRS R30,7
	RJMP _0x204004E
	LDD  R30,Y+4
	OUT  0x2E,R30
_0x2040051:
	IN   R30,0x2D
	SBRS R30,7
	RJMP _0x2040051
	LDD  R30,Y+3
	OUT  0x2E,R30
_0x2040054:
	IN   R30,0x2D
	SBRS R30,7
	RJMP _0x2040054
	LDD  R30,Y+2
	OUT  0x2E,R30
_0x2040057:
	IN   R30,0x2D
	SBRS R30,7
	RJMP _0x2040057
	LDI  R17,LOW(1)
	LDD  R26,Y+6
	CPI  R26,LOW(0x40)
	BRNE _0x204005A
	LDI  R17,LOW(149)
	RJMP _0x204005B
_0x204005A:
	LDD  R26,Y+6
	CPI  R26,LOW(0x48)
	BRNE _0x204005C
	LDI  R17,LOW(135)
_0x204005C:
_0x204005B:
	OUT  0x2E,R17
_0x204005D:
	IN   R30,0x2D
	SBRS R30,7
	RJMP _0x204005D
	LDD  R26,Y+6
	CPI  R26,LOW(0x4C)
	BRNE _0x2040060
	LDI  R30,LOW(255)
	OUT  0x2E,R30
_0x2040061:
	IN   R30,0x2D
	SBRS R30,7
	RJMP _0x2040061
_0x2040060:
	LDI  R17,LOW(255)
_0x2040065:
	LDI  R30,LOW(255)
	OUT  0x2E,R30
_0x2040067:
	IN   R30,0x2D
	SBRS R30,7
	RJMP _0x2040067
	IN   R16,46
	SBRS R16,7
	RJMP _0x204006A
	SUBI R17,LOW(1)
	CPI  R17,0
	BRNE _0x204006B
_0x204006A:
	RJMP _0x2040066
_0x204006B:
	RJMP _0x2040065
_0x2040066:
	MOV  R30,R16
	LDD  R17,Y+1
	LDD  R16,Y+0
	RJMP _0x20E0021
_rx_spi4_G102:
	ST   -Y,R27
	ST   -Y,R26
	ST   -Y,R17
	LDI  R17,4
_0x204006D:
	LDI  R30,LOW(255)
	OUT  0x2E,R30
_0x204006F:
	IN   R30,0x2D
	SBRS R30,7
	RJMP _0x204006F
	LDD  R26,Y+1
	LDD  R27,Y+1+1
	ADIW R26,1
	STD  Y+1,R26
	STD  Y+1+1,R27
	SBIW R26,1
	IN   R30,0x2E
	ST   X,R30
	SUBI R17,LOW(1)
	CPI  R17,0
	BRNE _0x204006D
	RJMP _0x20E001B
_disk_initialize:
	ST   -Y,R26
	SBIW R28,4
	CALL __SAVELOCR4
	LDD  R30,Y+8
	CPI  R30,0
	BREQ _0x2040072
	LDI  R30,LOW(1)
	RJMP _0x20E0025
_0x2040072:
	CBI  0x1,0
	CBI  0x1,1
	LDI  R30,LOW(10)
	STS  _timer1_G102,R30
_0x2040073:
	LDS  R30,_timer1_G102
	CPI  R30,0
	BRNE _0x2040073
	LDS  R30,_status_G102
	ANDI R30,LOW(0x2)
	BREQ _0x2040076
	RJMP _0x20E0024
_0x2040076:
	SBI  0x4,0
	SBI  0x5,0
	IN   R30,0x5
	ANDI R30,LOW(0xF9)
	OUT  0x5,R30
	SBI  0x5,3
	CBI  0x4,3
	IN   R30,0x4
	ORI  R30,LOW(0x7)
	OUT  0x4,R30
	LDI  R30,LOW(82)
	OUT  0x2C,R30
	LDI  R30,LOW(0)
	OUT  0x2D,R30
	LDI  R19,LOW(255)
_0x2040078:
	LDI  R17,LOW(10)
_0x204007B:
	LDI  R30,LOW(255)
	OUT  0x2E,R30
_0x204007D:
	IN   R30,0x2D
	SBRS R30,7
	RJMP _0x204007D
	SUBI R17,LOW(1)
	CPI  R17,0
	BRNE _0x204007B
	LDI  R30,LOW(64)
	ST   -Y,R30
	__GETD2N 0x0
	RCALL _send_cmd_G102
	MOV  R16,R30
	SUBI R19,LOW(1)
	CPI  R16,1
	BREQ _0x2040080
	CPI  R19,0
	BRNE _0x2040081
_0x2040080:
	RJMP _0x2040079
_0x2040081:
	RJMP _0x2040078
_0x2040079:
	LDI  R19,LOW(0)
	CPI  R16,1
	BREQ PC+3
	JMP _0x2040082
	LDI  R30,LOW(100)
	STS  _timer1_G102,R30
	LDI  R30,LOW(72)
	ST   -Y,R30
	__GETD2N 0x1AA
	RCALL _send_cmd_G102
	CPI  R30,LOW(0x1)
	BRNE _0x2040083
	MOVW R26,R28
	ADIW R26,4
	RCALL _rx_spi4_G102
	LDD  R26,Y+6
	CPI  R26,LOW(0x1)
	BRNE _0x2040085
	LDD  R26,Y+7
	CPI  R26,LOW(0xAA)
	BREQ _0x2040086
_0x2040085:
	RJMP _0x2040084
_0x2040086:
_0x2040087:
	LDS  R30,_timer1_G102
	CPI  R30,0
	BREQ _0x204008A
	LDI  R30,LOW(233)
	ST   -Y,R30
	__GETD2N 0x40000000
	RCALL _send_cmd_G102
	CPI  R30,0
	BRNE _0x204008B
_0x204008A:
	RJMP _0x2040089
_0x204008B:
	RJMP _0x2040087
_0x2040089:
	LDS  R30,_timer1_G102
	CPI  R30,0
	BREQ _0x204008D
	LDI  R30,LOW(122)
	ST   -Y,R30
	__GETD2N 0x0
	RCALL _send_cmd_G102
	CPI  R30,0
	BREQ _0x204008E
_0x204008D:
	RJMP _0x204008C
_0x204008E:
	MOVW R26,R28
	ADIW R26,4
	RCALL _rx_spi4_G102
	LDD  R30,Y+4
	ANDI R30,LOW(0x40)
	BREQ _0x204008F
	LDI  R30,LOW(12)
	RJMP _0x2040090
_0x204008F:
	LDI  R30,LOW(4)
_0x2040090:
	MOV  R19,R30
_0x204008C:
_0x2040084:
	RJMP _0x2040092
_0x2040083:
	LDI  R30,LOW(233)
	ST   -Y,R30
	__GETD2N 0x0
	RCALL _send_cmd_G102
	CPI  R30,LOW(0x2)
	BRSH _0x2040093
	LDI  R19,LOW(2)
	LDI  R16,LOW(233)
	RJMP _0x2040094
_0x2040093:
	LDI  R19,LOW(1)
	LDI  R16,LOW(65)
_0x2040094:
_0x2040095:
	LDS  R30,_timer1_G102
	CPI  R30,0
	BREQ _0x2040098
	ST   -Y,R16
	__GETD2N 0x0
	RCALL _send_cmd_G102
	CPI  R30,0
	BRNE _0x2040099
_0x2040098:
	RJMP _0x2040097
_0x2040099:
	RJMP _0x2040095
_0x2040097:
	LDS  R30,_timer1_G102
	CPI  R30,0
	BREQ _0x204009B
	LDI  R30,LOW(80)
	ST   -Y,R30
	__GETD2N 0x200
	RCALL _send_cmd_G102
	CPI  R30,0
	BREQ _0x204009A
_0x204009B:
	LDI  R19,LOW(0)
_0x204009A:
_0x2040092:
_0x2040082:
	STS  _card_type_G102,R19
	RCALL _release_spi_G102
	CPI  R19,0
	BREQ _0x204009D
	LDS  R30,_status_G102
	ANDI R30,0xFE
	STS  _status_G102,R30
	LDI  R30,LOW(80)
	OUT  0x2C,R30
	LDI  R30,LOW(1)
	OUT  0x2D,R30
	RJMP _0x204009E
_0x204009D:
	CBI  0x5,0
	RCALL _wait_ready_G102
	RCALL _release_spi_G102
	LDI  R30,LOW(0)
	OUT  0x2C,R30
	IN   R30,0x4
	ANDI R30,LOW(0xF0)
	OUT  0x4,R30
	IN   R30,0x5
	ANDI R30,LOW(0xF0)
	OUT  0x5,R30
	CBI  0x4,0
	LDS  R30,_status_G102
	ORI  R30,1
	STS  _status_G102,R30
_0x204009E:
_0x20E0024:
	LDS  R30,_status_G102
_0x20E0025:
	CALL __LOADLOCR4
	ADIW R28,9
	RET
_disk_status:
	ST   -Y,R26
	LD   R30,Y
	CPI  R30,0
	BREQ _0x204009F
	LDI  R30,LOW(1)
	RJMP _0x20E0023
_0x204009F:
	LDS  R30,_status_G102
_0x20E0023:
	ADIW R28,1
	RET
_disk_read:
	ST   -Y,R26
	LDD  R30,Y+7
	CPI  R30,0
	BRNE _0x20400A1
	LD   R30,Y
	CPI  R30,0
	BRNE _0x20400A0
_0x20400A1:
	LDI  R30,LOW(4)
	RJMP _0x20E0020
_0x20400A0:
	LDS  R30,_status_G102
	ANDI R30,LOW(0x1)
	BREQ _0x20400A3
	LDI  R30,LOW(3)
	RJMP _0x20E0020
_0x20400A3:
	LDS  R30,_card_type_G102
	ANDI R30,LOW(0x8)
	BRNE _0x20400A4
	__GETD1S 1
	__GETD2N 0x200
	CALL __MULD12U
	__PUTD1S 1
_0x20400A4:
	LD   R26,Y
	CPI  R26,LOW(0x1)
	BRNE _0x20400A5
	LDI  R30,LOW(81)
	ST   -Y,R30
	__GETD2S 2
	RCALL _send_cmd_G102
	CPI  R30,0
	BRNE _0x20400A7
	LDD  R30,Y+5
	LDD  R31,Y+5+1
	ST   -Y,R31
	ST   -Y,R30
	LDI  R26,LOW(512)
	LDI  R27,HIGH(512)
	RCALL _rx_datablock_G102
	CPI  R30,0
	BRNE _0x20400A8
_0x20400A7:
	RJMP _0x20400A6
_0x20400A8:
	LDI  R30,LOW(0)
	ST   Y,R30
_0x20400A6:
	RJMP _0x20400A9
_0x20400A5:
	LDI  R30,LOW(82)
	ST   -Y,R30
	__GETD2S 2
	RCALL _send_cmd_G102
	CPI  R30,0
	BRNE _0x20400AA
_0x20400AC:
	LDD  R30,Y+5
	LDD  R31,Y+5+1
	ST   -Y,R31
	ST   -Y,R30
	LDI  R26,LOW(512)
	LDI  R27,HIGH(512)
	RCALL _rx_datablock_G102
	CPI  R30,0
	BREQ _0x20400AD
	LDD  R30,Y+5
	LDD  R31,Y+5+1
	SUBI R30,LOW(-512)
	SBCI R31,HIGH(-512)
	STD  Y+5,R30
	STD  Y+5+1,R31
	LD   R30,Y
	SUBI R30,LOW(1)
	ST   Y,R30
	BRNE _0x20400AC
_0x20400AD:
	LDI  R30,LOW(76)
	ST   -Y,R30
	__GETD2N 0x0
	RCALL _send_cmd_G102
_0x20400AA:
_0x20400A9:
	RCALL _release_spi_G102
	LD   R30,Y
	CPI  R30,0
	BREQ _0x20400AF
	LDI  R30,LOW(1)
	RJMP _0x20400B0
_0x20400AF:
	LDI  R30,LOW(0)
_0x20400B0:
	RJMP _0x20E0020
_disk_write:
	ST   -Y,R26
	LDD  R30,Y+7
	CPI  R30,0
	BRNE _0x20400B3
	LD   R30,Y
	CPI  R30,0
	BRNE _0x20400B2
_0x20400B3:
	LDI  R30,LOW(4)
	RJMP _0x20E0020
_0x20400B2:
	LDS  R30,_status_G102
	ANDI R30,LOW(0x1)
	BREQ _0x20400B5
	LDI  R30,LOW(3)
	RJMP _0x20E0020
_0x20400B5:
	LDS  R30,_status_G102
	ANDI R30,LOW(0x4)
	BREQ _0x20400B6
	LDI  R30,LOW(2)
	RJMP _0x20E0020
_0x20400B6:
	LDS  R30,_card_type_G102
	ANDI R30,LOW(0x8)
	BRNE _0x20400B7
	__GETD1S 1
	__GETD2N 0x200
	CALL __MULD12U
	__PUTD1S 1
_0x20400B7:
	LD   R26,Y
	CPI  R26,LOW(0x1)
	BRNE _0x20400B8
	LDI  R30,LOW(88)
	ST   -Y,R30
	__GETD2S 2
	RCALL _send_cmd_G102
	CPI  R30,0
	BRNE _0x20400BA
	LDD  R30,Y+5
	LDD  R31,Y+5+1
	ST   -Y,R31
	ST   -Y,R30
	LDI  R26,LOW(254)
	RCALL _tx_datablock_G102
	CPI  R30,0
	BRNE _0x20400BB
_0x20400BA:
	RJMP _0x20400B9
_0x20400BB:
	LDI  R30,LOW(0)
	ST   Y,R30
_0x20400B9:
	RJMP _0x20400BC
_0x20400B8:
	LDS  R30,_card_type_G102
	ANDI R30,LOW(0x6)
	BREQ _0x20400BD
	LDI  R30,LOW(215)
	ST   -Y,R30
	LDD  R26,Y+1
	CLR  R27
	CLR  R24
	CLR  R25
	RCALL _send_cmd_G102
_0x20400BD:
	LDI  R30,LOW(89)
	ST   -Y,R30
	__GETD2S 2
	RCALL _send_cmd_G102
	CPI  R30,0
	BRNE _0x20400BE
_0x20400C0:
	LDD  R30,Y+5
	LDD  R31,Y+5+1
	ST   -Y,R31
	ST   -Y,R30
	LDI  R26,LOW(252)
	RCALL _tx_datablock_G102
	CPI  R30,0
	BREQ _0x20400C1
	LDD  R30,Y+5
	LDD  R31,Y+5+1
	SUBI R30,LOW(-512)
	SBCI R31,HIGH(-512)
	STD  Y+5,R30
	STD  Y+5+1,R31
	LD   R30,Y
	SUBI R30,LOW(1)
	ST   Y,R30
	BRNE _0x20400C0
_0x20400C1:
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
	ST   -Y,R31
	ST   -Y,R30
	LDI  R26,LOW(253)
	RCALL _tx_datablock_G102
	CPI  R30,0
	BRNE _0x20400C3
	LDI  R30,LOW(1)
	ST   Y,R30
_0x20400C3:
_0x20400BE:
_0x20400BC:
	RCALL _release_spi_G102
	LD   R30,Y
	CPI  R30,0
	BREQ _0x20400C4
	LDI  R30,LOW(1)
	RJMP _0x20400C5
_0x20400C4:
	LDI  R30,LOW(0)
_0x20400C5:
	RJMP _0x20E0020
_disk_ioctl:
	ST   -Y,R27
	ST   -Y,R26
	SBIW R28,16
	CALL __SAVELOCR6
	LDD  R30,Y+25
	CPI  R30,0
	BREQ _0x20400C7
	LDI  R30,LOW(4)
	RJMP _0x20E0022
_0x20400C7:
	LDI  R17,LOW(1)
	LDS  R30,_status_G102
	ANDI R30,LOW(0x1)
	BREQ _0x20400C8
	LDI  R30,LOW(3)
	RJMP _0x20E0022
_0x20400C8:
	__GETWRS 20,21,22
	LDD  R30,Y+24
	CPI  R30,0
	BRNE _0x20400CC
	CBI  0x5,0
	RCALL _wait_ready_G102
	CPI  R30,LOW(0xFF)
	BRNE _0x20400CD
	LDI  R17,LOW(0)
_0x20400CD:
	RJMP _0x20400CB
_0x20400CC:
	CPI  R30,LOW(0x1)
	BREQ PC+3
	JMP _0x20400CE
	LDI  R30,LOW(73)
	ST   -Y,R30
	__GETD2N 0x0
	RCALL _send_cmd_G102
	CPI  R30,0
	BRNE _0x20400D0
	MOVW R30,R28
	ADIW R30,6
	ST   -Y,R31
	ST   -Y,R30
	LDI  R26,LOW(16)
	LDI  R27,0
	RCALL _rx_datablock_G102
	CPI  R30,0
	BRNE _0x20400D1
_0x20400D0:
	RJMP _0x20400CF
_0x20400D1:
	LDD  R30,Y+6
	SWAP R30
	ANDI R30,0xF
	LSR  R30
	LSR  R30
	CPI  R30,LOW(0x1)
	BRNE _0x20400D2
	LDI  R30,0
	LDD  R31,Y+14
	LDD  R26,Y+15
	LDI  R27,0
	ADD  R30,R26
	ADC  R31,R27
	ADIW R30,1
	MOVW R18,R30
	MOVW R26,R18
	CLR  R24
	CLR  R25
	LDI  R30,LOW(10)
	RJMP _0x2040101
_0x20400D2:
	LDD  R30,Y+11
	ANDI R30,LOW(0xF)
	MOV  R26,R30
	LDD  R30,Y+16
	ANDI R30,LOW(0x80)
	ROL  R30
	LDI  R30,0
	ROL  R30
	ADD  R26,R30
	LDD  R30,Y+15
	ANDI R30,LOW(0x3)
	LSL  R30
	ADD  R30,R26
	SUBI R30,-LOW(2)
	MOV  R16,R30
	LDD  R30,Y+14
	SWAP R30
	ANDI R30,0xF
	LSR  R30
	LSR  R30
	MOV  R26,R30
	LDD  R30,Y+13
	LDI  R31,0
	CALL __LSLW2
	LDI  R27,0
	ADD  R26,R30
	ADC  R27,R31
	LDD  R30,Y+12
	ANDI R30,LOW(0x3)
	LDI  R31,0
	CALL __LSLW2
	MOV  R31,R30
	LDI  R30,0
	ADD  R30,R26
	ADC  R31,R27
	ADIW R30,1
	MOVW R18,R30
	MOVW R26,R18
	CLR  R24
	CLR  R25
	MOV  R30,R16
	SUBI R30,LOW(9)
_0x2040101:
	CALL __LSLD12
	MOVW R26,R20
	CALL __PUTDP1
	LDI  R17,LOW(0)
_0x20400CF:
	RJMP _0x20400CB
_0x20400CE:
	CPI  R30,LOW(0x2)
	BRNE _0x20400D4
	MOVW R26,R20
	LDI  R30,LOW(512)
	LDI  R31,HIGH(512)
	ST   X+,R30
	ST   X,R31
	LDI  R17,LOW(0)
	RJMP _0x20400CB
_0x20400D4:
	CPI  R30,LOW(0x3)
	BREQ PC+3
	JMP _0x20400D5
	LDS  R30,_card_type_G102
	ANDI R30,LOW(0x4)
	BREQ _0x20400D6
	LDI  R30,LOW(205)
	ST   -Y,R30
	__GETD2N 0x0
	RCALL _send_cmd_G102
	CPI  R30,0
	BRNE _0x20400D7
	LDI  R30,LOW(255)
	OUT  0x2E,R30
_0x20400D8:
	IN   R30,0x2D
	SBRS R30,7
	RJMP _0x20400D8
	MOVW R30,R28
	ADIW R30,6
	ST   -Y,R31
	ST   -Y,R30
	LDI  R26,LOW(16)
	LDI  R27,0
	RCALL _rx_datablock_G102
	CPI  R30,0
	BREQ _0x20400DB
	LDI  R16,LOW(48)
_0x20400DD:
	CPI  R16,0
	BREQ _0x20400DE
	LDI  R30,LOW(255)
	OUT  0x2E,R30
_0x20400DF:
	IN   R30,0x2D
	SBRS R30,7
	RJMP _0x20400DF
	SUBI R16,1
	RJMP _0x20400DD
_0x20400DE:
	LDD  R30,Y+16
	SWAP R30
	ANDI R30,0xF
	__GETD2N 0x10
	CALL __LSLD12
	MOVW R26,R20
	CALL __PUTDP1
	LDI  R17,LOW(0)
_0x20400DB:
_0x20400D7:
	RJMP _0x20400E2
_0x20400D6:
	LDI  R30,LOW(73)
	ST   -Y,R30
	__GETD2N 0x0
	RCALL _send_cmd_G102
	CPI  R30,0
	BRNE _0x20400E4
	MOVW R30,R28
	ADIW R30,6
	ST   -Y,R31
	ST   -Y,R30
	LDI  R26,LOW(16)
	LDI  R27,0
	RCALL _rx_datablock_G102
	CPI  R30,0
	BRNE _0x20400E5
_0x20400E4:
	RJMP _0x20400E3
_0x20400E5:
	LDS  R30,_card_type_G102
	ANDI R30,LOW(0x2)
	BREQ _0x20400E6
	LDD  R30,Y+16
	ANDI R30,LOW(0x3F)
	CLR  R31
	CLR  R22
	CLR  R23
	CALL __LSLD1
	PUSH R23
	PUSH R22
	PUSH R31
	PUSH R30
	LDD  R30,Y+17
	ANDI R30,LOW(0x80)
	CLR  R31
	CLR  R22
	CLR  R23
	MOVW R26,R30
	MOVW R24,R22
	LDI  R30,LOW(7)
	CALL __LSRD12
	POP  R26
	POP  R27
	POP  R24
	POP  R25
	CALL __ADDD12
	__ADDD1N 1
	MOVW R26,R30
	MOVW R24,R22
	LDD  R30,Y+19
	SWAP R30
	ANDI R30,0xF
	LSR  R30
	LSR  R30
	SUBI R30,LOW(1)
	CALL __LSLD12
	RJMP _0x2040102
_0x20400E6:
	LDD  R30,Y+16
	ANDI R30,LOW(0x7C)
	LSR  R30
	LSR  R30
	CLR  R31
	CLR  R22
	CLR  R23
	__ADDD1N 1
	PUSH R23
	PUSH R22
	PUSH R31
	PUSH R30
	LDD  R30,Y+17
	ANDI R30,LOW(0x3)
	CLR  R31
	CLR  R22
	CLR  R23
	MOVW R26,R30
	MOVW R24,R22
	LDI  R30,LOW(3)
	CALL __LSLD12
	MOVW R26,R30
	MOVW R24,R22
	LDD  R30,Y+17
	ANDI R30,LOW(0xE0)
	SWAP R30
	ANDI R30,0xF
	LSR  R30
	CLR  R31
	CLR  R22
	CLR  R23
	CALL __ADDD12
	__ADDD1N 1
	POP  R26
	POP  R27
	POP  R24
	POP  R25
	CALL __MULD12U
_0x2040102:
	MOVW R26,R20
	CALL __PUTDP1
	LDI  R17,LOW(0)
_0x20400E3:
_0x20400E2:
	RJMP _0x20400CB
_0x20400D5:
	CPI  R30,LOW(0xA)
	BRNE _0x20400E8
	LDS  R30,_card_type_G102
	MOVW R26,R20
	ST   X,R30
	LDI  R17,LOW(0)
	RJMP _0x20400CB
_0x20400E8:
	CPI  R30,LOW(0xB)
	BRNE _0x20400E9
	LDI  R30,LOW(73)
	ST   -Y,R30
	__GETD2N 0x0
	RCALL _send_cmd_G102
	CPI  R30,0
	BRNE _0x20400EB
	ST   -Y,R21
	ST   -Y,R20
	LDI  R26,LOW(16)
	LDI  R27,0
	RCALL _rx_datablock_G102
	CPI  R30,0
	BRNE _0x20400EC
_0x20400EB:
	RJMP _0x20400EA
_0x20400EC:
	LDI  R17,LOW(0)
_0x20400EA:
	RJMP _0x20400CB
_0x20400E9:
	CPI  R30,LOW(0xC)
	BRNE _0x20400ED
	LDI  R30,LOW(74)
	ST   -Y,R30
	__GETD2N 0x0
	RCALL _send_cmd_G102
	CPI  R30,0
	BRNE _0x20400EF
	ST   -Y,R21
	ST   -Y,R20
	LDI  R26,LOW(16)
	LDI  R27,0
	RCALL _rx_datablock_G102
	CPI  R30,0
	BRNE _0x20400F0
_0x20400EF:
	RJMP _0x20400EE
_0x20400F0:
	LDI  R17,LOW(0)
_0x20400EE:
	RJMP _0x20400CB
_0x20400ED:
	CPI  R30,LOW(0xD)
	BRNE _0x20400F1
	LDI  R30,LOW(122)
	ST   -Y,R30
	__GETD2N 0x0
	RCALL _send_cmd_G102
	CPI  R30,0
	BRNE _0x20400F2
	MOVW R26,R20
	RCALL _rx_spi4_G102
	LDI  R17,LOW(0)
_0x20400F2:
	RJMP _0x20400CB
_0x20400F1:
	CPI  R30,LOW(0xE)
	BRNE _0x20400F9
	LDI  R30,LOW(205)
	ST   -Y,R30
	__GETD2N 0x0
	RCALL _send_cmd_G102
	CPI  R30,0
	BRNE _0x20400F4
	LDI  R30,LOW(255)
	OUT  0x2E,R30
_0x20400F5:
	IN   R30,0x2D
	SBRS R30,7
	RJMP _0x20400F5
	ST   -Y,R21
	ST   -Y,R20
	LDI  R26,LOW(64)
	LDI  R27,0
	RCALL _rx_datablock_G102
	CPI  R30,0
	BREQ _0x20400F8
	LDI  R17,LOW(0)
_0x20400F8:
_0x20400F4:
	RJMP _0x20400CB
_0x20400F9:
	LDI  R17,LOW(4)
_0x20400CB:
	RCALL _release_spi_G102
	MOV  R30,R17
_0x20E0022:
	CALL __LOADLOCR6
	ADIW R28,26
	RET
_disk_timerproc:
	ST   -Y,R17
	ST   -Y,R16
	LDS  R17,_timer1_G102
	CPI  R17,0
	BREQ _0x20400FA
	SUBI R17,LOW(1)
	STS  _timer1_G102,R17
_0x20400FA:
	LDS  R17,_timer2_G102
	CPI  R17,0
	BREQ _0x20400FB
	SUBI R17,LOW(1)
	STS  _timer2_G102,R17
_0x20400FB:
	LDS  R17,_pv_S102000B000
	IN   R30,0x0
	ANDI R30,LOW(0x2)
	MOV  R26,R30
	IN   R30,0x0
	ANDI R30,LOW(0x1)
	OR   R30,R26
	STS  _pv_S102000B000,R30
	CP   R30,R17
	BRNE _0x20400FC
	LDS  R16,_status_G102
	ANDI R30,LOW(0x2)
	BREQ _0x20400FD
	ORI  R16,LOW(4)
	RJMP _0x20400FE
_0x20400FD:
	ANDI R16,LOW(251)
_0x20400FE:
	LDS  R30,_pv_S102000B000
	ANDI R30,LOW(0x1)
	BREQ _0x20400FF
	ORI  R16,LOW(3)
	RJMP _0x2040100
_0x20400FF:
	ANDI R16,LOW(253)
_0x2040100:
	STS  _status_G102,R16
_0x20400FC:
	LD   R16,Y+
	LD   R17,Y+
	RET

	.CSEG
_get_fattime:
	SBIW R28,7
	LDS  R26,_prtc_get_time
	LDS  R27,_prtc_get_time+1
	LDS  R24,_prtc_get_time+2
	LDS  R25,_prtc_get_time+3
	CALL __CPD02
	BREQ _0x2060004
	LDS  R26,_prtc_get_date
	LDS  R27,_prtc_get_date+1
	LDS  R24,_prtc_get_date+2
	LDS  R25,_prtc_get_date+3
	CALL __CPD02
	BRNE _0x2060003
_0x2060004:
	__GETD1N 0x3A210000
	RJMP _0x20E0021
_0x2060003:
	CALL SUBOPT_0x46
	CALL SUBOPT_0x53
	MOVW R26,R28
	ADIW R26,8
	__CALL1MN _prtc_get_time,0
	MOVW R30,R28
	ADIW R30,3
	CALL SUBOPT_0x207
	MOVW R26,R28
	ADIW R26,4
	__CALL1MN _prtc_get_date,0
	LD   R30,Y
	LDD  R31,Y+1
	SUBI R30,LOW(1980)
	SBCI R31,HIGH(1980)
	CLR  R22
	CLR  R23
	MOVW R26,R30
	MOVW R24,R22
	LDI  R30,LOW(25)
	CALL __LSLD12
	PUSH R23
	PUSH R22
	PUSH R31
	PUSH R30
	LDD  R30,Y+2
	CALL SUBOPT_0x27B
	MOVW R26,R30
	MOVW R24,R22
	LDI  R30,LOW(21)
	CALL __LSLD12
	POP  R26
	POP  R27
	POP  R24
	POP  R25
	CALL __ORD12
	MOVW R26,R30
	MOVW R24,R22
	LDD  R30,Y+3
	CALL SUBOPT_0x27B
	CALL __LSLD16
	CALL __ORD12
	PUSH R23
	PUSH R22
	PUSH R31
	PUSH R30
	LDD  R30,Y+6
	CALL SUBOPT_0x27B
	MOVW R26,R30
	MOVW R24,R22
	LDI  R30,LOW(11)
	CALL __LSLD12
	POP  R26
	POP  R27
	POP  R24
	POP  R25
	CALL __ORD12
	PUSH R23
	PUSH R22
	PUSH R31
	PUSH R30
	LDD  R30,Y+5
	CALL SUBOPT_0x27B
	MOVW R26,R30
	MOVW R24,R22
	LDI  R30,LOW(5)
	CALL __LSLD12
	POP  R26
	POP  R27
	POP  R24
	POP  R25
	CALL __ORD12
	MOVW R26,R30
	MOVW R24,R22
	LDD  R30,Y+4
	LDI  R31,0
	ASR  R31
	ROR  R30
	CALL __CWD1
	CALL __ORD12
_0x20E0021:
	ADIW R28,7
	RET
_mem_cpy_G103:
	CALL SUBOPT_0x6F
	__GETWRS 16,17,8
	__GETWRS 18,19,6
_0x2060006:
	LDD  R30,Y+4
	LDD  R31,Y+4+1
	SBIW R30,1
	STD  Y+4,R30
	STD  Y+4+1,R31
	ADIW R30,1
	BREQ _0x2060008
	PUSH R17
	PUSH R16
	__ADDWRN 16,17,1
	MOVW R26,R18
	__ADDWRN 18,19,1
	LD   R30,X
	POP  R26
	POP  R27
	ST   X,R30
	RJMP _0x2060006
_0x2060008:
	CALL __LOADLOCR4
	RJMP _0x20E0018
_mem_set_G103:
	CALL SUBOPT_0x71
	__GETWRS 16,17,6
_0x206000C:
	LDD  R30,Y+2
	LDD  R31,Y+2+1
	SBIW R30,1
	STD  Y+2,R30
	STD  Y+2+1,R31
	ADIW R30,1
	BREQ _0x206000E
	PUSH R17
	PUSH R16
	__ADDWRN 16,17,1
	LDD  R30,Y+4
	POP  R26
	POP  R27
	ST   X,R30
	RJMP _0x206000C
_0x206000E:
	LDD  R17,Y+1
	LDD  R16,Y+0
_0x20E0020:
	ADIW R28,8
	RET
_mem_cmp_G103:
	CALL SUBOPT_0x193
	__GETWRS 16,17,10
	__GETWRS 18,19,8
	__GETWRN 20,21,0
_0x206000F:
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	SBIW R30,1
	STD  Y+6,R30
	STD  Y+6+1,R31
	ADIW R30,1
	BREQ _0x2060012
	MOVW R26,R16
	__ADDWRN 16,17,1
	LD   R0,X
	CLR  R1
	MOVW R26,R18
	__ADDWRN 18,19,1
	LD   R26,X
	CLR  R27
	MOVW R30,R0
	SUB  R30,R26
	SBC  R31,R27
	MOVW R20,R30
	SBIW R30,0
	BREQ _0x2060013
_0x2060012:
	RJMP _0x2060011
_0x2060013:
	RJMP _0x206000F
_0x2060011:
_0x20E001F:
	MOVW R30,R20
_0x20E001E:
	CALL __LOADLOCR6
	ADIW R28,12
	RET
_chk_chrf_G103:
	ST   -Y,R27
	ST   -Y,R26
_0x2060014:
	CALL SUBOPT_0xA0
	__GETBRPF 30
	CPI  R30,0
	BREQ _0x2060017
	CALL SUBOPT_0xA0
	__GETBRPF 26
	LD   R30,Y
	LDD  R31,Y+1
	LDI  R27,0
	CP   R30,R26
	CPC  R31,R27
	BRNE _0x2060018
_0x2060017:
	RJMP _0x2060016
_0x2060018:
	MOVW R26,R28
	ADIW R26,2
	CALL SUBOPT_0x27C
	RJMP _0x2060014
_0x2060016:
	CALL SUBOPT_0xA0
	__GETBRPF 30
	LDI  R31,0
_0x20E001D:
	ADIW R28,6
	RET
_move_window_G103:
	CALL __PUTPARD2
	SBIW R28,4
	ST   -Y,R17
	LDD  R26,Y+9
	LDD  R27,Y+9+1
	ADIW R26,46
	CALL SUBOPT_0x27D
	CALL SUBOPT_0x27E
	CALL SUBOPT_0x204
	CALL __CPD12
	BRNE PC+3
	JMP _0x2060019
	LDD  R30,Y+9
	LDD  R31,Y+9+1
	LDD  R30,Z+4
	CPI  R30,0
	BREQ _0x206001A
	CALL SUBOPT_0x27F
	CPI  R30,0
	BREQ _0x206001B
	LDI  R30,LOW(1)
	RJMP _0x20E001C
_0x206001B:
	LDD  R26,Y+9
	LDD  R27,Y+9+1
	ADIW R26,4
	LDI  R30,LOW(0)
	ST   X,R30
	LDD  R30,Y+9
	LDD  R31,Y+9+1
	CALL SUBOPT_0x280
	MOVW R0,R26
	LDD  R26,Y+9
	LDD  R27,Y+9+1
	ADIW R26,26
	CALL __GETD1P
	MOVW R26,R0
	CALL __ADDD12
	CALL SUBOPT_0x204
	CALL __CPD21
	BRSH _0x206001C
	LDD  R30,Y+9
	LDD  R31,Y+9+1
	LDD  R17,Z+3
_0x206001E:
	CPI  R17,2
	BRLO _0x206001F
	LDD  R26,Y+9
	LDD  R27,Y+9+1
	ADIW R26,26
	CALL __GETD1P
	CALL SUBOPT_0x204
	CALL __ADDD12
	__PUTD1S 1
	CALL SUBOPT_0x27F
	SUBI R17,1
	RJMP _0x206001E
_0x206001F:
_0x206001C:
_0x206001A:
	CALL SUBOPT_0x27E
	CALL __CPD10
	BREQ _0x2060020
	LDD  R30,Y+9
	LDD  R31,Y+9+1
	LDD  R26,Z+1
	ST   -Y,R26
	LDD  R30,Y+10
	LDD  R31,Y+10+1
	ADIW R30,50
	CALL SUBOPT_0x281
	BREQ _0x2060021
	LDI  R30,LOW(1)
	RJMP _0x20E001C
_0x2060021:
	CALL SUBOPT_0x27E
	__PUTD1SNS 9,46
_0x2060020:
_0x2060019:
	LDI  R30,LOW(0)
_0x20E001C:
	LDD  R17,Y+0
	ADIW R28,11
	RET
_sync_G103:
	ST   -Y,R27
	ST   -Y,R26
	ST   -Y,R17
	LDD  R30,Y+1
	LDD  R31,Y+1+1
	CALL SUBOPT_0x282
	MOV  R17,R30
	CPI  R17,0
	BREQ PC+3
	JMP _0x2060022
	LDD  R26,Y+1
	LDD  R27,Y+1+1
	LD   R26,X
	CPI  R26,LOW(0x3)
	BRNE _0x2060024
	LDD  R30,Y+1
	LDD  R31,Y+1+1
	LDD  R30,Z+5
	CPI  R30,0
	BRNE _0x2060025
_0x2060024:
	RJMP _0x2060023
_0x2060025:
	LDD  R26,Y+1
	LDD  R27,Y+1+1
	ADIW R26,46
	CALL SUBOPT_0x7C
	LDD  R30,Y+1
	LDD  R31,Y+1+1
	CALL SUBOPT_0x283
	LDD  R30,Y+1
	LDD  R31,Y+1+1
	ADIW R30,50
	SUBI R30,LOW(-510)
	SBCI R31,HIGH(-510)
	LDI  R26,LOW(43605)
	LDI  R27,HIGH(43605)
	STD  Z+0,R26
	STD  Z+1,R27
	LDD  R30,Y+1
	LDD  R31,Y+1+1
	ADIW R30,50
	__GETD2N 0x41615252
	CALL SUBOPT_0x1D8
	LDD  R30,Y+1
	LDD  R31,Y+1+1
	ADIW R30,50
	SUBI R30,LOW(-484)
	SBCI R31,HIGH(-484)
	__GETD2N 0x61417272
	CALL SUBOPT_0x1D8
	LDD  R30,Y+1
	LDD  R31,Y+1+1
	ADIW R30,50
	SUBI R30,LOW(-488)
	SBCI R31,HIGH(-488)
	MOVW R0,R30
	LDD  R26,Y+1
	LDD  R27,Y+1+1
	ADIW R26,14
	CALL SUBOPT_0x284
	ADIW R30,50
	SUBI R30,LOW(-492)
	SBCI R31,HIGH(-492)
	MOVW R0,R30
	LDD  R26,Y+1
	LDD  R27,Y+1+1
	ADIW R26,10
	CALL SUBOPT_0x284
	LDD  R26,Z+1
	ST   -Y,R26
	LDD  R30,Y+2
	LDD  R31,Y+2+1
	ADIW R30,50
	ST   -Y,R31
	ST   -Y,R30
	LDD  R30,Y+4
	LDD  R31,Y+4+1
	CALL SUBOPT_0x285
	RCALL _disk_write
	LDD  R26,Y+1
	LDD  R27,Y+1+1
	ADIW R26,5
	LDI  R30,LOW(0)
	ST   X,R30
_0x2060023:
	LDD  R30,Y+1
	LDD  R31,Y+1+1
	LDD  R26,Z+1
	ST   -Y,R26
	LDI  R30,LOW(0)
	ST   -Y,R30
	LDI  R26,LOW(0)
	LDI  R27,HIGH(0)
	RCALL _disk_ioctl
	CPI  R30,0
	BREQ _0x2060026
	LDI  R17,LOW(1)
_0x2060026:
_0x2060022:
	MOV  R30,R17
_0x20E001B:
	LDD  R17,Y+0
	ADIW R28,3
	RET
_get_fat:
	CALL __PUTPARD2
	SBIW R28,4
	CALL __SAVELOCR4
	CALL SUBOPT_0xC5
	CALL SUBOPT_0x286
	BRLO _0x2060028
	LDD  R26,Y+12
	LDD  R27,Y+12+1
	ADIW R26,30
	CALL __GETD1P
	CALL SUBOPT_0xC5
	CALL __CPD21
	BRLO _0x2060027
_0x2060028:
	CALL SUBOPT_0x287
	RJMP _0x20E001A
_0x2060027:
	LDD  R26,Y+12
	LDD  R27,Y+12+1
	ADIW R26,34
	CALL SUBOPT_0x288
	LDD  R26,Y+12
	LDD  R27,Y+12+1
	LD   R30,X
	CALL SUBOPT_0x18C
	BRNE _0x206002D
	__GETWRS 18,19,8
	MOVW R30,R18
	LSR  R31
	ROR  R30
	__ADDWRR 18,19,30,31
	CALL SUBOPT_0x289
	BREQ _0x206002E
	RJMP _0x206002C
_0x206002E:
	CALL SUBOPT_0x28A
	LD   R16,X
	CLR  R17
	__ADDWRN 18,19,1
	CALL SUBOPT_0x289
	BREQ _0x206002F
	RJMP _0x206002C
_0x206002F:
	CALL SUBOPT_0x28A
	LD   R30,X
	MOV  R31,R30
	LDI  R30,0
	__ORWRR 16,17,30,31
	LDD  R30,Y+8
	ANDI R30,LOW(0x1)
	BREQ _0x2060030
	MOVW R30,R16
	CALL __LSRW4
	RJMP _0x206022B
_0x2060030:
	MOVW R30,R16
	ANDI R31,HIGH(0xFFF)
_0x206022B:
	CLR  R22
	CLR  R23
	RJMP _0x20E001A
_0x206002D:
	CPI  R30,LOW(0x2)
	LDI  R26,HIGH(0x2)
	CPC  R31,R26
	BRNE _0x2060033
	CALL SUBOPT_0x28B
	CALL SUBOPT_0x28C
	CALL SUBOPT_0x28D
	BRNE _0x206002C
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	LDI  R30,LOW(2)
	CALL SUBOPT_0x28E
	ADD  R26,R30
	ADC  R27,R31
	CALL SUBOPT_0x1C
	RJMP _0x20E001A
_0x2060033:
	CPI  R30,LOW(0x3)
	LDI  R26,HIGH(0x3)
	CPC  R31,R26
	BRNE _0x206002C
	CALL SUBOPT_0x28B
	CALL SUBOPT_0x28F
	CALL SUBOPT_0x28D
	BRNE _0x206002C
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	LDI  R30,LOW(4)
	CALL SUBOPT_0x28E
	CALL SUBOPT_0x19
	__ANDD1N 0xFFFFFFF
	RJMP _0x20E001A
_0x206002C:
	CALL SUBOPT_0x23
_0x20E001A:
	CALL __LOADLOCR4
	ADIW R28,14
	RET
_put_fat:
	CALL __PUTPARD2
	SBIW R28,4
	CALL __SAVELOCR6
	CALL SUBOPT_0x1D7
	CALL SUBOPT_0x286
	BRLO _0x2060038
	LDD  R26,Y+18
	LDD  R27,Y+18+1
	ADIW R26,30
	CALL __GETD1P
	CALL SUBOPT_0x1D7
	CALL __CPD21
	BRLO _0x2060037
_0x2060038:
	LDI  R21,LOW(2)
	RJMP _0x206003A
_0x2060037:
	LDD  R26,Y+18
	LDD  R27,Y+18+1
	ADIW R26,34
	CALL __GETD1P
	CALL SUBOPT_0xA3
	LDD  R26,Y+18
	LDD  R27,Y+18+1
	LD   R30,X
	CALL SUBOPT_0x18C
	BREQ PC+3
	JMP _0x206003E
	__GETWRS 16,17,14
	MOVW R30,R16
	LSR  R31
	ROR  R30
	__ADDWRR 16,17,30,31
	CALL SUBOPT_0x21B
	CALL SUBOPT_0x290
	BREQ _0x206003F
	RJMP _0x206003D
_0x206003F:
	CALL SUBOPT_0x291
	BREQ _0x2060040
	MOVW R26,R18
	LD   R30,X
	ANDI R30,LOW(0xF)
	MOV  R26,R30
	LDD  R30,Y+10
	LDI  R31,0
	CALL __LSLW4
	OR   R30,R26
	RJMP _0x2060041
_0x2060040:
	LDD  R30,Y+10
_0x2060041:
	MOVW R26,R18
	ST   X,R30
	__ADDWRN 16,17,1
	LDD  R26,Y+18
	LDD  R27,Y+18+1
	ADIW R26,4
	LDI  R30,LOW(1)
	ST   X,R30
	CALL SUBOPT_0x21B
	CALL SUBOPT_0x290
	BREQ _0x2060043
	RJMP _0x206003D
_0x2060043:
	CALL SUBOPT_0x291
	BREQ _0x2060044
	CALL SUBOPT_0x42
	LDI  R30,LOW(4)
	CALL __LSRD12
	CLR  R31
	CLR  R22
	CLR  R23
	RJMP _0x2060045
_0x2060044:
	MOVW R26,R18
	LD   R30,X
	ANDI R30,LOW(0xF0)
	MOV  R1,R30
	CALL SUBOPT_0x42
	LDI  R30,LOW(8)
	CALL __LSRD12
	CLR  R31
	CLR  R22
	CLR  R23
	ANDI R30,LOW(0xF)
	OR   R30,R1
_0x2060045:
	MOVW R26,R18
	ST   X,R30
	RJMP _0x206003D
_0x206003E:
	CPI  R30,LOW(0x2)
	LDI  R26,HIGH(0x2)
	CPC  R31,R26
	BRNE _0x2060047
	CALL SUBOPT_0x21B
	CALL SUBOPT_0x292
	CALL SUBOPT_0x28C
	CALL SUBOPT_0x293
	BRNE _0x206003D
	LDD  R26,Y+14
	LDD  R27,Y+14+1
	LDI  R30,LOW(2)
	CALL SUBOPT_0x294
	ADD  R30,R26
	ADC  R31,R27
	LDD  R26,Y+10
	LDD  R27,Y+10+1
	STD  Z+0,R26
	STD  Z+1,R27
	RJMP _0x206003D
_0x2060047:
	CPI  R30,LOW(0x3)
	LDI  R26,HIGH(0x3)
	CPC  R31,R26
	BRNE _0x206004B
	CALL SUBOPT_0x21B
	CALL SUBOPT_0x292
	CALL SUBOPT_0x28F
	CALL SUBOPT_0x293
	BRNE _0x206003D
	LDD  R26,Y+14
	LDD  R27,Y+14+1
	LDI  R30,LOW(4)
	CALL SUBOPT_0x294
	CALL SUBOPT_0x1D3
	RJMP _0x206003D
_0x206004B:
	LDI  R21,LOW(2)
_0x206003D:
	LDD  R26,Y+18
	LDD  R27,Y+18+1
	ADIW R26,4
	LDI  R30,LOW(1)
	ST   X,R30
_0x206003A:
	MOV  R30,R21
	CALL __LOADLOCR6
	ADIW R28,20
	RET
_remove_chain_G103:
	CALL __PUTPARD2
	SBIW R28,4
	ST   -Y,R17
	CALL SUBOPT_0x295
	CALL SUBOPT_0x286
	BRLO _0x206004D
	CALL SUBOPT_0x296
	BRLO _0x206004C
_0x206004D:
	LDI  R17,LOW(2)
	RJMP _0x206004F
_0x206004C:
	LDI  R17,LOW(0)
_0x2060050:
	CALL SUBOPT_0x296
	BRSH _0x2060052
	CALL SUBOPT_0x17E
	CALL SUBOPT_0x57
	RCALL _get_fat
	__PUTD1S 1
	CALL SUBOPT_0x297
	CALL __CPD10
	BREQ _0x2060052
	CALL SUBOPT_0x204
	CALL SUBOPT_0x298
	BRNE _0x2060054
	LDI  R17,LOW(2)
	RJMP _0x2060052
_0x2060054:
	CALL SUBOPT_0x204
	CALL SUBOPT_0x2B
	BRNE _0x2060055
	LDI  R17,LOW(1)
	RJMP _0x2060052
_0x2060055:
	CALL SUBOPT_0x17E
	CALL SUBOPT_0x31
	CALL SUBOPT_0x299
	RCALL _put_fat
	MOV  R17,R30
	CPI  R17,0
	BRNE _0x2060052
	LDD  R30,Y+9
	LDD  R31,Y+9+1
	CALL SUBOPT_0x29A
	BREQ _0x2060057
	LDD  R26,Y+9
	LDD  R27,Y+9+1
	ADIW R26,14
	CALL SUBOPT_0x80
	LDD  R26,Y+9
	LDD  R27,Y+9+1
	ADIW R26,5
	LDI  R30,LOW(1)
	ST   X,R30
_0x2060057:
	CALL SUBOPT_0x297
	CALL SUBOPT_0x29B
	RJMP _0x2060050
_0x2060052:
_0x206004F:
	MOV  R30,R17
	LDD  R17,Y+0
	RJMP _0x20E0016
_create_chain_G103:
	CALL __PUTPARD2
	SBIW R28,16
	LDD  R26,Y+20
	LDD  R27,Y+20+1
	ADIW R26,30
	CALL __GETD1P
	CALL SUBOPT_0x8D
	CALL SUBOPT_0xA
	CALL __CPD10
	BRNE _0x2060058
	LDD  R26,Y+20
	LDD  R27,Y+20+1
	ADIW R26,10
	CALL SUBOPT_0x288
	CALL SUBOPT_0x96
	CALL __CPD02
	BREQ _0x206005A
	CALL SUBOPT_0x75
	CALL SUBOPT_0x96
	CALL __CPD21
	BRLO _0x2060059
_0x206005A:
	CALL SUBOPT_0x287
	CALL SUBOPT_0x95
_0x2060059:
	RJMP _0x206005C
_0x2060058:
	CALL SUBOPT_0x29C
	CALL SUBOPT_0x29D
	RCALL _get_fat
	CALL SUBOPT_0xD6
	CALL SUBOPT_0x9
	CALL SUBOPT_0x286
	BRSH _0x206005D
	CALL SUBOPT_0x287
	RJMP _0x20E0019
_0x206005D:
	CALL SUBOPT_0x75
	CALL SUBOPT_0x9
	CALL __CPD21
	BRSH _0x206005E
	CALL SUBOPT_0xC6
	RJMP _0x20E0019
_0x206005E:
	CALL SUBOPT_0xA
	CALL SUBOPT_0x95
_0x206005C:
	CALL SUBOPT_0x77
	CALL SUBOPT_0x23C
_0x2060060:
	CALL SUBOPT_0x3E
	CALL SUBOPT_0xA9
	CALL SUBOPT_0x23C
	CALL SUBOPT_0x75
	CALL SUBOPT_0xC5
	CALL __CPD21
	BRLO _0x2060062
	CALL SUBOPT_0x29E
	CALL SUBOPT_0x23C
	CALL SUBOPT_0x29F
	BRSH _0x2060063
	CALL SUBOPT_0x2A0
	RJMP _0x20E0019
_0x2060063:
_0x2060062:
	CALL SUBOPT_0x29C
	CALL SUBOPT_0x42
	RCALL _get_fat
	CALL SUBOPT_0xD8
	CALL __CPD10
	BREQ _0x2060061
	CALL SUBOPT_0x4C
	BREQ _0x2060066
	CALL SUBOPT_0x9
	CALL SUBOPT_0x298
	BRNE _0x2060065
_0x2060066:
	CALL SUBOPT_0xC6
	RJMP _0x20E0019
_0x2060065:
	CALL SUBOPT_0x29F
	BRNE _0x2060068
	CALL SUBOPT_0x2A0
	RJMP _0x20E0019
_0x2060068:
	RJMP _0x2060060
_0x2060061:
	CALL SUBOPT_0x29C
	CALL SUBOPT_0xC2
	CALL __PUTPARD1
	__GETD2N 0xFFFFFFF
	RCALL _put_fat
	CPI  R30,0
	BREQ _0x2060069
	CALL SUBOPT_0x23
	RJMP _0x20E0019
_0x2060069:
	CALL SUBOPT_0xA
	CALL __CPD10
	BREQ _0x206006A
	CALL SUBOPT_0x29C
	CALL SUBOPT_0xC1
	CALL __PUTPARD1
	CALL SUBOPT_0x1D7
	RCALL _put_fat
	CPI  R30,0
	BREQ _0x206006B
	CALL SUBOPT_0x23
	RJMP _0x20E0019
_0x206006B:
_0x206006A:
	CALL SUBOPT_0x3E
	__PUTD1SNS 20,10
	LDD  R30,Y+20
	LDD  R31,Y+20+1
	CALL SUBOPT_0x29A
	BREQ _0x206006C
	LDD  R26,Y+20
	LDD  R27,Y+20+1
	ADIW R26,14
	CALL __GETD1P_INC
	SBIW R30,1
	SBCI R22,0
	SBCI R23,0
	CALL __PUTDP1_DEC
	LDD  R26,Y+20
	LDD  R27,Y+20+1
	ADIW R26,5
	LDI  R30,LOW(1)
	ST   X,R30
_0x206006C:
	CALL SUBOPT_0x3E
_0x20E0019:
	ADIW R28,22
	RET
_clust2sect:
	CALL __PUTPARD2
	CALL SUBOPT_0x75
	__SUBD1N 2
	CALL SUBOPT_0x8D
	LDD  R30,Y+4
	LDD  R31,Y+4+1
	__GETD2Z 30
	CALL SUBOPT_0x29E
	CALL SUBOPT_0xAD
	CALL SUBOPT_0x7A
	CALL __CPD21
	BRLO _0x206006D
	CALL SUBOPT_0x2A0
	RJMP _0x20E0012
_0x206006D:
	LDD  R30,Y+4
	LDD  R31,Y+4+1
	CALL SUBOPT_0x203
	CALL SUBOPT_0x7A
	CALL SUBOPT_0x205
	PUSH R23
	PUSH R22
	PUSH R31
	PUSH R30
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	ADIW R26,42
	CALL __GETD1P
	POP  R26
	POP  R27
	POP  R24
	POP  R25
	CALL __ADDD12
	RJMP _0x20E0012
_dir_seek_G103:
	CALL SUBOPT_0xDA
	ST   -Y,R16
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	__PUTW1SNS 8,4
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	ADIW R26,6
	CALL __GETD1P
	CALL SUBOPT_0xDB
	CALL SUBOPT_0x298
	BREQ _0x206006F
	CALL SUBOPT_0x2A1
	CALL SUBOPT_0x2A2
	BRLO _0x206006E
_0x206006F:
	LDI  R30,LOW(2)
	RJMP _0x20E0017
_0x206006E:
	CALL SUBOPT_0x1BC
	BRNE _0x2060072
	CALL SUBOPT_0x2A1
	LD   R26,Z
	CPI  R26,LOW(0x3)
	BREQ _0x2060073
_0x2060072:
	RJMP _0x2060071
_0x2060073:
	CALL SUBOPT_0x2A1
	ADIW R30,38
	MOVW R26,R30
	CALL __GETD1P
	CALL SUBOPT_0x9F
_0x2060071:
	CALL SUBOPT_0x1BC
	BRNE _0x2060074
	CALL SUBOPT_0x2A3
	ADIW R30,8
	MOVW R26,R30
	CALL SUBOPT_0x16B
	BRLO _0x2060075
	LDI  R30,LOW(2)
	RJMP _0x20E0017
_0x2060075:
	CALL SUBOPT_0x2A1
	ADIW R30,38
	MOVW R26,R30
	CALL __GETD1P
	RJMP _0x206022C
_0x2060074:
	CALL SUBOPT_0x2A1
	LDD  R30,Z+2
	LDI  R26,LOW(16)
	MUL  R30,R26
	MOVW R16,R0
_0x2060077:
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	CP   R26,R16
	CPC  R27,R17
	BRLO _0x2060079
	CALL SUBOPT_0x2A1
	ST   -Y,R31
	ST   -Y,R30
	CALL SUBOPT_0x96
	RCALL _get_fat
	CALL SUBOPT_0xDB
	CALL SUBOPT_0x2B
	BRNE _0x206007A
	LDI  R30,LOW(1)
	RJMP _0x20E0017
_0x206007A:
	CALL SUBOPT_0xA1
	CALL SUBOPT_0x286
	BRLO _0x206007C
	CALL SUBOPT_0x2A1
	CALL SUBOPT_0x2A2
	BRLO _0x206007B
_0x206007C:
	LDI  R30,LOW(2)
	RJMP _0x20E0017
_0x206007B:
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	SUB  R30,R16
	SBC  R31,R17
	STD  Y+6,R30
	STD  Y+6+1,R31
	RJMP _0x2060077
_0x2060079:
	CALL SUBOPT_0x2A3
	ST   -Y,R31
	ST   -Y,R30
	CALL SUBOPT_0x96
	RCALL _clust2sect
_0x206022C:
	MOVW R26,R30
	MOVW R24,R22
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	CALL __LSRW4
	CALL SUBOPT_0x2A4
	__PUTD1SNS 8,14
	CALL SUBOPT_0x2A1
	ADIW R30,50
	MOVW R26,R30
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	CALL SUBOPT_0x2A5
	__PUTW1SNS 8,18
	LDI  R30,LOW(0)
_0x20E0017:
	LDD  R17,Y+1
	LDD  R16,Y+0
_0x20E0018:
	ADIW R28,10
	RET
_dir_next_G103:
	ST   -Y,R26
	SBIW R28,4
	CALL __SAVELOCR4
	LDD  R26,Y+9
	LDD  R27,Y+9+1
	ADIW R26,4
	CALL __GETW1P
	ADIW R30,1
	MOVW R16,R30
	MOV  R0,R16
	OR   R0,R17
	BREQ _0x206007F
	LDD  R26,Y+9
	LDD  R27,Y+9+1
	ADIW R26,14
	CALL SUBOPT_0x2A6
	BRNE _0x206007E
_0x206007F:
	LDI  R30,LOW(4)
	RJMP _0x20E0015
_0x206007E:
	MOVW R30,R16
	ANDI R30,LOW(0xF)
	BREQ PC+3
	JMP _0x2060081
	LDD  R26,Y+9
	LDD  R27,Y+9+1
	ADIW R26,14
	CALL SUBOPT_0x80
	LDD  R26,Y+9
	LDD  R27,Y+9+1
	ADIW R26,10
	CALL SUBOPT_0x2A6
	BRNE _0x2060082
	CALL SUBOPT_0x2A7
	ADIW R30,8
	MOVW R26,R30
	CALL SUBOPT_0x19B
	BRLO _0x2060083
	LDI  R30,LOW(4)
	RJMP _0x20E0015
_0x2060083:
	RJMP _0x2060084
_0x2060082:
	MOVW R30,R16
	CALL __LSRW4
	MOVW R0,R30
	CALL SUBOPT_0x2A7
	CALL SUBOPT_0x203
	SBIW R30,1
	AND  R30,R0
	AND  R31,R1
	SBIW R30,0
	BREQ PC+3
	JMP _0x2060085
	CALL SUBOPT_0x2A7
	CALL SUBOPT_0x2A8
	RCALL _get_fat
	CALL SUBOPT_0x95
	CALL SUBOPT_0x96
	CALL SUBOPT_0x286
	BRSH _0x2060086
	LDI  R30,LOW(2)
	RJMP _0x20E0015
_0x2060086:
	CALL SUBOPT_0x96
	CALL SUBOPT_0x2B
	BRNE _0x2060087
	LDI  R30,LOW(1)
	RJMP _0x20E0015
_0x2060087:
	CALL SUBOPT_0x2A7
	CALL SUBOPT_0x2A9
	CALL SUBOPT_0x96
	CALL __CPD21
	BRSH PC+3
	JMP _0x2060088
	LDD  R30,Y+8
	CPI  R30,0
	BRNE _0x2060089
	LDI  R30,LOW(4)
	RJMP _0x20E0015
_0x2060089:
	CALL SUBOPT_0x2A7
	CALL SUBOPT_0x2A8
	RCALL _create_chain_G103
	CALL SUBOPT_0x9B
	CALL __CPD10
	BRNE _0x206008A
	LDI  R30,LOW(7)
	RJMP _0x20E0015
_0x206008A:
	CALL SUBOPT_0x96
	CALL SUBOPT_0x298
	BRNE _0x206008B
	LDI  R30,LOW(2)
	RJMP _0x20E0015
_0x206008B:
	CALL SUBOPT_0x96
	CALL SUBOPT_0x2B
	BRNE _0x206008C
	LDI  R30,LOW(1)
	RJMP _0x20E0015
_0x206008C:
	CALL SUBOPT_0x2A7
	CALL SUBOPT_0x282
	CPI  R30,0
	BREQ _0x206008D
	LDI  R30,LOW(1)
	RJMP _0x20E0015
_0x206008D:
	CALL SUBOPT_0x2A7
	CALL SUBOPT_0x283
	CALL SUBOPT_0x2A7
	MOVW R26,R30
	ADIW R30,46
	PUSH R31
	PUSH R30
	MOVW R30,R26
	CALL SUBOPT_0x2AA
	POP  R26
	POP  R27
	CALL __PUTDP1
	LDI  R19,LOW(0)
_0x206008F:
	CALL SUBOPT_0x2A7
	LDD  R30,Z+2
	CP   R19,R30
	BRSH _0x2060090
	CALL SUBOPT_0x2A7
	ADIW R30,4
	LDI  R26,LOW(1)
	STD  Z+0,R26
	CALL SUBOPT_0x2A7
	CALL SUBOPT_0x282
	CPI  R30,0
	BREQ _0x2060091
	LDI  R30,LOW(1)
	RJMP _0x20E0015
_0x2060091:
	CALL SUBOPT_0x2A7
	ADIW R30,46
	MOVW R26,R30
	CALL SUBOPT_0x80
	SBIW R30,1
	SBCI R22,0
	SBCI R23,0
	SUBI R19,-1
	RJMP _0x206008F
_0x2060090:
	CALL SUBOPT_0x2A7
	ADIW R30,46
	PUSH R31
	PUSH R30
	MOVW R26,R30
	CALL __GETD1P
	MOVW R26,R30
	MOVW R24,R22
	MOV  R30,R19
	CALL SUBOPT_0x27B
	CALL SUBOPT_0xAD
	POP  R26
	POP  R27
	CALL __PUTDP1
_0x2060088:
	CALL SUBOPT_0x77
	__PUTD1SNS 9,10
	CALL SUBOPT_0x2A7
	CALL SUBOPT_0x2AA
	__PUTD1SNS 9,14
_0x2060085:
_0x2060084:
_0x2060081:
	MOVW R30,R16
	__PUTW1SNS 9,4
	CALL SUBOPT_0x2A7
	ADIW R30,50
	MOVW R26,R30
	MOVW R30,R16
	CALL SUBOPT_0x2A5
	__PUTW1SNS 9,18
	LDI  R30,LOW(0)
_0x20E0015:
	CALL __LOADLOCR4
_0x20E0016:
	ADIW R28,11
	RET
_dir_find_G103:
	CALL SUBOPT_0x6F
	LDD  R30,Y+4
	LDD  R31,Y+4+1
	CALL SUBOPT_0xDF
	RCALL _dir_seek_G103
	MOV  R17,R30
	CPI  R17,0
	BREQ _0x2060092
	MOV  R30,R17
	CALL __LOADLOCR4
	RJMP _0x20E0012
_0x2060092:
_0x2060094:
	CALL SUBOPT_0x2AB
	BRNE _0x2060095
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	ADIW R26,18
	LD   R18,X+
	LD   R19,X
	MOVW R26,R18
	LD   R16,X
	CPI  R16,0
	BRNE _0x2060097
	LDI  R17,LOW(4)
	RJMP _0x2060095
_0x2060097:
	MOVW R30,R18
	LDD  R30,Z+11
	ANDI R30,LOW(0x8)
	BRNE _0x2060099
	CALL SUBOPT_0x2AC
	RCALL _mem_cmp_G103
	SBIW R30,0
	BREQ _0x206009A
_0x2060099:
	RJMP _0x2060098
_0x206009A:
	RJMP _0x2060095
_0x2060098:
	CALL SUBOPT_0x21F
	LDI  R26,LOW(0)
	RCALL _dir_next_G103
	MOV  R17,R30
	CPI  R17,0
	BREQ _0x2060094
_0x2060095:
	MOV  R30,R17
	CALL __LOADLOCR4
	RJMP _0x20E0012
_dir_register_G103:
	CALL SUBOPT_0x6F
	LDD  R30,Y+4
	LDD  R31,Y+4+1
	CALL SUBOPT_0xDF
	RCALL _dir_seek_G103
	MOV  R17,R30
	CPI  R17,0
	BRNE _0x20600A7
_0x20600A9:
	CALL SUBOPT_0x2AB
	BRNE _0x20600AA
	LDD  R30,Y+4
	LDD  R31,Y+4+1
	LDD  R26,Z+18
	LDD  R27,Z+19
	LD   R16,X
	CPI  R16,229
	BREQ _0x20600AD
	CPI  R16,0
	BRNE _0x20600AC
_0x20600AD:
	RJMP _0x20600AA
_0x20600AC:
	CALL SUBOPT_0x21F
	LDI  R26,LOW(1)
	RCALL _dir_next_G103
	MOV  R17,R30
	CPI  R17,0
	BREQ _0x20600A9
_0x20600AA:
_0x20600A7:
	CPI  R17,0
	BRNE _0x20600AF
	CALL SUBOPT_0x2AB
	BRNE _0x20600B0
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	ADIW R26,18
	LD   R18,X+
	LD   R19,X
	ST   -Y,R19
	ST   -Y,R18
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
	ST   -Y,R31
	ST   -Y,R30
	LDI  R26,LOW(32)
	LDI  R27,0
	RCALL _mem_set_G103
	CALL SUBOPT_0x2AC
	RCALL _mem_cpy_G103
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	ADIW R26,20
	CALL __GETW1P
	LDD  R30,Z+11
	ANDI R30,LOW(0x18)
	__PUTB1RNS 18,12
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	CALL __GETW1P
	ADIW R30,4
	LDI  R26,LOW(1)
	STD  Z+0,R26
_0x20600B0:
_0x20600AF:
	MOV  R30,R17
	CALL __LOADLOCR4
	RJMP _0x20E0012
_create_name_G103:
	ST   -Y,R27
	ST   -Y,R26
	SBIW R28,5
	CALL __SAVELOCR6
	LDD  R26,Y+13
	LDD  R27,Y+13+1
	ADIW R26,20
	LD   R20,X+
	LD   R21,X
	ST   -Y,R21
	ST   -Y,R20
	LDI  R30,LOW(32)
	LDI  R31,HIGH(32)
	ST   -Y,R31
	ST   -Y,R30
	CALL SUBOPT_0x38
	RCALL _mem_set_G103
	LDI  R30,LOW(0)
	STD  Y+8,R30
	STD  Y+8+1,R30
	MOV  R17,R30
	MOV  R18,R30
	LDI  R30,LOW(8)
	STD  Y+10,R30
	LDD  R26,Y+11
	LDD  R27,Y+11+1
	CALL SUBOPT_0x27A
	LDD  R30,Y+8
	LDD  R31,Y+8+1
	CALL SUBOPT_0x2AD
	LD   R26,X
	CPI  R26,LOW(0x2E)
	BRNE _0x20600B3
_0x20600B5:
	CALL SUBOPT_0x70
	CALL SUBOPT_0x2AD
	LD   R16,X
	CPI  R16,46
	BRNE _0x20600B8
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	SBIW R26,3
	BRLT _0x20600B7
_0x20600B8:
	RJMP _0x20600B6
_0x20600B7:
	CALL SUBOPT_0x2AE
	RJMP _0x20600B5
_0x20600B6:
	CPI  R16,47
	BREQ _0x20600BB
	CPI  R16,92
	BREQ _0x20600BB
	CPI  R16,33
	BRSH _0x20600BC
_0x20600BB:
	RJMP _0x20600BA
_0x20600BC:
	LDI  R30,LOW(6)
	RJMP _0x20E0013
_0x20600BA:
	LDD  R30,Y+8
	LDD  R31,Y+8+1
	CALL SUBOPT_0x25E
	LDD  R26,Y+11
	LDD  R27,Y+11+1
	ST   X+,R30
	ST   X,R31
	CPI  R16,33
	BRSH _0x20600BD
	LDI  R30,LOW(36)
	RJMP _0x20600BE
_0x20600BD:
	LDI  R30,LOW(32)
_0x20600BE:
	__PUTB1RNS 20,11
	RJMP _0x20E0014
_0x20600B3:
_0x20600C1:
	CALL SUBOPT_0x70
	CALL SUBOPT_0x2AD
	LD   R16,X
	CPI  R16,33
	BRLO _0x20600C4
	CPI  R16,47
	BREQ _0x20600C4
	CPI  R16,92
	BRNE _0x20600C3
_0x20600C4:
	RJMP _0x20600C2
_0x20600C3:
	CPI  R16,46
	BREQ _0x20600C7
	LDD  R30,Y+10
	CP   R18,R30
	BRLO _0x20600C6
_0x20600C7:
	LDD  R26,Y+10
	CPI  R26,LOW(0x8)
	BRNE _0x20600CA
	CPI  R16,46
	BREQ _0x20600C9
_0x20600CA:
	LDI  R30,LOW(6)
	RJMP _0x20E0013
_0x20600C9:
	LDI  R18,LOW(8)
	LDI  R30,LOW(11)
	STD  Y+10,R30
	LSL  R17
	LSL  R17
	RJMP _0x20600C0
_0x20600C6:
	CPI  R16,128
	BRLO _0x20600CC
	ORI  R17,LOW(3)
	LDI  R30,LOW(6)
	RJMP _0x20E0013
_0x20600CC:
	__POINTD1FN _k1,0
	CALL __PUTPARD1
	MOV  R26,R16
	CLR  R27
	RCALL _chk_chrf_G103
	SBIW R30,0
	BREQ _0x20600D2
	LDI  R30,LOW(6)
	RJMP _0x20E0013
_0x20600D2:
	CPI  R16,65
	BRLO _0x20600D4
	CPI  R16,91
	BRLO _0x20600D5
_0x20600D4:
	RJMP _0x20600D3
_0x20600D5:
	ORI  R17,LOW(2)
	RJMP _0x20600D6
_0x20600D3:
	CPI  R16,97
	BRLO _0x20600D8
	CPI  R16,123
	BRLO _0x20600D9
_0x20600D8:
	RJMP _0x20600D7
_0x20600D9:
	ORI  R17,LOW(1)
	SUBI R16,LOW(32)
_0x20600D7:
_0x20600D6:
	CALL SUBOPT_0x2AE
_0x20600C0:
	RJMP _0x20600C1
_0x20600C2:
	LDD  R30,Y+8
	LDD  R31,Y+8+1
	CALL SUBOPT_0x25E
	LDD  R26,Y+11
	LDD  R27,Y+11+1
	ST   X+,R30
	ST   X,R31
	CPI  R16,33
	BRSH _0x20600DA
	LDI  R30,LOW(4)
	RJMP _0x20600DB
_0x20600DA:
	LDI  R30,LOW(0)
_0x20600DB:
	MOV  R16,R30
	CPI  R18,0
	BRNE _0x20600DD
	LDI  R30,LOW(6)
	RJMP _0x20E0013
_0x20600DD:
	MOVW R26,R20
	LD   R26,X
	CPI  R26,LOW(0xE5)
	BRNE _0x20600DE
	MOVW R26,R20
	LDI  R30,LOW(5)
	ST   X,R30
_0x20600DE:
	LDD  R26,Y+10
	CPI  R26,LOW(0x8)
	BRNE _0x20600DF
	LSL  R17
	LSL  R17
_0x20600DF:
	MOV  R30,R17
	ANDI R30,LOW(0x3)
	CPI  R30,LOW(0x1)
	BRNE _0x20600E0
	ORI  R16,LOW(16)
_0x20600E0:
	MOV  R30,R17
	ANDI R30,LOW(0xC)
	CPI  R30,LOW(0x4)
	BRNE _0x20600E1
	ORI  R16,LOW(8)
_0x20600E1:
	MOVW R30,R20
	__PUTBZR 16,11
_0x20E0014:
	LDI  R30,LOW(0)
_0x20E0013:
	CALL __LOADLOCR6
	ADIW R28,15
	RET
_follow_path_G103:
	CALL SUBOPT_0x6F
_0x20600F7:
	LDI  R30,LOW(1)
	CPI  R30,0
	BREQ _0x20600FA
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	LD   R26,X
	CPI  R26,LOW(0x20)
	BREQ _0x20600FB
_0x20600FA:
	RJMP _0x20600F9
_0x20600FB:
	LDD  R30,Y+4
	LDD  R31,Y+4+1
	ADIW R30,1
	STD  Y+4,R30
	STD  Y+4+1,R31
	RJMP _0x20600F7
_0x20600F9:
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	LD   R26,X
	CPI  R26,LOW(0x2F)
	BREQ _0x20600FD
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	LD   R26,X
	CPI  R26,LOW(0x5C)
	BRNE _0x20600FC
_0x20600FD:
	LDD  R30,Y+4
	LDD  R31,Y+4+1
	ADIW R30,1
	STD  Y+4,R30
	STD  Y+4+1,R31
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	ADIW R26,6
	CALL SUBOPT_0x7C
	RJMP _0x20600FF
_0x20600FC:
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	CALL __GETW1P
	ADIW R30,22
	MOVW R26,R30
	CALL __GETD1P
	CALL SUBOPT_0x2B0
_0x20600FF:
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	LD   R26,X
	CLR  R27
	SBIW R26,32
	BRSH _0x2060100
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	CALL SUBOPT_0xDF
	RCALL _dir_seek_G103
	MOV  R17,R30
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	ADIW R26,18
	CALL SUBOPT_0xFC
	RJMP _0x2060101
_0x2060100:
_0x2060103:
	CALL SUBOPT_0x144
	MOVW R26,R28
	ADIW R26,6
	RCALL _create_name_G103
	MOV  R17,R30
	CPI  R17,0
	BRNE _0x2060104
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	RCALL _dir_find_G103
	MOV  R17,R30
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	ADIW R26,20
	CALL __GETW1P
	LDD  R30,Z+11
	ANDI R30,LOW(0x4)
	MOV  R16,R30
	CPI  R17,0
	BREQ _0x2060106
	CPI  R17,4
	BRNE _0x2060108
	CPI  R16,0
	BREQ _0x2060109
_0x2060108:
	RJMP _0x2060107
_0x2060109:
	LDI  R17,LOW(5)
_0x2060107:
	RJMP _0x2060104
_0x2060106:
	CPI  R16,0
	BRNE _0x2060104
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	ADIW R26,18
	LD   R18,X+
	LD   R19,X
	MOVW R30,R18
	LDD  R30,Z+11
	ANDI R30,LOW(0x10)
	BRNE _0x206010B
	LDI  R17,LOW(5)
	RJMP _0x2060104
_0x206010B:
	CALL SUBOPT_0x2B1
	CALL __LSLD16
	PUSH R23
	PUSH R22
	PUSH R31
	PUSH R30
	CALL SUBOPT_0x2B2
	POP  R26
	POP  R27
	POP  R24
	POP  R25
	CALL SUBOPT_0x2B3
	CALL SUBOPT_0x2B0
	RJMP _0x2060103
_0x2060104:
_0x2060101:
	MOV  R30,R17
	CALL __LOADLOCR4
	ADIW R28,8
	RET
_check_fs_G103:
	CALL __PUTPARD2
	LDD  R30,Y+4
	LDD  R31,Y+4+1
	LDD  R26,Z+1
	ST   -Y,R26
	LDD  R30,Y+5
	LDD  R31,Y+5+1
	ADIW R30,50
	ST   -Y,R31
	ST   -Y,R30
	__GETD1S 3
	CALL SUBOPT_0x2B4
	BREQ _0x206010C
	LDI  R30,LOW(3)
	RJMP _0x20E0012
_0x206010C:
	LDD  R30,Y+4
	LDD  R31,Y+4+1
	CALL SUBOPT_0x2B5
	BREQ _0x206010D
	LDI  R30,LOW(2)
	RJMP _0x20E0012
_0x206010D:
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	SUBI R26,LOW(-104)
	SBCI R27,HIGH(-104)
	CALL SUBOPT_0x2B6
	BRNE _0x206010E
	LDI  R30,LOW(0)
	RJMP _0x20E0012
_0x206010E:
	LDD  R30,Y+4
	LDD  R31,Y+4+1
	ADIW R30,50
	SUBI R30,LOW(-82)
	SBCI R31,HIGH(-82)
	MOVW R26,R30
	CALL SUBOPT_0x2B6
	BRNE _0x206010F
	LDI  R30,LOW(0)
	RJMP _0x20E0012
_0x206010F:
	LDI  R30,LOW(1)
_0x20E0012:
	ADIW R28,6
	RET
_chk_mounted:
	ST   -Y,R26
	SBIW R28,20
	CALL __SAVELOCR6
	LDD  R26,Y+29
	LDD  R27,Y+29+1
	CALL __GETW1P
	STD  Y+8,R30
	STD  Y+8+1,R31
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	LD   R30,X
	SUBI R30,LOW(48)
	MOV  R16,R30
	CPI  R16,10
	BRSH _0x2060111
	ADIW R26,1
	LD   R26,X
	CPI  R26,LOW(0x3A)
	BREQ _0x2060112
_0x2060111:
	RJMP _0x2060110
_0x2060112:
	LDD  R30,Y+8
	LDD  R31,Y+8+1
	ADIW R30,2
	CALL SUBOPT_0x17C
	LDD  R26,Y+29
	LDD  R27,Y+29+1
	ST   X+,R30
	ST   X,R31
	RJMP _0x2060113
_0x2060110:
	LDS  R16,_Drive_G103
_0x2060113:
	CPI  R16,1
	BRLO _0x2060114
	LDI  R30,LOW(11)
	RJMP _0x20E0010
_0x2060114:
	MOV  R30,R16
	CALL SUBOPT_0x2B7
	CALL SUBOPT_0x25D
	STD  Y+6,R30
	STD  Y+6+1,R31
	LDD  R26,Y+27
	LDD  R27,Y+27+1
	ST   X+,R30
	ST   X,R31
	SBIW R30,0
	BRNE _0x2060115
	LDI  R30,LOW(12)
	RJMP _0x20E0010
_0x2060115:
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	LD   R30,X
	CPI  R30,0
	BREQ _0x2060116
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	LDD  R26,Z+1
	CALL _disk_status
	MOV  R21,R30
	SBRC R21,0
	RJMP _0x2060117
	LDD  R30,Y+26
	CPI  R30,0
	BREQ _0x2060119
	SBRC R21,2
	RJMP _0x206011A
_0x2060119:
	RJMP _0x2060118
_0x206011A:
	LDI  R30,LOW(10)
	RJMP _0x20E0010
_0x2060118:
	RJMP _0x20E0011
_0x2060117:
_0x2060116:
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	LDI  R30,LOW(0)
	ST   X,R30
	MOV  R30,R16
	__PUTB1SNS 6,1
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	LDD  R26,Z+1
	CALL _disk_initialize
	MOV  R21,R30
	SBRS R21,0
	RJMP _0x206011B
	LDI  R30,LOW(3)
	RJMP _0x20E0010
_0x206011B:
	LDD  R30,Y+26
	CPI  R30,0
	BREQ _0x206011D
	SBRC R21,2
	RJMP _0x206011E
_0x206011D:
	RJMP _0x206011C
_0x206011E:
	LDI  R30,LOW(10)
	RJMP _0x20E0010
_0x206011C:
	CALL SUBOPT_0x144
	CALL SUBOPT_0x2A0
	CALL SUBOPT_0x23F
	MOVW R26,R30
	MOVW R24,R22
	RCALL _check_fs_G103
	MOV  R17,R30
	CPI  R17,1
	BRNE _0x206011F
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	ADIW R30,50
	SUBI R30,LOW(-446)
	SBCI R31,HIGH(-446)
	MOVW R18,R30
	MOVW R30,R18
	LDD  R30,Z+4
	CPI  R30,0
	BREQ _0x2060120
	MOVW R26,R18
	ADIW R26,8
	CALL __GETD1P
	CALL SUBOPT_0xAE
	CALL SUBOPT_0x144
	__GETD2S 24
	RCALL _check_fs_G103
	MOV  R17,R30
_0x2060120:
_0x206011F:
	CPI  R17,3
	BRNE _0x2060121
	LDI  R30,LOW(1)
	RJMP _0x20E0010
_0x2060121:
	CPI  R17,0
	BRNE _0x2060123
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	ADIW R26,61
	CALL __GETW1P
	CPI  R30,LOW(0x200)
	LDI  R26,HIGH(0x200)
	CPC  R31,R26
	BREQ _0x2060122
_0x2060123:
	LDI  R30,LOW(13)
	RJMP _0x20E0010
_0x2060122:
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	SUBI R26,LOW(-72)
	SBCI R27,HIGH(-72)
	CALL SUBOPT_0x1C
	CALL SUBOPT_0x2B8
	CALL SUBOPT_0xC1
	CALL __CPD10
	BRNE _0x2060125
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	SUBI R26,LOW(-86)
	SBCI R27,HIGH(-86)
	CALL __GETD1P
	CALL SUBOPT_0x2B8
_0x2060125:
	CALL SUBOPT_0xC1
	__PUTD1SNS 6,26
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	SUBI R30,LOW(-66)
	SBCI R31,HIGH(-66)
	LD   R30,Z
	__PUTB1SNS 6,3
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	LDD  R30,Z+3
	LDI  R31,0
	CALL SUBOPT_0x29D
	CALL SUBOPT_0x205
	CALL SUBOPT_0x2B8
	CALL SUBOPT_0x2B9
	CALL SUBOPT_0xBF
	CALL SUBOPT_0x2A4
	__PUTD1SNS 6,34
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	LDD  R30,Z+63
	__PUTB1SNS 6,2
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	SUBI R26,LOW(-67)
	SBCI R27,HIGH(-67)
	CALL __GETW1P
	__PUTW1SNS 6,8
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	SUBI R26,LOW(-69)
	SBCI R27,HIGH(-69)
	CALL SUBOPT_0x1C
	CALL SUBOPT_0x1D6
	CALL SUBOPT_0x50
	CALL __CPD10
	BRNE _0x2060126
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	SUBI R26,LOW(-82)
	SBCI R27,HIGH(-82)
	CALL __GETD1P
	CALL SUBOPT_0x1D6
_0x2060126:
	CALL SUBOPT_0x2B9
	CALL SUBOPT_0x1D7
	CLR  R22
	CLR  R23
	CALL SUBOPT_0xAD
	CALL SUBOPT_0x29D
	CALL __SUBD12
	PUSH R23
	PUSH R22
	PUSH R31
	PUSH R30
	CALL SUBOPT_0x2BA
	POP  R26
	POP  R27
	POP  R24
	POP  R25
	CLR  R22
	CLR  R23
	CALL __SUBD21
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	CALL SUBOPT_0x203
	CALL __CWD1
	CALL __DIVD21U
	__ADDD1N 2
	CALL SUBOPT_0x1D2
	__PUTD1SNS 6,30
	LDI  R17,LOW(1)
	CALL SUBOPT_0x42
	__CPD2N 0xFF7
	BRLO _0x2060127
	LDI  R17,LOW(2)
_0x2060127:
	CALL SUBOPT_0x42
	__CPD2N 0xFFF7
	BRLO _0x2060128
	LDI  R17,LOW(3)
_0x2060128:
	CPI  R17,3
	BRNE _0x2060129
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	SUBI R26,LOW(-94)
	SBCI R27,HIGH(-94)
	CALL __GETD1P
	RJMP _0x206022D
_0x2060129:
	CALL SUBOPT_0x2BB
_0x206022D:
	__PUTD1SNS 6,38
	CALL SUBOPT_0x2BB
	PUSH R23
	PUSH R22
	PUSH R31
	PUSH R30
	CALL SUBOPT_0x2BA
	POP  R26
	POP  R27
	POP  R24
	POP  R25
	CALL SUBOPT_0x2A4
	__PUTD1SNS 6,42
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	ADIW R26,14
	CALL SUBOPT_0x23
	CALL __PUTDP1
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	ADIW R26,4
	LDI  R30,LOW(0)
	ST   X,R30
	CPI  R17,3
	BREQ PC+3
	JMP _0x206012B
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	ADIW R26,5
	ST   X,R30
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	SUBI R26,LOW(-98)
	SBCI R27,HIGH(-98)
	CALL __GETW1P
	CALL SUBOPT_0xBF
	CALL SUBOPT_0x2A4
	__PUTD1SNS 6,18
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	LDD  R26,Z+1
	ST   -Y,R26
	LDD  R30,Y+7
	LDD  R31,Y+7+1
	ADIW R30,50
	ST   -Y,R31
	ST   -Y,R30
	LDD  R30,Y+9
	LDD  R31,Y+9+1
	CALL SUBOPT_0x285
	CALL _disk_read
	CPI  R30,0
	BRNE _0x206012D
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	CALL SUBOPT_0x2B5
	BRNE _0x206012D
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	ADIW R26,50
	CALL __GETD1P
	__CPD1N 0x41615252
	BRNE _0x206012D
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	ADIW R30,50
	SUBI R30,LOW(-484)
	SBCI R31,HIGH(-484)
	MOVW R26,R30
	CALL __GETD1P
	__CPD1N 0x61417272
	BREQ _0x206012E
_0x206012D:
	RJMP _0x206012C
_0x206012E:
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	ADIW R30,50
	SUBI R30,LOW(-492)
	SBCI R31,HIGH(-492)
	MOVW R26,R30
	CALL __GETD1P
	__PUTD1SNS 6,10
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	ADIW R30,50
	SUBI R30,LOW(-488)
	SBCI R31,HIGH(-488)
	MOVW R26,R30
	CALL __GETD1P
	__PUTD1SNS 6,14
_0x206012C:
_0x206012B:
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	ST   X,R17
	ADIW R26,46
	CALL SUBOPT_0x7C
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	ADIW R26,22
	CALL SUBOPT_0x7C
	LDI  R26,LOW(_Fsid_G103)
	LDI  R27,HIGH(_Fsid_G103)
	CALL SUBOPT_0x6E
	__PUTW1SNS 6,6
_0x20E0011:
	LDI  R30,LOW(0)
_0x20E0010:
	CALL __LOADLOCR6
	ADIW R28,31
	RET
_validate_G103:
	CALL SUBOPT_0x1F7
	SBIW R30,0
	BREQ _0x2060130
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	LD   R30,X
	CPI  R30,0
	BREQ _0x2060130
	LDD  R30,Y+2
	LDD  R31,Y+2+1
	LDD  R26,Z+6
	LDD  R27,Z+7
	LD   R30,Y
	LDD  R31,Y+1
	CP   R30,R26
	CPC  R31,R27
	BREQ _0x206012F
_0x2060130:
	LDI  R30,LOW(9)
	RJMP _0x20E000F
_0x206012F:
	LDD  R30,Y+2
	LDD  R31,Y+2+1
	LDD  R26,Z+1
	CALL _disk_status
	ANDI R30,LOW(0x1)
	BREQ _0x2060132
	LDI  R30,LOW(3)
	RJMP _0x20E000F
_0x2060132:
	LDI  R30,LOW(0)
_0x20E000F:
	ADIW R28,4
	RET
_f_mount:
	CALL SUBOPT_0x71
	LDD  R26,Y+4
	CPI  R26,LOW(0x1)
	BRLO _0x2060133
	LDI  R30,LOW(11)
	RJMP _0x20E000E
_0x2060133:
	LDD  R30,Y+4
	CALL SUBOPT_0x2B7
	ADD  R26,R30
	ADC  R27,R31
	LD   R16,X+
	LD   R17,X
	MOV  R0,R16
	OR   R0,R17
	BREQ _0x2060134
	MOVW R26,R16
	LDI  R30,LOW(0)
	ST   X,R30
_0x2060134:
	LDD  R30,Y+2
	LDD  R31,Y+2+1
	SBIW R30,0
	BREQ _0x2060135
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	LDI  R30,LOW(0)
	ST   X,R30
_0x2060135:
	LDD  R30,Y+4
	CALL SUBOPT_0x2B7
	ADD  R30,R26
	ADC  R31,R27
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	STD  Z+0,R26
	STD  Z+1,R27
	LDI  R30,LOW(0)
_0x20E000E:
	LDD  R17,Y+1
	LDD  R16,Y+0
	ADIW R28,5
	RET
_f_open:
	ST   -Y,R26
	SBIW R28,34
	CALL __SAVELOCR4
	LDD  R26,Y+41
	LDD  R27,Y+41+1
	CALL SUBOPT_0xFC
	LDD  R30,Y+38
	ANDI R30,LOW(0x1F)
	STD  Y+38,R30
	MOVW R30,R28
	ADIW R30,39
	ST   -Y,R31
	ST   -Y,R30
	CALL SUBOPT_0x5C
	LDD  R30,Y+42
	ANDI R30,LOW(0x1E)
	MOV  R26,R30
	RCALL _chk_mounted
	MOV  R17,R30
	CPI  R17,0
	BREQ _0x2060136
	MOV  R30,R17
	RJMP _0x20E000D
_0x2060136:
	MOVW R30,R28
	ADIW R30,4
	STD  Y+36,R30
	STD  Y+36+1,R31
	CALL SUBOPT_0x4D
	LDD  R26,Y+41
	LDD  R27,Y+41+1
	RCALL _follow_path_G103
	MOV  R17,R30
	LDD  R30,Y+38
	ANDI R30,LOW(0x1C)
	BRNE PC+3
	JMP _0x2060137
	SBIW R28,8
	CPI  R17,0
	BREQ _0x2060138
	CPI  R17,4
	BRNE _0x2060139
	MOVW R26,R28
	ADIW R26,24
	RCALL _dir_register_G103
	MOV  R17,R30
_0x2060139:
	CPI  R17,0
	BREQ _0x206013A
	MOV  R30,R17
	ADIW R28,8
	RJMP _0x20E000D
_0x206013A:
	LDD  R30,Y+46
	ORI  R30,8
	STD  Y+46,R30
	__GETWRS 18,19,42
	RJMP _0x206013B
_0x2060138:
	LDD  R30,Y+46
	ANDI R30,LOW(0x4)
	BREQ _0x206013C
	LDI  R30,LOW(8)
	ADIW R28,8
	RJMP _0x20E000D
_0x206013C:
	__GETWRS 18,19,42
	MOV  R0,R18
	OR   R0,R19
	BREQ _0x206013E
	MOVW R30,R18
	LDD  R30,Z+11
	ANDI R30,LOW(0x11)
	BREQ _0x206013D
_0x206013E:
	LDI  R30,LOW(7)
	ADIW R28,8
	RJMP _0x20E000D
_0x206013D:
	LDD  R30,Y+46
	ANDI R30,LOW(0x8)
	BRNE PC+3
	JMP _0x2060140
	CALL SUBOPT_0x2B1
	CALL __LSLD16
	PUSH R23
	PUSH R22
	PUSH R31
	PUSH R30
	CALL SUBOPT_0x2B2
	POP  R26
	POP  R27
	POP  R24
	POP  R25
	CALL SUBOPT_0x2B3
	CALL SUBOPT_0x8D
	MOVW R30,R18
	ADIW R30,20
	LDI  R26,LOW(0)
	LDI  R27,HIGH(0)
	STD  Z+0,R26
	STD  Z+1,R27
	MOVW R30,R18
	ADIW R30,26
	STD  Z+0,R26
	STD  Z+1,R27
	MOVW R30,R18
	ADIW R30,28
	CALL SUBOPT_0x299
	CALL SUBOPT_0x1D8
	LDD  R26,Y+24
	LDD  R27,Y+24+1
	ADIW R26,4
	LDI  R30,LOW(1)
	ST   X,R30
	LDD  R26,Y+24
	LDD  R27,Y+24+1
	ADIW R26,46
	CALL SUBOPT_0x288
	CALL SUBOPT_0x75
	CALL __CPD10
	BREQ _0x2060141
	CALL SUBOPT_0x213
	CALL SUBOPT_0xA1
	RCALL _remove_chain_G103
	MOV  R17,R30
	CPI  R17,0
	BREQ _0x2060142
	MOV  R30,R17
	ADIW R28,8
	RJMP _0x20E000D
_0x2060142:
	CALL SUBOPT_0x75
	CALL SUBOPT_0xC7
	__PUTD1SNS 24,10
_0x2060141:
	CALL SUBOPT_0x213
	CALL SUBOPT_0x49
	CALL SUBOPT_0x2BC
	BREQ _0x2060143
	MOV  R30,R17
	ADIW R28,8
	RJMP _0x20E000D
_0x2060143:
_0x2060140:
_0x206013B:
	LDD  R30,Y+46
	ANDI R30,LOW(0x8)
	BREQ _0x2060144
	MOVW R30,R18
	ADIW R30,11
	LDI  R26,LOW(0)
	STD  Z+0,R26
	CALL _get_fattime
	CALL SUBOPT_0x9B
	__PUTD1RNS 18,14
	LDD  R26,Y+24
	LDD  R27,Y+24+1
	ADIW R26,4
	LDI  R30,LOW(1)
	ST   X,R30
	LDD  R30,Y+46
	ORI  R30,0x20
	STD  Y+46,R30
_0x2060144:
	ADIW R28,8
	RJMP _0x2060145
_0x2060137:
	CPI  R17,0
	BREQ _0x2060146
	MOV  R30,R17
	RJMP _0x20E000D
_0x2060146:
	__GETWRS 18,19,34
	MOV  R0,R18
	OR   R0,R19
	BREQ _0x2060148
	MOVW R30,R18
	LDD  R30,Z+11
	ANDI R30,LOW(0x10)
	BREQ _0x2060147
_0x2060148:
	LDI  R30,LOW(4)
	RJMP _0x20E000D
_0x2060147:
	LDD  R30,Y+38
	ANDI R30,LOW(0x2)
	BREQ _0x206014B
	MOVW R30,R18
	LDD  R30,Z+11
	ANDI R30,LOW(0x1)
	BRNE _0x206014C
_0x206014B:
	RJMP _0x206014A
_0x206014C:
	LDI  R30,LOW(7)
	RJMP _0x20E000D
_0x206014A:
_0x2060145:
	LDD  R26,Y+16
	LDD  R27,Y+16+1
	ADIW R26,46
	CALL __GETD1P
	__PUTD1SNS 41,26
	LDD  R30,Y+34
	LDD  R31,Y+34+1
	__PUTW1SNS 41,30
	LDD  R30,Y+38
	__PUTB1SNS 41,4
	CALL SUBOPT_0x2B1
	CALL __LSLD16
	PUSH R23
	PUSH R22
	PUSH R31
	PUSH R30
	CALL SUBOPT_0x2B2
	POP  R26
	POP  R27
	POP  R24
	POP  R25
	CALL SUBOPT_0x2B3
	__PUTD1SNS 41,14
	MOVW R26,R18
	ADIW R26,28
	CALL __GETD1P
	__PUTD1SNS 41,10
	LDD  R26,Y+41
	LDD  R27,Y+41+1
	ADIW R26,6
	CALL SUBOPT_0x7C
	LDD  R26,Y+41
	LDD  R27,Y+41+1
	ADIW R26,5
	LDI  R30,LOW(255)
	ST   X,R30
	LDD  R26,Y+41
	LDD  R27,Y+41+1
	ADIW R26,22
	CALL SUBOPT_0x7C
	LDD  R30,Y+16
	LDD  R31,Y+16+1
	LDD  R26,Y+41
	LDD  R27,Y+41+1
	ST   X+,R30
	ST   X,R31
	LDD  R26,Y+16
	LDD  R27,Y+16+1
	ADIW R26,6
	CALL __GETW1P
	__PUTW1SNS 41,2
	LDI  R30,LOW(0)
_0x20E000D:
	CALL __LOADLOCR4
	ADIW R28,43
	RET
_f_read:
	ST   -Y,R27
	ST   -Y,R26
	SBIW R28,14
	CALL __SAVELOCR6
	LDD  R30,Y+24
	LDD  R31,Y+24+1
	STD  Y+6,R30
	STD  Y+6+1,R31
	LDD  R26,Y+20
	LDD  R27,Y+20+1
	CALL SUBOPT_0xFC
	CALL SUBOPT_0x2BD
	CALL SUBOPT_0x2BE
	CALL SUBOPT_0x2BF
	BREQ _0x206014D
	MOV  R30,R17
	RJMP _0x20E000C
_0x206014D:
	LDD  R30,Y+26
	LDD  R31,Y+26+1
	LDD  R26,Z+4
	ANDI R26,LOW(0x80)
	BREQ _0x206014E
	LDI  R30,LOW(2)
	RJMP _0x20E000C
_0x206014E:
	LDD  R30,Y+26
	LDD  R31,Y+26+1
	LDD  R26,Z+4
	ANDI R26,LOW(0x1)
	BRNE _0x206014F
	LDI  R30,LOW(7)
	RJMP _0x20E000C
_0x206014F:
	LDD  R30,Y+26
	LDD  R31,Y+26+1
	__GETD2Z 10
	PUSH R25
	PUSH R24
	PUSH R27
	PUSH R26
	CALL SUBOPT_0x2C0
	POP  R30
	POP  R31
	POP  R22
	POP  R23
	CALL __SUBD12
	CALL SUBOPT_0x23C
	CALL SUBOPT_0x3E
	LDD  R26,Y+22
	LDD  R27,Y+22+1
	CLR  R24
	CLR  R25
	CALL __CPD12
	BRSH _0x2060150
	LDD  R30,Y+8
	LDD  R31,Y+8+1
	STD  Y+22,R30
	STD  Y+22+1,R31
_0x2060150:
_0x2060152:
	LDD  R30,Y+22
	LDD  R31,Y+22+1
	SBIW R30,0
	BRNE PC+3
	JMP _0x2060153
	CALL SUBOPT_0x2C0
	CALL SUBOPT_0x2C1
	BREQ PC+3
	JMP _0x2060154
	LDD  R30,Y+26
	LDD  R31,Y+26+1
	LDD  R0,Z+5
	CALL SUBOPT_0x2BD
	LDD  R30,Z+2
	CP   R0,R30
	BRLO _0x2060155
	CALL SUBOPT_0x2C0
	CALL __CPD02
	BRNE _0x2060156
	LDD  R26,Y+26
	LDD  R27,Y+26+1
	ADIW R26,14
	CALL __GETD1P
	RJMP _0x2060157
_0x2060156:
	CALL SUBOPT_0x2BD
	CALL SUBOPT_0x2BE
	CALL SUBOPT_0x2C2
	CALL _get_fat
_0x2060157:
	CALL SUBOPT_0x23D
	CALL SUBOPT_0x292
	CALL SUBOPT_0x286
	BRSH _0x2060159
	CALL SUBOPT_0x2C3
	LDI  R30,LOW(2)
	RJMP _0x20E000C
_0x2060159:
	CALL SUBOPT_0x292
	CALL SUBOPT_0x2B
	BRNE _0x206015A
	CALL SUBOPT_0x2C3
	LDI  R30,LOW(1)
	RJMP _0x20E000C
_0x206015A:
	CALL SUBOPT_0xA
	__PUTD1SNS 26,18
	LDD  R26,Y+26
	LDD  R27,Y+26+1
	ADIW R26,5
	LDI  R30,LOW(0)
	ST   X,R30
_0x2060155:
	CALL SUBOPT_0x2BD
	CALL SUBOPT_0x2BE
	CALL SUBOPT_0x2C2
	RCALL _clust2sect
	CALL SUBOPT_0xD8
	CALL __CPD10
	BRNE _0x206015B
	CALL SUBOPT_0x2C3
	LDI  R30,LOW(2)
	RJMP _0x20E000C
_0x206015B:
	CALL SUBOPT_0x2C4
	CALL SUBOPT_0x9
	CALL SUBOPT_0x9A
	CALL SUBOPT_0xD6
	LDD  R26,Y+22
	LDD  R27,Y+22+1
	CALL SUBOPT_0x2C5
	BRNE PC+3
	JMP _0x206015C
	LDD  R30,Y+26
	LDD  R31,Y+26+1
	LDD  R30,Z+5
	CALL SUBOPT_0x2AF
	MOVW R0,R30
	CALL SUBOPT_0x2BD
	LDD  R30,Z+2
	CALL SUBOPT_0x192
	BRSH _0x206015D
	CALL SUBOPT_0x2BD
	CALL SUBOPT_0x203
	MOVW R26,R30
	CALL SUBOPT_0x2C4
	SUB  R26,R30
	SBC  R27,R31
	MOVW R20,R26
_0x206015D:
	CALL SUBOPT_0x2BD
	CALL SUBOPT_0x2C6
	__GETD1S 15
	CALL __PUTPARD1
	MOV  R26,R20
	CALL _disk_read
	CPI  R30,0
	BREQ _0x206015E
	CALL SUBOPT_0x2C3
	LDI  R30,LOW(1)
	RJMP _0x20E000C
_0x206015E:
	LDD  R30,Y+26
	LDD  R31,Y+26+1
	LDD  R26,Z+4
	ANDI R26,LOW(0x40)
	BREQ _0x2060160
	CALL SUBOPT_0x2C7
	CALL SUBOPT_0x2C8
	BRLO _0x2060161
_0x2060160:
	RJMP _0x206015F
_0x2060161:
	CALL SUBOPT_0x2C7
	CALL SUBOPT_0x2C9
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	CLR  R24
	CLR  R25
	CALL SUBOPT_0x1B
	LDD  R30,Y+28
	LDD  R31,Y+28+1
	ADIW R30,32
	ST   -Y,R31
	ST   -Y,R30
	LDI  R26,LOW(512)
	LDI  R27,HIGH(512)
	CALL _mem_cpy_G103
_0x206015F:
	LDD  R26,Y+26
	LDD  R27,Y+26+1
	CALL SUBOPT_0x2CA
	RJMP _0x2060151
_0x206015C:
	LDD  R30,Y+26
	LDD  R31,Y+26+1
	LDD  R26,Z+4
	ANDI R26,LOW(0x40)
	BREQ _0x2060162
	CALL SUBOPT_0x2BD
	CALL SUBOPT_0x2CB
	LDD  R30,Y+29
	LDD  R31,Y+29+1
	CALL SUBOPT_0x2CC
	BREQ _0x2060163
	CALL SUBOPT_0x2C3
	LDI  R30,LOW(1)
	RJMP _0x20E000C
_0x2060163:
	LDD  R26,Y+26
	LDD  R27,Y+26+1
	CALL SUBOPT_0x2CD
_0x2060162:
	CALL SUBOPT_0x2C7
	CALL __CPD12
	BREQ _0x2060164
	CALL SUBOPT_0x2BD
	CALL SUBOPT_0x2CB
	__GETD1S 15
	CALL SUBOPT_0x2B4
	BREQ _0x2060165
	CALL SUBOPT_0x2C3
	LDI  R30,LOW(1)
	RJMP _0x20E000C
_0x2060165:
_0x2060164:
	CALL SUBOPT_0xC6
	__PUTD1SNS 26,22
	LDD  R26,Y+26
	LDD  R27,Y+26+1
	CALL SUBOPT_0x2CE
_0x2060154:
	LDD  R26,Y+26
	LDD  R27,Y+26+1
	CALL SUBOPT_0x2CF
	LDI  R26,LOW(512)
	LDI  R27,HIGH(512)
	SUB  R26,R30
	SBC  R27,R31
	MOVW R18,R26
	LDD  R30,Y+22
	LDD  R31,Y+22+1
	CP   R30,R18
	CPC  R31,R19
	BRSH _0x2060166
	__GETWRS 18,19,22
_0x2060166:
	CALL SUBOPT_0x144
	LDD  R26,Y+28
	LDD  R27,Y+28+1
	CALL SUBOPT_0x2CF
	LDD  R26,Y+28
	LDD  R27,Y+28+1
	ADIW R26,32
	CALL SUBOPT_0x1B
	MOVW R26,R18
	CALL _mem_cpy_G103
_0x2060151:
	MOVW R30,R18
	CALL SUBOPT_0x191
	LDD  R30,Y+26
	LDD  R31,Y+26+1
	CALL SUBOPT_0x2D0
	MOVW R26,R0
	CALL __PUTDP1
	LDD  R26,Y+20
	LDD  R27,Y+20+1
	CALL SUBOPT_0x2D1
	LDD  R30,Y+22
	LDD  R31,Y+22+1
	SUB  R30,R18
	SBC  R31,R19
	STD  Y+22,R30
	STD  Y+22+1,R31
	RJMP _0x2060152
_0x2060153:
	LDI  R30,LOW(0)
_0x20E000C:
	CALL __LOADLOCR6
	ADIW R28,28
	RET
_f_write:
	ST   -Y,R27
	ST   -Y,R26
	SBIW R28,10
	CALL __SAVELOCR6
	LDD  R30,Y+20
	LDD  R31,Y+20+1
	STD  Y+6,R30
	STD  Y+6+1,R31
	LDD  R26,Y+16
	LDD  R27,Y+16+1
	CALL SUBOPT_0xFC
	CALL SUBOPT_0x2D2
	CALL SUBOPT_0x2D3
	CALL SUBOPT_0x2BF
	BREQ _0x2060167
	MOV  R30,R17
	RJMP _0x20E000B
_0x2060167:
	LDD  R30,Y+22
	LDD  R31,Y+22+1
	LDD  R26,Z+4
	ANDI R26,LOW(0x80)
	BREQ _0x2060168
	LDI  R30,LOW(2)
	RJMP _0x20E000B
_0x2060168:
	LDD  R30,Y+22
	LDD  R31,Y+22+1
	LDD  R26,Z+4
	ANDI R26,LOW(0x2)
	BRNE _0x2060169
	LDI  R30,LOW(7)
	RJMP _0x20E000B
_0x2060169:
	LDD  R30,Y+22
	LDD  R31,Y+22+1
	__GETD2Z 10
	LDD  R30,Y+18
	LDD  R31,Y+18+1
	CALL SUBOPT_0x2A4
	PUSH R23
	PUSH R22
	PUSH R31
	PUSH R30
	CALL SUBOPT_0x2D4
	POP  R26
	POP  R27
	POP  R24
	POP  R25
	CALL __CPD21
	BRSH _0x206016A
	LDI  R30,LOW(0)
	STD  Y+18,R30
	STD  Y+18+1,R30
_0x206016A:
_0x206016C:
	LDD  R30,Y+18
	LDD  R31,Y+18+1
	SBIW R30,0
	BRNE PC+3
	JMP _0x206016D
	CALL SUBOPT_0x2D5
	CALL SUBOPT_0x2C1
	BREQ PC+3
	JMP _0x206016E
	LDD  R30,Y+22
	LDD  R31,Y+22+1
	LDD  R0,Z+5
	CALL SUBOPT_0x2D2
	LDD  R30,Z+2
	CP   R0,R30
	BRSH PC+3
	JMP _0x206016F
	LDD  R26,Y+22
	LDD  R27,Y+22+1
	ADIW R26,6
	CALL SUBOPT_0x2A6
	BRNE _0x2060170
	LDD  R26,Y+22
	LDD  R27,Y+22+1
	ADIW R26,14
	CALL __GETD1P
	CALL SUBOPT_0xD8
	CALL __CPD10
	BRNE _0x2060171
	CALL SUBOPT_0x2D2
	CALL SUBOPT_0x2D6
	CALL SUBOPT_0xD6
	__PUTD1SNS 22,14
_0x2060171:
	RJMP _0x2060172
_0x2060170:
	CALL SUBOPT_0x2D2
	CALL SUBOPT_0x2D3
	CALL SUBOPT_0x2C2
	CALL _create_chain_G103
	CALL SUBOPT_0xD6
_0x2060172:
	CALL SUBOPT_0xC6
	CALL __CPD10
	BRNE _0x2060173
	RJMP _0x206016D
_0x2060173:
	CALL SUBOPT_0x9
	CALL SUBOPT_0x298
	BRNE _0x2060174
	CALL SUBOPT_0x2D7
	LDI  R30,LOW(2)
	RJMP _0x20E000B
_0x2060174:
	CALL SUBOPT_0x4C
	BRNE _0x2060175
	CALL SUBOPT_0x2D7
	LDI  R30,LOW(1)
	RJMP _0x20E000B
_0x2060175:
	CALL SUBOPT_0xC6
	__PUTD1SNS 22,18
	LDD  R26,Y+22
	LDD  R27,Y+22+1
	ADIW R26,5
	LDI  R30,LOW(0)
	ST   X,R30
_0x206016F:
	LDD  R30,Y+22
	LDD  R31,Y+22+1
	LDD  R26,Z+4
	ANDI R26,LOW(0x40)
	BREQ _0x2060176
	CALL SUBOPT_0x2D2
	CALL SUBOPT_0x2D8
	LDD  R30,Y+25
	LDD  R31,Y+25+1
	CALL SUBOPT_0x2CC
	BREQ _0x2060177
	CALL SUBOPT_0x2D7
	LDI  R30,LOW(1)
	RJMP _0x20E000B
_0x2060177:
	LDD  R26,Y+22
	LDD  R27,Y+22+1
	CALL SUBOPT_0x2CD
_0x2060176:
	CALL SUBOPT_0x2D2
	CALL SUBOPT_0x2D3
	CALL SUBOPT_0x2C2
	CALL _clust2sect
	CALL SUBOPT_0x23C
	CALL SUBOPT_0x3E
	CALL __CPD10
	BRNE _0x2060178
	CALL SUBOPT_0x2D7
	LDI  R30,LOW(2)
	RJMP _0x20E000B
_0x2060178:
	CALL SUBOPT_0x2D9
	CALL SUBOPT_0xC5
	CALL SUBOPT_0x9A
	CALL SUBOPT_0x23C
	LDD  R26,Y+18
	LDD  R27,Y+18+1
	CALL SUBOPT_0x2C5
	BRNE PC+3
	JMP _0x2060179
	LDD  R30,Y+22
	LDD  R31,Y+22+1
	LDD  R30,Z+5
	CALL SUBOPT_0x2AF
	MOVW R0,R30
	CALL SUBOPT_0x2D2
	LDD  R30,Z+2
	CALL SUBOPT_0x192
	BRSH _0x206017A
	CALL SUBOPT_0x2D2
	CALL SUBOPT_0x203
	MOVW R26,R30
	CALL SUBOPT_0x2D9
	SUB  R26,R30
	SBC  R27,R31
	MOVW R20,R26
_0x206017A:
	CALL SUBOPT_0x2D2
	CALL SUBOPT_0x2C6
	CALL SUBOPT_0x54
	MOV  R26,R20
	CALL _disk_write
	CPI  R30,0
	BREQ _0x206017B
	CALL SUBOPT_0x2D7
	LDI  R30,LOW(1)
	RJMP _0x20E000B
_0x206017B:
	CALL SUBOPT_0x2DA
	CALL SUBOPT_0x2C8
	BRSH _0x206017C
	LDD  R30,Y+22
	LDD  R31,Y+22+1
	ADIW R30,32
	CALL SUBOPT_0x2D3
	__GETD2Z 22
	CALL SUBOPT_0xC2
	CALL SUBOPT_0x2C9
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	CLR  R24
	CLR  R25
	CALL SUBOPT_0x1B
	LDI  R26,LOW(512)
	LDI  R27,HIGH(512)
	CALL _mem_cpy_G103
	LDD  R26,Y+22
	LDD  R27,Y+22+1
	CALL SUBOPT_0x2CD
_0x206017C:
	LDD  R26,Y+22
	LDD  R27,Y+22+1
	CALL SUBOPT_0x2CA
	RJMP _0x206016B
_0x2060179:
	CALL SUBOPT_0x2DA
	CALL __CPD12
	BREQ _0x206017D
	CALL SUBOPT_0x2D5
	MOVW R0,R26
	CALL SUBOPT_0x2D4
	MOVW R26,R0
	CALL __CPD21
	BRSH _0x206017F
	CALL SUBOPT_0x2D2
	CALL SUBOPT_0x2D8
	CALL SUBOPT_0x54
	LDI  R26,LOW(1)
	CALL _disk_read
	CPI  R30,0
	BRNE _0x2060180
_0x206017F:
	RJMP _0x206017E
_0x2060180:
	CALL SUBOPT_0x2D7
	LDI  R30,LOW(1)
	RJMP _0x20E000B
_0x206017E:
_0x206017D:
	CALL SUBOPT_0x3E
	__PUTD1SNS 22,22
	LDD  R26,Y+22
	LDD  R27,Y+22+1
	CALL SUBOPT_0x2CE
_0x206016E:
	LDD  R26,Y+22
	LDD  R27,Y+22+1
	CALL SUBOPT_0x2CF
	LDI  R26,LOW(512)
	LDI  R27,HIGH(512)
	SUB  R26,R30
	SBC  R27,R31
	MOVW R18,R26
	LDD  R30,Y+18
	LDD  R31,Y+18+1
	CP   R30,R18
	CPC  R31,R19
	BRSH _0x2060181
	__GETWRS 18,19,18
_0x2060181:
	LDD  R26,Y+22
	LDD  R27,Y+22+1
	CALL SUBOPT_0x2CF
	LDD  R26,Y+22
	LDD  R27,Y+22+1
	ADIW R26,32
	CALL SUBOPT_0x1B
	CALL SUBOPT_0x17D
	MOVW R26,R18
	CALL _mem_cpy_G103
	LDD  R26,Y+22
	LDD  R27,Y+22+1
	ADIW R26,4
	LD   R30,X
	ORI  R30,0x40
	ST   X,R30
_0x206016B:
	MOVW R30,R18
	CALL SUBOPT_0x191
	LDD  R30,Y+22
	LDD  R31,Y+22+1
	CALL SUBOPT_0x2D0
	MOVW R26,R0
	CALL __PUTDP1
	LDD  R26,Y+16
	LDD  R27,Y+16+1
	CALL SUBOPT_0x2D1
	LDD  R30,Y+18
	LDD  R31,Y+18+1
	SUB  R30,R18
	SBC  R31,R19
	STD  Y+18,R30
	STD  Y+18+1,R31
	RJMP _0x206016C
_0x206016D:
	CALL SUBOPT_0x2D5
	MOVW R0,R26
	CALL SUBOPT_0x2D4
	MOVW R26,R0
	CALL __CPD12
	BRSH _0x2060182
	LDD  R26,Y+22
	LDD  R27,Y+22+1
	ADIW R26,6
	CALL __GETD1P
	__PUTD1SNS 22,10
_0x2060182:
	LDD  R26,Y+22
	LDD  R27,Y+22+1
	ADIW R26,4
	LD   R30,X
	ORI  R30,0x20
	ST   X,R30
	LDI  R30,LOW(0)
_0x20E000B:
	CALL __LOADLOCR6
	ADIW R28,24
	RET
_f_sync:
	ST   -Y,R27
	ST   -Y,R26
	SBIW R28,4
	CALL __SAVELOCR4
	CALL SUBOPT_0x2A1
	ST   -Y,R31
	ST   -Y,R30
	LDD  R30,Y+10
	LDD  R31,Y+10+1
	CALL SUBOPT_0x2BF
	BREQ PC+3
	JMP _0x2060183
	LDD  R30,Y+8
	LDD  R31,Y+8+1
	LDD  R26,Z+4
	ANDI R26,LOW(0x20)
	BRNE PC+3
	JMP _0x2060184
	LDD  R26,Z+4
	ANDI R26,LOW(0x40)
	BREQ _0x2060185
	CALL SUBOPT_0x2A1
	LDD  R30,Z+1
	ST   -Y,R30
	LDD  R30,Y+9
	LDD  R31,Y+9+1
	ADIW R30,32
	ST   -Y,R31
	ST   -Y,R30
	LDD  R30,Y+11
	LDD  R31,Y+11+1
	CALL SUBOPT_0x2CC
	BREQ _0x2060186
	LDI  R30,LOW(1)
	RJMP _0x20E000A
_0x2060186:
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	CALL SUBOPT_0x2CD
_0x2060185:
	CALL SUBOPT_0x2A1
	ST   -Y,R31
	ST   -Y,R30
	LDD  R30,Y+10
	LDD  R31,Y+10+1
	__GETD2Z 26
	CALL SUBOPT_0x2BC
	BREQ PC+3
	JMP _0x2060187
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	ADIW R26,30
	LD   R18,X+
	LD   R19,X
	MOVW R26,R18
	ADIW R26,11
	LD   R30,X
	ORI  R30,0x20
	ST   X,R30
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	ADIW R26,10
	CALL __GETD1P
	__PUTD1RNS 18,28
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	ADIW R26,14
	CALL __GETW1P
	__PUTW1RNS 18,26
	LDD  R30,Y+8
	LDD  R31,Y+8+1
	__GETD2Z 14
	MOVW R30,R26
	MOVW R22,R24
	CALL __LSRD16
	__PUTW1RNS 18,20
	CALL _get_fattime
	CALL SUBOPT_0x9B
	__PUTD1RNS 18,22
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	ADIW R26,4
	LD   R30,X
	ANDI R30,0xDF
	ST   X,R30
	CALL SUBOPT_0x2A1
	ADIW R30,4
	LDI  R26,LOW(1)
	STD  Z+0,R26
	CALL SUBOPT_0x2A1
	MOVW R26,R30
	CALL _sync_G103
	MOV  R17,R30
_0x2060187:
_0x2060184:
_0x2060183:
	MOV  R30,R17
_0x20E000A:
	CALL __LOADLOCR4
	ADIW R28,10
	RET
_f_close:
	ST   -Y,R27
	ST   -Y,R26
	ST   -Y,R17
	LDD  R26,Y+1
	LDD  R27,Y+1+1
	RCALL _f_sync
	MOV  R17,R30
	CPI  R17,0
	BRNE _0x2060188
	LDD  R26,Y+1
	LDD  R27,Y+1+1
	CALL SUBOPT_0xFC
_0x2060188:
	MOV  R30,R17
	RJMP _0x20E0005
_f_lseek:
	CALL __PUTPARD2
	SBIW R28,16
	ST   -Y,R17
	CALL SUBOPT_0x2DB
	ST   -Y,R31
	ST   -Y,R30
	LDD  R30,Y+23
	LDD  R31,Y+23+1
	CALL SUBOPT_0x2BF
	BREQ _0x2060191
	RJMP _0x20E0009
_0x2060191:
	LDD  R30,Y+21
	LDD  R31,Y+21+1
	LDD  R26,Z+4
	ANDI R26,LOW(0x80)
	BREQ _0x2060192
	LDI  R30,LOW(2)
	RJMP _0x20E0008
_0x2060192:
	CALL SUBOPT_0x2DC
	CALL SUBOPT_0x2DD
	CALL __CPD12
	BRSH _0x2060194
	LDD  R30,Y+21
	LDD  R31,Y+21+1
	LDD  R26,Z+4
	ANDI R26,LOW(0x2)
	BREQ _0x2060195
_0x2060194:
	RJMP _0x2060193
_0x2060195:
	CALL SUBOPT_0x2DC
	CALL SUBOPT_0x2DE
_0x2060193:
	LDD  R26,Y+21
	LDD  R27,Y+21+1
	ADIW R26,6
	CALL SUBOPT_0x27D
	CALL SUBOPT_0x2A0
	CALL SUBOPT_0x29B
	CALL SUBOPT_0x2DF
	ADIW R26,5
	LDI  R30,LOW(255)
	ST   X,R30
	CALL SUBOPT_0x2DD
	CALL __CPD02
	BRLO PC+3
	JMP _0x2060196
	CALL SUBOPT_0x2DB
	CALL SUBOPT_0x203
	CALL __CWD1
	__GETD2N 0x200
	CALL __MULD12U
	CALL SUBOPT_0x26D
	CALL SUBOPT_0x204
	CALL __CPD02
	BRSH _0x2060198
	CALL SUBOPT_0x2E0
	CALL SUBOPT_0x2E1
	PUSH R23
	PUSH R22
	PUSH R31
	PUSH R30
	CALL SUBOPT_0x297
	CALL SUBOPT_0x2E1
	POP  R26
	POP  R27
	POP  R24
	POP  R25
	CALL __CPD21
	BRSH _0x2060199
_0x2060198:
	RJMP _0x2060197
_0x2060199:
	CALL SUBOPT_0x297
	CALL SUBOPT_0xC7
	MOVW R26,R30
	MOVW R24,R22
	CALL SUBOPT_0x5B
	CALL SUBOPT_0xC7
	CALL __COMD1
	CALL __ANDD12
	CALL SUBOPT_0x2DF
	ADIW R26,6
	CALL __GETD1P
	CALL SUBOPT_0x2DD
	CALL __SUBD21
	__PUTD2S 17
	LDD  R26,Y+21
	LDD  R27,Y+21+1
	ADIW R26,18
	CALL SUBOPT_0x2E2
	RJMP _0x206019A
_0x2060197:
	LDD  R26,Y+21
	LDD  R27,Y+21+1
	ADIW R26,14
	CALL SUBOPT_0x2E2
	CALL SUBOPT_0x2E3
	CALL __CPD10
	BRNE _0x206019B
	CALL SUBOPT_0x2DB
	CALL SUBOPT_0x2D6
	CALL SUBOPT_0x2E4
	CALL SUBOPT_0x2E5
	CALL SUBOPT_0x298
	BRNE _0x206019C
	CALL SUBOPT_0x2E6
	LDI  R30,LOW(2)
	RJMP _0x20E0008
_0x206019C:
	CALL SUBOPT_0x2E5
	CALL SUBOPT_0x2B
	BRNE _0x206019D
	CALL SUBOPT_0x2E6
	LDI  R30,LOW(1)
	RJMP _0x20E0008
_0x206019D:
	CALL SUBOPT_0x2E3
	__PUTD1SNS 21,14
_0x206019B:
	CALL SUBOPT_0x2E7
_0x206019A:
	CALL SUBOPT_0x2E3
	CALL __CPD10
	BRNE PC+3
	JMP _0x206019E
_0x206019F:
	CALL SUBOPT_0x5B
	CALL SUBOPT_0x2DD
	CALL __CPD12
	BRLO PC+3
	JMP _0x20601A1
	LDD  R30,Y+21
	LDD  R31,Y+21+1
	LDD  R26,Z+4
	ANDI R26,LOW(0x2)
	BREQ _0x20601A2
	CALL SUBOPT_0x2DB
	CALL SUBOPT_0x2E8
	CALL _create_chain_G103
	CALL SUBOPT_0x2E4
	CALL SUBOPT_0x2E3
	CALL __CPD10
	BRNE _0x20601A3
	CALL SUBOPT_0x5B
	CALL SUBOPT_0x2DE
	RJMP _0x20601A1
_0x20601A3:
	RJMP _0x20601A4
_0x20601A2:
	CALL SUBOPT_0x2DB
	CALL SUBOPT_0x2E8
	CALL _get_fat
	CALL SUBOPT_0x2E4
_0x20601A4:
	CALL SUBOPT_0x2E5
	CALL SUBOPT_0x2B
	BRNE _0x20601A5
	CALL SUBOPT_0x2E6
	LDI  R30,LOW(1)
	RJMP _0x20E0008
_0x20601A5:
	CALL SUBOPT_0x2E5
	CALL SUBOPT_0x286
	BRLO _0x20601A7
	CALL SUBOPT_0x2DB
	CALL SUBOPT_0x2A9
	CALL SUBOPT_0x2E5
	CALL __CPD21
	BRLO _0x20601A6
_0x20601A7:
	CALL SUBOPT_0x2E6
	LDI  R30,LOW(2)
	RJMP _0x20E0008
_0x20601A6:
	CALL SUBOPT_0x2E7
	CALL SUBOPT_0x2E9
	CALL SUBOPT_0x274
	CALL __ADDD12
	MOVW R26,R0
	CALL __PUTDP1
	CALL SUBOPT_0x274
	CALL SUBOPT_0x2E0
	CALL __SUBD12
	CALL SUBOPT_0x2DE
	RJMP _0x206019F
_0x20601A1:
	CALL SUBOPT_0x2E9
	CALL SUBOPT_0x2DD
	CALL __ADDD12
	MOVW R26,R0
	CALL __PUTDP1
	CALL SUBOPT_0x2DD
	__GETD1N 0x200
	CALL __DIVD21U
	__PUTB1SNS 21,5
	CALL SUBOPT_0x2E0
	ANDI R31,HIGH(0x1FF)
	SBIW R30,0
	BREQ _0x20601A9
	CALL SUBOPT_0x2DB
	CALL SUBOPT_0x2E8
	CALL _clust2sect
	CALL SUBOPT_0x29B
	CALL SUBOPT_0x27E
	CALL __CPD10
	BRNE _0x20601AA
	CALL SUBOPT_0x2E6
	LDI  R30,LOW(2)
	RJMP _0x20E0008
_0x20601AA:
	LDD  R30,Y+21
	LDD  R31,Y+21+1
	LDD  R30,Z+5
	LDI  R31,0
	CALL SUBOPT_0x295
	CALL SUBOPT_0x9A
	CALL SUBOPT_0x29B
	LDD  R26,Y+21
	LDD  R27,Y+21+1
	CALL SUBOPT_0x2CE
_0x20601A9:
_0x206019E:
_0x2060196:
	CALL SUBOPT_0x2EA
	CALL SUBOPT_0x2C1
	BREQ _0x20601AC
	LDD  R26,Y+21
	LDD  R27,Y+21+1
	ADIW R26,22
	CALL __GETD1P
	CALL SUBOPT_0x295
	CALL __CPD12
	BRNE _0x20601AD
_0x20601AC:
	RJMP _0x20601AB
_0x20601AD:
	LDD  R30,Y+21
	LDD  R31,Y+21+1
	LDD  R26,Z+4
	ANDI R26,LOW(0x40)
	BREQ _0x20601AE
	CALL SUBOPT_0x2DB
	LDD  R30,Z+1
	ST   -Y,R30
	LDD  R30,Y+22
	LDD  R31,Y+22+1
	ADIW R30,32
	CALL SUBOPT_0x2D3
	CALL SUBOPT_0x2CC
	BREQ _0x20601AF
	CALL SUBOPT_0x2E6
	LDI  R30,LOW(1)
	RJMP _0x20E0008
_0x20601AF:
	LDD  R26,Y+21
	LDD  R27,Y+21+1
	CALL SUBOPT_0x2CD
_0x20601AE:
	CALL SUBOPT_0x2DB
	LDD  R30,Z+1
	ST   -Y,R30
	LDD  R30,Y+22
	LDD  R31,Y+22+1
	ADIW R30,32
	CALL SUBOPT_0x281
	BREQ _0x20601B0
	CALL SUBOPT_0x2E6
	LDI  R30,LOW(1)
	RJMP _0x20E0008
_0x20601B0:
	CALL SUBOPT_0x27E
	__PUTD1SNS 21,22
_0x20601AB:
	CALL SUBOPT_0x2EA
	MOVW R0,R26
	CALL SUBOPT_0x2DC
	MOVW R26,R0
	CALL __CPD12
	BRSH _0x20601B1
	LDD  R26,Y+21
	LDD  R27,Y+21+1
	ADIW R26,6
	CALL __GETD1P
	__PUTD1SNS 21,10
	LDD  R26,Y+21
	LDD  R27,Y+21+1
	ADIW R26,4
	LD   R30,X
	ORI  R30,0x20
	ST   X,R30
_0x20601B1:
_0x20E0009:
	MOV  R30,R17
_0x20E0008:
	LDD  R17,Y+0
	ADIW R28,23
	RET
_f_getfree:
	ST   -Y,R27
	ST   -Y,R26
	SBIW R28,16
	CALL __SAVELOCR6
	MOVW R30,R28
	ADIW R30,26
	ST   -Y,R31
	ST   -Y,R30
	CALL SUBOPT_0x213
	LDI  R26,LOW(0)
	CALL _chk_mounted
	MOV  R17,R30
	CPI  R17,0
	BREQ _0x20601C3
	MOV  R30,R17
	RJMP _0x20E0006
_0x20601C3:
	CALL SUBOPT_0x2D2
	MOVW R0,R30
	ADIW R30,14
	MOVW R26,R30
	CALL __GETD1P
	PUSH R23
	PUSH R22
	PUSH R31
	PUSH R30
	MOVW R26,R0
	ADIW R26,30
	CALL __GETD1P
	__SUBD1N 2
	POP  R26
	POP  R27
	POP  R24
	POP  R25
	CALL __CPD12
	BRLO _0x20601C4
	CALL SUBOPT_0x2D2
	ADIW R30,14
	MOVW R26,R30
	CALL __GETD1P
	RJMP _0x20E0007
_0x20601C4:
	CALL SUBOPT_0x2D2
	LD   R16,Z
	LDI  R30,LOW(0)
	__CLRD1S 18
	CPI  R16,1
	BRNE _0x20601C5
	CALL SUBOPT_0x29E
	CALL SUBOPT_0x1D6
_0x20601C7:
	CALL SUBOPT_0x2D2
	ST   -Y,R31
	ST   -Y,R30
	CALL SUBOPT_0x292
	CALL _get_fat
	CALL SUBOPT_0xA3
	CALL SUBOPT_0x49
	CALL SUBOPT_0x2B
	BRNE _0x20601C9
	LDI  R30,LOW(1)
	RJMP _0x20E0006
_0x20601C9:
	CALL SUBOPT_0x49
	CALL SUBOPT_0x298
	BRNE _0x20601CA
	LDI  R30,LOW(2)
	RJMP _0x20E0006
_0x20601CA:
	CALL SUBOPT_0xA2
	CALL __CPD10
	BRNE _0x20601CB
	CALL SUBOPT_0x2EB
_0x20601CB:
	CALL SUBOPT_0x50
	CALL SUBOPT_0xA9
	CALL SUBOPT_0x1D6
	PUSH R23
	PUSH R22
	PUSH R31
	PUSH R30
	CALL SUBOPT_0x2D2
	CALL SUBOPT_0x2A9
	POP  R26
	POP  R27
	POP  R24
	POP  R25
	CALL __CPD21
	BRLO _0x20601C7
	RJMP _0x20601CC
_0x20601C5:
	CALL SUBOPT_0x2D2
	CALL SUBOPT_0x2A9
	CALL SUBOPT_0x1D6
	CALL SUBOPT_0x2D2
	ADIW R30,34
	MOVW R26,R30
	CALL __GETD1P
	CALL SUBOPT_0x1D2
	CALL SUBOPT_0x0
_0x20601CE:
	MOV  R0,R18
	OR   R0,R19
	BRNE _0x20601D0
	CALL SUBOPT_0x2D2
	ST   -Y,R31
	ST   -Y,R30
	CALL SUBOPT_0xC6
	CALL SUBOPT_0xA9
	CALL SUBOPT_0xD6
	SBIW R30,1
	SBCI R22,0
	SBCI R23,0
	MOVW R26,R30
	MOVW R24,R22
	CALL SUBOPT_0x2BC
	BREQ _0x20601D1
	MOV  R30,R17
	RJMP _0x20E0006
_0x20601D1:
	CALL SUBOPT_0x2D2
	ADIW R30,50
	MOVW R20,R30
	__GETWRN 18,19,512
_0x20601D0:
	CPI  R16,2
	BRNE _0x20601D2
	MOVW R26,R20
	CALL __GETW1P
	SBIW R30,0
	BRNE _0x20601D3
	CALL SUBOPT_0x2EB
_0x20601D3:
	__ADDWRN 20,21,2
	__SUBWRN 18,19,2
	RJMP _0x20601D4
_0x20601D2:
	MOVW R26,R20
	CALL __GETD1P
	__ANDD1N 0xFFFFFFF
	CALL __CPD10
	BRNE _0x20601D5
	CALL SUBOPT_0x2EB
_0x20601D5:
	__ADDWRN 20,21,4
	__SUBWRN 18,19,4
_0x20601D4:
	CALL SUBOPT_0x50
	SBIW R30,1
	SBCI R22,0
	SBCI R23,0
	CALL SUBOPT_0x1D6
	BREQ _0x20601CF
	RJMP _0x20601CE
_0x20601CF:
_0x20601CC:
	CALL SUBOPT_0x2D2
	ADIW R30,14
	CALL SUBOPT_0x29D
	CALL SUBOPT_0x1D8
	CPI  R16,3
	BRNE _0x20601D6
	CALL SUBOPT_0x2D2
	ADIW R30,5
	LDI  R26,LOW(1)
	STD  Z+0,R26
_0x20601D6:
	CALL SUBOPT_0xC1
_0x20E0007:
	LDD  R26,Y+24
	LDD  R27,Y+24+1
	CALL __PUTDP1
	LDI  R30,LOW(0)
_0x20E0006:
	CALL __LOADLOCR6
	ADIW R28,28
	RET
	#ifndef __SLEEP_DEFINED__
	#define __SLEEP_DEFINED__
	.EQU __se_bit=0x01
	.EQU __sm_mask=0x0E
	.EQU __sm_powerdown=0x04
	.EQU __sm_powersave=0x06
	.EQU __sm_standby=0x0C
	.EQU __sm_ext_standby=0x0E
	.EQU __sm_adc_noise_red=0x02
	.SET power_ctrl_reg=smcr
	#endif

	.CSEG
_putchar:
	ST   -Y,R26
_0x2080003:
	LDS  R30,192
	ANDI R30,LOW(0x20)
	BREQ _0x2080003
	LD   R30,Y
	STS  198,R30
	ADIW R28,1
	RET
_puts:
	ST   -Y,R27
	ST   -Y,R26
	ST   -Y,R17
_0x2080006:
	LDD  R26,Y+1
	LDD  R27,Y+1+1
	LD   R30,X+
	STD  Y+1,R26
	STD  Y+1+1,R27
	MOV  R17,R30
	CPI  R30,0
	BREQ _0x2080008
	MOV  R26,R17
	RCALL _putchar
	RJMP _0x2080006
_0x2080008:
	LDI  R26,LOW(10)
	RCALL _putchar
_0x20E0005:
	LDD  R17,Y+0
	ADIW R28,3
	RET
_put_buff_G104:
	CALL SUBOPT_0x71
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	ADIW R26,2
	CALL __GETW1P
	SBIW R30,0
	BREQ _0x208002A
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	ADIW R26,4
	CALL __GETW1P
	MOVW R16,R30
	SBIW R30,0
	BREQ _0x208002C
	__CPWRN 16,17,2
	BRLO _0x208002D
	MOVW R30,R16
	SBIW R30,1
	MOVW R16,R30
	__PUTW1SNS 2,4
_0x208002C:
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	ADIW R26,2
	CALL SUBOPT_0x6E
	SBIW R30,1
	LDD  R26,Y+4
	STD  Z+0,R26
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	CALL __GETW1P
	TST  R31
	BRMI _0x208002E
	CALL SUBOPT_0x6E
_0x208002E:
_0x208002D:
	RJMP _0x208002F
_0x208002A:
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	ST   X+,R30
	ST   X,R31
_0x208002F:
	LDD  R17,Y+1
	LDD  R16,Y+0
	ADIW R28,5
	RET
__ftoe_G104:
	ST   -Y,R27
	ST   -Y,R26
	SBIW R28,4
	LDI  R30,LOW(0)
	ST   Y,R30
	STD  Y+1,R30
	LDI  R30,LOW(128)
	STD  Y+2,R30
	LDI  R30,LOW(63)
	STD  Y+3,R30
	CALL __SAVELOCR4
	LDD  R30,Y+14
	LDD  R31,Y+14+1
	CPI  R30,LOW(0xFFFF)
	LDI  R26,HIGH(0xFFFF)
	CPC  R31,R26
	BRNE _0x2080037
	CALL SUBOPT_0x17D
	__POINTD2FN _0x2080000,0
	CALL _strcpyf
	CALL __LOADLOCR4
	RJMP _0x20E0003
_0x2080037:
	CPI  R30,LOW(0x7FFF)
	LDI  R26,HIGH(0x7FFF)
	CPC  R31,R26
	BRNE _0x2080036
	CALL SUBOPT_0x17D
	__POINTD2FN _0x2080000,1
	CALL _strcpyf
	CALL __LOADLOCR4
	RJMP _0x20E0003
_0x2080036:
	LDD  R26,Y+11
	CPI  R26,LOW(0x7)
	BRLO _0x2080039
	LDI  R30,LOW(6)
	STD  Y+11,R30
_0x2080039:
	LDD  R17,Y+11
_0x208003A:
	MOV  R30,R17
	SUBI R17,1
	CPI  R30,0
	BREQ _0x208003C
	CALL SUBOPT_0x2EC
	CALL SUBOPT_0x95
	RJMP _0x208003A
_0x208003C:
	CALL SUBOPT_0xC6
	CALL __CPD10
	BRNE _0x208003D
	LDI  R19,LOW(0)
	CALL SUBOPT_0x2EC
	CALL SUBOPT_0x95
	RJMP _0x208003E
_0x208003D:
	LDD  R19,Y+11
	CALL SUBOPT_0x2ED
	BREQ PC+2
	BRCC PC+3
	JMP  _0x208003F
	CALL SUBOPT_0x2EC
	CALL SUBOPT_0x95
_0x2080040:
	CALL SUBOPT_0x2ED
	BRLO _0x2080042
	CALL SUBOPT_0x2EE
	SUBI R19,-LOW(1)
	RJMP _0x2080040
_0x2080042:
	RJMP _0x2080043
_0x208003F:
_0x2080044:
	CALL SUBOPT_0x2ED
	BRSH _0x2080046
	CALL SUBOPT_0x277
	CALL SUBOPT_0xD6
	SUBI R19,LOW(1)
	RJMP _0x2080044
_0x2080046:
	CALL SUBOPT_0x2EC
	CALL SUBOPT_0x95
_0x2080043:
	CALL SUBOPT_0xC6
	CALL SUBOPT_0x272
	CALL __ADDF12
	CALL SUBOPT_0xD6
	CALL SUBOPT_0x2ED
	BRLO _0x2080047
	CALL SUBOPT_0x2EE
	SUBI R19,-LOW(1)
_0x2080047:
_0x208003E:
	LDI  R17,LOW(0)
_0x2080048:
	LDD  R30,Y+11
	CP   R30,R17
	BRLO _0x208004A
	CALL SUBOPT_0x96
	__GETD1N 0x3DCCCCCD
	CALL __MULF12
	CALL SUBOPT_0x272
	CALL SUBOPT_0x8A
	CALL _floor
	CALL SUBOPT_0x9B
	CALL SUBOPT_0x9
	CALL __DIVF21
	CALL __CFD1U
	MOV  R16,R30
	CALL SUBOPT_0x2EF
	MOV  R30,R16
	SUBI R30,-LOW(48)
	ST   X,R30
	MOV  R30,R16
	CLR  R31
	CLR  R22
	CLR  R23
	CALL __CDF1
	CALL SUBOPT_0x96
	CALL __MULF12
	CALL SUBOPT_0x9
	CALL SUBOPT_0x1D5
	CALL SUBOPT_0xD6
	MOV  R30,R17
	SUBI R17,-1
	CPI  R30,0
	BRNE _0x2080048
	CALL SUBOPT_0x2EF
	LDI  R30,LOW(46)
	ST   X,R30
	RJMP _0x2080048
_0x208004A:
	CALL SUBOPT_0x70
	LDD  R26,Y+10
	STD  Z+0,R26
	CPI  R19,0
	BRGE _0x208004C
	NEG  R19
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	LDI  R30,LOW(45)
	RJMP _0x2080137
_0x208004C:
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	LDI  R30,LOW(43)
_0x2080137:
	ST   X,R30
	LDD  R30,Y+8
	LDD  R31,Y+8+1
	ADIW R30,1
	CALL SUBOPT_0x17C
	ADIW R30,1
	STD  Y+8,R30
	STD  Y+8+1,R31
	SBIW R30,1
	MOVW R22,R30
	MOV  R26,R19
	LDI  R30,LOW(10)
	CALL __DIVB21
	SUBI R30,-LOW(48)
	MOVW R26,R22
	ST   X,R30
	CALL SUBOPT_0x70
	MOVW R22,R30
	MOV  R26,R19
	LDI  R30,LOW(10)
	CALL __MODB21
	SUBI R30,-LOW(48)
	MOVW R26,R22
	ST   X,R30
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	LDI  R30,LOW(0)
	ST   X,R30
	CALL __LOADLOCR4
	RJMP _0x20E0003
__print_G104:
	ST   -Y,R27
	ST   -Y,R26
	SBIW R28,63
	SBIW R28,21
	CALL __SAVELOCR6
	LDI  R17,0
	__GETD1SX 92
	CALL SUBOPT_0x23C
	__GETW1SX 90
	STD  Y+6,R30
	STD  Y+6+1,R31
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	CALL SUBOPT_0xFC
_0x208004E:
	MOVW R26,R28
	SUBI R26,LOW(-(98))
	SBCI R27,HIGH(-(98))
	CALL SUBOPT_0x27C
	__GETBRPF 30
	MOV  R18,R30
	CPI  R30,0
	BRNE PC+3
	JMP _0x2080050
	MOV  R30,R17
	CPI  R30,0
	BRNE _0x2080054
	CPI  R18,37
	BRNE _0x2080055
	LDI  R17,LOW(1)
	RJMP _0x2080056
_0x2080055:
	CALL SUBOPT_0x2F0
_0x2080056:
	RJMP _0x2080053
_0x2080054:
	CPI  R30,LOW(0x1)
	BRNE _0x2080057
	CPI  R18,37
	BRNE _0x2080058
	CALL SUBOPT_0x2F0
	RJMP _0x2080138
_0x2080058:
	LDI  R17,LOW(2)
	LDI  R30,LOW(0)
	STD  Y+25,R30
	LDI  R16,LOW(0)
	CPI  R18,45
	BRNE _0x2080059
	LDI  R16,LOW(1)
	RJMP _0x2080053
_0x2080059:
	CPI  R18,43
	BRNE _0x208005A
	LDI  R30,LOW(43)
	STD  Y+25,R30
	RJMP _0x2080053
_0x208005A:
	CPI  R18,32
	BRNE _0x208005B
	LDI  R30,LOW(32)
	STD  Y+25,R30
	RJMP _0x2080053
_0x208005B:
	RJMP _0x208005C
_0x2080057:
	CPI  R30,LOW(0x2)
	BRNE _0x208005D
_0x208005C:
	LDI  R21,LOW(0)
	LDI  R17,LOW(3)
	CPI  R18,48
	BRNE _0x208005E
	ORI  R16,LOW(128)
	RJMP _0x2080053
_0x208005E:
	RJMP _0x208005F
_0x208005D:
	CPI  R30,LOW(0x3)
	BRNE _0x2080060
_0x208005F:
	CPI  R18,48
	BRLO _0x2080062
	CPI  R18,58
	BRLO _0x2080063
_0x2080062:
	RJMP _0x2080061
_0x2080063:
	LDI  R26,LOW(10)
	MUL  R21,R26
	MOV  R21,R0
	MOV  R30,R18
	SUBI R30,LOW(48)
	ADD  R21,R30
	RJMP _0x2080053
_0x2080061:
	LDI  R20,LOW(0)
	CPI  R18,46
	BRNE _0x2080064
	LDI  R17,LOW(4)
	RJMP _0x2080053
_0x2080064:
	RJMP _0x2080065
_0x2080060:
	CPI  R30,LOW(0x4)
	BRNE _0x2080067
	CPI  R18,48
	BRLO _0x2080069
	CPI  R18,58
	BRLO _0x208006A
_0x2080069:
	RJMP _0x2080068
_0x208006A:
	ORI  R16,LOW(32)
	LDI  R26,LOW(10)
	MUL  R20,R26
	MOV  R20,R0
	MOV  R30,R18
	SUBI R30,LOW(48)
	ADD  R20,R30
	RJMP _0x2080053
_0x2080068:
_0x2080065:
	CPI  R18,108
	BRNE _0x208006B
	ORI  R16,LOW(2)
	LDI  R17,LOW(5)
	RJMP _0x2080053
_0x208006B:
	RJMP _0x208006C
_0x2080067:
	CPI  R30,LOW(0x5)
	BREQ PC+3
	JMP _0x2080053
_0x208006C:
	MOV  R30,R18
	CPI  R30,LOW(0x63)
	BRNE _0x2080071
	CALL SUBOPT_0x2F1
	CALL SUBOPT_0x2F2
	CALL SUBOPT_0x2F1
	LDD  R26,Z+4
	ST   -Y,R26
	CALL SUBOPT_0x2F3
	RJMP _0x2080072
_0x2080071:
	CPI  R30,LOW(0x45)
	BREQ _0x2080075
	CPI  R30,LOW(0x65)
	BRNE _0x2080076
_0x2080075:
	RJMP _0x2080077
_0x2080076:
	CPI  R30,LOW(0x66)
	BREQ PC+3
	JMP _0x2080078
_0x2080077:
	MOVW R30,R28
	ADIW R30,26
	STD  Y+16,R30
	STD  Y+16+1,R31
	CALL SUBOPT_0x2F4
	CALL __GETD1P
	CALL SUBOPT_0xD6
	CALL SUBOPT_0x2F5
	LDD  R26,Y+15
	TST  R26
	BRMI _0x2080079
	LDD  R26,Y+25
	CPI  R26,LOW(0x2B)
	BREQ _0x208007B
	RJMP _0x208007C
_0x2080079:
	CALL SUBOPT_0xC6
	CALL __ANEGF1
	CALL SUBOPT_0xD6
	LDI  R30,LOW(45)
	STD  Y+25,R30
_0x208007B:
	SBRS R16,7
	RJMP _0x208007D
	LDD  R30,Y+25
	ST   -Y,R30
	CALL SUBOPT_0x2F3
	RJMP _0x208007E
_0x208007D:
	CALL SUBOPT_0x275
	SBIW R30,1
	LDD  R26,Y+25
	STD  Z+0,R26
_0x208007E:
_0x208007C:
	SBRS R16,5
	LDI  R20,LOW(6)
	CPI  R18,102
	BRNE _0x2080080
	CALL SUBOPT_0x153
	ST   -Y,R20
	LDD  R26,Y+21
	LDD  R27,Y+21+1
	CALL _ftoa
	RJMP _0x2080081
_0x2080080:
	CALL SUBOPT_0x153
	ST   -Y,R20
	ST   -Y,R18
	LDD  R26,Y+22
	LDD  R27,Y+22+1
	RCALL __ftoe_G104
_0x2080081:
	MOVW R30,R28
	ADIW R30,26
	CALL SUBOPT_0x25B
	CALL _strlen
	MOV  R17,R30
	RJMP _0x2080082
_0x2080078:
	CPI  R30,LOW(0x73)
	BRNE _0x2080084
	CALL SUBOPT_0x2F5
	CALL SUBOPT_0x2F4
	ADIW R26,4
	CALL __GETW1P
	CALL SUBOPT_0x25B
	CALL _strlen
	MOV  R17,R30
	RJMP _0x2080085
_0x2080084:
	CPI  R30,LOW(0x70)
	BRNE _0x2080087
	CALL SUBOPT_0x2F5
	CALL SUBOPT_0x2F4
	ADIW R26,4
	CALL __GETD1P
	CALL SUBOPT_0x23D
	CALL SUBOPT_0x292
	CALL _strlenf
	MOV  R17,R30
	ORI  R16,LOW(8)
_0x2080085:
	ANDI R16,LOW(127)
	CPI  R20,0
	BREQ _0x2080089
	CP   R20,R17
	BRLO _0x208008A
_0x2080089:
	RJMP _0x2080088
_0x208008A:
	MOV  R17,R20
_0x2080088:
_0x2080082:
	LDI  R20,LOW(0)
	LDI  R30,LOW(0)
	STD  Y+24,R30
	LDI  R19,LOW(0)
	RJMP _0x208008B
_0x2080087:
	CPI  R30,LOW(0x64)
	BREQ _0x208008E
	CPI  R30,LOW(0x69)
	BRNE _0x208008F
_0x208008E:
	ORI  R16,LOW(4)
	RJMP _0x2080090
_0x208008F:
	CPI  R30,LOW(0x75)
	BRNE _0x2080091
_0x2080090:
	LDI  R30,LOW(10)
	STD  Y+24,R30
	SBRS R16,1
	RJMP _0x2080092
	__GETD1N 0x3B9ACA00
	CALL SUBOPT_0x23E
	LDI  R17,LOW(10)
	RJMP _0x2080093
_0x2080092:
	__GETD1N 0x2710
	CALL SUBOPT_0x23E
	LDI  R17,LOW(5)
	RJMP _0x2080093
_0x2080091:
	CPI  R30,LOW(0x58)
	BRNE _0x2080095
	ORI  R16,LOW(8)
	RJMP _0x2080096
_0x2080095:
	CPI  R30,LOW(0x78)
	BREQ PC+3
	JMP _0x20800D4
_0x2080096:
	LDI  R30,LOW(16)
	STD  Y+24,R30
	SBRS R16,1
	RJMP _0x2080098
	__GETD1N 0x10000000
	CALL SUBOPT_0x23E
	LDI  R17,LOW(8)
	RJMP _0x2080093
_0x2080098:
	__GETD1N 0x1000
	CALL SUBOPT_0x23E
	LDI  R17,LOW(4)
_0x2080093:
	CPI  R20,0
	BREQ _0x2080099
	ANDI R16,LOW(127)
	RJMP _0x208009A
_0x2080099:
	LDI  R20,LOW(1)
_0x208009A:
	SBRS R16,1
	RJMP _0x208009B
	CALL SUBOPT_0x2F5
	CALL SUBOPT_0x2F4
	ADIW R26,4
	CALL __GETD1P
	RJMP _0x2080139
_0x208009B:
	SBRS R16,2
	RJMP _0x208009D
	CALL SUBOPT_0x2F5
	CALL SUBOPT_0x2F4
	ADIW R26,4
	CALL __GETW1P
	CALL __CWD1
	RJMP _0x2080139
_0x208009D:
	CALL SUBOPT_0x2F5
	CALL SUBOPT_0x2F4
	ADIW R26,4
	CALL SUBOPT_0x1C
_0x2080139:
	__PUTD1S 12
	SBRS R16,2
	RJMP _0x208009F
	LDD  R26,Y+15
	TST  R26
	BRPL _0x20800A0
	CALL SUBOPT_0xC6
	CALL __ANEGD1
	CALL SUBOPT_0xD6
	LDI  R30,LOW(45)
	STD  Y+25,R30
_0x20800A0:
	LDD  R30,Y+25
	CPI  R30,0
	BREQ _0x20800A1
	SUBI R17,-LOW(1)
	SUBI R20,-LOW(1)
	RJMP _0x20800A2
_0x20800A1:
	ANDI R16,LOW(251)
_0x20800A2:
_0x208009F:
	MOV  R19,R20
_0x208008B:
	SBRC R16,0
	RJMP _0x20800A3
_0x20800A4:
	CP   R17,R21
	BRSH _0x20800A7
	CP   R19,R21
	BRLO _0x20800A8
_0x20800A7:
	RJMP _0x20800A6
_0x20800A8:
	SBRS R16,7
	RJMP _0x20800A9
	SBRS R16,2
	RJMP _0x20800AA
	ANDI R16,LOW(251)
	LDD  R18,Y+25
	SUBI R17,LOW(1)
	RJMP _0x20800AB
_0x20800AA:
	LDI  R18,LOW(48)
_0x20800AB:
	RJMP _0x20800AC
_0x20800A9:
	LDI  R18,LOW(32)
_0x20800AC:
	CALL SUBOPT_0x2F0
	SUBI R21,LOW(1)
	RJMP _0x20800A4
_0x20800A6:
_0x20800A3:
_0x20800AD:
	CP   R17,R20
	BRSH _0x20800AF
	ORI  R16,LOW(16)
	SBRS R16,2
	RJMP _0x20800B0
	CALL SUBOPT_0x2F6
	BREQ _0x20800B1
	SUBI R21,LOW(1)
_0x20800B1:
	SUBI R17,LOW(1)
	SUBI R20,LOW(1)
_0x20800B0:
	LDI  R30,LOW(48)
	ST   -Y,R30
	CALL SUBOPT_0x2F3
	CPI  R21,0
	BREQ _0x20800B2
	SUBI R21,LOW(1)
_0x20800B2:
	SUBI R20,LOW(1)
	RJMP _0x20800AD
_0x20800AF:
	MOV  R19,R17
	LDD  R30,Y+24
	CPI  R30,0
	BRNE _0x20800B3
_0x20800B4:
	CPI  R19,0
	BREQ _0x20800B6
	SBRS R16,3
	RJMP _0x20800B7
	MOVW R26,R28
	ADIW R26,16
	CALL SUBOPT_0x27C
	__GETBRPF 18
	RJMP _0x20800B8
_0x20800B7:
	LDD  R26,Y+16
	LDD  R27,Y+16+1
	LD   R18,X+
	STD  Y+16,R26
	STD  Y+16+1,R27
_0x20800B8:
	CALL SUBOPT_0x2F0
	CPI  R21,0
	BREQ _0x20800B9
	SUBI R21,LOW(1)
_0x20800B9:
	SUBI R19,LOW(1)
	RJMP _0x20800B4
_0x20800B6:
	RJMP _0x20800BA
_0x20800B3:
_0x20800BC:
	CALL SUBOPT_0xC9
	CALL SUBOPT_0x9
	CALL __DIVD21U
	MOV  R18,R30
	CPI  R18,10
	BRLO _0x20800BE
	SBRS R16,3
	RJMP _0x20800BF
	SUBI R18,-LOW(55)
	RJMP _0x20800C0
_0x20800BF:
	SUBI R18,-LOW(87)
_0x20800C0:
	RJMP _0x20800C1
_0x20800BE:
	SUBI R18,-LOW(48)
_0x20800C1:
	SBRC R16,4
	RJMP _0x20800C3
	CPI  R18,49
	BRSH _0x20800C5
	__GETD2S 20
	CALL SUBOPT_0x298
	BRNE _0x20800C4
_0x20800C5:
	RJMP _0x20800C7
_0x20800C4:
	CP   R20,R19
	BRSH _0x208013A
	CP   R21,R19
	BRLO _0x20800CA
	SBRS R16,0
	RJMP _0x20800CB
_0x20800CA:
	RJMP _0x20800C9
_0x20800CB:
	LDI  R18,LOW(32)
	SBRS R16,7
	RJMP _0x20800CC
_0x208013A:
	LDI  R18,LOW(48)
_0x20800C7:
	ORI  R16,LOW(16)
	SBRS R16,2
	RJMP _0x20800CD
	CALL SUBOPT_0x2F6
	BREQ _0x20800CE
	SUBI R21,LOW(1)
_0x20800CE:
_0x20800CD:
_0x20800CC:
_0x20800C3:
	CALL SUBOPT_0x2F0
	CPI  R21,0
	BREQ _0x20800CF
	SUBI R21,LOW(1)
_0x20800CF:
_0x20800C9:
	SUBI R19,LOW(1)
	CALL SUBOPT_0xC9
	CALL SUBOPT_0x9
	CALL __MODD21U
	CALL SUBOPT_0xD6
	LDD  R30,Y+24
	__GETD2S 20
	CLR  R31
	CLR  R22
	CLR  R23
	CALL __DIVD21U
	CALL SUBOPT_0x23E
	CALL SUBOPT_0xC9
	CALL __CPD10
	BREQ _0x20800BD
	RJMP _0x20800BC
_0x20800BD:
_0x20800BA:
	SBRS R16,0
	RJMP _0x20800D0
_0x20800D1:
	CPI  R21,0
	BREQ _0x20800D3
	SUBI R21,LOW(1)
	LDI  R30,LOW(32)
	ST   -Y,R30
	CALL SUBOPT_0x2F3
	RJMP _0x20800D1
_0x20800D3:
_0x20800D0:
_0x20800D4:
_0x2080072:
_0x2080138:
	LDI  R17,LOW(0)
_0x2080053:
	RJMP _0x208004E
_0x2080050:
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	CALL __GETW1P
	CALL __LOADLOCR6
	ADIW R28,63
	ADIW R28,39
	RET
_sprintf:
	PUSH R15
	MOV  R15,R24
	SBIW R28,6
	CALL __SAVELOCR4
	MOVW R26,R28
	ADIW R26,14
	CALL __ADDW2R15
	CALL __GETW1P
	SBIW R30,0
	BRNE _0x20800D5
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E0004
_0x20800D5:
	MOVW R26,R28
	ADIW R26,6
	CALL __ADDW2R15
	MOVW R16,R26
	MOVW R26,R28
	ADIW R26,14
	CALL __ADDW2R15
	CALL SUBOPT_0x27A
	LDI  R30,LOW(0)
	STD  Y+8,R30
	STD  Y+8+1,R30
	MOVW R26,R28
	ADIW R26,10
	CALL SUBOPT_0x24A
	ST   -Y,R17
	ST   -Y,R16
	CALL SUBOPT_0x2F7
	MOVW R26,R28
	ADIW R26,14
	RCALL __print_G104
	MOVW R18,R30
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	LDI  R30,LOW(0)
	ST   X,R30
	MOVW R30,R18
_0x20E0004:
	CALL __LOADLOCR4
	ADIW R28,10
	POP  R15
	RET
_vsprintf:
	ST   -Y,R27
	ST   -Y,R26
	SBIW R28,6
	ST   -Y,R17
	ST   -Y,R16
	LDD  R30,Y+14
	LDD  R31,Y+14+1
	SBIW R30,0
	BRNE _0x20800D8
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x20E0002
_0x20800D8:
	LDD  R30,Y+14
	LDD  R31,Y+14+1
	STD  Y+4,R30
	STD  Y+4+1,R31
	LDI  R30,LOW(0)
	STD  Y+6,R30
	STD  Y+6+1,R30
	CALL SUBOPT_0xC2
	CALL __PUTPARD1
	LDD  R30,Y+12
	LDD  R31,Y+12+1
	ST   -Y,R31
	ST   -Y,R30
	CALL SUBOPT_0x2F7
	MOVW R26,R28
	ADIW R26,12
	RCALL __print_G104
	MOVW R16,R30
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	LDI  R30,LOW(0)
	ST   X,R30
	MOVW R30,R16
_0x20E0002:
	LDD  R17,Y+1
	LDD  R16,Y+0
_0x20E0003:
	ADIW R28,16
	RET

	.CSEG
_isdigit:
	ST   -Y,R26
    ldi  r30,1
    ld   r31,y+
    cpi  r31,'0'
    brlo isdigit0
    cpi  r31,'9'+1
    brlo isdigit1
isdigit0:
    clr  r30
isdigit1:
    ret
_isprint:
	ST   -Y,R26
    ldi  r30,1
    ld   r31,y+
    cpi  r31,32
    brlo isprint0
    cpi  r31,128
    brlo isprint1
isprint0:
    clr  r30
isprint1:
    ret
_isspace:
	ST   -Y,R26
    ldi  r30,1
    ld   r31,y+
    cpi  r31,' '
    breq isspace1
    cpi  r31,9
    brlo isspace0
    cpi  r31,13+1
    brlo isspace1
isspace0:
    clr  r30
isspace1:
    ret
_isxdigit:
	ST   -Y,R26
    ldi  r30,1
    ld   r31,y+
    subi r31,0x30
    brcs isxdigit0
    cpi  r31,10
    brcs isxdigit1
    andi r31,0x5f
    subi r31,7
    cpi  r31,10
    brcs isxdigit0
    cpi  r31,16
    brcs isxdigit1
isxdigit0:
    clr  r30
isxdigit1:
    ret
_tolower:
	ST   -Y,R26
    ld   r30,y+
    cpi  r30,'A'
    brlo tolower1
    cpi  r30,'Z'+1
    brcc tolower1
    subi r30,-32
tolower1:
    ret

	.CSEG
_ftrunc:
	CALL __PUTPARD2
   ldd  r23,y+3
   ldd  r22,y+2
   ldd  r31,y+1
   ld   r30,y
   bst  r23,7
   lsl  r23
   sbrc r22,7
   sbr  r23,1
   mov  r25,r23
   subi r25,0x7e
   breq __ftrunc0
   brcs __ftrunc0
   cpi  r25,24
   brsh __ftrunc1
   clr  r26
   clr  r27
   clr  r24
__ftrunc2:
   sec
   ror  r24
   ror  r27
   ror  r26
   dec  r25
   brne __ftrunc2
   and  r30,r26
   and  r31,r27
   and  r22,r24
   rjmp __ftrunc1
__ftrunc0:
   clt
   clr  r23
   clr  r30
   clr  r31
   clr  r22
__ftrunc1:
   cbr  r22,0x80
   lsr  r23
   brcc __ftrunc3
   sbr  r22,0x80
__ftrunc3:
   bld  r23,7
   ld   r26,y+
   ld   r27,y+
   ld   r24,y+
   ld   r25,y+
   cp   r30,r26
   cpc  r31,r27
   cpc  r22,r24
   cpc  r23,r25
   bst  r25,7
   ret
_floor:
	CALL __PUTPARD2
	CALL SUBOPT_0x7A
	CALL _ftrunc
	CALL SUBOPT_0x8D
    brne __floor1
__floor0:
	CALL SUBOPT_0x75
	RJMP _0x20E0001
__floor1:
    brtc __floor0
	CALL SUBOPT_0x75
	__GETD2N 0x3F800000
	CALL __SUBF12
_0x20E0001:
	ADIW R28,4
	RET

	.DSEG
_flag_PackageTerminate3:
	.BYTE 0x1
_rxPackage3:
	.BYTE 0x40
_rx_buffer0:
	.BYTE 0x1F4
_rx_wr_index0:
	.BYTE 0x2
_rx_rd_index0:
	.BYTE 0x2
_rx_counter0:
	.BYTE 0x2
_configRd:
	.BYTE 0x145
_configLen:
	.BYTE 0x2
_config_start:
	.BYTE 0x1
_config_ready:
	.BYTE 0x1
_config_end:
	.BYTE 0x1
_config_response:
	.BYTE 0x1
_hwCalId:
	.BYTE 0x2

	.ESEG
_config_prop:
	.DB  0x45,0x6E,0x64,0x50
	.DB  0x6F,0x69,0x6E,0x74
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x43,0x4F,0x4D,0x4D
	.DB  0x2D,0x45,0x54,0x48
	.DB  0x2D,0x30,0x2E,0x30
	.DB  0x31,0x61,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x54,0x65,0x73,0x74
	.DB  0x45,0x6E,0x64,0x50
	.DB  0x6F,0x69,0x6E,0x74
	.DB  0x30,0x31,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x30,0x30,0x30,0x30
	.DB  0x30,0x30,0x30,0x30
	.DB  0x30,0x30,0x31,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x69,0x4E,0x54,0x45
	.DB  0x4C,0x45,0x4E,0x49
	.DB  0x43,0x73,0x20,0x43
	.DB  0x6F,0x6D,0x70,0x61
	.DB  0x6E,0x79,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x53,0x54,0x52,0x49
	.DB  0x2D,0x37,0x30,0x33
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x7
_config_oper:
	.DB  0x20,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
_config_sens:
	.DB  0x2C,0x1,0x0,0x80
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0xA,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0xA
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x2C,0x1,0x0
	.DB  0x80,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0xA,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0xA,0x0,0x0,0x0
	.DB  0x0,0x0,0x2C,0x1
	.DB  0x0,0x80,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0xA
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0xA,0x0,0x0
	.DB  0x0,0x0,0x0,0x2C
	.DB  0x1,0x0,0x80,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0xA,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0xA,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x2C,0x1,0x0,0x80
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0xA,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0xA
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0
_config_din:
	.DB  0x0,0xF,0x0,0x0
	.DB  0xF,0x0,0x0,0xF
	.DB  0x0,0x0,0xF,0x0
	.DB  0x0,0xF,0x0,0x0
	.DB  0xF,0x0,0x0,0xF
	.DB  0x0,0x0,0xF,0x0
	.DB  0x0,0xF,0x0,0x0
	.DB  0xF,0x0,0x0,0xF
	.DB  0x0,0x0,0xF,0x0
	.DB  0x0,0xF,0x0,0x0
	.DB  0xF,0x0,0x0,0xF
	.DB  0x0,0x0,0xF,0x0
_config_dout:
	.DB  0x0,0x1,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x1
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x1,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x1
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x1,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0
_config_ain:
	.DB  0x0,0x0,0x0,0xC0
	.DB  0x3F,0x0,0x0,0x0
	.DB  0xC0,0x3F,0x0,0x0
	.DB  0x0,0xC0,0x3F,0x0
	.DB  0x0,0x0,0xC0,0x3F
	.DB  0x0,0x0,0x0,0xC0
	.DB  0x3F,0x0,0x0,0x0
	.DB  0xC0,0x3F,0x0,0x0
	.DB  0x0,0xC0,0x3F,0x0
	.DB  0x0,0x0,0xC0,0x3F
	.DB  0x0,0x0,0x0,0xC0
	.DB  0x3F,0x0,0x0,0x0
	.DB  0xC0,0x3F,0x0,0x0
	.DB  0x0,0xC0,0x3F,0x0
	.DB  0x0,0x0,0xC0,0x3F
	.DB  0x0,0x0,0x0,0xC0
	.DB  0x3F,0x0,0x0,0x0
	.DB  0xC0,0x3F,0x0,0x0
	.DB  0x0,0xC0,0x3F,0x0
	.DB  0x0,0x0,0xC0,0x3F
_config_aout:
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
_config_buzz:
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0
_config_alm:
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0
_config_stat:
	.DB  0x30,0x3C
	.DB  0x0
_config_prop_flag:
	.DB  0x0
_config_oper_flag:
	.DB  0x0
_config_sens_flag:
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0
_config_din_flag:
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
_config_dout_flag:
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0
_config_ain_flag:
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
_config_aout_flag:
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
_config_buzz_flag:
	.DB  0x0
_config_alm_flag:
	.DB  0x0
_config_stat_flag:
	.DB  0x0

	.DSEG
_is_properties_config_update:
	.BYTE 0x1
_is_operating_config_update:
	.BYTE 0x1
_is_sensor_config_update:
	.BYTE 0x5
_is_din_config_update:
	.BYTE 0x10
_is_dout_config_update:
	.BYTE 0x5
_is_buzzer_config_update:
	.BYTE 0x1
_is_status_config_update:
	.BYTE 0x1
_is_env_config_update:
	.BYTE 0x1
_properties_config:
	.BYTE 0xA1
_operating_config:
	.BYTE 0x8
_sensor_config:
	.BYTE 0x91
_din_config:
	.BYTE 0x30
_dout_config:
	.BYTE 0xBE
_buzz_config:
	.BYTE 0x25
_status_config:
	.BYTE 0x3
_env_config:
	.BYTE 0x12
_baseCounter:
	.BYTE 0x4
_eth_waitQueue:
	.BYTE 0xA5

	.ESEG
_DEVICE_SERIAL:
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x2,0x22

	.DSEG
_ETH_current_mode:
	.BYTE 0x1
_commLostTimer:
	.BYTE 0x4
_duplicateListClear:
	.BYTE 0x1
_logDataWait:
	.BYTE 0x5
_logEventWait:
	.BYTE 0x5
_raw_rtc:
	.BYTE 0x4
_prtc_get_time:
	.BYTE 0x4
_prtc_get_date:
	.BYTE 0x4
_d_out:
	.BYTE 0x2
_adcData:
	.BYTE 0x14

	.ESEG
_eep_vref_val:
	.DB  0xA,0xD7,0x23,0x40

	.DSEG
_sensor:
	.BYTE 0x19
_sdFreeSpace:
	.BYTE 0x4
_sensorStatus:
	.BYTE 0x5
_dataStatus:
	.BYTE 0x5
_mtncStatus:
	.BYTE 0x1
_powerSrcStatus:
	.BYTE 0x1
_batteryStatus:
	.BYTE 0x1
_dinStatus:
	.BYTE 0x2
_doutStatus:
	.BYTE 0x2
_serverCommStatus:
	.BYTE 0x1
_lanStatus:
	.BYTE 0x1
_memoryStatus:
	.BYTE 0x1
_batteryVolt:
	.BYTE 0x4
_muteAlarmExpired:
	.BYTE 0x4
_muteMode:
	.BYTE 0x1
_sensorAlarm:
	.BYTE 0x5
_dataAlarm:
	.BYTE 0x5
_dinAlarm:
	.BYTE 0x10
_batteryAlarm:
	.BYTE 0x1
_memoryAlarm:
	.BYTE 0x1
_LOGFILE_DATA:
	.BYTE 0x9
_LOGFILE_EVENT:
	.BYTE 0xA
_LOGFILE_ERROR:
	.BYTE 0xA
_LOG_INIT_STR:
	.BYTE 0x10
_LOG_openFile:
	.BYTE 0x4
_LOG_closeFile:
	.BYTE 0x4
_isDataLogEmpty:
	.BYTE 0x1
_isEventLogEmpty:
	.BYTE 0x1
_ETH_rst_timer_S0000001000:
	.BYTE 0x4
_adcBatt:
	.BYTE 0x4
_sess_list:
	.BYTE 0x64
_sensorCalConfig:
	.BYTE 0xC

	.ESEG
_sensorCalulate:
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
	.DB  0x0,0x0

	.DSEG
_pfCalibrate:
	.BYTE 0x4
_dhtDevice:
	.BYTE 0xA
_dataQ:
	.BYTE 0x64
_dataQ_len:
	.BYTE 0x2
_t_S00F0001000:
	.BYTE 0x4
_t_flag_S00F0001000:
	.BYTE 0x1
_lastCheck_S00F0001000:
	.BYTE 0x1
_t_S00F0005000:
	.BYTE 0x14
_flag_lower_S00F0005000:
	.BYTE 0x5
_flag_upper_S00F0005000:
	.BYTE 0x5
_t_S00F0006000:
	.BYTE 0x8
_lastDinCheck_S00F0006000:
	.BYTE 0x2
_steadyState_S00F0006000:
	.BYTE 0x2
_eventQ:
	.BYTE 0x78
_last_wr_eventQ:
	.BYTE 0x2
_last_rd_eventQ:
	.BYTE 0x2
_eventQ_len:
	.BYTE 0x2
_ainAlarm:
	.BYTE 0x10
_mtncAlarm:
	.BYTE 0x1
_powerSrcAlarm:
	.BYTE 0x1
_communicationAlarm:
	.BYTE 0x1
_gsmAlarm:
	.BYTE 0x1
_gsmBalanceAlarm:
	.BYTE 0x1
_t_S0110003000:
	.BYTE 0x4
_t_flag_S0110003000:
	.BYTE 0x1
_lastCheck_S0110003000:
	.BYTE 0x1
_t_S0110004000:
	.BYTE 0x4
_t_flag_S0110004000:
	.BYTE 0x1
_lastCheck_S0110004000:
	.BYTE 0x1
_t_S0110005000:
	.BYTE 0x4
_t_flag_S0110005000:
	.BYTE 0x1
_t_S0110006000:
	.BYTE 0x8
_t_flag_S0110006000:
	.BYTE 0x2
_lastCheck_S0110006000:
	.BYTE 0x2
_t_S0110007000:
	.BYTE 0x14
_t_flag_S0110007000:
	.BYTE 0x5
_lastCheck_S0110007000:
	.BYTE 0x5
_t_S0110008000:
	.BYTE 0x14
_t_flag_S0110008000:
	.BYTE 0x5
_fat:
	.BYTE 0x232
_pfat:
	.BYTE 0x2
_root_path:
	.BYTE 0x4
_eventLogQueue:
	.BYTE 0x8C
_eventLogQCount:
	.BYTE 0x1
_dataLogQueue:
	.BYTE 0x6E
_dataLogQCount:
	.BYTE 0x1

	.ESEG
_userPwd:
	.DB  0x0,0x0,0x0,0x0
_servicePwd:
	.DB  0x2,0x4,0x7,0x5

	.DSEG
_currentPage:
	.BYTE 0x1
_n:
	.BYTE 0x2
_a:
	.BYTE 0x30
__seed_G100:
	.BYTE 0x4
_status_G102:
	.BYTE 0x1
_timer1_G102:
	.BYTE 0x1
_timer2_G102:
	.BYTE 0x1
_card_type_G102:
	.BYTE 0x1
_pv_S102000B000:
	.BYTE 0x1
_FatFs_G103:
	.BYTE 0x2
_Fsid_G103:
	.BYTE 0x2
_Drive_G103:
	.BYTE 0x1

	.CSEG
;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:19 WORDS
SUBOPT_0x0:
	__GETWRN 18,19,0
	__GETWRN 20,21,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:39 WORDS
SUBOPT_0x1:
	ST   -Y,R21
	ST   -Y,R20
	__MULBNWRU 20,21,38
	__ADDW1MN _dout_config,1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 258 TIMES, CODE SIZE REDUCTION:1025 WORDS
SUBOPT_0x2:
	CALL __PUTPARD1
	LDI  R24,0
	CALL _printDebug
	ADIW R28,4
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x3:
	__POINTW1MN _operating_config,3
	ADD  R30,R18
	ADC  R31,R19
	LD   R30,Z
	CPI  R30,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:11 WORDS
SUBOPT_0x4:
	MOVW R30,R18
	MOVW R26,R28
	SUBI R26,LOW(-(65))
	SBCI R27,HIGH(-(65))
	CALL __LSLW2
	ADD  R30,R26
	ADC  R31,R27
	ST   -Y,R31
	ST   -Y,R30
	__GETD2N 0x5
	JMP  _TIMER_setTimer

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x5:
	MOVW R30,R28
	ADIW R30,61
	ST   -Y,R31
	ST   -Y,R30
	__GETD2N 0x7
	JMP  _TIMER_setTimer

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x6:
	MOVW R30,R28
	ADIW R30,57
	ST   -Y,R31
	ST   -Y,R30
	__GETD2N 0x3C
	JMP  _TIMER_setTimer

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x7:
	MOVW R30,R28
	ADIW R30,53
	ST   -Y,R31
	ST   -Y,R30
	__GETD2N 0x12C
	JMP  _TIMER_setTimer

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x8:
	LDI  R26,LOW(7)
	LDI  R27,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 35 TIMES, CODE SIZE REDUCTION:65 WORDS
SUBOPT_0x9:
	__GETD2S 12
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 13 TIMES, CODE SIZE REDUCTION:21 WORDS
SUBOPT_0xA:
	__GETD1S 16
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0xB:
	LDI  R26,LOW(_properties_config)
	LDI  R27,HIGH(_properties_config)
	CALL _getPropertiesConfig
	LDI  R30,LOW(0)
	STS  _is_properties_config_update,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0xC:
	LDI  R26,LOW(_operating_config)
	LDI  R27,HIGH(_operating_config)
	CALL _getOperatingConfig
	LDI  R30,LOW(0)
	STS  _is_operating_config_update,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0xD:
	ADD  R26,R18
	ADC  R27,R19
	LD   R30,X
	CPI  R30,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0xE:
	__MULBNWRU 18,19,29
	SUBI R30,LOW(-_sensor_config)
	SBCI R31,HIGH(-_sensor_config)
	MOVW R26,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:12 WORDS
SUBOPT_0xF:
	CALL __PUTPARD1
	MOVW R30,R18
	CALL __CWD1
	CALL __PUTPARD1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 281 TIMES, CODE SIZE REDUCTION:557 WORDS
SUBOPT_0x10:
	LDI  R24,4
	CALL _printDebug
	ADIW R28,8
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x11:
	ADD  R26,R18
	ADC  R27,R19
	LDI  R30,LOW(0)
	ST   X,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0x12:
	LDI  R26,LOW(_buzz_config)
	LDI  R27,HIGH(_buzz_config)
	CALL _getBuzzerConfig
	LDI  R30,LOW(0)
	STS  _is_buzzer_config_update,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
SUBOPT_0x13:
	__MULBNWRU 18,19,3
	SUBI R30,LOW(-_din_config)
	SBCI R31,HIGH(-_din_config)
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0x14:
	SUBI R30,LOW(-_dout_config)
	SBCI R31,HIGH(-_dout_config)
	MOVW R26,R30
	CALL _getAuxDoutConfig
	LDI  R26,LOW(_is_dout_config_update)
	LDI  R27,HIGH(_is_dout_config_update)
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0x15:
	LDI  R26,LOW(_status_config)
	LDI  R27,HIGH(_status_config)
	CALL _getStatusReportConfig
	LDI  R30,LOW(0)
	STS  _is_status_config_update,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0x16:
	LDI  R26,LOW(_env_config)
	LDI  R27,HIGH(_env_config)
	CALL _getEnvAlarmConfig
	LDI  R30,LOW(0)
	STS  _is_env_config_update,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x17:
	ST   -Y,R19
	ST   -Y,R18
	__MULBNWRU 18,19,5
	SUBI R30,LOW(-_sensor)
	SBCI R31,HIGH(-_sensor)
	MOVW R26,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x18:
	MOVW R30,R18
	MOVW R26,R28
	SUBI R26,LOW(-(65))
	SBCI R27,HIGH(-(65))
	CALL __LSLW2
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 30 TIMES, CODE SIZE REDUCTION:55 WORDS
SUBOPT_0x19:
	ADD  R26,R30
	ADC  R27,R31
	CALL __GETD1P
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:18 WORDS
SUBOPT_0x1A:
	MOVW R26,R30
	MOVW R24,R22
	CALL _TIMER_checkTimerExceed
	SBIW R30,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 18 TIMES, CODE SIZE REDUCTION:31 WORDS
SUBOPT_0x1B:
	ADD  R30,R26
	ADC  R31,R27
	ST   -Y,R31
	ST   -Y,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 22 TIMES, CODE SIZE REDUCTION:39 WORDS
SUBOPT_0x1C:
	CALL __GETW1P
	CLR  R22
	CLR  R23
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x1D:
	MOVW R26,R30
	MOVW R24,R22
	JMP  _TIMER_setTimer

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x1E:
	SUBI R30,LOW(-_sensor)
	SBCI R31,HIGH(-_sensor)
	MOVW R26,R30
	CALL __GETD1P
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 32 TIMES, CODE SIZE REDUCTION:121 WORDS
SUBOPT_0x1F:
	CALL __PUTPARD1
	LDI  R24,8
	CALL _printDebug
	ADIW R28,12
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x20:
	CALL _checkAlarm
	__PUTW1SX 87
	SBIW R30,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x21:
	__MULBNWRU 20,21,38
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x22:
	__PUTW1SX 87
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
SUBOPT_0x23:
	__GETD1N 0xFFFFFFFF
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x24:
	STS  _muteAlarmExpired,R30
	STS  _muteAlarmExpired+1,R31
	STS  _muteAlarmExpired+2,R22
	STS  _muteAlarmExpired+3,R23
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x25:
	ST   -Y,R31
	ST   -Y,R30
	__GETD2N 0xA
	JMP  _TIMER_setTimer

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x26:
	LDS  R26,_sdFreeSpace
	LDS  R27,_sdFreeSpace+1
	LDS  R24,_sdFreeSpace+2
	LDS  R25,_sdFreeSpace+3
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 110 TIMES, CODE SIZE REDUCTION:542 WORDS
SUBOPT_0x27:
	CLR  R31
	CLR  R22
	CLR  R23
	CALL __PUTPARD1
	RJMP SUBOPT_0x10

;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:25 WORDS
SUBOPT_0x28:
	CALL __SAVELOCR6
	__GETWRN 16,17,0
	RJMP SUBOPT_0x0

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
SUBOPT_0x29:
	__MULBNWRU 18,19,29
	__ADDW1MN _sensor_config,8
	LD   R30,Z
	CPI  R30,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x2A:
	LDS  R26,_ETH_rst_timer_S0000001000
	LDS  R27,_ETH_rst_timer_S0000001000+1
	LDS  R24,_ETH_rst_timer_S0000001000+2
	LDS  R25,_ETH_rst_timer_S0000001000+3
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 24 TIMES, CODE SIZE REDUCTION:112 WORDS
SUBOPT_0x2B:
	__CPD2N 0xFFFFFFFF
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x2C:
	ST   -Y,R31
	ST   -Y,R30
	__GETD2N 0xF
	JMP  _TIMER_setTimer

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:15 WORDS
SUBOPT_0x2D:
	CALL __PUTPARD1
	LDS  R26,_baseCounter
	LDS  R27,_baseCounter+1
	LDS  R24,_baseCounter+2
	LDS  R25,_baseCounter+3
	LDS  R30,_ETH_rst_timer_S0000001000
	LDS  R31,_ETH_rst_timer_S0000001000+1
	LDS  R22,_ETH_rst_timer_S0000001000+2
	LDS  R23,_ETH_rst_timer_S0000001000+3
	CALL __SUBD12
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:15 WORDS
SUBOPT_0x2E:
	MOVW R20,R30
	__ORWRR 16,17,20,21
	MOV  R0,R20
	OR   R0,R21
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:27 WORDS
SUBOPT_0x2F:
	CALL _DS1672_read
	__PUTD1S 7
	LDD  R30,Y+6
	CPI  R30,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:19 WORDS
SUBOPT_0x30:
	LDI  R24,0
	CALL _printDebug
	ADIW R28,4
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:29 WORDS
SUBOPT_0x31:
	__GETD1S 7
	CALL __PUTPARD1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:21 WORDS
SUBOPT_0x32:
	ST   -Y,R30
	LDD  R26,Y+11
	CALL _addEventQueue
	MOVW R20,R30
	TST  R21
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:21 WORDS
SUBOPT_0x33:
	__POINTD1FN _0x0,423
	RJMP SUBOPT_0x2

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x34:
	ST   -Y,R19
	ST   -Y,R18
	MOVW R26,R28
	ADIW R26,8
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x35:
	MOVW R30,R18
	ADIW R30,1
	CALL __CWD1
	CALL __PUTPARD1
	RJMP SUBOPT_0x10

;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
SUBOPT_0x36:
	CALL __SAVELOCR6
	__GETWRN 16,17,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:21 WORDS
SUBOPT_0x37:
	LDI  R31,0
	CPI  R30,LOW(0x10)
	LDI  R26,HIGH(0x10)
	CPC  R31,R26
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
SUBOPT_0x38:
	LDI  R26,LOW(11)
	LDI  R27,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:74 WORDS
SUBOPT_0x39:
	CALL __PUTPARD1
	MOVW R30,R20
	CALL __CWD1
	CALL __PUTPARD1
	RJMP SUBOPT_0x10

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x3A:
	MOVW R30,R20
	__ADDWRN 20,21,1
	ADD  R30,R18
	ADC  R31,R19
	MOVW R26,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x3B:
	MOVW R30,R20
	__ADDWRN 20,21,1
	ADD  R30,R18
	ADC  R31,R19
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:27 WORDS
SUBOPT_0x3C:
	ST   -Y,R31
	ST   -Y,R30
	LDI  R26,LOW(4)
	LDI  R27,0
	JMP  _memcpy

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x3D:
	CALL _DS1672_read
	__PUTD1S 8
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 26 TIMES, CODE SIZE REDUCTION:47 WORDS
SUBOPT_0x3E:
	__GETD1S 8
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x3F:
	MOVW R30,R28
	ADIW R30,10
	ST   -Y,R31
	ST   -Y,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
SUBOPT_0x40:
	CALL __PUTPARD1
	__GETD1S 14
	CALL __PUTPARD1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:33 WORDS
SUBOPT_0x41:
	CLR  R22
	CLR  R23
	CALL __PUTPARD1
	__GETD1S 18
	CALL __PUTPARD1
	LDI  R24,12
	CALL _printDebug
	ADIW R28,16
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 21 TIMES, CODE SIZE REDUCTION:37 WORDS
SUBOPT_0x42:
	__GETD2S 10
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x43:
	RCALL SUBOPT_0x42
	RJMP SUBOPT_0x2B

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
SUBOPT_0x44:
	ST   -Y,R30
	__GETD1S 11
	CALL __PUTPARD1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x45:
	__GETD2S 13
	JMP  _ETH_sendDataReportCmd

;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
SUBOPT_0x46:
	MOVW R30,R28
	ADIW R30,6
	ST   -Y,R31
	ST   -Y,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x47:
	CALL __PUTPARD1
	__GETD1S 10
	CALL __PUTPARD1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:25 WORDS
SUBOPT_0x48:
	MOV  R30,R21
	CLR  R31
	CLR  R22
	CLR  R23
	CALL __PUTPARD1
	MOV  R30,R20
	CLR  R31
	CLR  R22
	CLR  R23
	CALL __PUTPARD1
	LDI  R24,12
	CALL _printDebug
	ADIW R28,16
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 21 TIMES, CODE SIZE REDUCTION:37 WORDS
SUBOPT_0x49:
	__GETD2S 6
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
SUBOPT_0x4A:
	MOVW R30,R28
	ADIW R30,12
	ST   -Y,R31
	ST   -Y,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
SUBOPT_0x4B:
	CALL __PUTPARD1
	RCALL SUBOPT_0xA
	CALL __PUTPARD1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x4C:
	RCALL SUBOPT_0x9
	RJMP SUBOPT_0x2B

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x4D:
	MOVW R30,R28
	ADIW R30,16
	ST   -Y,R31
	ST   -Y,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:21 WORDS
SUBOPT_0x4E:
	LDI  R26,LOW(_LOGFILE_DATA)
	LDI  R27,HIGH(_LOGFILE_DATA)
	__CALL1MN _LOG_openFile,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:53 WORDS
SUBOPT_0x4F:
	CALL __PUTPARD1
	LDI  R30,LOW(_LOGFILE_DATA)
	LDI  R31,HIGH(_LOGFILE_DATA)
	CLR  R22
	CLR  R23
	CALL __PUTPARD1
	RJMP SUBOPT_0x10

;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
SUBOPT_0x50:
	__GETD1S 14
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x51:
	__GETD2S 14
	JMP  _LOG_insertData

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x52:
	__CALL1MN _LOG_closeFile,0
	MOVW R20,R30
	TST  R21
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x53:
	MOVW R30,R28
	ADIW R30,7
	ST   -Y,R31
	ST   -Y,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x54:
	__GETD1S 11
	CALL __PUTPARD1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 22 TIMES, CODE SIZE REDUCTION:60 WORDS
SUBOPT_0x55:
	CLR  R31
	CLR  R22
	CLR  R23
	CALL __PUTPARD1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x56:
	LDI  R24,12
	CALL _printDebug
	ADIW R28,16
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x57:
	__GETD2S 7
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x58:
	MOVW R30,R28
	ADIW R30,11
	ST   -Y,R31
	ST   -Y,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:21 WORDS
SUBOPT_0x59:
	LDI  R26,LOW(_LOGFILE_EVENT)
	LDI  R27,HIGH(_LOGFILE_EVENT)
	__CALL1MN _LOG_openFile,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:37 WORDS
SUBOPT_0x5A:
	CALL __PUTPARD1
	LDI  R30,LOW(_LOGFILE_EVENT)
	LDI  R31,HIGH(_LOGFILE_EVENT)
	CLR  R22
	CLR  R23
	CALL __PUTPARD1
	RJMP SUBOPT_0x10

;OPTIMIZER ADDED SUBROUTINE, CALLED 17 TIMES, CODE SIZE REDUCTION:29 WORDS
SUBOPT_0x5B:
	__GETD1S 9
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x5C:
	MOVW R30,R28
	ADIW R30,18
	ST   -Y,R31
	ST   -Y,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x5D:
	RCALL SUBOPT_0x42
	CALL __CPD02
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
SUBOPT_0x5E:
	LDI  R30,LOW(0)
	STS  _logDataWait,R30
	__GETD1N 0x0
	__PUTD1MN _logDataWait,1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x5F:
	__GETD1MN _logDataWait,1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
SUBOPT_0x60:
	MOVW R26,R28
	ADIW R26,18
	__CALL1MN _LOG_closeFile,0
	MOVW R16,R30
	TST  R17
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
SUBOPT_0x61:
	LDI  R30,LOW(0)
	STS  _logEventWait,R30
	__GETD1N 0x0
	__PUTD1MN _logEventWait,1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x62:
	__GETD1MN _logEventWait,1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x63:
	LDI  R30,LOW(_LOGFILE_EVENT)
	LDI  R31,HIGH(_LOGFILE_EVENT)
	CLR  R22
	CLR  R23
	CALL __PUTPARD1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x64:
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
	CALL __LOADLOCR6
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
SUBOPT_0x65:
	LDI  R26,LOW(2)
	LDI  R27,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x66:
	LDI  R26,LOW(100)
	LDI  R27,0
	JMP  _delay_ms

;OPTIMIZER ADDED SUBROUTINE, CALLED 18 TIMES, CODE SIZE REDUCTION:31 WORDS
SUBOPT_0x67:
	LDI  R26,LOW(1)
	LDI  R27,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x68:
	LDI  R26,LOW(3)
	LDI  R27,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 15 TIMES, CODE SIZE REDUCTION:25 WORDS
SUBOPT_0x69:
	LDI  R26,LOW(4)
	LDI  R27,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x6A:
	MOVW R26,R30
	CALL __GETD1P
	CALL __PUTPARD1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:29 WORDS
SUBOPT_0x6B:
	STS  258,R30
	LDI  R26,LOW(200)
	LDI  R27,0
	CALL _delay_ms
	LDS  R30,258
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x6C:
	LDI  R26,LOW(50)
	LDI  R27,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:14 WORDS
SUBOPT_0x6D:
	ST   -Y,R0
	ST   -Y,R1
	ST   -Y,R15
	ST   -Y,R22
	ST   -Y,R23
	ST   -Y,R24
	ST   -Y,R25
	ST   -Y,R26
	ST   -Y,R27
	ST   -Y,R30
	ST   -Y,R31
	IN   R30,RAMPZ
	ST   -Y,R30
	IN   R30,EIND
	ST   -Y,R30
	IN   R30,SREG
	ST   -Y,R30
	ST   -Y,R17
	ST   -Y,R16
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:18 WORDS
SUBOPT_0x6E:
	LD   R30,X+
	LD   R31,X+
	ADIW R30,1
	ST   -X,R31
	ST   -X,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 17 TIMES, CODE SIZE REDUCTION:29 WORDS
SUBOPT_0x6F:
	ST   -Y,R27
	ST   -Y,R26
	CALL __SAVELOCR4
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
SUBOPT_0x70:
	LDD  R30,Y+8
	LDD  R31,Y+8+1
	ADIW R30,1
	STD  Y+8,R30
	STD  Y+8+1,R31
	SBIW R30,1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 23 TIMES, CODE SIZE REDUCTION:41 WORDS
SUBOPT_0x71:
	ST   -Y,R27
	ST   -Y,R26
	ST   -Y,R17
	ST   -Y,R16
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
SUBOPT_0x72:
	LDD  R26,Y+1
	LDD  R27,Y+1+1
	CLR  R30
	ADD  R26,R17
	ADC  R27,R30
	LD   R30,X
	CPI  R30,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x73:
	LDD  R26,Y+1
	LDD  R27,Y+1+1
	CLR  R30
	ADD  R26,R17
	ADC  R27,R30
	LD   R26,X
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x74:
	CALL __PUTPARD2
	CALL __GETD1S0
	CALL __CPD10
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 27 TIMES, CODE SIZE REDUCTION:49 WORDS
SUBOPT_0x75:
	CALL __GETD1S0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:27 WORDS
SUBOPT_0x76:
	LDS  R26,_baseCounter
	LDS  R27,_baseCounter+1
	LDS  R24,_baseCounter+2
	LDS  R25,_baseCounter+3
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 20 TIMES, CODE SIZE REDUCTION:35 WORDS
SUBOPT_0x77:
	__GETD1S 4
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:21 WORDS
SUBOPT_0x78:
	CALL __ADDD12
	CALL __PUTD1S0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x79:
	LDS  R30,_baseCounter
	LDS  R31,_baseCounter+1
	LDS  R22,_baseCounter+2
	LDS  R23,_baseCounter+3
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 13 TIMES, CODE SIZE REDUCTION:21 WORDS
SUBOPT_0x7A:
	CALL __GETD2S0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:37 WORDS
SUBOPT_0x7B:
	CALL __PUTPARD1
	__GETD1S 12
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 14 TIMES, CODE SIZE REDUCTION:49 WORDS
SUBOPT_0x7C:
	__GETD1N 0x0
	CALL __PUTDP1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:12 WORDS
SUBOPT_0x7D:
	ST   -Y,R0
	ST   -Y,R1
	ST   -Y,R15
	ST   -Y,R22
	ST   -Y,R23
	ST   -Y,R24
	ST   -Y,R25
	ST   -Y,R26
	ST   -Y,R27
	ST   -Y,R30
	ST   -Y,R31
	IN   R30,RAMPZ
	ST   -Y,R30
	IN   R30,EIND
	ST   -Y,R30
	IN   R30,SREG
	ST   -Y,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x7E:
	LDI  R30,LOW(254)
	STS  133,R30
	LDI  R30,LOW(121)
	STS  132,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x7F:
	LDI  R30,LOW(133)
	STS  149,R30
	LDI  R30,LOW(237)
	STS  148,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
SUBOPT_0x80:
	CALL __GETD1P_INC
	__SUBD1N -1
	CALL __PUTDP1_DEC
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x81:
	LDI  R30,LOW(133)
	STS  165,R30
	LDI  R30,LOW(237)
	STS  164,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x82:
	STS  289,R30
	LDI  R30,LOW(0)
	STS  293,R30
	STS  292,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
SUBOPT_0x83:
	ST   -Y,R27
	ST   -Y,R26
	LD   R30,Y
	LDD  R31,Y+1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:87 WORDS
SUBOPT_0x84:
	IN   R30,0x6
	ANDI R30,LOW(0xC0)
	LDI  R31,0
	CALL __ASRW2
	CALL __ASRW4
	COM  R30
	COM  R31
	ANDI R30,LOW(0x3)
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:21 WORDS
SUBOPT_0x85:
	IN   R30,0x6
	ANDI R30,LOW(0xC0)
	LDI  R31,0
	CALL __ASRW2
	CALL __ASRW4
	COM  R30
	COM  R31
	ANDI R30,LOW(0x3)
	ANDI R31,HIGH(0x3)
	SBIW R30,1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
SUBOPT_0x86:
	ST   -Y,R17
	ST   -Y,R16
	__GETWRN 16,17,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x87:
	LDI  R31,0
	ANDI R31,HIGH(0xFF)
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x88:
	LDS  R26,_adcBatt
	LDS  R27,_adcBatt+1
	LDS  R24,_adcBatt+2
	LDS  R25,_adcBatt+3
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:17 WORDS
SUBOPT_0x89:
	CLR  R22
	CLR  R23
	CALL __CDF1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x8A:
	CALL __ADDF12
	MOVW R26,R30
	MOVW R24,R22
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:19 WORDS
SUBOPT_0x8B:
	__GETD1N 0x41200000
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x8C:
	__GETD1N 0x447FC000
	CALL __DIVF21
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
SUBOPT_0x8D:
	CALL __PUTD1S0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
SUBOPT_0x8E:
	LDS  R30,264
	ANDI R30,LOW(0xF1)
	STS  264,R30
	LDI  R26,LOW(264)
	LDI  R27,HIGH(264)
	MOV  R0,R26
	LD   R26,X
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x8F:
	LDI  R26,LOW(20)
	LDI  R27,0
	JMP  _delay_ms

;OPTIMIZER ADDED SUBROUTINE, CALLED 16 TIMES, CODE SIZE REDUCTION:27 WORDS
SUBOPT_0x90:
	LDI  R26,LOW(_adcData)
	LDI  R27,HIGH(_adcData)
	CALL __LSLW2
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
SUBOPT_0x91:
	RCALL SUBOPT_0x89
	CALL __PUTDP1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x92:
	CALL _i2c_start
	LDI  R26,LOW(208)
	JMP  _i2c_write

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x93:
	CALL _i2c_write
	JMP  _i2c_stop

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x94:
	LDI  R26,LOW(10)
	LDI  R27,0
	CALL _delay_ms
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 30 TIMES, CODE SIZE REDUCTION:55 WORDS
SUBOPT_0x95:
	__PUTD1S 4
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 27 TIMES, CODE SIZE REDUCTION:49 WORDS
SUBOPT_0x96:
	__GETD2S 4
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x97:
	LDI  R30,LOW(8)
	CALL __LSLD12
	RJMP SUBOPT_0x95

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
SUBOPT_0x98:
	LDI  R31,0
	RCALL SUBOPT_0x96
	CALL __CWD1
	CALL __ADDD12
	RCALL SUBOPT_0x95
	RCALL SUBOPT_0x96
	RJMP SUBOPT_0x97

;OPTIMIZER ADDED SUBROUTINE, CALLED 34 TIMES, CODE SIZE REDUCTION:63 WORDS
SUBOPT_0x99:
	MOV  R30,R17
	LDI  R31,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
SUBOPT_0x9A:
	CALL __CWD1
	CALL __ADDD12
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x9B:
	RCALL SUBOPT_0x95
	RJMP SUBOPT_0x77

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x9C:
	__GETD1N 0x3C
	CALL __DIVD21U
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
SUBOPT_0x9D:
	__PUTD1S 6
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x9E:
	__GETD2N 0x3C
	CALL __MULD12U
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 13 TIMES, CODE SIZE REDUCTION:21 WORDS
SUBOPT_0x9F:
	__PUTD1S 2
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 17 TIMES, CODE SIZE REDUCTION:29 WORDS
SUBOPT_0xA0:
	__GETD1S 2
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 24 TIMES, CODE SIZE REDUCTION:43 WORDS
SUBOPT_0xA1:
	__GETD2S 2
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 27 TIMES, CODE SIZE REDUCTION:49 WORDS
SUBOPT_0xA2:
	__GETD1S 6
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0xA3:
	__PUTD1S 6
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0xA4:
	RCALL SUBOPT_0x49
	__GETD1N 0x5B5
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0xA5:
	__PUTD1S 30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0xA6:
	__GETD2S 26
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0xA7:
	__CPD2N 0x3C
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0xA8:
	__GETD1S 30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:19 WORDS
SUBOPT_0xA9:
	__SUBD1N -1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0xAA:
	__GETD2S 30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0xAB:
	__GETD1S 38
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0xAC:
	__GETD2N 0x16D
	CALL __MULD12U
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0xAD:
	CALL __SWAPD12
	CALL __SUBD12
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0xAE:
	__PUTD1S 22
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0xAF:
	__GETD1S 22
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0xB0:
	__GETD1S 34
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0xB1:
	__CPD1N 0x1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0xB2:
	__CPD1N 0x2
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0xB3:
	__CPD1N 0x3
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0xB4:
	__CPD1N 0x4
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0xB5:
	__CPD1N 0x5
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0xB6:
	__CPD1N 0x6
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0xB7:
	__CPD1N 0x7
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0xB8:
	__CPD1N 0x8
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0xB9:
	__CPD1N 0x9
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0xBA:
	__CPD1N 0xA
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0xBB:
	__CPD1N 0xB
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0xBC:
	__CPD1N 0xC
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0xBD:
	__CPD2N 0x3
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0xBE:
	__GETD1S 26
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0xBF:
	__GETD2S 22
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:19 WORDS
SUBOPT_0xC0:
	__ADDD1N 1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:17 WORDS
SUBOPT_0xC1:
	__GETD1S 18
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0xC2:
	__GETD1S 10
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:17 WORDS
SUBOPT_0xC3:
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
	LDD  R17,Y+1
	LDD  R16,Y+0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
SUBOPT_0xC4:
	RCALL SUBOPT_0x7A
	RJMP SUBOPT_0x78

;OPTIMIZER ADDED SUBROUTINE, CALLED 23 TIMES, CODE SIZE REDUCTION:41 WORDS
SUBOPT_0xC5:
	__GETD2S 8
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 33 TIMES, CODE SIZE REDUCTION:61 WORDS
SUBOPT_0xC6:
	__GETD1S 12
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
SUBOPT_0xC7:
	__SUBD1N 1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0xC8:
	RCALL SUBOPT_0xA
	__GETD2N 0x708
	CALL __MULD12U
	RJMP SUBOPT_0xC4

;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
SUBOPT_0xC9:
	__GETD1S 20
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0xCA:
	__GETD1S 24
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0xCB:
	RCALL SUBOPT_0xC6
	RCALL SUBOPT_0xC5
	CALL __CPD12
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0xCC:
	RCALL SUBOPT_0x9
	RCALL SUBOPT_0x3E
	CALL __SUBD12
	RJMP SUBOPT_0x95

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0xCD:
	RCALL SUBOPT_0x3E
	RCALL SUBOPT_0x9
	CALL __CPD12
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0xCE:
	RCALL SUBOPT_0xC5
	RCALL SUBOPT_0xC6
	CALL __SUBD12
	RJMP SUBOPT_0x95

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
SUBOPT_0xCF:
	RCALL SUBOPT_0x96
	__CPD2N 0xA
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0xD0:
	__POINTD1FN _0xC0000,0
	RJMP SUBOPT_0x7B

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0xD1:
	CALL __PUTPARD1
	RCALL SUBOPT_0xC9
	RJMP SUBOPT_0x4B

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:14 WORDS
SUBOPT_0xD2:
	LDD  R30,Y+12
	MOV  R17,R30
	RCALL SUBOPT_0x9
	LDI  R30,LOW(8)
	CALL __LSRD12
	MOV  R16,R30
	RCALL SUBOPT_0xC6
	CALL __LSRD16
	MOV  R19,R30
	RCALL SUBOPT_0x9
	LDI  R30,LOW(24)
	CALL __LSRD12
	MOV  R18,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
SUBOPT_0xD3:
	LDI  R26,LOW(0)
	CALL _i2c_write
	MOV  R26,R17
	CALL _i2c_write
	MOV  R26,R16
	CALL _i2c_write
	MOV  R26,R19
	CALL _i2c_write
	MOV  R26,R18
	RJMP SUBOPT_0x93

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0xD4:
	ST   -Y,R27
	ST   -Y,R26
	SBIW R28,12
	CALL __SAVELOCR4
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 37 TIMES, CODE SIZE REDUCTION:141 WORDS
SUBOPT_0xD5:
	CALL __CWD1
	CALL __PUTPARD1
	RJMP SUBOPT_0x10

;OPTIMIZER ADDED SUBROUTINE, CALLED 26 TIMES, CODE SIZE REDUCTION:47 WORDS
SUBOPT_0xD6:
	__PUTD1S 12
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0xD7:
	LDI  R26,LOW(60)
	LDI  R27,HIGH(60)
	CALL __MULW12
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0xD8:
	RCALL SUBOPT_0xD6
	RJMP SUBOPT_0xC6

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0xD9:
	STS  _raw_rtc,R30
	STS  _raw_rtc+1,R31
	STS  _raw_rtc+2,R22
	STS  _raw_rtc+3,R23
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0xDA:
	ST   -Y,R27
	ST   -Y,R26
	SBIW R28,4
	ST   -Y,R17
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0xDB:
	RCALL SUBOPT_0x9F
	RJMP SUBOPT_0xA1

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0xDC:
	CALL __PUTPARD1
	LDD  R30,Y+28
	LDD  R31,Y+28+1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 43 TIMES, CODE SIZE REDUCTION:81 WORDS
SUBOPT_0xDD:
	CLR  R22
	CLR  R23
	CALL __PUTPARD1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
SUBOPT_0xDE:
	CALL __PUTPARD1
	__GETD1S 40
	CALL __PUTPARD1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:29 WORDS
SUBOPT_0xDF:
	ST   -Y,R31
	ST   -Y,R30
	LDI  R26,LOW(0)
	LDI  R27,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0xE0:
	ST   -Y,R31
	ST   -Y,R30
	LDI  R30,LOW(0)
	ST   -Y,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0xE1:
	LDI  R26,LOW(161)
	LDI  R27,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0xE2:
	ADD  R26,R16
	ADC  R27,R17
	CALL __EEPROMRDB
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:22 WORDS
SUBOPT_0xE3:
	ADD  R30,R16
	ADC  R31,R17
	MOVW R26,R30
	CALL __EEPROMRDB
	MOVW R26,R0
	ST   X,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0xE4:
	LDD  R30,Y+2
	LDD  R31,Y+2+1
	SUBI R30,LOW(-80)
	SBCI R31,HIGH(-80)
	ADD  R30,R16
	ADC  R31,R17
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0xE5:
	LDD  R30,Y+2
	LDD  R31,Y+2+1
	SUBI R30,LOW(-100)
	SBCI R31,HIGH(-100)
	ADD  R30,R16
	ADC  R31,R17
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0xE6:
	LDD  R30,Y+2
	LDD  R31,Y+2+1
	SUBI R30,LOW(-140)
	SBCI R31,HIGH(-140)
	ADD  R30,R16
	ADC  R31,R17
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0xE7:
	ST   X,R30
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	ADIW R26,1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0xE8:
	ST   X,R30
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	ADIW R26,2
	LDI  R30,LOW(0)
	ST   X,R30
	__GETWRN 16,17,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:15 WORDS
SUBOPT_0xE9:
	LDD  R30,Y+2
	LDD  R31,Y+2+1
	ADIW R30,3
	ADD  R30,R16
	ADC  R31,R17
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0xEA:
	CALL __EEPROMRDB
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	ST   X,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0xEB:
	CALL __EEPROMRDB
	__PUTB1SNS 2,1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0xEC:
	CALL __EEPROMRDB
	__PUTB1SNS 2,2
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0xED:
	CALL __PUTPARD1
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	LD   R30,X
	RJMP SUBOPT_0x27

;OPTIMIZER ADDED SUBROUTINE, CALLED 16 TIMES, CODE SIZE REDUCTION:27 WORDS
SUBOPT_0xEE:
	CALL __PUTPARD1
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0xEF:
	__POINTD1FN _0xE0000,295
	RJMP SUBOPT_0xEE

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0xF0:
	ADIW R30,3
	ADD  R30,R16
	ADC  R31,R17
	LD   R30,Z
	RJMP SUBOPT_0x27

;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:25 WORDS
SUBOPT_0xF1:
	__POINTD1FN _0xE0000,51
	RJMP SUBOPT_0x2

;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0xF2:
	ST   -Y,R27
	ST   -Y,R26
	LDD  R26,Y+3
	TST  R26
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
SUBOPT_0xF3:
	ST   X+,R30
	ST   X,R31
	LD   R26,Y
	LDD  R27,Y+1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0xF4:
	LDI  R30,LOW(0)
	ST   X,R30
	LD   R26,Y
	LDD  R27,Y+1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 30 TIMES, CODE SIZE REDUCTION:84 WORDS
SUBOPT_0xF5:
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	LDI  R30,LOW(29)
	CALL __MULB1W2U
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0xF6:
	__ADDW1MN _config_sens,9
	MOVW R26,R30
	CALL __EEPROMRDD
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0xF7:
	__ADDW1MN _config_sens,13
	MOVW R26,R30
	CALL __EEPROMRDW
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0xF8:
	__ADDW1MN _config_sens,15
	MOVW R26,R30
	CALL __EEPROMRDD
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0xF9:
	__ADDW1MN _config_sens,19
	MOVW R26,R30
	CALL __EEPROMRDD
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0xFA:
	__ADDW1MN _config_sens,23
	MOVW R26,R30
	CALL __EEPROMRDW
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0xFB:
	__ADDW1MN _config_sens,25
	MOVW R26,R30
	CALL __EEPROMRDD
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:19 WORDS
SUBOPT_0xFC:
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
	ST   X+,R30
	ST   X,R31
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
SUBOPT_0xFD:
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	LDI  R30,LOW(3)
	CALL __MULB1W2U
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0xFE:
	MOVW R26,R30
	CALL __EEPROMRDB
	LD   R26,Y
	LDD  R27,Y+1
	ST   X,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0xFF:
	CALL __EEPROMRDW
	__PUTW1SNS 0,1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
SUBOPT_0x100:
	CALL __PUTPARD1
	LDD  R30,Y+8
	LDD  R31,Y+8+1
	RJMP SUBOPT_0xD5

;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:30 WORDS
SUBOPT_0x101:
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	LDI  R30,LOW(38)
	CALL __MULB1W2U
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:27 WORDS
SUBOPT_0x102:
	CALL __PUTPARD1
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	LDI  R30,LOW(38)
	CALL __MULB1W2U
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0x103:
	SUBI R30,LOW(-_config_dout)
	SBCI R31,HIGH(-_config_dout)
	MOVW R26,R30
	CALL __EEPROMRDB
	RJMP SUBOPT_0x27

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0x104:
	__ADDW1MN _config_dout,1
	MOVW R26,R30
	CALL __EEPROMRDB
	RJMP SUBOPT_0x27

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x105:
	__ADDW1MN _config_dout,2
	MOVW R26,R30
	CALL __EEPROMRDB
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
SUBOPT_0x106:
	MOVW R26,R16
	LDI  R31,0
	CP   R26,R30
	CPC  R27,R31
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
SUBOPT_0x107:
	__ADDW1MN _config_dout,3
	ADD  R30,R16
	ADC  R31,R17
	MOVW R26,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:21 WORDS
SUBOPT_0x108:
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	LDI  R30,LOW(5)
	CALL __MULB1W2U
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
SUBOPT_0x109:
	LDD  R30,Y+2
	LDD  R31,Y+2+1
	ADIW R30,6
	ADD  R30,R16
	ADC  R31,R17
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:30 WORDS
SUBOPT_0x10A:
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	LDI  R30,LOW(41)
	CALL __MULB1W2U
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x10B:
	__ADDW1MN _config_aout,5
	MOVW R26,R30
	CALL __EEPROMRDB
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
SUBOPT_0x10C:
	__ADDW1MN _config_aout,6
	ADD  R30,R16
	ADC  R31,R17
	MOVW R26,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
SUBOPT_0x10D:
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	ADIW R30,2
	ADD  R30,R16
	ADC  R31,R17
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x10E:
	__POINTW2MN _config_buzz,1
	CALL __EEPROMRDB
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 23 TIMES, CODE SIZE REDUCTION:41 WORDS
SUBOPT_0x10F:
	CALL __PUTPARD1
	LDD  R26,Y+10
	LDD  R27,Y+10+1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 34 TIMES, CODE SIZE REDUCTION:63 WORDS
SUBOPT_0x110:
	CALL __PUTPARD1
	LDD  R30,Y+10
	LDD  R31,Y+10+1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x111:
	__POINTD1FN _0xE0000,295
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x112:
	ADIW R30,2
	ADD  R30,R16
	ADC  R31,R17
	LD   R30,Z
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x113:
	CALL __PUTPARD1
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x114:
	CALL __GETD1P
	CALL __PUTPARD1
	RJMP SUBOPT_0x10

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x115:
	CALL __GETW1P
	RJMP SUBOPT_0xD5

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x116:
	CALL __PUTPARD1
	LDD  R30,Y+4
	LDD  R31,Y+4+1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x117:
	__GETD2Z 6
	CALL __PUTPARD2
	RJMP SUBOPT_0x10

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x118:
	__GETD2Z 10
	CALL __PUTPARD2
	RJMP SUBOPT_0x10

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x119:
	ADD  R26,R30
	ADC  R27,R31
	LD   R30,X
	MOVW R26,R0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x11A:
	LD   R30,X
	MOVW R26,R0
	CALL __EEPROMWRB
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
SUBOPT_0x11B:
	LDI  R30,LOW(1)
	CALL __EEPROMWRB
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
SUBOPT_0x11C:
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	LDD  R17,Y+1
	LDD  R16,Y+0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 19 TIMES, CODE SIZE REDUCTION:33 WORDS
SUBOPT_0x11D:
	CALL __EEPROMRDB
	RJMP SUBOPT_0x27

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x11E:
	__POINTD1FN _0xE0000,1805
	CALL __PUTPARD1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x11F:
	LD   R26,Y
	LDD  R27,Y+1
	CALL __GETW1P
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
SUBOPT_0x120:
	MOVW R26,R0
	CALL __EEPROMWRW
	RJMP SUBOPT_0xF5

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x121:
	CALL __GETW1P
	RJMP SUBOPT_0x120

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x122:
	CALL __EEPROMWRB
	RJMP SUBOPT_0xF5

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
SUBOPT_0x123:
	CALL __GETD1P
	MOVW R26,R0
	CALL __EEPROMWRD
	RJMP SUBOPT_0xF5

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x124:
	CALL __GETD1P
	MOVW R26,R0
	CALL __EEPROMWRD
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:52 WORDS
SUBOPT_0x125:
	CALL __PUTPARD1
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	LDI  R30,LOW(29)
	CALL __MULB1W2U
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x126:
	MOVW R26,R30
	CALL __EEPROMRDW
	RJMP SUBOPT_0xDD

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x127:
	CLR  R22
	CLR  R23
	RJMP SUBOPT_0x1F

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x128:
	MOVW R0,R30
	LD   R26,Y
	LDD  R27,Y+1
	ADIW R26,1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x129:
	CALL __GETW1P
	MOVW R26,R0
	CALL __EEPROMWRW
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x12A:
	__POINTD1FN _0xE0000,2332
	RJMP SUBOPT_0xEE

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x12B:
	__POINTD1FN _0xE0000,2359
	CALL __PUTPARD1
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x12C:
	CALL __PUTPARD1
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x12D:
	CALL __EEPROMWRB
	RJMP SUBOPT_0x101

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x12E:
	CALL __EEPROMWRB
	__POINTD1FN _0xE0000,2512
	RJMP SUBOPT_0x100

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x12F:
	__POINTD1FN _0xE0000,2603
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x130:
	__POINTD1FN _0xE0000,2630
	RJMP SUBOPT_0x2

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0x131:
	MOVW R26,R30
	CALL __EEPROMRDD
	CALL __PUTPARD1
	RJMP SUBOPT_0x10

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:12 WORDS
SUBOPT_0x132:
	CALL __PUTPARD1
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	LDI  R30,LOW(41)
	CALL __MULB1W2U
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x133:
	__POINTW1MN _config_buzz,2
	ADD  R30,R16
	ADC  R31,R17
	MOVW R26,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x134:
	CALL __EEPROMRDD
	CALL __PUTPARD1
	RJMP SUBOPT_0x10

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x135:
	ADD  R26,R16
	ADC  R27,R17
	LDI  R30,LOW(0)
	ST   X,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
SUBOPT_0x136:
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
	CALL __LOADLOCR4
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x137:
	SBIW R28,10
	CALL __SAVELOCR4
	__GETWRN 16,17,0
	__GETWRN 18,19,0
	MOVW R30,R16
	__ADDWRN 16,17,1
	MOVW R26,R28
	ADIW R26,4
	ADD  R26,R30
	ADC  R27,R31
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 19 TIMES, CODE SIZE REDUCTION:87 WORDS
SUBOPT_0x138:
	MOVW R30,R16
	__ADDWRN 16,17,1
	MOVW R26,R28
	ADIW R26,4
	ADD  R30,R26
	ADC  R31,R27
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:67 WORDS
SUBOPT_0x139:
	MOVW R0,R30
	LDI  R26,LOW(_DEVICE_SERIAL)
	LDI  R27,HIGH(_DEVICE_SERIAL)
	ADD  R26,R18
	ADC  R27,R19
	CALL __EEPROMRDB
	MOVW R26,R0
	ST   X,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
SUBOPT_0x13A:
	MOVW R30,R28
	ADIW R30,4
	ST   -Y,R31
	ST   -Y,R30
	ST   -Y,R17
	ST   -Y,R16
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x13B:
	LDD  R30,Y+19
	ST   -Y,R30
	LDI  R26,LOW(0)
	LDI  R27,0
	JMP  _ETH_send

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:41 WORDS
SUBOPT_0x13C:
	CALL __SAVELOCR4
	__GETWRN 16,17,0
	__GETWRN 18,19,0
	MOVW R30,R16
	__ADDWRN 16,17,1
	MOVW R26,R28
	ADIW R26,4
	ADD  R26,R30
	ADC  R27,R31
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:18 WORDS
SUBOPT_0x13D:
	ST   -Y,R30
	LDI  R26,LOW(0)
	LDI  R27,0
	CALL _ETH_send
	RJMP SUBOPT_0x136

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0x13E:
	LDD  R30,Y+8
	LDD  R31,Y+8+1
	ADIW R30,15
	MOVW R20,R30
	__CPWRN 20,21,251
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x13F:
	MOVW R26,R20
	CALL _malloc
	STD  Y+6,R30
	STD  Y+6+1,R31
	SBIW R30,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:18 WORDS
SUBOPT_0x140:
	MOVW R30,R16
	__ADDWRN 16,17,1
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x141:
	ADD  R30,R26
	ADC  R31,R27
	RJMP SUBOPT_0x139

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x142:
	MOVW R30,R16
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	RJMP SUBOPT_0x1B

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
SUBOPT_0x143:
	LDD  R30,Y+12
	LDD  R31,Y+12+1
	ST   -Y,R31
	ST   -Y,R30
	LDD  R26,Y+12
	LDD  R27,Y+12+1
	CALL _memcpy
	LDD  R30,Y+8
	LDD  R31,Y+8+1
	__ADDWRR 16,17,30,31
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 16 TIMES, CODE SIZE REDUCTION:27 WORDS
SUBOPT_0x144:
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	ST   -Y,R31
	ST   -Y,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
SUBOPT_0x145:
	ST   -Y,R30
	LDI  R26,LOW(12)
	LDI  R27,0
	JMP  _ETH_send

;OPTIMIZER ADDED SUBROUTINE, CALLED 22 TIMES, CODE SIZE REDUCTION:39 WORDS
SUBOPT_0x146:
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	JMP  _free

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x147:
	MOVW R30,R16
	__ADDWRN 16,17,1
	MOVW R26,R28
	ADIW R26,6
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x148:
	__GETD1S 33
	CALL __PUTPARD1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x149:
	LDI  R24,16
	CALL _printDebug
	ADIW R28,20
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
SUBOPT_0x14A:
	LDD  R30,Y+15
	ST   -Y,R30
	LDD  R30,Y+15
	ST   -Y,R30
	LDD  R30,Y+15
	ST   -Y,R30
	LDI  R26,LOW(1)
	CALL _ETH_sendConfigManageNack
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x14B:
	CALL _print_payload
	RJMP SUBOPT_0x144

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x14C:
	MOVW R30,R16
	__ADDWRN 16,17,1
	MOVW R26,R28
	ADIW R26,7
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x14D:
	__GETD1S 40
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x14E:
	ST   -Y,R26
	SBIW R28,11
	RJMP SUBOPT_0x13C

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x14F:
	LDD  R26,Y+16
	STD  Z+0,R26
	RJMP SUBOPT_0x138

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x150:
	MOVW R26,R28
	ADIW R26,4
	ADD  R26,R30
	ADC  R27,R31
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0x151:
	__GETB1SX 558
	ST   -Y,R30
	RJMP SUBOPT_0x58

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x152:
	MOVW R30,R28
	ADIW R30,14
	ST   -Y,R31
	ST   -Y,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x153:
	RCALL SUBOPT_0xC6
	CALL __PUTPARD1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x154:
	__POINTD1FN _0x120000,1035
	JMP SUBOPT_0x2

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
SUBOPT_0x155:
	MOVW R26,R28
	ADIW R26,14
	__CALL1MN _LOG_closeFile,0
	MOVW R16,R30
	TST  R17
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x156:
	__POINTD1FN _0x120000,1080
	JMP SUBOPT_0x2

;OPTIMIZER ADDED SUBROUTINE, CALLED 31 TIMES, CODE SIZE REDUCTION:87 WORDS
SUBOPT_0x157:
	__MULBNWRU 16,17,11
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x158:
	CALL __PUTPARD1
	LDS  R30,_commLostTimer
	LDS  R31,_commLostTimer+1
	LDS  R22,_commLostTimer+2
	LDS  R23,_commLostTimer+3
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
SUBOPT_0x159:
	LDS  R26,_commLostTimer
	LDS  R27,_commLostTimer+1
	LDS  R24,_commLostTimer+2
	LDS  R25,_commLostTimer+3
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x15A:
	ST   -Y,R31
	ST   -Y,R30
	__GETD2N 0x1E
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:33 WORDS
SUBOPT_0x15B:
	CALL __PUTPARD1
	RCALL SUBOPT_0x76
	LDS  R30,_commLostTimer
	LDS  R31,_commLostTimer+1
	LDS  R22,_commLostTimer+2
	LDS  R23,_commLostTimer+3
	CALL __SUBD12
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x15C:
	__ADDW1MN _eth_waitQueue,1
	ST   -Y,R31
	ST   -Y,R30
	RJMP SUBOPT_0x157

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
SUBOPT_0x15D:
	__ADDW1MN _eth_waitQueue,5
	MOVW R26,R30
	CALL __GETW1P
	CALL __CWD1
	JMP SUBOPT_0x1D

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x15E:
	__ADDW1MN _eth_waitQueue,9
	MOVW R26,R30
	CALL __GETW1P
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x15F:
	__GETW2SX 558
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:37 WORDS
SUBOPT_0x160:
	__GETW2SX 556
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:53 WORDS
SUBOPT_0x161:
	CALL __PUTPARD1
	__GETW1SX 560
	RJMP SUBOPT_0xD5

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x162:
	ST   -Y,R16
	LDI  R26,LOW(16)
	JMP  _ETH_sendNack

;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:15 WORDS
SUBOPT_0x163:
	CALL _malloc
	MOVW R20,R30
	MOV  R0,R20
	OR   R0,R21
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x164:
	ST   -Y,R16
	LDI  R26,LOW(80)
	JMP  _ETH_sendNack

;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:41 WORDS
SUBOPT_0x165:
	__GETW1SX 558
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:18 WORDS
SUBOPT_0x166:
	ADIW R30,2
	ST   -Y,R31
	ST   -Y,R30
	RCALL SUBOPT_0x165
	SBIW R30,2
	ST   -Y,R31
	ST   -Y,R30
	MOVW R26,R20
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:17 WORDS
SUBOPT_0x167:
	MOVW R26,R20
	CALL _free
	ST   -Y,R16
	LDI  R26,LOW(48)
	JMP  _ETH_sendNack

;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:24 WORDS
SUBOPT_0x168:
	CALL __PUTPARD1
	MOV  R30,R16
	JMP SUBOPT_0x27

;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:37 WORDS
SUBOPT_0x169:
	CALL __PUTPARD1
	MOVW R30,R20
	LDD  R30,Z+8
	JMP SUBOPT_0x27

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x16A:
	CALL __PUTPARD1
	MOVW R26,R20
	ADIW R26,9
	JMP SUBOPT_0x1C

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x16B:
	CALL __GETW1P
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	CP   R26,R30
	CPC  R27,R31
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x16C:
	ADD  R26,R30
	ADC  R27,R31
	LD   R30,X
	JMP SUBOPT_0x27

;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:17 WORDS
SUBOPT_0x16D:
	ST   -Y,R16
	MOVW R30,R20
	LDD  R26,Z+8
	ST   -Y,R26
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x16E:
	RCALL SUBOPT_0xC0
	MOVW R26,R30
	MOVW R24,R22
	CALL _LOG_setLastSend
	MOVW R18,R30
	TST  R19
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x16F:
	__POINTD1FN _0x120000,2221
	JMP SUBOPT_0x2

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x170:
	__POINTD1FN _0x120000,2263
	CALL __PUTPARD1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
SUBOPT_0x171:
	MOVW R26,R28
	ADIW R26,12
	__CALL1MN _LOG_closeFile,0
	MOVW R18,R30
	TST  R19
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:12 WORDS
SUBOPT_0x172:
	LDI  R27,0
	RJMP SUBOPT_0x163

;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
SUBOPT_0x173:
	__POINTD1FN _0x120000,2446
	CALL __PUTPARD1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 44 TIMES, CODE SIZE REDUCTION:83 WORDS
SUBOPT_0x174:
	CALL __PUTPARD1
	JMP SUBOPT_0x10

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x175:
	RCALL SUBOPT_0x165
	RJMP SUBOPT_0x166

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x176:
	__POINTD1FN _0x120000,2584
	RJMP SUBOPT_0x169

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x177:
	CALL __PUTPARD1
	MOVW R30,R20
	LDD  R30,Z+9
	JMP SUBOPT_0x27

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x178:
	MOVW R30,R20
	LDD  R30,Z+8
	JMP SUBOPT_0x37

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x179:
	MOVW R30,R20
	LDD  R26,Z+9
	ST   -Y,R26
	LDI  R26,LOW(1)
	JMP  _ETH_sendConfigManageNack

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x17A:
	MOVW R30,R20
	LDD  R26,Z+9
	ST   -Y,R26
	LDI  R30,LOW(0)
	ST   -Y,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x17B:
	CALL _ETH_sendConfigManageAck
	MOVW R18,R30
	TST  R19
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x17C:
	STD  Y+8,R30
	STD  Y+8+1,R31
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 28 TIMES, CODE SIZE REDUCTION:51 WORDS
SUBOPT_0x17D:
	LDD  R30,Y+8
	LDD  R31,Y+8+1
	ST   -Y,R31
	ST   -Y,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x17E:
	LDD  R30,Y+9
	LDD  R31,Y+9+1
	ST   -Y,R31
	ST   -Y,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x17F:
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
	RJMP SUBOPT_0xDF

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x180:
	__POINTD1FN _0x120000,2921
	JMP SUBOPT_0x2

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x181:
	__POINTD1FN _0x120000,3037
	RJMP SUBOPT_0x169

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x182:
	__POINTD1FN _0x120000,3294
	JMP SUBOPT_0x2

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:15 WORDS
SUBOPT_0x183:
	CALL __PUTPARD1
	MOVW R30,R20
	__GETD2Z 9
	CALL __PUTPARD2
	JMP SUBOPT_0x10

;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x184:
	CALL __PUTPARD2
	JMP SUBOPT_0x10

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x185:
	__GETD2Z 9
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x186:
	__GETD1N 0xA
	RJMP SUBOPT_0x174

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x187:
	RCALL SUBOPT_0x165
	ADIW R30,2
	ST   -Y,R31
	ST   -Y,R30
	MOVW R26,R20
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x188:
	__GETD1N 0xD
	RJMP SUBOPT_0x174

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x189:
	__POINTD1FN _0x120000,3797
	RJMP SUBOPT_0x169

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x18A:
	LDD  R26,Z+9
	LDD  R27,Z+10
	CALL __CPW02
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x18B:
	ST   -Y,R16
	LDI  R26,LOW(48)
	JMP  _ETH_sendNack

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x18C:
	LDI  R31,0
	CPI  R30,LOW(0x1)
	LDI  R26,HIGH(0x1)
	CPC  R31,R26
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:25 WORDS
SUBOPT_0x18D:
	SBIW R28,4
	LDI  R30,LOW(0)
	ST   Y,R30
	STD  Y+1,R30
	STD  Y+2,R30
	STD  Y+3,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x18E:
	ST   -Y,R31
	ST   -Y,R30
	LDI  R26,LOW(10)
	LDI  R27,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x18F:
	ADD  R30,R16
	ADC  R31,R17
	ST   -Y,R31
	ST   -Y,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x190:
	LDI  R31,0
	OR   R30,R26
	OR   R31,R27
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x191:
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	ADD  R30,R26
	ADC  R31,R27
	STD  Y+6,R30
	STD  Y+6+1,R31
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x192:
	MOVW R26,R0
	LDI  R31,0
	CP   R30,R26
	CPC  R31,R27
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x193:
	ST   -Y,R27
	ST   -Y,R26
	CALL __SAVELOCR6
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:27 WORDS
SUBOPT_0x194:
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	ADD  R26,R30
	ADC  R27,R31
	LD   R30,X
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x195:
	LDI  R26,LOW(5)
	LDI  R27,0
	JMP  _delay_ms

;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
SUBOPT_0x196:
	__GETWRN 18,19,0
	__GETWRN 16,17,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 19 TIMES, CODE SIZE REDUCTION:105 WORDS
SUBOPT_0x197:
	MOVW R30,R18
	__ADDWRN 18,19,1
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	ADD  R26,R30
	ADC  R27,R31
	LD   R30,X
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x198:
	__PUTB1SNS 4,8
	RJMP SUBOPT_0x197

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0x199:
	__PUTW1SNS 4,9
	LDD  R30,Y+4
	LDD  R31,Y+4+1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
SUBOPT_0x19A:
	LDI  R30,LOW(1)
	LDI  R31,HIGH(1)
	CALL __MULW12U
	MOVW R26,R30
	JMP  _malloc

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x19B:
	CALL __GETW1P
	CP   R16,R30
	CPC  R17,R31
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:15 WORDS
SUBOPT_0x19C:
	MOVW R30,R16
	ADD  R30,R26
	ADC  R31,R27
	MOVW R0,R30
	MOVW R30,R18
	ADD  R30,R16
	ADC  R31,R17
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	RJMP SUBOPT_0x119

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x19D:
	CALL __PUTPARD1
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x19E:
	__PUTB1SNS 4,8
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:74 WORDS
SUBOPT_0x19F:
	LDI  R31,0
	CALL __CWD1
	__ANDD1N 0xFF
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x1A0:
	MOVW R26,R30
	MOVW R24,R22
	LDI  R30,LOW(24)
	CALL __LSLD12
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x1A1:
	MOVW R26,R30
	MOVW R24,R22
	LDI  R30,LOW(8)
	CALL __LSLD12
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x1A2:
	CALL __ORD12
	__PUTD1SNS 4,9
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:21 WORDS
SUBOPT_0x1A3:
	MOVW R30,R18
	__ADDWRN 18,19,1
	RJMP SUBOPT_0x194

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x1A4:
	ST   -Y,R27
	ST   -Y,R26
	RJMP SUBOPT_0x18D

;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:42 WORDS
SUBOPT_0x1A5:
	CALL _malloc
	STD  Y+6,R30
	STD  Y+6+1,R31
	SBIW R30,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
SUBOPT_0x1A6:
	__POINTD1FN _0x160000,187
	RJMP SUBOPT_0x110

;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:33 WORDS
SUBOPT_0x1A7:
	LDD  R30,Y+10
	LDD  R31,Y+10+1
	ST   -Y,R31
	ST   -Y,R30
	RJMP SUBOPT_0x17D

;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
SUBOPT_0x1A8:
	CALL _memcpy
	RJMP SUBOPT_0x146

;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:15 WORDS
SUBOPT_0x1A9:
	LDI  R27,0
	RJMP SUBOPT_0x1A5

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x1AA:
	__POINTD1FN _0x160000,378
	RJMP SUBOPT_0x110

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x1AB:
	__POINTD1FN _0x160000,422
	RJMP SUBOPT_0x110

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x1AC:
	__POINTD1FN _0x160000,50
	JMP SUBOPT_0x2

;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:15 WORDS
SUBOPT_0x1AD:
	LDI  R27,0
	RJMP SUBOPT_0x1A8

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
SUBOPT_0x1AE:
	LDD  R30,Y+12
	LDI  R31,0
	ANDI R30,LOW(0xF)
	ANDI R31,HIGH(0xF)
	STD  Y+8,R30
	STD  Y+8+1,R31
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
SUBOPT_0x1AF:
	CALL __PUTPARD1
	LDD  R30,Y+12
	LDD  R31,Y+12+1
	RJMP SUBOPT_0xD5

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x1B0:
	CALL __PUTPARD1
	__GETD1N 0x3
	RJMP SUBOPT_0x174

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x1B1:
	__POINTD1FN _0x160000,961
	RJMP SUBOPT_0x10F

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x1B2:
	__POINTD1FN _0x160000,1138
	RJMP SUBOPT_0x10F

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x1B3:
	__POINTD1FN _0x160000,1192
	RJMP SUBOPT_0x110

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x1B4:
	__POINTD1FN _0x160000,1217
	JMP SUBOPT_0x2

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x1B5:
	LDI  R30,LOW(34)
	LDI  R31,HIGH(34)
	CP   R30,R16
	CPC  R31,R17
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x1B6:
	__GETD2Z 1
	RJMP SUBOPT_0x184

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x1B7:
	__POINTD1FN _0x160000,2137
	CALL __PUTPARD1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:17 WORDS
SUBOPT_0x1B8:
	LDD  R30,Y+10
	LDI  R31,0
	ANDI R30,LOW(0xF)
	ANDI R31,HIGH(0xF)
	MOVW R20,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x1B9:
	ST   -Y,R21
	ST   -Y,R20
	LDD  R26,Y+10
	LDD  R27,Y+10+1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x1BA:
	CALL __PUTPARD1
	JMP SUBOPT_0x3E

;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x1BB:
	MOVW R30,R28
	ADIW R30,2
	ST   -Y,R31
	ST   -Y,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x1BC:
	RCALL SUBOPT_0xA0
	CALL __CPD10
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:21 WORDS
SUBOPT_0x1BD:
	CALL __PUTPARD1
	RCALL SUBOPT_0xA2
	RJMP SUBOPT_0x174

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x1BE:
	CALL __PUTPARD2
	ST   -Y,R17
	ST   -Y,R16
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x1BF:
	ST   -Y,R31
	ST   -Y,R30
	RJMP SUBOPT_0x17D

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x1C0:
	SUBI R30,LOW(-_eth_waitQueue)
	SBCI R31,HIGH(-_eth_waitQueue)
	LDI  R26,LOW(0)
	STD  Z+0,R26
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
SUBOPT_0x1C1:
	LDI  R26,LOW(11)
	MUL  R17,R26
	MOVW R30,R0
	__ADDW1MN _eth_waitQueue,8
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:16 WORDS
SUBOPT_0x1C2:
	MOVW R26,R30
	CALL _free
	LDI  R26,LOW(11)
	MUL  R17,R26
	MOVW R30,R0
	__ADDW1MN _eth_waitQueue,9
	LDI  R26,LOW(0)
	LDI  R27,HIGH(0)
	STD  Z+0,R26
	STD  Z+1,R27
	LDI  R26,LOW(11)
	MUL  R17,R26
	MOVW R30,R0
	__ADDW1MN _eth_waitQueue,7
	LDI  R26,LOW(0)
	STD  Z+0,R26
	RJMP SUBOPT_0x1C1

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0x1C3:
	LDI  R26,LOW(0)
	STD  Z+0,R26
	LDI  R26,LOW(11)
	MUL  R17,R26
	MOVW R30,R0
	RJMP SUBOPT_0x1C0

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:17 WORDS
SUBOPT_0x1C4:
	LDI  R26,LOW(11)
	MUL  R17,R26
	MOVW R30,R0
	__ADDW1MN _eth_waitQueue,5
	LDI  R26,LOW(0)
	LDI  R27,HIGH(0)
	STD  Z+0,R26
	STD  Z+1,R27
	LDI  R26,LOW(11)
	MUL  R17,R26
	MOVW R30,R0
	__ADDW1MN _eth_waitQueue,1
	__GETD2N 0x0
	CALL __PUTDZ20
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x1C5:
	CALL __PUTPARD1
	LDD  R30,Y+5
	JMP SUBOPT_0x55

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x1C6:
	MOV  R30,R17
	CLR  R31
	CLR  R22
	CLR  R23
	JMP SUBOPT_0x1F

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x1C7:
	LDI  R31,0
	LDD  R17,Y+0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x1C8:
	CALL __PUTPARD1
	LDD  R30,Y+5
	JMP SUBOPT_0x27

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x1C9:
	LDD  R30,Y+4
	LDD  R31,Y+4+1
	RJMP SUBOPT_0x90

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:12 WORDS
SUBOPT_0x1CA:
	ADIW R26,1
	CALL _calProcessValue
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	CALL __PUTDP1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:12 WORDS
SUBOPT_0x1CB:
	__GETB2SX 526
	SUBI R26,-LOW(8)
	JMP  _read_adc

;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:25 WORDS
SUBOPT_0x1CC:
	__GETW1SX 526
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
SUBOPT_0x1CD:
	CALL __LSLW2
	ADD  R30,R26
	ADC  R31,R27
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x1CE:
	CALL _average
	__GETD2N 0x40A00000
	RJMP SUBOPT_0x8A

;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x1CF:
	RCALL SUBOPT_0x1CC
	RJMP SUBOPT_0x90

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x1D0:
	CALL SUBOPT_0x49
	CALL __PUTDZ20
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:25 WORDS
SUBOPT_0x1D1:
	__GETW2SX 526
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x1D2:
	__PUTD1S 10
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x1D3:
	ADD  R30,R26
	ADC  R31,R27
	CALL SUBOPT_0x42
	CALL __PUTDZ20
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:12 WORDS
SUBOPT_0x1D4:
	LDI  R27,0
	JMP  _memset

;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x1D5:
	CALL __SWAPD12
	CALL __SUBF12
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x1D6:
	__PUTD1S 14
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x1D7:
	__GETD2S 14
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 19 TIMES, CODE SIZE REDUCTION:33 WORDS
SUBOPT_0x1D8:
	CALL __PUTDZ20
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x1D9:
	CALL __LSLW2
	ADD  R26,R30
	ADC  R27,R31
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x1DA:
	MOVW R30,R28
	ADIW R30,30
	ST   -Y,R31
	ST   -Y,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x1DB:
	MOVW R30,R28
	ADIW R30,22
	ST   -Y,R31
	ST   -Y,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0x1DC:
	MOVW R30,R16
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	CALL __LSLW2
	JMP SUBOPT_0x19

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x1DD:
	LDI  R30,LOW(0)
	ST   Y,R30
	STD  Y+1,R30
	STD  Y+2,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 18 TIMES, CODE SIZE REDUCTION:31 WORDS
SUBOPT_0x1DE:
	CALL __LSLW2
	JMP SUBOPT_0x19

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x1DF:
	RCALL SUBOPT_0xA1
	CALL __CWD1
	CALL __CDF1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x1E0:
	MOVW R30,R10
	LDI  R26,LOW(10)
	LDI  R27,HIGH(10)
	CALL __MULW12U
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x1E1:
	MOVW R30,R12
	LDI  R26,LOW(10)
	LDI  R27,HIGH(10)
	CALL __MULW12U
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0x1E2:
	MOVW R26,R30
	CALL __GETD1P
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	CALL __PUTDP1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x1E3:
	STS  _batteryVolt,R30
	STS  _batteryVolt+1,R31
	STS  _batteryVolt+2,R22
	STS  _batteryVolt+3,R23
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x1E4:
	__GETD1MN _env_config,6
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x1E5:
	ANDI R30,LOW(0x4)
	LDI  R31,0
	CALL __ASRW2
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:37 WORDS
SUBOPT_0x1E6:
	LDS  R30,_sdFreeSpace
	LDS  R31,_sdFreeSpace+1
	LDS  R22,_sdFreeSpace+2
	LDS  R23,_sdFreeSpace+3
	CALL __CPD10
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x1E7:
	LD   R30,Y
	LDD  R31,Y+1
	SUBI R30,LOW(-_sensorStatus)
	SBCI R31,HIGH(-_sensorStatus)
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x1E8:
	LDD  R30,Y+2
	LDD  R31,Y+2+1
	SUBI R30,LOW(-_flag_lower_S00F0005000)
	SBCI R31,HIGH(-_flag_lower_S00F0005000)
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x1E9:
	LDD  R30,Y+2
	LDD  R31,Y+2+1
	LDI  R26,LOW(_t_S00F0005000)
	LDI  R27,HIGH(_t_S00F0005000)
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x1EA:
	CALL __LSLW2
	JMP SUBOPT_0x1B

;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:18 WORDS
SUBOPT_0x1EB:
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	SUBI R26,LOW(-_dataStatus)
	SBCI R27,HIGH(-_dataStatus)
	LD   R30,X
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x1EC:
	LDD  R30,Y+2
	LDD  R31,Y+2+1
	SUBI R30,LOW(-_flag_upper_S00F0005000)
	SBCI R31,HIGH(-_flag_upper_S00F0005000)
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
SUBOPT_0x1ED:
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	MOVW R24,R26
	LD   R22,X+
	LD   R23,X
	LDI  R30,LOW(4)
	LDI  R31,HIGH(4)
	SUB  R30,R16
	SBC  R31,R17
	LDI  R26,LOW(1)
	LDI  R27,HIGH(1)
	CALL __LSLW12
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
SUBOPT_0x1EE:
	LDS  R26,_last_wr_eventQ
	LDS  R27,_last_wr_eventQ+1
	LDI  R30,LOW(6)
	CALL __MULB1W2U
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
SUBOPT_0x1EF:
	LDS  R26,_last_rd_eventQ
	LDS  R27,_last_rd_eventQ+1
	LDI  R30,LOW(6)
	CALL __MULB1W2U
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x1F0:
	LD   R30,Z
	LD   R26,Y
	LDD  R27,Y+1
	ST   X,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x1F1:
	__GETD2N 0x3
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x1F2:
	LD   R26,Y
	LDD  R27,Y+1
	ST   X,R30
	LDI  R30,LOW(0)
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x1F3:
	LD   R26,Y
	LDD  R27,Y+1
	LDI  R30,LOW(0)
	ST   X,R30
	LDI  R30,LOW(1)
	LDI  R31,HIGH(1)
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0x1F4:
	LDD  R30,Y+2
	LDD  R31,Y+2+1
	SUBI R30,LOW(-_dinStatus)
	SBCI R31,HIGH(-_dinStatus)
	LD   R26,Z
	LDD  R30,Y+2
	LDD  R31,Y+2+1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x1F5:
	LDD  R30,Y+2
	LDD  R31,Y+2+1
	SUBI R30,LOW(-_t_flag_S0110006000)
	SBCI R31,HIGH(-_t_flag_S0110006000)
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x1F6:
	LDD  R30,Y+2
	LDD  R31,Y+2+1
	SUBI R30,LOW(-_dinStatus)
	SBCI R31,HIGH(-_dinStatus)
	LD   R30,Z
	ST   X,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x1F7:
	ST   -Y,R27
	ST   -Y,R26
	LDD  R30,Y+2
	LDD  R31,Y+2+1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x1F8:
	LDD  R30,Y+2
	LDD  R31,Y+2+1
	SUBI R30,LOW(-_sensorStatus)
	SBCI R31,HIGH(-_sensorStatus)
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x1F9:
	LDD  R30,Y+2
	LDD  R31,Y+2+1
	SUBI R30,LOW(-_t_flag_S0110007000)
	SBCI R31,HIGH(-_t_flag_S0110007000)
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x1FA:
	LDD  R30,Y+2
	LDD  R31,Y+2+1
	LDI  R26,LOW(_t_S0110007000)
	LDI  R27,HIGH(_t_S0110007000)
	RJMP SUBOPT_0x1EA

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x1FB:
	LDD  R30,Y+2
	LDD  R31,Y+2+1
	SUBI R30,LOW(-_t_flag_S0110008000)
	SBCI R31,HIGH(-_t_flag_S0110008000)
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x1FC:
	LD   R30,Z
	CLR  R31
	CLR  R22
	CLR  R23
	JMP SUBOPT_0x1F

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x1FD:
	LDD  R30,Y+12
	LDD  R31,Y+12+1
	ST   -Y,R31
	ST   -Y,R30
	CALL SUBOPT_0x42
	CALL _f_lseek
	MOV  R17,R30
	CPI  R17,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x1FE:
	MOV  R26,R17
	CALL _error
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:15 WORDS
SUBOPT_0x1FF:
	CALL __PUTPARD1
	MOVW R30,R18
	RJMP SUBOPT_0xDD

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x200:
	ST   -Y,R31
	ST   -Y,R30
	MOVW R30,R28
	ADIW R30,3
	ST   -Y,R31
	ST   -Y,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x201:
	CALL __PUTPARD1
	LDI  R30,LOW(_root_path)
	LDI  R31,HIGH(_root_path)
	RJMP SUBOPT_0xDD

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
SUBOPT_0x202:
	CALL _error
	LDI  R30,LOW(0)
	STS  _sdFreeSpace,R30
	STS  _sdFreeSpace+1,R30
	STS  _sdFreeSpace+2,R30
	STS  _sdFreeSpace+3,R30
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x203:
	LDD  R30,Z+2
	LDI  R31,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x204:
	__GETD2S 1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x205:
	CALL __CWD1
	CALL __MULD12U
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x206:
	__POINTD1FN _0x260000,798
	RJMP SUBOPT_0x201

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x207:
	ST   -Y,R31
	ST   -Y,R30
	MOVW R30,R28
	ADIW R30,4
	ST   -Y,R31
	ST   -Y,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
SUBOPT_0x208:
	LDD  R30,Y+22
	LDD  R31,Y+22+1
	ST   -Y,R31
	ST   -Y,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x209:
	MOVW R26,R28
	ADIW R26,10
	CALL _LOG_getLastInsert
	MOVW R16,R30
	TST  R17
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x20A:
	CALL SUBOPT_0x3E
	CALL __PUTPARD1
	JMP SUBOPT_0x38

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x20B:
	CALL _index2Addr
	JMP SUBOPT_0x95

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x20C:
	CALL SUBOPT_0xA2
	CALL __PUTPARD1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x20D:
	CALL SUBOPT_0xA2
	JMP SUBOPT_0xC0

;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x20E:
	ST   -Y,R31
	ST   -Y,R30
	JMP SUBOPT_0x69

;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
SUBOPT_0x20F:
	CALL _SD_writeData
	MOVW R16,R30
	TST  R17
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
SUBOPT_0x210:
	CALL SUBOPT_0xA2
	__ADDD1N 5
	CALL __PUTPARD1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x211:
	CALL SUBOPT_0xA2
	__ADDD1N 7
	CALL __PUTPARD1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
SUBOPT_0x212:
	CALL SUBOPT_0xC2
	CALL SUBOPT_0xA9
	RCALL SUBOPT_0x1D2
	MOVW R26,R30
	MOVW R24,R22
	CALL _LOG_setLastInsert
	MOVW R16,R30
	TST  R17
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 16 TIMES, CODE SIZE REDUCTION:27 WORDS
SUBOPT_0x213:
	LDD  R30,Y+24
	LDD  R31,Y+24+1
	ST   -Y,R31
	ST   -Y,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x214:
	MOVW R26,R28
	ADIW R26,14
	CALL _LOG_getLastInsert
	MOVW R16,R30
	TST  R17
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x215:
	MOVW R26,R28
	ADIW R26,10
	CALL _LOG_getLastSend
	MOVW R16,R30
	TST  R17
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x216:
	__POINTD1FN _0x280000,370
	JMP SUBOPT_0x7B

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x217:
	CALL __PUTPARD1
	CALL SUBOPT_0xC9
	JMP SUBOPT_0x1F

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x218:
	CALL SUBOPT_0xC6
	CALL SUBOPT_0xC5
	CALL __CPD21
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:13 WORDS
SUBOPT_0x219:
	LDI  R30,LOW(_LOGFILE_DATA)
	LDI  R31,HIGH(_LOGFILE_DATA)
	ST   -Y,R31
	ST   -Y,R30
	LDI  R30,LOW(1)
	ST   -Y,R30
	LDI  R30,LOW(_LOG_INIT_STR)
	LDI  R31,HIGH(_LOG_INIT_STR)
	ST   -Y,R31
	ST   -Y,R30
	LDI  R26,LOW(16)
	LDI  R27,0
	CALL _LOG_createFile
	MOVW R16,R30
	TST  R17
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
SUBOPT_0x21A:
	CALL _SD_readData
	MOVW R16,R30
	TST  R17
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
SUBOPT_0x21B:
	LDD  R30,Y+18
	LDD  R31,Y+18+1
	ST   -Y,R31
	ST   -Y,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x21C:
	CALL SUBOPT_0x3E
	CALL __PUTPARD1
	JMP SUBOPT_0x8

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x21D:
	CALL SUBOPT_0xA2
	__ADDD1N 10
	CALL __PUTPARD1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:13 WORDS
SUBOPT_0x21E:
	LDI  R30,LOW(_LOGFILE_EVENT)
	LDI  R31,HIGH(_LOGFILE_EVENT)
	ST   -Y,R31
	ST   -Y,R30
	LDI  R30,LOW(1)
	ST   -Y,R30
	LDI  R30,LOW(_LOG_INIT_STR)
	LDI  R31,HIGH(_LOG_INIT_STR)
	ST   -Y,R31
	ST   -Y,R30
	LDI  R26,LOW(16)
	LDI  R27,0
	CALL _LOG_createFile
	MOVW R16,R30
	TST  R17
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x21F:
	LDD  R30,Y+4
	LDD  R31,Y+4+1
	ST   -Y,R31
	ST   -Y,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x220:
	__GETD1N 0x0
	CALL __PUTPARD1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x221:
	__GETD1N 0x4
	CALL __PUTPARD1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:21 WORDS
SUBOPT_0x222:
	CALL __PUTPARD1
	__GETW1SX 555
	JMP SUBOPT_0xDD

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:11 WORDS
SUBOPT_0x223:
	__GETW1SX 548
	ST   -Y,R31
	ST   -Y,R30
	__GETW2SX 548
	JMP  _print_payload

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
SUBOPT_0x224:
	LDI  R30,LOW(_LOG_INIT_STR)
	LDI  R31,HIGH(_LOG_INIT_STR)
	ST   -Y,R31
	ST   -Y,R30
	LDI  R26,LOW(16)
	LDI  R27,0
	CALL _LOG_createFile
	MOVW R16,R30
	TST  R17
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x225:
	__POINTD1FN _0x280000,1916
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x226:
	CALL __PUTPARD1
	LDI  R30,LOW(_LOGFILE_ERROR)
	LDI  R31,HIGH(_LOGFILE_ERROR)
	JMP SUBOPT_0xDD

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x227:
	CALL __CWD1
	CALL __PUTPARD1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0x228:
	MOVW R26,R30
	CALL __GETD1P
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	CALL __PUTDP1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
SUBOPT_0x229:
	LDI  R26,LOW(11)
	MUL  R17,R26
	MOVW R30,R0
	SUBI R30,LOW(-_dataLogQueue)
	SBCI R31,HIGH(-_dataLogQueue)
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:28 WORDS
SUBOPT_0x22A:
	LDI  R26,LOW(0)
	STD  Z+0,R26
	LDI  R26,LOW(11)
	MUL  R17,R26
	MOVW R30,R0
	__ADDW1MN _dataLogQueue,1
	__GETD2N 0x0
	RCALL SUBOPT_0x1D8
	LDI  R26,LOW(11)
	MUL  R17,R26
	MOVW R30,R0
	__ADDW1MN _dataLogQueue,5
	LDI  R26,LOW(0)
	LDI  R27,HIGH(0)
	STD  Z+0,R26
	STD  Z+1,R27
	LDI  R26,LOW(11)
	MUL  R17,R26
	MOVW R30,R0
	__ADDW1MN _dataLogQueue,7
	__GETD2N 0x0
	RJMP SUBOPT_0x1D8

;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:18 WORDS
SUBOPT_0x22B:
	__MULBNWRU 16,17,7
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
SUBOPT_0x22C:
	LDI  R26,LOW(7)
	MUL  R17,R26
	MOVW R30,R0
	SUBI R30,LOW(-_eventLogQueue)
	SBCI R31,HIGH(-_eventLogQueue)
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
SUBOPT_0x22D:
	LDI  R26,LOW(0)
	STD  Z+0,R26
	LDI  R26,LOW(7)
	MUL  R17,R26
	MOVW R30,R0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
SUBOPT_0x22E:
	__ADDW1MN _eventLogQueue,1
	__GETD2N 0x0
	RCALL SUBOPT_0x1D8
	LDI  R26,LOW(7)
	MUL  R17,R26
	MOVW R30,R0
	__ADDW1MN _eventLogQueue,5
	RJMP SUBOPT_0x22D

;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
SUBOPT_0x22F:
	__ADDW1MN _rxPackage3,8
	LD   R30,Z
	ST   X,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
SUBOPT_0x230:
	MOVW R26,R28
	ADIW R26,4
	CALL _atoi
	MOVW R18,R30
	__POINTD1FN _0x2E0000,26
	RJMP SUBOPT_0x1FF

;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:21 WORDS
SUBOPT_0x231:
	__POINTD1FN _0x2E0000,23
	JMP SUBOPT_0x2

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x232:
	CALL __PUTPARD1
	JMP SUBOPT_0x99

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x233:
	MOVW R30,R18
	SBIW R30,1
	LDI  R26,LOW(26)
	LDI  R27,HIGH(26)
	CALL __MULW12U
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x234:
	LDI  R30,LOW(0)
	ST   -Y,R30
	LDI  R26,LOW(6)
	RJMP SUBOPT_0x1D4

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x235:
	MOVW R26,R28
	ADIW R26,10
	ADD  R26,R30
	ADC  R27,R31
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
SUBOPT_0x236:
	CALL _atoi
	MOVW R18,R30
	__PUTWMRN _sensorCalConfig,2,18,19
	__POINTD1FN _0x2E0000,26
	RJMP SUBOPT_0x1FF

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x237:
	LDI  R30,LOW(_sensorCalConfig)
	LDI  R31,HIGH(_sensorCalConfig)
	LDI  R26,12
	CALL __PUTPARL
	__CALL1MN _pfCalibrate,0
	JMP SUBOPT_0x64

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x238:
	ADD  R26,R30
	ADC  R27,R31
	RJMP SUBOPT_0x22F

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x239:
	LDI  R30,LOW(0)
	STD  Y+34,R30
	MOVW R26,R28
	ADIW R26,30
	JMP  _atol

;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
SUBOPT_0x23A:
	MOVW R26,R28
	ADIW R26,30
	ADD  R26,R30
	ADC  R27,R31
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
SUBOPT_0x23B:
	LDI  R30,LOW(0)
	STD  Y+32,R30
	MOVW R26,R28
	ADIW R26,30
	JMP  _atol

;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:17 WORDS
SUBOPT_0x23C:
	__PUTD1S 8
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x23D:
	__PUTD1S 16
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x23E:
	__PUTD1S 20
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x23F:
	__PUTD1S 24
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x240:
	__POINTD1FN _0x2E0000,556
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x241:
	LDI  R30,LOW(9)
	LDI  R31,HIGH(9)
	STS  _hwCalId,R30
	STS  _hwCalId+1,R31
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x242:
	MOV  R26,R17
	CLR  R27
	LDI  R30,LOW(3)
	LDI  R31,HIGH(3)
	CALL __MODW21
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:29 WORDS
SUBOPT_0x243:
	MOV  R26,R17
	LDI  R27,0
	LDI  R30,LOW(3)
	LDI  R31,HIGH(3)
	CALL __DIVW21
	SUBI R30,LOW(-_DEVICE_SERIAL)
	SBCI R31,HIGH(-_DEVICE_SERIAL)
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
SUBOPT_0x244:
	MOVW R26,R28
	ADIW R26,1
	ADD  R26,R30
	ADC  R27,R31
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x245:
	LD   R26,X
	CALL _isdigit
	CPI  R30,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0x246:
	MOVW R22,R30
	MOVW R26,R30
	CALL __EEPROMRDB
	MOV  R0,R30
	JMP SUBOPT_0x99

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x247:
	__POINTD1FN _0x2E0000,1102
	CALL __PUTPARD1
	MOV  R26,R17
	LDI  R27,0
	SUBI R26,LOW(-_DEVICE_SERIAL)
	SBCI R27,HIGH(-_DEVICE_SERIAL)
	RJMP SUBOPT_0x11D

;OPTIMIZER ADDED SUBROUTINE, CALLED 13 TIMES, CODE SIZE REDUCTION:21 WORDS
SUBOPT_0x248:
	LDI  R30,LOW(_rxPackage3)
	LDI  R31,HIGH(_rxPackage3)
	ST   -Y,R31
	ST   -Y,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 13 TIMES, CODE SIZE REDUCTION:45 WORDS
SUBOPT_0x249:
	CALL __PUTPARD1
	LDI  R26,LOW(7)
	CALL _strncmpf
	CPI  R30,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x24A:
	CALL __ADDW2R15
	CALL __GETD1P
	CALL __PUTPARD1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x24B:
	CALL __PUTPARD1
	MOVW R26,R20
	LD   R30,X
	JMP SUBOPT_0x27

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x24C:
	__POINTD1FN _0x2E0000,147
	JMP SUBOPT_0x2

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x24D:
	__POINTD1FN _0x2E0000,1170
	JMP SUBOPT_0x2

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x24E:
	LDD  R30,Y+12
	LDD  R31,Y+12+1
	ST   -Y,R31
	ST   -Y,R30
	LDD  R26,Y+12
	LDD  R27,Y+12+1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
SUBOPT_0x24F:
	LDS  R30,_n
	LDS  R31,_n+1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x250:
	MOVW R30,R18
	CALL __LSLW4
	SUBI R30,LOW(-_a)
	SBCI R31,HIGH(-_a)
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x251:
	MOVW R26,R30
	MOVW R30,R16
	RJMP SUBOPT_0x1DE

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x252:
	LDD  R30,Y+10
	LDD  R31,Y+10+1
	CALL __LSLW4
	SUBI R30,LOW(-_a)
	SBCI R31,HIGH(-_a)
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x253:
	MOVW R26,R30
	MOVW R30,R18
	RJMP SUBOPT_0x1DE

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x254:
	MOVW R26,R30
	MOVW R30,R18
	RJMP SUBOPT_0x1CD

;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:21 WORDS
SUBOPT_0x255:
	MOVW R30,R16
	CALL __LSLW4
	SUBI R30,LOW(-_a)
	SBCI R31,HIGH(-_a)
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x256:
	__GETD1N 0x3F800000
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x257:
	__GETD2N 0x3F800000
	RJMP SUBOPT_0x1D8

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:17 WORDS
SUBOPT_0x258:
	LDD  R26,Y+20
	LDD  R27,Y+20+1
	ADIW R26,8
	LDI  R30,LOW(3)
	LDI  R31,HIGH(3)
	ST   X+,R30
	ST   X,R31
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:18 WORDS
SUBOPT_0x259:
	LDS  R30,293
	MOV  R31,R30
	LDI  R30,0
	MOVW R26,R30
	LDS  R30,292
	RJMP SUBOPT_0x190

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x25A:
	LDI  R30,LOW(0)
	STS  293,R30
	STS  292,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x25B:
	STD  Y+16,R30
	STD  Y+16+1,R31
	LDD  R26,Y+16
	LDD  R27,Y+16+1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
SUBOPT_0x25C:
	MOVW R30,R18
	MOVW R26,R28
	ADIW R26,6
	LSL  R30
	ROL  R31
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x25D:
	ADD  R26,R30
	ADC  R27,R31
	CALL __GETW1P
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x25E:
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	ADD  R30,R26
	ADC  R31,R27
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x25F:
	CALL __CWD1
	CALL __CDF1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:17 WORDS
SUBOPT_0x260:
	LDD  R30,Y+2
	LDD  R31,Y+2+1
	SBIW R30,1
	LDI  R26,LOW(26)
	LDI  R27,HIGH(26)
	CALL __MULW12U
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 13 TIMES, CODE SIZE REDUCTION:21 WORDS
SUBOPT_0x261:
	LDI  R26,LOW(26)
	LDI  R27,HIGH(26)
	CALL __MULW12U
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x262:
	__POINTD1FN _0x340000,121
	JMP SUBOPT_0x2

;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:30 WORDS
SUBOPT_0x263:
	LDD  R30,Y+48
	LDD  R31,Y+48+1
	SBIW R30,1
	RJMP SUBOPT_0x261

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x264:
	SUBI R30,LOW(-_sensorCalulate)
	SBCI R31,HIGH(-_sensorCalulate)
	MOVW R26,R30
	CALL __EEPROMRDD
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x265:
	__ADDW1MN _sensorCalulate,12
	MOVW R26,R30
	CALL __EEPROMRDD
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x266:
	CALL __ADDF12
	__PUTD1S 50
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x267:
	__PUTD1S 40
	RJMP SUBOPT_0x263

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
SUBOPT_0x268:
	__ADDW1MN _sensorCalulate,16
	MOVW R26,R30
	CALL __EEPROMRDD
	__PUTD1S 36
	RJMP SUBOPT_0x263

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x269:
	__PUTD1S 28
	RJMP SUBOPT_0x263

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0x26A:
	__ADDW1MN _sensorCalulate,4
	MOVW R26,R30
	CALL __EEPROMRDD
	RJMP SUBOPT_0x23F

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x26B:
	__GETD1S 50
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x26C:
	RCALL SUBOPT_0x14D
	JMP SUBOPT_0xDE

;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
SUBOPT_0x26D:
	__PUTD1S 9
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
SUBOPT_0x26E:
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	ADIW R26,1
	STD  Y+6,R26
	STD  Y+6+1,R27
	SBIW R26,1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x26F:
	CALL SUBOPT_0xA1
	__GETD1N 0x3DCCCCCD
	CALL __MULF12
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x270:
	CALL SUBOPT_0xA0
	__GETD2S 9
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
SUBOPT_0x271:
	CALL SUBOPT_0x8B
	CALL __MULF12
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x272:
	__GETD2N 0x3F000000
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0x273:
	MOV  R30,R16
	SUBI R30,-LOW(48)
	ST   X,R30
	MOV  R30,R16
	LDI  R31,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x274:
	__GETD2S 9
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x275:
	LDD  R30,Y+16
	LDD  R31,Y+16+1
	ADIW R30,1
	STD  Y+16,R30
	STD  Y+16+1,R31
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0x276:
	LDD  R26,Y+16
	LDD  R27,Y+16+1
	LD   R30,X
	LDI  R31,0
	SBIW R30,48
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x277:
	CALL SUBOPT_0x9
	RJMP SUBOPT_0x271

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x278:
	CALL __MULF12
	JMP SUBOPT_0xD6

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x279:
	STS  __seed_G100,R30
	STS  __seed_G100+1,R31
	STS  __seed_G100+2,R22
	STS  __seed_G100+3,R23
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x27A:
	CALL __GETW1P
	STD  Y+6,R30
	STD  Y+6+1,R31
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x27B:
	LDI  R31,0
	CALL __CWD1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x27C:
	CALL __GETD1P_INC
	CALL SUBOPT_0xC0
	CALL __PUTDP1_DEC
	JMP SUBOPT_0xC7

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x27D:
	CALL __GETD1P
	__PUTD1S 1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x27E:
	__GETD1S 5
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:11 WORDS
SUBOPT_0x27F:
	LDD  R30,Y+9
	LDD  R31,Y+9+1
	LDD  R26,Z+1
	ST   -Y,R26
	LDD  R30,Y+10
	LDD  R31,Y+10+1
	ADIW R30,50
	ST   -Y,R31
	ST   -Y,R30
	CALL SUBOPT_0x77
	CALL __PUTPARD1
	LDI  R26,LOW(1)
	JMP  _disk_write

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x280:
	__GETD2Z 34
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x281:
	ST   -Y,R31
	ST   -Y,R30
	CALL SUBOPT_0x3E
	CALL __PUTPARD1
	LDI  R26,LOW(1)
	CALL _disk_read
	CPI  R30,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x282:
	ST   -Y,R31
	ST   -Y,R30
	__GETD2N 0x0
	JMP  _move_window_G103

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
SUBOPT_0x283:
	ADIW R30,50
	ST   -Y,R31
	ST   -Y,R30
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
	ST   -Y,R31
	ST   -Y,R30
	LDI  R26,LOW(512)
	LDI  R27,HIGH(512)
	JMP  _mem_set_G103

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0x284:
	CALL __GETD1P
	MOVW R26,R0
	CALL __PUTDP1
	LDD  R30,Y+1
	LDD  R31,Y+1+1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0x285:
	__GETD2Z 18
	CALL __PUTPARD2
	LDI  R26,LOW(1)
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:32 WORDS
SUBOPT_0x286:
	__CPD2N 0x2
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x287:
	__GETD1N 0x1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x288:
	CALL __GETD1P
	JMP SUBOPT_0x95

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:13 WORDS
SUBOPT_0x289:
	LDD  R30,Y+12
	LDD  R31,Y+12+1
	ST   -Y,R31
	ST   -Y,R30
	MOVW R26,R18
	LDI  R30,LOW(512)
	LDI  R31,HIGH(512)
	CALL __DIVW21U
	CALL SUBOPT_0x49
	CLR  R22
	CLR  R23
	CALL __ADDD21
	CALL _move_window_G103
	CPI  R30,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0x28A:
	LDD  R26,Y+12
	LDD  R27,Y+12+1
	ADIW R26,50
	MOVW R30,R18
	ANDI R31,HIGH(0x1FF)
	ADD  R26,R30
	ADC  R27,R31
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x28B:
	LDD  R30,Y+12
	LDD  R31,Y+12+1
	ST   -Y,R31
	ST   -Y,R30
	JMP SUBOPT_0x42

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x28C:
	__GETD1N 0x100
	CALL __DIVD21U
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0x28D:
	CALL SUBOPT_0x49
	CALL __ADDD21
	CALL _move_window_G103
	CPI  R30,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x28E:
	CALL __MULB1W2U
	ANDI R31,HIGH(0x1FF)
	LDD  R26,Y+12
	LDD  R27,Y+12+1
	ADIW R26,50
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x28F:
	__GETD1N 0x80
	CALL __DIVD21U
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
SUBOPT_0x290:
	MOVW R26,R16
	LDI  R30,LOW(512)
	LDI  R31,HIGH(512)
	CALL __DIVW21U
	CALL SUBOPT_0xC5
	CLR  R22
	CLR  R23
	CALL __ADDD21
	CALL _move_window_G103
	MOV  R21,R30
	CPI  R21,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x291:
	LDD  R26,Y+18
	LDD  R27,Y+18+1
	ADIW R26,50
	MOVW R30,R16
	ANDI R31,HIGH(0x1FF)
	ADD  R30,R26
	ADC  R31,R27
	MOVW R18,R30
	LDD  R30,Y+14
	ANDI R30,LOW(0x1)
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
SUBOPT_0x292:
	__GETD2S 16
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x293:
	CALL SUBOPT_0xC5
	CALL __ADDD21
	CALL _move_window_G103
	MOV  R21,R30
	CPI  R21,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x294:
	CALL __MULB1W2U
	ANDI R31,HIGH(0x1FF)
	LDD  R26,Y+18
	LDD  R27,Y+18+1
	ADIW R26,50
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x295:
	__GETD2S 5
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
SUBOPT_0x296:
	LDD  R26,Y+9
	LDD  R27,Y+9+1
	ADIW R26,30
	CALL __GETD1P
	RCALL SUBOPT_0x295
	CALL __CPD21
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x297:
	__GETD1S 1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:32 WORDS
SUBOPT_0x298:
	__CPD2N 0x1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x299:
	__GETD2N 0x0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x29A:
	__GETD2Z 14
	JMP SUBOPT_0x2B

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x29B:
	__PUTD1S 5
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x29C:
	LDD  R30,Y+20
	LDD  R31,Y+20+1
	ST   -Y,R31
	ST   -Y,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x29D:
	__GETD2S 18
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x29E:
	__GETD1N 0x2
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x29F:
	CALL SUBOPT_0x77
	CALL SUBOPT_0xC5
	CALL __CPD12
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x2A0:
	__GETD1N 0x0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 15 TIMES, CODE SIZE REDUCTION:25 WORDS
SUBOPT_0x2A1:
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	CALL __GETW1P
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x2A2:
	ADIW R30,30
	MOVW R26,R30
	CALL __GETD1P
	CALL SUBOPT_0xA1
	CALL __CPD21
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x2A3:
	CALL SUBOPT_0xA0
	__PUTD1SNS 8,10
	RJMP SUBOPT_0x2A1

;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x2A4:
	CLR  R22
	CLR  R23
	CALL __ADDD12
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0x2A5:
	ANDI R30,LOW(0xF)
	ANDI R31,HIGH(0xF)
	LSL  R30
	CALL __LSLW4
	ADD  R30,R26
	ADC  R31,R27
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x2A6:
	CALL __GETD1P
	CALL __CPD10
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 15 TIMES, CODE SIZE REDUCTION:25 WORDS
SUBOPT_0x2A7:
	LDD  R26,Y+9
	LDD  R27,Y+9+1
	CALL __GETW1P
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x2A8:
	ST   -Y,R31
	ST   -Y,R30
	LDD  R30,Y+11
	LDD  R31,Y+11+1
	__GETD2Z 10
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x2A9:
	ADIW R30,30
	MOVW R26,R30
	CALL __GETD1P
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x2AA:
	ST   -Y,R31
	ST   -Y,R30
	CALL SUBOPT_0x49
	JMP  _clust2sect

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:25 WORDS
SUBOPT_0x2AB:
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	CALL __GETW1P
	ST   -Y,R31
	ST   -Y,R30
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	__GETD2Z 14
	CALL _move_window_G103
	MOV  R17,R30
	CPI  R17,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x2AC:
	ST   -Y,R19
	ST   -Y,R18
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	LDD  R26,Z+20
	LDD  R27,Z+21
	ST   -Y,R27
	ST   -Y,R26
	JMP SUBOPT_0x38

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x2AD:
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	ADD  R26,R30
	ADC  R27,R31
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x2AE:
	MOV  R30,R18
	SUBI R18,-1
	LDI  R31,0
	ADD  R30,R20
	ADC  R31,R21
	ST   Z,R16
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x2AF:
	LDI  R31,0
	ADD  R30,R20
	ADC  R31,R21
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x2B0:
	__PUTD1SNS 6,6
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x2B1:
	MOVW R26,R18
	ADIW R26,20
	JMP SUBOPT_0x1C

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x2B2:
	MOVW R26,R18
	ADIW R26,26
	CALL __GETW1P
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x2B3:
	CLR  R22
	CLR  R23
	CALL __ORD12
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x2B4:
	CALL __PUTPARD1
	LDI  R26,LOW(1)
	CALL _disk_read
	CPI  R30,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
SUBOPT_0x2B5:
	ADIW R30,50
	SUBI R30,LOW(-510)
	SBCI R31,HIGH(-510)
	MOVW R26,R30
	CALL __GETW1P
	CPI  R30,LOW(0xAA55)
	LDI  R26,HIGH(0xAA55)
	CPC  R31,R26
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
SUBOPT_0x2B6:
	CALL __GETD1P
	__ANDD1N 0xFFFFFF
	__CPD1N 0x544146
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
SUBOPT_0x2B7:
	LDI  R26,LOW(_FatFs_G103)
	LDI  R27,HIGH(_FatFs_G103)
	LDI  R31,0
	LSL  R30
	ROL  R31
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
SUBOPT_0x2B8:
	__PUTD1S 18
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x2B9:
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	SUBI R26,LOW(-64)
	SBCI R27,HIGH(-64)
	CALL __GETW1P
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0x2BA:
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	LDD  R26,Z+8
	LDD  R27,Z+9
	MOVW R30,R26
	CALL __LSRW4
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x2BB:
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	RCALL SUBOPT_0x280
	CALL SUBOPT_0xC1
	CALL __ADDD12
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x2BC:
	CALL _move_window_G103
	MOV  R17,R30
	CPI  R17,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
SUBOPT_0x2BD:
	LDD  R26,Y+26
	LDD  R27,Y+26+1
	CALL __GETW1P
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x2BE:
	ST   -Y,R31
	ST   -Y,R30
	LDD  R30,Y+28
	LDD  R31,Y+28+1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x2BF:
	LDD  R26,Z+2
	LDD  R27,Z+3
	CALL _validate_G103
	MOV  R17,R30
	CPI  R17,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x2C0:
	LDD  R30,Y+26
	LDD  R31,Y+26+1
	__GETD2Z 6
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x2C1:
	MOVW R30,R26
	MOVW R22,R24
	ANDI R31,HIGH(0x1FF)
	SBIW R30,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x2C2:
	__GETD2Z 18
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
SUBOPT_0x2C3:
	LDD  R26,Y+26
	LDD  R27,Y+26+1
	ADIW R26,4
	LD   R30,X
	ORI  R30,0x80
	ST   X,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x2C4:
	LDD  R30,Y+26
	LDD  R31,Y+26+1
	LDD  R30,Z+5
	LDI  R31,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0x2C5:
	LDI  R30,LOW(512)
	LDI  R31,HIGH(512)
	CALL __DIVW21U
	MOVW R20,R30
	MOV  R0,R20
	OR   R0,R21
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x2C6:
	LDD  R30,Z+1
	ST   -Y,R30
	LDD  R30,Y+7
	LDD  R31,Y+7+1
	ST   -Y,R31
	ST   -Y,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x2C7:
	LDD  R30,Y+26
	LDD  R31,Y+26+1
	__GETD2Z 22
	JMP SUBOPT_0xC6

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0x2C8:
	CALL __SUBD21
	MOVW R30,R20
	CLR  R22
	CLR  R23
	CALL __CPD21
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x2C9:
	CALL __SUBD21
	__GETD1N 0x200
	CALL __MULD12U
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x2CA:
	ADIW R26,5
	LD   R30,X
	ADD  R30,R20
	ST   X,R30
	MOVW R30,R20
	LSL  R30
	ROL  R31
	MOV  R31,R30
	LDI  R30,0
	MOVW R18,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0x2CB:
	LDD  R30,Z+1
	ST   -Y,R30
	LDD  R30,Y+27
	LDD  R31,Y+27+1
	ADIW R30,32
	ST   -Y,R31
	ST   -Y,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:21 WORDS
SUBOPT_0x2CC:
	__GETD2Z 22
	CALL __PUTPARD2
	LDI  R26,LOW(1)
	CALL _disk_write
	CPI  R30,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x2CD:
	ADIW R26,4
	LD   R30,X
	ANDI R30,0xBF
	ST   X,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x2CE:
	ADIW R26,5
	LD   R30,X
	SUBI R30,-LOW(1)
	ST   X,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x2CF:
	ADIW R26,6
	CALL __GETW1P
	ANDI R31,HIGH(0x1FF)
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x2D0:
	ADIW R30,6
	MOVW R0,R30
	MOVW R26,R30
	CALL __GETD1P
	MOVW R26,R30
	MOVW R24,R22
	MOVW R30,R18
	RJMP SUBOPT_0x2A4

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x2D1:
	LD   R30,X+
	LD   R31,X+
	ADD  R30,R18
	ADC  R31,R19
	ST   -X,R31
	ST   -X,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 21 TIMES, CODE SIZE REDUCTION:37 WORDS
SUBOPT_0x2D2:
	LDD  R26,Y+22
	LDD  R27,Y+22+1
	CALL __GETW1P
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x2D3:
	ST   -Y,R31
	ST   -Y,R30
	LDD  R30,Y+24
	LDD  R31,Y+24+1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x2D4:
	LDD  R26,Y+22
	LDD  R27,Y+22+1
	ADIW R26,10
	CALL __GETD1P
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x2D5:
	LDD  R30,Y+22
	LDD  R31,Y+22+1
	__GETD2Z 6
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x2D6:
	ST   -Y,R31
	ST   -Y,R30
	RCALL SUBOPT_0x299
	JMP  _create_chain_G103

;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
SUBOPT_0x2D7:
	LDD  R26,Y+22
	LDD  R27,Y+22+1
	ADIW R26,4
	LD   R30,X
	ORI  R30,0x80
	ST   X,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0x2D8:
	LDD  R30,Z+1
	ST   -Y,R30
	LDD  R30,Y+23
	LDD  R31,Y+23+1
	ADIW R30,32
	ST   -Y,R31
	ST   -Y,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x2D9:
	LDD  R30,Y+22
	LDD  R31,Y+22+1
	LDD  R30,Z+5
	LDI  R31,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x2DA:
	LDD  R30,Y+22
	LDD  R31,Y+22+1
	__GETD2Z 22
	JMP SUBOPT_0x3E

;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
SUBOPT_0x2DB:
	LDD  R26,Y+21
	LDD  R27,Y+21+1
	CALL __GETW1P
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x2DC:
	LDD  R26,Y+21
	LDD  R27,Y+21+1
	ADIW R26,10
	CALL __GETD1P
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
SUBOPT_0x2DD:
	__GETD2S 17
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x2DE:
	__PUTD1S 17
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x2DF:
	__PUTD1SNS 21,6
	LDD  R26,Y+21
	LDD  R27,Y+21+1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x2E0:
	__GETD1S 17
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x2E1:
	CALL SUBOPT_0xC7
	MOVW R26,R30
	MOVW R24,R22
	CALL SUBOPT_0x5B
	CALL __DIVD21U
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x2E2:
	CALL __GETD1P
	__PUTD1S 13
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
SUBOPT_0x2E3:
	__GETD1S 13
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x2E4:
	__PUTD1S 13
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x2E5:
	__GETD2S 13
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:21 WORDS
SUBOPT_0x2E6:
	LDD  R26,Y+21
	LDD  R27,Y+21+1
	ADIW R26,4
	LD   R30,X
	ORI  R30,0x80
	ST   X,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x2E7:
	RCALL SUBOPT_0x2E3
	__PUTD1SNS 21,18
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x2E8:
	ST   -Y,R31
	ST   -Y,R30
	__GETD2S 15
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0x2E9:
	LDD  R30,Y+21
	LDD  R31,Y+21+1
	ADIW R30,6
	MOVW R0,R30
	MOVW R26,R30
	CALL __GETD1P
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x2EA:
	LDD  R30,Y+21
	LDD  R31,Y+21+1
	__GETD2Z 6
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x2EB:
	CALL SUBOPT_0xC1
	CALL SUBOPT_0xA9
	RJMP SUBOPT_0x2B8

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x2EC:
	CALL SUBOPT_0x96
	RJMP SUBOPT_0x271

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x2ED:
	CALL SUBOPT_0x77
	CALL SUBOPT_0x9
	CALL __CMPF12
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x2EE:
	CALL SUBOPT_0x9
	__GETD1N 0x3DCCCCCD
	RJMP SUBOPT_0x278

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x2EF:
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	ADIW R26,1
	STD  Y+8,R26
	STD  Y+8+1,R27
	SBIW R26,1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:17 WORDS
SUBOPT_0x2F0:
	ST   -Y,R18
	LDD  R26,Y+7
	LDD  R27,Y+7+1
	CALL SUBOPT_0x5B
	OUT  EIND,R22
	EICALL
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:25 WORDS
SUBOPT_0x2F1:
	__GETW1SX 96
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:21 WORDS
SUBOPT_0x2F2:
	SBIW R30,4
	__PUTW1SX 96
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x2F3:
	LDD  R26,Y+7
	LDD  R27,Y+7+1
	CALL SUBOPT_0x5B
	OUT  EIND,R22
	EICALL
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
SUBOPT_0x2F4:
	__GETW2SX 96
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
SUBOPT_0x2F5:
	RCALL SUBOPT_0x2F1
	RJMP SUBOPT_0x2F2

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:15 WORDS
SUBOPT_0x2F6:
	ANDI R16,LOW(251)
	LDD  R30,Y+25
	ST   -Y,R30
	__GETW2SX 91
	__GETD1SX 93
	OUT  EIND,R22
	EICALL
	CPI  R21,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x2F7:
	__POINTD1M _put_buff_G104
	CALL __PUTPARD1
	RET


	.CSEG
	.equ __i2c_dir=__i2c_port-1
	.equ __i2c_pin=__i2c_port-2

_i2c_init:
	cbi  __i2c_port,__scl_bit
	cbi  __i2c_port,__sda_bit
	sbi  __i2c_dir,__scl_bit
	cbi  __i2c_dir,__sda_bit
	rjmp __i2c_delay2
_i2c_start:
	cbi  __i2c_dir,__sda_bit
	cbi  __i2c_dir,__scl_bit
	clr  r30
	nop
	sbis __i2c_pin,__sda_bit
	ret
	sbis __i2c_pin,__scl_bit
	ret
	rcall __i2c_delay1
	sbi  __i2c_dir,__sda_bit
	rcall __i2c_delay1
	sbi  __i2c_dir,__scl_bit
	ldi  r30,1
__i2c_delay1:
	ldi  r22,13
	rjmp __i2c_delay2l
_i2c_stop:
	sbi  __i2c_dir,__sda_bit
	sbi  __i2c_dir,__scl_bit
	rcall __i2c_delay2
	cbi  __i2c_dir,__scl_bit
	rcall __i2c_delay1
	cbi  __i2c_dir,__sda_bit
__i2c_delay2:
	ldi  r22,27
__i2c_delay2l:
	dec  r22
	brne __i2c_delay2l
	ret
_i2c_read:
	ldi  r23,8
__i2c_read0:
	cbi  __i2c_dir,__scl_bit
	rcall __i2c_delay1
__i2c_read3:
	sbis __i2c_pin,__scl_bit
	rjmp __i2c_read3
	rcall __i2c_delay1
	clc
	sbic __i2c_pin,__sda_bit
	sec
	sbi  __i2c_dir,__scl_bit
	rcall __i2c_delay2
	rol  r30
	dec  r23
	brne __i2c_read0
	mov  r23,r26
	tst  r23
	brne __i2c_read1
	cbi  __i2c_dir,__sda_bit
	rjmp __i2c_read2
__i2c_read1:
	sbi  __i2c_dir,__sda_bit
__i2c_read2:
	rcall __i2c_delay1
	cbi  __i2c_dir,__scl_bit
	rcall __i2c_delay2
	sbi  __i2c_dir,__scl_bit
	rcall __i2c_delay1
	cbi  __i2c_dir,__sda_bit
	rjmp __i2c_delay1

_i2c_write:
	ldi  r23,8
__i2c_write0:
	lsl  r26
	brcc __i2c_write1
	cbi  __i2c_dir,__sda_bit
	rjmp __i2c_write2
__i2c_write1:
	sbi  __i2c_dir,__sda_bit
__i2c_write2:
	rcall __i2c_delay2
	cbi  __i2c_dir,__scl_bit
	rcall __i2c_delay1
__i2c_write3:
	sbis __i2c_pin,__scl_bit
	rjmp __i2c_write3
	rcall __i2c_delay1
	sbi  __i2c_dir,__scl_bit
	dec  r23
	brne __i2c_write0
	cbi  __i2c_dir,__sda_bit
	rcall __i2c_delay1
	cbi  __i2c_dir,__scl_bit
	rcall __i2c_delay2
	ldi  r30,1
	sbic __i2c_pin,__sda_bit
	clr  r30
	sbi  __i2c_dir,__scl_bit
	rjmp __i2c_delay1

_delay_ms:
	adiw r26,0
	breq __delay_ms1
__delay_ms0:
	__DELAY_USW 0x7D0
	wdr
	sbiw r26,1
	brne __delay_ms0
__delay_ms1:
	ret

__ANEGF1:
	SBIW R30,0
	SBCI R22,0
	SBCI R23,0
	BREQ __ANEGF10
	SUBI R23,0x80
__ANEGF10:
	RET

__ROUND_REPACK:
	TST  R21
	BRPL __REPACK
	CPI  R21,0x80
	BRNE __ROUND_REPACK0
	SBRS R30,0
	RJMP __REPACK
__ROUND_REPACK0:
	ADIW R30,1
	ADC  R22,R25
	ADC  R23,R25
	BRVS __REPACK1

__REPACK:
	LDI  R21,0x80
	EOR  R21,R23
	BRNE __REPACK0
	PUSH R21
	RJMP __ZERORES
__REPACK0:
	CPI  R21,0xFF
	BREQ __REPACK1
	LSL  R22
	LSL  R0
	ROR  R21
	ROR  R22
	MOV  R23,R21
	RET
__REPACK1:
	PUSH R21
	TST  R0
	BRMI __REPACK2
	RJMP __MAXRES
__REPACK2:
	RJMP __MINRES

__UNPACK:
	LDI  R21,0x80
	MOV  R1,R25
	AND  R1,R21
	LSL  R24
	ROL  R25
	EOR  R25,R21
	LSL  R21
	ROR  R24

__UNPACK1:
	LDI  R21,0x80
	MOV  R0,R23
	AND  R0,R21
	LSL  R22
	ROL  R23
	EOR  R23,R21
	LSL  R21
	ROR  R22
	RET

__CFD1U:
	SET
	RJMP __CFD1U0
__CFD1:
	CLT
__CFD1U0:
	PUSH R21
	RCALL __UNPACK1
	CPI  R23,0x80
	BRLO __CFD10
	CPI  R23,0xFF
	BRCC __CFD10
	RJMP __ZERORES
__CFD10:
	LDI  R21,22
	SUB  R21,R23
	BRPL __CFD11
	NEG  R21
	CPI  R21,8
	BRTC __CFD19
	CPI  R21,9
__CFD19:
	BRLO __CFD17
	SER  R30
	SER  R31
	SER  R22
	LDI  R23,0x7F
	BLD  R23,7
	RJMP __CFD15
__CFD17:
	CLR  R23
	TST  R21
	BREQ __CFD15
__CFD18:
	LSL  R30
	ROL  R31
	ROL  R22
	ROL  R23
	DEC  R21
	BRNE __CFD18
	RJMP __CFD15
__CFD11:
	CLR  R23
__CFD12:
	CPI  R21,8
	BRLO __CFD13
	MOV  R30,R31
	MOV  R31,R22
	MOV  R22,R23
	SUBI R21,8
	RJMP __CFD12
__CFD13:
	TST  R21
	BREQ __CFD15
__CFD14:
	LSR  R23
	ROR  R22
	ROR  R31
	ROR  R30
	DEC  R21
	BRNE __CFD14
__CFD15:
	TST  R0
	BRPL __CFD16
	RCALL __ANEGD1
__CFD16:
	POP  R21
	RET

__CDF1U:
	SET
	RJMP __CDF1U0
__CDF1:
	CLT
__CDF1U0:
	SBIW R30,0
	SBCI R22,0
	SBCI R23,0
	BREQ __CDF10
	CLR  R0
	BRTS __CDF11
	TST  R23
	BRPL __CDF11
	COM  R0
	RCALL __ANEGD1
__CDF11:
	MOV  R1,R23
	LDI  R23,30
	TST  R1
__CDF12:
	BRMI __CDF13
	DEC  R23
	LSL  R30
	ROL  R31
	ROL  R22
	ROL  R1
	RJMP __CDF12
__CDF13:
	MOV  R30,R31
	MOV  R31,R22
	MOV  R22,R1
	PUSH R21
	RCALL __REPACK
	POP  R21
__CDF10:
	RET

__SWAPACC:
	PUSH R20
	MOVW R20,R30
	MOVW R30,R26
	MOVW R26,R20
	MOVW R20,R22
	MOVW R22,R24
	MOVW R24,R20
	MOV  R20,R0
	MOV  R0,R1
	MOV  R1,R20
	POP  R20
	RET

__UADD12:
	ADD  R30,R26
	ADC  R31,R27
	ADC  R22,R24
	RET

__NEGMAN1:
	COM  R30
	COM  R31
	COM  R22
	SUBI R30,-1
	SBCI R31,-1
	SBCI R22,-1
	RET

__SUBF12:
	PUSH R21
	RCALL __UNPACK
	CPI  R25,0x80
	BREQ __ADDF129
	LDI  R21,0x80
	EOR  R1,R21

	RJMP __ADDF120

__ADDF12:
	PUSH R21
	RCALL __UNPACK
	CPI  R25,0x80
	BREQ __ADDF129

__ADDF120:
	CPI  R23,0x80
	BREQ __ADDF128
__ADDF121:
	MOV  R21,R23
	SUB  R21,R25
	BRVS __ADDF1211
	BRPL __ADDF122
	RCALL __SWAPACC
	RJMP __ADDF121
__ADDF122:
	CPI  R21,24
	BRLO __ADDF123
	CLR  R26
	CLR  R27
	CLR  R24
__ADDF123:
	CPI  R21,8
	BRLO __ADDF124
	MOV  R26,R27
	MOV  R27,R24
	CLR  R24
	SUBI R21,8
	RJMP __ADDF123
__ADDF124:
	TST  R21
	BREQ __ADDF126
__ADDF125:
	LSR  R24
	ROR  R27
	ROR  R26
	DEC  R21
	BRNE __ADDF125
__ADDF126:
	MOV  R21,R0
	EOR  R21,R1
	BRMI __ADDF127
	RCALL __UADD12
	BRCC __ADDF129
	ROR  R22
	ROR  R31
	ROR  R30
	INC  R23
	BRVC __ADDF129
	RJMP __MAXRES
__ADDF128:
	RCALL __SWAPACC
__ADDF129:
	RCALL __REPACK
	POP  R21
	RET
__ADDF1211:
	BRCC __ADDF128
	RJMP __ADDF129
__ADDF127:
	SUB  R30,R26
	SBC  R31,R27
	SBC  R22,R24
	BREQ __ZERORES
	BRCC __ADDF1210
	COM  R0
	RCALL __NEGMAN1
__ADDF1210:
	TST  R22
	BRMI __ADDF129
	LSL  R30
	ROL  R31
	ROL  R22
	DEC  R23
	BRVC __ADDF1210

__ZERORES:
	CLR  R30
	CLR  R31
	CLR  R22
	CLR  R23
	POP  R21
	RET

__MINRES:
	SER  R30
	SER  R31
	LDI  R22,0x7F
	SER  R23
	POP  R21
	RET

__MAXRES:
	SER  R30
	SER  R31
	LDI  R22,0x7F
	LDI  R23,0x7F
	POP  R21
	RET

__MULF12:
	PUSH R21
	RCALL __UNPACK
	CPI  R23,0x80
	BREQ __ZERORES
	CPI  R25,0x80
	BREQ __ZERORES
	EOR  R0,R1
	SEC
	ADC  R23,R25
	BRVC __MULF124
	BRLT __ZERORES
__MULF125:
	TST  R0
	BRMI __MINRES
	RJMP __MAXRES
__MULF124:
	PUSH R0
	PUSH R17
	PUSH R18
	PUSH R19
	PUSH R20
	CLR  R17
	CLR  R18
	CLR  R25
	MUL  R22,R24
	MOVW R20,R0
	MUL  R24,R31
	MOV  R19,R0
	ADD  R20,R1
	ADC  R21,R25
	MUL  R22,R27
	ADD  R19,R0
	ADC  R20,R1
	ADC  R21,R25
	MUL  R24,R30
	RCALL __MULF126
	MUL  R27,R31
	RCALL __MULF126
	MUL  R22,R26
	RCALL __MULF126
	MUL  R27,R30
	RCALL __MULF127
	MUL  R26,R31
	RCALL __MULF127
	MUL  R26,R30
	ADD  R17,R1
	ADC  R18,R25
	ADC  R19,R25
	ADC  R20,R25
	ADC  R21,R25
	MOV  R30,R19
	MOV  R31,R20
	MOV  R22,R21
	MOV  R21,R18
	POP  R20
	POP  R19
	POP  R18
	POP  R17
	POP  R0
	TST  R22
	BRMI __MULF122
	LSL  R21
	ROL  R30
	ROL  R31
	ROL  R22
	RJMP __MULF123
__MULF122:
	INC  R23
	BRVS __MULF125
__MULF123:
	RCALL __ROUND_REPACK
	POP  R21
	RET

__MULF127:
	ADD  R17,R0
	ADC  R18,R1
	ADC  R19,R25
	RJMP __MULF128
__MULF126:
	ADD  R18,R0
	ADC  R19,R1
__MULF128:
	ADC  R20,R25
	ADC  R21,R25
	RET

__DIVF21:
	PUSH R21
	RCALL __UNPACK
	CPI  R23,0x80
	BRNE __DIVF210
	TST  R1
__DIVF211:
	BRPL __DIVF219
	RJMP __MINRES
__DIVF219:
	RJMP __MAXRES
__DIVF210:
	CPI  R25,0x80
	BRNE __DIVF218
__DIVF217:
	RJMP __ZERORES
__DIVF218:
	EOR  R0,R1
	SEC
	SBC  R25,R23
	BRVC __DIVF216
	BRLT __DIVF217
	TST  R0
	RJMP __DIVF211
__DIVF216:
	MOV  R23,R25
	PUSH R17
	PUSH R18
	PUSH R19
	PUSH R20
	CLR  R1
	CLR  R17
	CLR  R18
	CLR  R19
	CLR  R20
	CLR  R21
	LDI  R25,32
__DIVF212:
	CP   R26,R30
	CPC  R27,R31
	CPC  R24,R22
	CPC  R20,R17
	BRLO __DIVF213
	SUB  R26,R30
	SBC  R27,R31
	SBC  R24,R22
	SBC  R20,R17
	SEC
	RJMP __DIVF214
__DIVF213:
	CLC
__DIVF214:
	ROL  R21
	ROL  R18
	ROL  R19
	ROL  R1
	ROL  R26
	ROL  R27
	ROL  R24
	ROL  R20
	DEC  R25
	BRNE __DIVF212
	MOVW R30,R18
	MOV  R22,R1
	POP  R20
	POP  R19
	POP  R18
	POP  R17
	TST  R22
	BRMI __DIVF215
	LSL  R21
	ROL  R30
	ROL  R31
	ROL  R22
	DEC  R23
	BRVS __DIVF217
__DIVF215:
	RCALL __ROUND_REPACK
	POP  R21
	RET

__CMPF12:
	TST  R25
	BRMI __CMPF120
	TST  R23
	BRMI __CMPF121
	CP   R25,R23
	BRLO __CMPF122
	BRNE __CMPF121
	CP   R26,R30
	CPC  R27,R31
	CPC  R24,R22
	BRLO __CMPF122
	BREQ __CMPF123
__CMPF121:
	CLZ
	CLC
	RET
__CMPF122:
	CLZ
	SEC
	RET
__CMPF123:
	SEZ
	CLC
	RET
__CMPF120:
	TST  R23
	BRPL __CMPF122
	CP   R25,R23
	BRLO __CMPF121
	BRNE __CMPF122
	CP   R30,R26
	CPC  R31,R27
	CPC  R22,R24
	BRLO __CMPF122
	BREQ __CMPF123
	RJMP __CMPF121

__ADDW2R15:
	CLR  R0
	ADD  R26,R15
	ADC  R27,R0
	RET

__ADDD12:
	ADD  R30,R26
	ADC  R31,R27
	ADC  R22,R24
	ADC  R23,R25
	RET

__ADDD21:
	ADD  R26,R30
	ADC  R27,R31
	ADC  R24,R22
	ADC  R25,R23
	RET

__SUBD12:
	SUB  R30,R26
	SBC  R31,R27
	SBC  R22,R24
	SBC  R23,R25
	RET

__SUBD21:
	SUB  R26,R30
	SBC  R27,R31
	SBC  R24,R22
	SBC  R25,R23
	RET

__ANDD12:
	AND  R30,R26
	AND  R31,R27
	AND  R22,R24
	AND  R23,R25
	RET

__ORD12:
	OR   R30,R26
	OR   R31,R27
	OR   R22,R24
	OR   R23,R25
	RET

__ANEGW1:
	NEG  R31
	NEG  R30
	SBCI R31,0
	RET

__ANEGD1:
	COM  R31
	COM  R22
	COM  R23
	NEG  R30
	SBCI R31,-1
	SBCI R22,-1
	SBCI R23,-1
	RET

__LSLW12:
	TST  R30
	MOV  R0,R30
	MOVW R30,R26
	BREQ __LSLW12R
__LSLW12L:
	LSL  R30
	ROL  R31
	DEC  R0
	BRNE __LSLW12L
__LSLW12R:
	RET

__LSLD12:
	TST  R30
	MOV  R0,R30
	MOVW R30,R26
	MOVW R22,R24
	BREQ __LSLD12R
__LSLD12L:
	LSL  R30
	ROL  R31
	ROL  R22
	ROL  R23
	DEC  R0
	BRNE __LSLD12L
__LSLD12R:
	RET

__LSRD12:
	TST  R30
	MOV  R0,R30
	MOVW R30,R26
	MOVW R22,R24
	BREQ __LSRD12R
__LSRD12L:
	LSR  R23
	ROR  R22
	ROR  R31
	ROR  R30
	DEC  R0
	BRNE __LSRD12L
__LSRD12R:
	RET

__LSLW4:
	LSL  R30
	ROL  R31
__LSLW3:
	LSL  R30
	ROL  R31
__LSLW2:
	LSL  R30
	ROL  R31
	LSL  R30
	ROL  R31
	RET

__ASRW4:
	ASR  R31
	ROR  R30
__ASRW3:
	ASR  R31
	ROR  R30
__ASRW2:
	ASR  R31
	ROR  R30
	ASR  R31
	ROR  R30
	RET

__LSRW4:
	LSR  R31
	ROR  R30
__LSRW3:
	LSR  R31
	ROR  R30
__LSRW2:
	LSR  R31
	ROR  R30
	LSR  R31
	ROR  R30
	RET

__LSRD1:
	LSR  R23
	ROR  R22
	ROR  R31
	ROR  R30
	RET

__LSLD1:
	LSL  R30
	ROL  R31
	ROL  R22
	ROL  R23
	RET

__ASRW8:
	MOV  R30,R31
	CLR  R31
	SBRC R30,7
	SER  R31
	RET

__LSRD16:
	MOV  R30,R22
	MOV  R31,R23
	LDI  R22,0
	LDI  R23,0
	RET

__LSLD16:
	MOV  R22,R30
	MOV  R23,R31
	LDI  R30,0
	LDI  R31,0
	RET

__CBD1:
	MOV  R31,R30
	ADD  R31,R31
	SBC  R31,R31
	MOV  R22,R31
	MOV  R23,R31
	RET

__CWD1:
	MOV  R22,R31
	ADD  R22,R22
	SBC  R22,R22
	MOV  R23,R22
	RET

__COMD1:
	COM  R30
	COM  R31
	COM  R22
	COM  R23
	RET

__EQB12:
	CP   R30,R26
	LDI  R30,1
	BREQ __EQB12T
	CLR  R30
__EQB12T:
	RET

__LNEGB1:
	TST  R30
	LDI  R30,1
	BREQ __LNEGB1F
	CLR  R30
__LNEGB1F:
	RET

__LNEGW1:
	OR   R30,R31
	LDI  R30,1
	BREQ __LNEGW1F
	LDI  R30,0
__LNEGW1F:
	RET

__MULW12U:
	MUL  R31,R26
	MOV  R31,R0
	MUL  R30,R27
	ADD  R31,R0
	MUL  R30,R26
	MOV  R30,R0
	ADD  R31,R1
	RET

__MULD12U:
	MUL  R23,R26
	MOV  R23,R0
	MUL  R22,R27
	ADD  R23,R0
	MUL  R31,R24
	ADD  R23,R0
	MUL  R30,R25
	ADD  R23,R0
	MUL  R22,R26
	MOV  R22,R0
	ADD  R23,R1
	MUL  R31,R27
	ADD  R22,R0
	ADC  R23,R1
	MUL  R30,R24
	ADD  R22,R0
	ADC  R23,R1
	CLR  R24
	MUL  R31,R26
	MOV  R31,R0
	ADD  R22,R1
	ADC  R23,R24
	MUL  R30,R27
	ADD  R31,R0
	ADC  R22,R1
	ADC  R23,R24
	MUL  R30,R26
	MOV  R30,R0
	ADD  R31,R1
	ADC  R22,R24
	ADC  R23,R24
	RET

__MULB1W2U:
	MOV  R22,R30
	MUL  R22,R26
	MOVW R30,R0
	MUL  R22,R27
	ADD  R31,R0
	RET

__MULW12:
	RCALL __CHKSIGNW
	RCALL __MULW12U
	BRTC __MULW121
	RCALL __ANEGW1
__MULW121:
	RET

__DIVB21U:
	CLR  R0
	LDI  R25,8
__DIVB21U1:
	LSL  R26
	ROL  R0
	SUB  R0,R30
	BRCC __DIVB21U2
	ADD  R0,R30
	RJMP __DIVB21U3
__DIVB21U2:
	SBR  R26,1
__DIVB21U3:
	DEC  R25
	BRNE __DIVB21U1
	MOV  R30,R26
	MOV  R26,R0
	RET

__DIVB21:
	RCALL __CHKSIGNB
	RCALL __DIVB21U
	BRTC __DIVB211
	NEG  R30
__DIVB211:
	RET

__DIVW21U:
	CLR  R0
	CLR  R1
	LDI  R25,16
__DIVW21U1:
	LSL  R26
	ROL  R27
	ROL  R0
	ROL  R1
	SUB  R0,R30
	SBC  R1,R31
	BRCC __DIVW21U2
	ADD  R0,R30
	ADC  R1,R31
	RJMP __DIVW21U3
__DIVW21U2:
	SBR  R26,1
__DIVW21U3:
	DEC  R25
	BRNE __DIVW21U1
	MOVW R30,R26
	MOVW R26,R0
	RET

__DIVW21:
	RCALL __CHKSIGNW
	RCALL __DIVW21U
	BRTC __DIVW211
	RCALL __ANEGW1
__DIVW211:
	RET

__DIVD21U:
	PUSH R19
	PUSH R20
	PUSH R21
	CLR  R0
	CLR  R1
	CLR  R20
	CLR  R21
	LDI  R19,32
__DIVD21U1:
	LSL  R26
	ROL  R27
	ROL  R24
	ROL  R25
	ROL  R0
	ROL  R1
	ROL  R20
	ROL  R21
	SUB  R0,R30
	SBC  R1,R31
	SBC  R20,R22
	SBC  R21,R23
	BRCC __DIVD21U2
	ADD  R0,R30
	ADC  R1,R31
	ADC  R20,R22
	ADC  R21,R23
	RJMP __DIVD21U3
__DIVD21U2:
	SBR  R26,1
__DIVD21U3:
	DEC  R19
	BRNE __DIVD21U1
	MOVW R30,R26
	MOVW R22,R24
	MOVW R26,R0
	MOVW R24,R20
	POP  R21
	POP  R20
	POP  R19
	RET

__MODB21:
	CLT
	SBRS R26,7
	RJMP __MODB211
	NEG  R26
	SET
__MODB211:
	SBRC R30,7
	NEG  R30
	RCALL __DIVB21U
	MOV  R30,R26
	BRTC __MODB212
	NEG  R30
__MODB212:
	RET

__MODW21:
	CLT
	SBRS R27,7
	RJMP __MODW211
	COM  R26
	COM  R27
	ADIW R26,1
	SET
__MODW211:
	SBRC R31,7
	RCALL __ANEGW1
	RCALL __DIVW21U
	MOVW R30,R26
	BRTC __MODW212
	RCALL __ANEGW1
__MODW212:
	RET

__MODD21U:
	RCALL __DIVD21U
	MOVW R30,R26
	MOVW R22,R24
	RET

__CHKSIGNB:
	CLT
	SBRS R30,7
	RJMP __CHKSB1
	NEG  R30
	SET
__CHKSB1:
	SBRS R26,7
	RJMP __CHKSB2
	NEG  R26
	BLD  R0,0
	INC  R0
	BST  R0,0
__CHKSB2:
	RET

__CHKSIGNW:
	CLT
	SBRS R31,7
	RJMP __CHKSW1
	RCALL __ANEGW1
	SET
__CHKSW1:
	SBRS R27,7
	RJMP __CHKSW2
	COM  R26
	COM  R27
	ADIW R26,1
	BLD  R0,0
	INC  R0
	BST  R0,0
__CHKSW2:
	RET

__GETW1P:
	LD   R30,X+
	LD   R31,X
	SBIW R26,1
	RET

__GETD1P:
	LD   R30,X+
	LD   R31,X+
	LD   R22,X+
	LD   R23,X
	SBIW R26,3
	RET

__GETD1P_INC:
	LD   R30,X+
	LD   R31,X+
	LD   R22,X+
	LD   R23,X+
	RET

__PUTDP1:
	ST   X+,R30
	ST   X+,R31
	ST   X+,R22
	ST   X,R23
	RET

__PUTDP1_DEC:
	ST   -X,R23
	ST   -X,R22
	ST   -X,R31
	ST   -X,R30
	RET

__GETD1PF:
	OUT  RAMPZ,R22
	ELPM R0,Z+
	ELPM R1,Z+
	ELPM R22,Z+
	ELPM R23,Z
	MOVW R30,R0
	RET

__GETD1S0:
	LD   R30,Y
	LDD  R31,Y+1
	LDD  R22,Y+2
	LDD  R23,Y+3
	RET

__GETD2S0:
	LD   R26,Y
	LDD  R27,Y+1
	LDD  R24,Y+2
	LDD  R25,Y+3
	RET

__PUTD1S0:
	ST   Y,R30
	STD  Y+1,R31
	STD  Y+2,R22
	STD  Y+3,R23
	RET

__PUTDZ20:
	ST   Z,R26
	STD  Z+1,R27
	STD  Z+2,R24
	STD  Z+3,R25
	RET

__PUTPARD1:
	ST   -Y,R23
	ST   -Y,R22
	ST   -Y,R31
	ST   -Y,R30
	RET

__PUTPARD2:
	ST   -Y,R25
	ST   -Y,R24
	ST   -Y,R27
	ST   -Y,R26
	RET

__PUTPARL:
	CLR  R27
__PUTPAR:
	ADD  R30,R26
	ADC  R31,R27
__PUTPAR0:
	LD   R0,-Z
	ST   -Y,R0
	SBIW R26,1
	BRNE __PUTPAR0
	RET

__SWAPD12:
	MOV  R1,R24
	MOV  R24,R22
	MOV  R22,R1
	MOV  R1,R25
	MOV  R25,R23
	MOV  R23,R1

__SWAPW12:
	MOV  R1,R27
	MOV  R27,R31
	MOV  R31,R1

__SWAPB12:
	MOV  R1,R26
	MOV  R26,R30
	MOV  R30,R1
	RET

__EEPROMRDD:
	ADIW R26,2
	RCALL __EEPROMRDW
	MOVW R22,R30
	SBIW R26,2

__EEPROMRDW:
	ADIW R26,1
	RCALL __EEPROMRDB
	MOV  R31,R30
	SBIW R26,1

__EEPROMRDB:
	SBIC EECR,EEWE
	RJMP __EEPROMRDB
	PUSH R31
	IN   R31,SREG
	CLI
	OUT  EEARL,R26
	OUT  EEARH,R27
	SBI  EECR,EERE
	IN   R30,EEDR
	OUT  SREG,R31
	POP  R31
	RET

__EEPROMWRD:
	RCALL __EEPROMWRW
	ADIW R26,2
	MOVW R0,R30
	MOVW R30,R22
	RCALL __EEPROMWRW
	MOVW R30,R0
	SBIW R26,2
	RET

__EEPROMWRW:
	RCALL __EEPROMWRB
	ADIW R26,1
	PUSH R30
	MOV  R30,R31
	RCALL __EEPROMWRB
	POP  R30
	SBIW R26,1
	RET

__EEPROMWRB:
	SBIS EECR,EEWE
	RJMP __EEPROMWRB1
	WDR
	RJMP __EEPROMWRB
__EEPROMWRB1:
	IN   R25,SREG
	CLI
	OUT  EEARL,R26
	OUT  EEARH,R27
	SBI  EECR,EERE
	IN   R24,EEDR
	CP   R30,R24
	BREQ __EEPROMWRB0
	OUT  EEDR,R30
	SBI  EECR,EEMWE
	SBI  EECR,EEWE
__EEPROMWRB0:
	OUT  SREG,R25
	RET

__CPD10:
	SBIW R30,0
	SBCI R22,0
	SBCI R23,0
	RET

__CPW02:
	CLR  R0
	CP   R0,R26
	CPC  R0,R27
	RET

__CPD20:
	SBIW R26,0
	SBCI R24,0
	SBCI R25,0
	RET

__CPD02:
	CLR  R0
	CP   R0,R26
	CPC  R0,R27
	CPC  R0,R24
	CPC  R0,R25
	RET

__CPD12:
	CP   R30,R26
	CPC  R31,R27
	CPC  R22,R24
	CPC  R23,R25
	RET

__CPD21:
	CP   R26,R30
	CPC  R27,R31
	CPC  R24,R22
	CPC  R25,R23
	RET

__SAVELOCR6:
	ST   -Y,R21
__SAVELOCR5:
	ST   -Y,R20
__SAVELOCR4:
	ST   -Y,R19
__SAVELOCR3:
	ST   -Y,R18
__SAVELOCR2:
	ST   -Y,R17
	ST   -Y,R16
	RET

__LOADLOCR6:
	LDD  R21,Y+5
__LOADLOCR5:
	LDD  R20,Y+4
__LOADLOCR4:
	LDD  R19,Y+3
__LOADLOCR3:
	LDD  R18,Y+2
__LOADLOCR2:
	LDD  R17,Y+1
	LD   R16,Y
	RET

__INITLOCB:
	CLR  R25
__INITLOCW:
	ADD  R26,R28
	ADC  R27,R29
	OUT  RAMPZ,R22
__INITLOC0:
	ELPM R0,Z+
	ST   X+,R0
	SBIW R24,1
	BRNE __INITLOC0
	RET

;END OF CODE MARKER
__END_OF_CODE:
