;#include <stdio.h>
;#include <stdlib.h>
;#include <delay.h>
;#include "memcard.h"
;#include "debug.h"
;
;unsigned long int sdFreeSpace = 0;
;
;/*============================================================*/
;/* will hold the information for logical drive 0: */
;FATFS fat;
;/* pointer to the FATFS type structure */
;FATFS *pfat;
;/* root path */
;char root_path[] = "0:/";

	.DSEG
;/*============================================================*/        /* error message list */
;flash char * flash error_msg[]= {   "", /* not used */
;                                    "FR_DISK_ERR",
;                                    "FR_INT_ERR",
;                                    "FR_NOT_READY",
;                                    "FR_NO_FILE",
;                                    "FR_NO_PATH",
;                                    "FR_INVALID_NAME",
;                                    "FR_DENIED",
;                                    "FR_EXIST",
;                                    "FR_INVALID_OBJECT",
;                                    "FR_WRITE_PROTECTED",
;                                    "FR_INVALID_DRIVE",
;                                    "FR_NOT_ENABLED",
;                                    "FR_NO_FILESYSTEM",
;                                    "FR_MKFS_ABORTED",
;                                    "FR_TIMEOUT"  };
;/*============================================================*/        /* display error message and stop */
;void error(FRESULT res)
; 0013 0023 {

	.CSEG
;PCODE: $00000000 VOL: 0
;PCODE: $00000001 VOL: 0
; 0013 0024     if ((res>=FR_DISK_ERR) && (res<=FR_TIMEOUT))        printDebug("<ERR> %p.\r\n",error_msg[res]);     return;
;PCODE: $00000002 VOL: 0
;	res -> Y+0
;PCODE: $00000003 VOL: 0
;PCODE: $00000004 VOL: 0
;PCODE: $00000005 VOL: 0
;PCODE: $00000006 VOL: 0
;PCODE: $00000007 VOL: 0
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 0
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0013 0025 }
;PCODE: $0000001F VOL: 0
;/*============================================================*/
;int SD_writeData(FIL *file, unsigned long int start, unsigned char *data, unsigned int len)
; 0013 0028 {
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0013 0029     FRESULT         res;
; 0013 002A     unsigned int    actual_write;
; 0013 002B 
; 0013 002C     if(sdFreeSpace == 0){ printDebug("<SD_writeData> SD Card not ready\r\n");       return -1;}
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;	*file -> Y+12
;	start -> Y+8
;	*data -> Y+6
;	len -> Y+4
;	res -> R17
;	actual_write -> R18,R19
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0013 002D 
; 0013 002E     res = f_lseek(file,start);
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0013 002F     if(res != FR_OK){
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0013 0030         printDebug("<SD_writeData> f_lseek(%u) failed!!\r\n", start);
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0013 0031         error(res);
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0013 0032         return -1;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0013 0033     }
; 0013 0034 
; 0013 0035     res = f_write(file,data,len,&actual_write);
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0013 0036     if(res != FR_OK){
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0013 0037         printDebug("<SD_writeData> f_write() failed\r\n");
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0013 0038         print_payload(data,len);
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0013 0039         error(res);
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0013 003A         return -2;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0013 003B     }
; 0013 003C 
; 0013 003D     if(actual_write != len){
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0013 003E         printDebug("<SD_writeData> actual_write[%u] != len[%u]\r\n",actual_write,len);
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0013 003F         return -3; // -- the caller should roll back the last data -- //
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0013 0040     }
; 0013 0041 
; 0013 0042     return 0;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0013 0043 }
;PCODE: $00000085 VOL: 0
;/*============================================================*/
;int SD_readData(FIL *file, unsigned long int start, unsigned char *data, unsigned int len)
; 0013 0046 {
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0013 0047     FRESULT         res;
; 0013 0048     unsigned int    actual_read;
; 0013 0049 
; 0013 004A     if(sdFreeSpace == 0){ printDebug("<SD_readData> SD Card not ready\r\n");       return -1;}
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;	*file -> Y+12
;	start -> Y+8
;	*data -> Y+6
;	len -> Y+4
;	res -> R17
;	actual_read -> R18,R19
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0013 004B 
; 0013 004C     res = f_lseek(file,start);
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0013 004D     if(res != FR_OK){
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0013 004E         printDebug("<SD_readData> f_lseek(%u) failed!!\r\n", start);
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0013 004F         error(res);
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0013 0050         return -1;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0013 0051     }
; 0013 0052 
; 0013 0053     res = f_read(file,data,len,&actual_read);
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0013 0054     if(res != FR_OK){
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0013 0055         printDebug("<SD_readData> f_read() failed\r\n");
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0013 0056         error(res);
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0013 0057         return -2;
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0013 0058     }
; 0013 0059 
; 0013 005A     if(actual_read != len){
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0013 005B         printDebug("<SD_writeData> actual_read[%u] != len[%u]\r\n",actual_read,len);
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0013 005C         return -3; // -- the caller should roll back the last data -- //
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0013 005D     }
; 0013 005E 
; 0013 005F     return 0;
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0013 0060 }
;PCODE: $000000E7 VOL: 0
;/*============================================================*/
;int SD_readMemoryRemain(unsigned long *free_kbytes)
; 0013 0063 {
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0013 0064     FRESULT         res;
; 0013 0065     unsigned long   free_clusters;
; 0013 0066 
; 0013 0067     // ------ read available memory space ------- //
; 0013 0068     // return as percentage!!! //
; 0013 0069 
; 0013 006A     /* get the number of free clusters */
; 0013 006B     res = f_getfree(root_path,&free_clusters,&pfat);
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;	*free_kbytes -> Y+5
;	res -> R17
;	free_clusters -> Y+1
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0013 006C     if ( res != FR_OK){
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0013 006D        /* an error occured, display it and stop */
; 0013 006E        printDebug("<SD_readMemoryRemain> f_getfree(%s) error!!\r\n",root_path);
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0013 006F        error(res);
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0013 0070        sdFreeSpace = 0;
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0013 0071        return -1;
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0013 0072     }
; 0013 0073 
; 0013 0074     /* calculate the number of free bytes */
; 0013 0075     *free_kbytes = free_clusters * pfat->csize / 2;
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0013 0076 
; 0013 0077     return 0;
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0013 0078 }
;PCODE: $00000118 VOL: 0
;/*============================================================*/
;int SD_mount(void)
; 0013 007B {
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0013 007C     FRESULT         res;
; 0013 007D 
; 0013 007E     /* mount logical drive 0: */
; 0013 007F     res = f_mount(0,&fat);
;PCODE: $0000011B VOL: 0
;	res -> R17
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0013 0080     if( res != FR_OK ){
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0013 0081         printDebug("Logical drive 0: mounted ERROR\r\n");
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0013 0082         error(res);
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0013 0083         return -1;
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0013 0084     }
; 0013 0085 
; 0013 0086     printDebug("Logical drive 0: mounted OK\r\n");
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0013 0087     return 0;
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0013 0088 }
;PCODE: $0000013A VOL: 0
;/*============================================================*/
;int SD_unmount(void)
; 0013 008B {
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0013 008C     FRESULT         res;
; 0013 008D 
; 0013 008E     /* unmount logical drive 0: */
; 0013 008F     res = f_mount(0,NULL);
;PCODE: $0000013D VOL: 0
;	res -> R17
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0013 0090     if( res != FR_OK ){
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0013 0091         printDebug("Logical drive 0: unmounted ERROR\r\n");
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0013 0092         error(res);
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0013 0093         return -1;
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0013 0094     }
; 0013 0095 
; 0013 0096     printDebug("Logical drive 0: unmounted OK\r\n");
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0013 0097     return 0;
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0013 0098 }
;PCODE: $0000015D VOL: 0
;/*============================================================*/
;int SD_remount(void)
; 0013 009B {
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0013 009C     int res;
; 0013 009D 
; 0013 009E     res = SD_unmount();
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;	res -> R16,R17
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0013 009F     if(res < 0){
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0013 00A0         printDebug("<SD_remount> SD_unmount() failed\r\n");
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0013 00A1         return -1;
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0013 00A2     }
; 0013 00A3     delay_ms(250);
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0013 00A4     res = SD_mount();
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0013 00A5     if(res < 0){
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0013 00A6         printDebug("<SD_remount> SD_mount() failed\r\n");
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0013 00A7         return -1;
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0013 00A8     }
; 0013 00A9     delay_ms(250);
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0013 00AA //
; 0013 00AB //    if(SD_createFile(LOG_PROTOCOL) < 0){
; 0013 00AC //        printDebug("Error creating new log file (Remount failed)\r\n");
; 0013 00AD //        return -1;
; 0013 00AE //    }
; 0013 00AF 
; 0013 00B0     return 0;
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0013 00B1 }
;PCODE: $00000189 VOL: 0
;/*============================================================*/
;int SD_createFile(char *filename, unsigned char mode)
; 0013 00B4 {
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0013 00B5     FIL          file;
; 0013 00B6     FRESULT      res;
; 0013 00B7     char         filepath[50];
; 0013 00B8 
; 0013 00B9     if(sdFreeSpace == 0){ printDebug("<SD_createFile> SD Card not ready\r\n");      return -1;}
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;	*filename -> Y+596
;	mode -> Y+595
;	file -> Y+51
;	res -> R17
;	filepath -> Y+1
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0013 00BA 
; 0013 00BB     sprintf(filepath,"%s%s",root_path,filename);
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0013 00BC 
; 0013 00BD     if(mode == SD_FORCE)        // -- replace old file if exist -- //
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0013 00BE     {
; 0013 00BF         //printDebug("<SD_createFile> Force re-creating file %s.\r\n",filename);
; 0013 00C0         res = f_open(   &file,
; 0013 00C1                         filepath,
; 0013 00C2                         FA_CREATE_ALWAYS | FA_WRITE );
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
; 0013 00C3     }
; 0013 00C4     else                        // -- keep old file if exist -- //
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
; 0013 00C5     {
; 0013 00C6         //printDebug("<SD_createFile> Try to creating file %s.\r\n",filename);
; 0013 00C7         res = f_open(   &file,
; 0013 00C8                         filepath,
; 0013 00C9                         FA_CREATE_NEW | FA_WRITE );
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
; 0013 00CA     }
;PCODE: $000001C1 VOL: 0
; 0013 00CB 
; 0013 00CC     if( res == FR_EXIST){
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0013 00CD         //printDebug("<SD_createFile> %s already exist\r\n", filename);
; 0013 00CE 
; 0013 00CF //        res = f_close( &file );
; 0013 00D0 //        if( res != FR_OK ){
; 0013 00D1 //            printDebug("<SD_createFile> f_close() failed\r\n");
; 0013 00D2 //            error(res);
; 0013 00D3 //            return -1;
; 0013 00D4 //        }
; 0013 00D5 
; 0013 00D6         return 0;       // -- return 0 indicated that a file is already exist -- //
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
; 0013 00D7     }
; 0013 00D8     else if( res != FR_OK){
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
; 0013 00D9         printDebug("<SD_createFile> f_open() failed\r\n");
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
; 0013 00DA         error(res);
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
; 0013 00DB         return -1;
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0013 00DC     }
; 0013 00DD 
; 0013 00DE     //printDebug("<SD_createFile> '%s' created!!\r\n",filename);
; 0013 00DF 
; 0013 00E0     res = f_close( &file );
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
; 0013 00E1     if( res != FR_OK ){
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0013 00E2         printDebug("<SD_createFile> f_close() failed\r\n");
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
; 0013 00E3         error(res);
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
; 0013 00E4         return -1;
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
; 0013 00E5     }
; 0013 00E6 
; 0013 00E7     return 1;   // -- return 1 indicated that it's a new file -- //
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
; 0013 00E8 }
;PCODE: $000001F6 VOL: 0
;/*============================================================*/
;int SD_openFile(FIL *file, unsigned char *filename)
; 0013 00EB {
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
; 0013 00EC     int     res;
; 0013 00ED     char    filepath[50];
; 0013 00EE 
; 0013 00EF     if(sdFreeSpace == 0){ printDebug("<SD_openFile> SD Card not ready\r\n");    return -1;}
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;	*file -> Y+54
;	*filename -> Y+52
;	res -> R16,R17
;	filepath -> Y+2
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
; 0013 00F0 
; 0013 00F1     sprintf(filepath,"%s%s",root_path,filename);
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
; 0013 00F2 
; 0013 00F3     res = f_open( file, filepath, FA_WRITE | FA_READ | FA_OPEN_EXISTING);
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
; 0013 00F4     if( res != FR_OK){
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
; 0013 00F5         printDebug("<SD_openFile> f_open() [%s] failed\r\n", filename);
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0013 00F6         error(res);
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
; 0013 00F7         sdFreeSpace = 0;
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
; 0013 00F8         return -1;
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
; 0013 00F9     }
; 0013 00FA 
; 0013 00FB     return 0;
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
; 0013 00FC }
;PCODE: $00000245 VOL: 0
;/*============================================================*/
;int SD_closeFile(FIL *file)
; 0013 00FF {
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
; 0013 0100     int res;
; 0013 0101 
; 0013 0102     if(sdFreeSpace == 0){ printDebug("<SD_closeFile> SD Card not ready\r\n");       return -1;}
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;	*file -> Y+2
;	res -> R16,R17
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
; 0013 0103 
; 0013 0104     res = f_close( file );
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
; 0013 0105     if( res != FR_OK ){
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
; 0013 0106         printDebug("<SD_closeFile> f_close() failed\r\n");
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
; 0013 0107         error(res);
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
; 0013 0108         return -1;
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
; 0013 0109     }
; 0013 010A 
; 0013 010B     return 0;
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
; 0013 010C }
;PCODE: $0000027B VOL: 0
;/*============================================================*/
;int SD_init(void)
; 0013 010F {
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
; 0013 0110     int                 err;
; 0013 0111 
; 0013 0112     printDebug("<SD_init> Start initial memory card\r\n");
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;	err -> R16,R17
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
; 0013 0113 
; 0013 0114     /* point to the FATFS structure that holds
; 0013 0115     information for the logical drive 0: */
; 0013 0116     pfat=&fat;
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
; 0013 0117 
; 0013 0118     delay_ms(1000);
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
; 0013 0119     printDebug("\r\n<SD_init> Mounting SD Card...");
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
; 0013 011A     err = SD_mount();
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
; 0013 011B     if(err < 0){
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
; 0013 011C         printDebug("<SD_init> SD_mount() failed\r\n");
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
; 0013 011D         return -1;
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
; 0013 011E     }
; 0013 011F 
; 0013 0120 
; 0013 0121     printDebug("\r\n<SD_init> Check Card Size...");
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
; 0013 0122 
; 0013 0123     delay_ms(1000);
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
; 0013 0124 
; 0013 0125     err = SD_readMemoryRemain(&sdFreeSpace);
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
; 0013 0126     if(err < 0){
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
; 0013 0127         printDebug("<SD_init> SD_readMemoryRemain() failed\r\n");
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
; 0013 0128         return -1;
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
; 0013 0129     }
; 0013 012A 
; 0013 012B     /* display the number of free kbytes */
; 0013 012C     printDebug("<SD_init> Free space on logical drive 0: %lu kbytes\r\n",sdFreeSpace);
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
; 0013 012D 
; 0013 012E     return 0;
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
; 0013 012F }
;PCODE: $000002C6 VOL: 0
;/*============================================================*/
;
