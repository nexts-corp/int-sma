;#include <stdlib.h>
;#include <string.h>
;#include <stdio.h>
;#include <delay.h>
;#include "sensor.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include "config.h"
;#include "timer.h"
;#include "gaussian.h"
;#include "debug.h"
;#include "dht11.h"
;
;#define MAX(x, y) (((x) > (y)) ? (x) : (y))
;
;struct sens_val_st      sensor[5];
;extern ST_DHT11 dhtDevice;
;ST_DHT11 dhtDevice;
;
;int sensorRead(int ch, struct sens_val_st *sensor){
; 000D 0012 int sensorRead(int ch, struct sens_val_st *sensor){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 000D 0013     int dhtRet = 0;
; 000D 0014 
; 000D 0015     updateSensorADC(ch);
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;	ch -> Y+4
;	*sensor -> Y+2
;	dhtRet -> R16,R17
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 000D 0016     if(ch==0){
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 000D 0017        sensor->value = adcData[ch];
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 000D 0018     }else if(ch==3){
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 000D 0019        sensor->value = adcData[ch];
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 000D 001A     }else if(ch==4){
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 000D 001B        sensor->value = adcData[ch];
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 000D 001C     }else if((ch==1) || (ch==2)){
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 000D 001D         dhtRet = dhtDevice.status;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 000D 001E         if(dhtRet == DHT11_SUCCESS){
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 000D 001F            sensor->value = adcData[ch];
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 000D 0020         }else if(dhtRet == DHT11_ERROR_TIMEOUT){
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 000D 0021            sensor->status  = SENS_ERROR;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 000D 0022            //return -2;
; 000D 0023         }else if(dhtRet == DHT11_ERROR_CHECKSUM){
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 000D 0024            sensor->status  = SENS_ERROR;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 000D 0025            //return -2;
; 000D 0026         }
; 000D 0027     }
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 000D 0028 
; 000D 0029     sensor->status  = SENS_NORMAL;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 000D 002A     return 0;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 000D 002B }
;PCODE: $00000073 VOL: 0
;
;void updateSensorADC(int ch)
; 000D 002E {
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 000D 002F     int adc_raw = 0;
; 000D 0030     int dhtRet = 0;
; 000D 0031     float voltCutOff = 0.0;
; 000D 0032     float ACS709offset = 18.5;
; 000D 0033     float buffAmpSensor[60];
; 000D 0034     float buffVoltSensor[50];
; 000D 0035     float buff420Sensor[10];
; 000D 0036     float bufferTemp[2] = {0,0};
; 000D 0037     float bufferHumi[2] = {0,0};
; 000D 0038     int i=0,j=0;
; 000D 0039     int dht11Reread=0;
; 000D 003A     float ampValue = 0.0;
; 000D 003B     float voltValue = 0.0;
; 000D 003C     float mA420Value = 0.0;
; 000D 003D 
; 000D 003E     adc_raw     = read_adc(8+ch);
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;	ch -> Y+526
;	adc_raw -> R16,R17
;	dhtRet -> R18,R19
;	voltCutOff -> Y+522
;	ACS709offset -> Y+518
;	buffAmpSensor -> Y+278
;	buffVoltSensor -> Y+78
;	buff420Sensor -> Y+38
;	bufferTemp -> Y+30
;	bufferHumi -> Y+22
;	i -> R20,R21
;	j -> Y+20
;	dht11Reread -> Y+18
;	ampValue -> Y+14
;	voltValue -> Y+10
;	mA420Value -> Y+6
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 000D 003F     if(ch==0){
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 000D 0040         //adcData[ch] =   adc_raw;
; 000D 0041         //mA420Value = ((((adcData[ch]+5.0/1023.0)*3.30)/3.30)*20.0);
; 000D 0042 
; 000D 0043         for(i=0;i<10;i++){
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 000D 0044             buff420Sensor[i] = read_adc(8+ch);
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 000D 0045             delay_us(10);
;PCODE: $0000009E VOL: 0
; 000D 0046         }
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 000D 0047         mA420Value = ((average(buff420Sensor,10)+5.0)/1023.0)*20.0;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 000D 0048         //mA420Value = (((adcData[ch]+5.0/1023.0)*3.30)/165.0);     //R=165 Ohm
; 000D 0049        //printDebug("[%d]ADC: %f, mA: %f \r\n", ch, adcData[ch], mA420Value);
; 000D 004A        //adcData[ch] = (adcData[ch]+5/1023.0)*3.30;
; 000D 004B        adcData[ch] = mA420Value;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 000D 004C     }else if(ch==3){
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 000D 004D         //adcData[ch] =   adc_raw;
; 000D 004E         //voltValue = ((((adcData[ch]+5.0)/1023.0)*3.30)/3.30)*1000.0;
; 000D 004F         for(i=0;i<50;i++){
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 000D 0050             buffVoltSensor[i] = read_adc(8+ch);
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 000D 0051             delay_us(10);
;PCODE: $000000D0 VOL: 0
; 000D 0052         }
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 000D 0053 
; 000D 0054 
; 000D 0055         voltValue = ((average(buffVoltSensor,50)+5.0)/1023.0)*1000.0;
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 000D 0056         //printDebug("[%d]ADC: %f, Volt(raw): %f, Volt(AC): %f \r\n", ch, adcData[ch], (adcData[ch]+5.0/1023.0)*3.30, voltValue);
; 000D 0057 
; 000D 0058        adcData[ch] = voltValue;
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 000D 0059        //adcData[ch] = (adcData[ch]+5/1023)*3.30;
; 000D 005A     }else if(ch==4){
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 000D 005B         memset(buffAmpSensor,0,sizeof(buffAmpSensor));
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 000D 005C         for(i=0;i<60;i++){
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 000D 005D           buffAmpSensor[i] =  read_adc(8+ch);
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 000D 005E           delay_ms(1);
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 000D 005F         }
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 000D 0060         //adcData[ch] = average(buffAmpSensor);
; 000D 0061        // voltCutOff = fabs(((((adcData[ch]+5.0)/1023.0)*3.30)-1.65));
; 000D 0062         voltCutOff = fabs(((((voltPeak(buffAmpSensor)+5.0)/1023.0)*3.30)-1.65));
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 000D 0063         ampValue = (voltCutOff*1000.0)/18.5;
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 000D 0064         //printDebug("[%d]ADC: %f, Volt(raw): %f, Amp: %f\r\n", ch, adcData[ch], (adcData[ch]-511.0), ampValue);
; 000D 0065 
; 000D 0066        adcData[ch] =  ampValue;
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 000D 0067     }else if((ch==1) || (ch==2)){
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 000D 0068 
; 000D 0069         //dhtRet = DHT11Read(&dhtDevice);
; 000D 006A 
; 000D 006B         dht11Reread = 0;
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 000D 006C         //memset(&dhtDevice,0,sizeof(dhtDevice));
; 000D 006D         for(i=0;i<20;i++){
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 000D 006E 
; 000D 006F             dhtRet = DHT11Read(&dhtDevice);
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 000D 0070             //delay_ms(4);
; 000D 0071             //printDebug("[%d]ADC:DHT11:Return (%d). \r\n", ch,dhtRet);
; 000D 0072             if(dhtRet == DHT11_SUCCESS){
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 000D 0073 //                if(ch==1){
; 000D 0074 //                  bufferTemp[dht11Reread] = dhtDevice.temp;
; 000D 0075 //                }else if(ch==2){
; 000D 0076 //                  bufferHumi[dht11Reread] = dhtDevice.humi;
; 000D 0077 //                }
; 000D 0078 
; 000D 0079                 bufferTemp[dht11Reread] = dhtDevice.temp;
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 000D 007A                 bufferHumi[dht11Reread] = dhtDevice.humi;
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 000D 007B 
; 000D 007C                 ++dht11Reread;
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 000D 007D             }
; 000D 007E             if(dht11Reread>=2){
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 000D 007F                break;
;PCODE: $0000015D VOL: 0
; 000D 0080             }
; 000D 0081         }
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 000D 0082 
; 000D 0083         if(dht11Reread>=2){
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 000D 0084             if(ch==1){
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 000D 0085                adcData[ch] = average(bufferTemp,2);
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 000D 0086             }else if(ch==2){
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 000D 0087                adcData[ch] = average(bufferHumi,2);
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 000D 0088             }
; 000D 0089         }else if(dht11Reread>=1){
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 000D 008A             if(ch==1){
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 000D 008B                adcData[ch] = average(bufferTemp,1);
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 000D 008C             }else if(ch==2){
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
; 000D 008D                adcData[ch] = average(bufferHumi,1);
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 000D 008E             }
; 000D 008F         }
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
; 000D 0090 
; 000D 0091 //        if(ch==1){
; 000D 0092 //
; 000D 0093 //            //dhtRet = DHT11Read(&dhtDevice);
; 000D 0094 //            if(dhtRet == DHT11_SUCCESS){
; 000D 0095 //
; 000D 0096 //               //sensor->value = dhtDevice.temp;
; 000D 0097 //               //adcData[ch] = dhtDevice.temp;
; 000D 0098 //               adcData[ch] = average(bufferTemp,2);
; 000D 0099 //               //printDebug("[%d]ADC:DHT11: Temp(%f)\r\n", ch,adcData[ch]);
; 000D 009A //            }else if(dhtRet == DHT11_ERROR_TIMEOUT){
; 000D 009B //          //      sensor->status  = SENS_ERR_UNKNOWN;
; 000D 009C //               //printDebug("[%d]ADC:DHT11:Time out. \r\n", ch);
; 000D 009D //            }else if(dhtRet == DHT11_ERROR_CHECKSUM){
; 000D 009E //               //printDebug("[%d]ADC:DHT11:Check sum error. \r\n", ch);
; 000D 009F //            }
; 000D 00A0 //        }else if(ch==2){
; 000D 00A1 //
; 000D 00A2 //            //dhtRet = DHT11Read(&dhtDevice);
; 000D 00A3 //            if(dhtRet == DHT11_SUCCESS){
; 000D 00A4 //              //printDebug("[%d]ADC:DHT11: Humi(%f) \r\n", ch,dhtDevice.humi);
; 000D 00A5 //               //sensor->value = dhtDevice.humi;
; 000D 00A6 //               //adcData[ch] = dhtDevice.humi;
; 000D 00A7 //               adcData[ch] = average(bufferHumi,2);
; 000D 00A8 //               //printDebug("[%d]ADC:DHT11: Humip(%f)\r\n", ch,adcData[ch]);
; 000D 00A9 //            }else if(dhtRet == DHT11_ERROR_TIMEOUT){
; 000D 00AA //             //   sensor->status  = SENS_ERR_UNKNOWN;
; 000D 00AB //               //printDebug("[%d]ADC:DHT11:Time out. \r\n", ch);
; 000D 00AC //            }else if(dhtRet == DHT11_ERROR_CHECKSUM){
; 000D 00AD //               //printDebug("[%d]ADC:DHT11:Check sum error. \r\n", ch);
; 000D 00AE //            }
; 000D 00AF //        }
; 000D 00B0     }
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
; 000D 00B1     return;
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
; 000D 00B2 }
;PCODE: $000001B9 VOL: 0
;
;float voltPeak(float data[]){       //Amp value
; 000D 00B4 float voltPeak(float data[]){
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 000D 00B5      int i = 0;
; 000D 00B6      float sum=0.0;
; 000D 00B7 
; 000D 00B8      for(i=0;i<60;i++){
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;	data -> Y+6
;	i -> R16,R17
;	sum -> Y+2
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 000D 00B9        sum = MAX(sum,data[i]);
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
; 000D 00BA      }
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
; 000D 00BB      return sum;
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
; 000D 00BC }
;PCODE: $000001F2 VOL: 0
;float average(float data[],int count){      //Volt value
; 000D 00BD float average(float data[],int count){
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
; 000D 00BE      int i = 0;
; 000D 00BF      float avg = 0.0, sum=0.0;
; 000D 00C0 
; 000D 00C1      //printDebug("raw data.\r\n");
; 000D 00C2      for(i=0;i<count;i++){
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;	data -> Y+12
;	count -> Y+10
;	i -> R16,R17
;	avg -> Y+6
;	sum -> Y+2
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
; 000D 00C3        //printDebug("%.2f ", data[i]);
; 000D 00C4        sum += data[i];
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
; 000D 00C5      }
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
; 000D 00C6      //printDebug("\r\nMax(%.2f) ", sum);
; 000D 00C7      //printDebug("\r\n");
; 000D 00C8      //return sum;
; 000D 00C9 
; 000D 00CA 
; 000D 00CB      avg =(sum/count);
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
; 000D 00CC      return avg;
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
; 000D 00CD }
;PCODE: $0000022D VOL: 0
