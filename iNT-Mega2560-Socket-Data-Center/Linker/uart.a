;#include <mega2560.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <string.h>
;#include <ctype.h>
;#include <delay.h>
;#include "uart.h"
;#include "io.h"
;#include "ethcomm.h"
;
;/*============================================================*/
;char flag_PackageTerminate3 = 0;
;
;flash unsigned char charHeader = '$';
;flash unsigned char charTerminate = '#';
;
;bit                 flag_oled_ack      = 0;
;
;unsigned char       rxPackageIndex3;
;unsigned char       rxPackage3[64];
;unsigned char       rxPackageIndexCount3;
;/*============================================================*/
;// USART0 Receiver buffer
;char rx_buffer0[RX_BUFFER_SIZE0];
;
;unsigned int rx_wr_index0,rx_rd_index0,rx_counter0;
;
;// This flag is set on USART0 Receiver buffer overflow
;bit rx_buffer_overflow0;
;
;unsigned char       configRd[CONF_READ_BUFFER];      // for reading config
;int                 configLen=0;
;
;char                config_start    = 0;
;char                config_ready    = 0;    // 1 = failed, 2 = success
;char                config_end      = 0;
;char                config_response = 0;
;
;// USART0 Receiver interrupt service routine
;interrupt [USART0_RXC] void usart0_rx_isr(void)
; 0002 0028 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0002 0029     char status,data;
; 0002 002A     status=UCSR0A;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0002 002B     data=UDR0;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0002 002C 
; 0002 002D     if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0002 002E     {
; 0002 002F         if(ETH_current_mode != MODE_CONF)
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0002 0030         {
; 0002 0031             //putchar3(data);
; 0002 0032             rx_buffer0[rx_wr_index0++]  =   data;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0002 0033 
; 0002 0034             if (rx_wr_index0 == RX_BUFFER_SIZE0)
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0002 0035             {
; 0002 0036                 rx_wr_index0=0;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0002 0037             }
; 0002 0038             if (++rx_counter0 == RX_BUFFER_SIZE0)
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0002 0039             {
; 0002 003A                 rx_counter0=0;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0002 003B                 rx_buffer_overflow0=1;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0002 003C                 send_uart(3,"\r\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n" );
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0002 003D                 send_uart(3,    "!!!!!!! Eth Buffer Overflow !!!!!!!!!"     );
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0002 003E                 send_uart(3,"\r\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n" );
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0002 003F             }
; 0002 0040         }
;PCODE: $00000041 VOL: 0
; 0002 0041         else{
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0002 0042             putchar3(data);
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0002 0043 
; 0002 0044             if (configLen == CONF_READ_BUFFER)
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0002 0045             {
; 0002 0046                 configLen=0;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0002 0047             }
; 0002 0048 
; 0002 0049             if((data == '<') && (config_start == 0)){
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0002 004A                 config_start            = 1;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0002 004B                 config_response         = 0;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0002 004C                 config_ready            = 0;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0002 004D             }
; 0002 004E             else if((data == 0x0D) && (config_end == 0) && (config_start == 1) && (config_response != 0)){
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0002 004F                 config_end  = 0x0D;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0002 0050             }
; 0002 0051             else if((data == 0x0A) && (config_end == 0x0D) && (config_start == 1) && (config_response != 0)){
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0002 0052                 config_end              = 0x0A;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0002 0053                 config_ready            = 1;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0002 0054             }
; 0002 0055             else if((data == 'E') && (config_start == 1) && (config_response == 0)){
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0002 0056                 config_response         = 'E';
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0002 0057             }
; 0002 0058             else if((data == 'S') && (config_start == 1) && (config_response == 0)){
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0002 0059                 config_response         = 'S';
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0002 005A             }
; 0002 005B             else if((config_start == 1) && (config_response != 0)){
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0002 005C                 configRd[configLen++]   =   data;
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0002 005D             }
; 0002 005E         }
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0002 005F     }
; 0002 0060 }
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0

	.DSEG
_0x40009:
	.BYTE 0x7C
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART0 Receiver buffer
;#define _ALTERNATE_GETCHAR_
;
;#pragma used+
;char getchar(void)
; 0002 0068 {

	.CSEG
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0002 0069     char data;
; 0002 006A     while (rx_counter0==0);
;PCODE: $000000C9 VOL: 0
;	data -> R17
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0002 006B     data=rx_buffer0[rx_rd_index0++];
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0002 006C  //   #if RX_BUFFER_SIZE0 != 256
; 0002 006D     if (rx_rd_index0 == RX_BUFFER_SIZE0)
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0002 006E         rx_rd_index0=0;
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0002 006F //    #endif
; 0002 0070     #asm("cli")
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
	cli
;PCODE: $000000DE VOL: 0
; 0002 0071     --rx_counter0;
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0002 0072     #asm("sei")
;PCODE: $000000E3 VOL: 0
	sei
;PCODE: $000000E4 VOL: 0
; 0002 0073     return data;
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0002 0074 }
;PCODE: $000000E8 VOL: 0
;#pragma used-
;// Write a character to the USART0 Transmitter
;#pragma used+
;void putchar0(char c)
; 0002 0079 {
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0002 007A     while ((UCSR0A & DATA_REGISTER_EMPTY)==0);
;PCODE: $000000EB VOL: 0
;	c -> Y+0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0002 007B     UDR0=c;
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0002 007C }
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;#pragma used-
;#endif
;
;int read_uart0(char *readbuf, int maxread,int interchar)
; 0002 0081 {
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0002 0082     char data;
; 0002 0083     int len=0;
; 0002 0084 
; 0002 0085     while (rx_counter0 > 0)
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;	*readbuf -> Y+8
;	maxread -> Y+6
;	interchar -> Y+4
;	data -> R17
;	len -> R18,R19
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0002 0086     {
; 0002 0087         data=rx_buffer0[rx_rd_index0++];
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0002 0088         if (rx_rd_index0 == RX_BUFFER_SIZE0){
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0002 0089             rx_rd_index0=0;
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0002 008A         }
; 0002 008B         UCSR0B &= 0x7F;          // -- disable uart0 interrupt -- //
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0002 008C 
; 0002 008D         --rx_counter0;
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0002 008E 
; 0002 008F         UCSR0B |= 0x80;          // -- enable uart0 interrupt -- //
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0002 0090 
; 0002 0091         memcpy(readbuf++,&data,1);
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0002 0092         len++;
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0002 0093 
; 0002 0094         if(len == maxread){
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0002 0095             break;
;PCODE: $00000129 VOL: 0
; 0002 0096         }
; 0002 0097         delay_ms(interchar);
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0002 0098     }
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0002 0099     return len;
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0002 009A }
;PCODE: $00000133 VOL: 0
;
;int write_uart0(char writebuf[], int len)
; 0002 009D {
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0002 009E     int i;
; 0002 009F     for(i=0;i<len;i++){
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;	writebuf -> Y+4
;	len -> Y+2
;	i -> R16,R17
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0002 00A0         putchar0(writebuf[i]);
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0002 00A1     }
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0002 00A2     return i;
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0002 00A3 }
;PCODE: $00000153 VOL: 0
;/*============================================================*/
;// USART1 Receiver interrupt service routine
;interrupt [USART1_RXC] void usart1_rx_isr(void)
; 0002 00A7 {
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0002 00A8     char status,data;
; 0002 00A9     status=UCSR1A;
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0002 00AA     data=UDR1;
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0002 00AB 
; 0002 00AC     if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0002 00AD     {
; 0002 00AE         if(data);
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0002 00AF     }
;PCODE: $00000161 VOL: 0
; 0002 00B0 }
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;
;/*============================================================*/
;// USART2 Receiver interrupt service routine
;interrupt [USART2_RXC] void usart2_rx_isr(void)
; 0002 00B5 {
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0002 00B6     char status,data;
; 0002 00B7     status=UCSR2A;
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0002 00B8     data=UDR2;
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0002 00B9     if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0002 00BA     {
; 0002 00BB         if(data=='K'){
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0002 00BC             flag_oled_ack = 1;
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0002 00BD         }
; 0002 00BE         else{
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0002 00BF             //putchar3(data);
; 0002 00C0         }
;PCODE: $00000179 VOL: 0
; 0002 00C1     }
; 0002 00C2 }
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;
;// Write a character to the USART2 Transmitter
;#pragma used+
;void putchar2(char c)
; 0002 00C7 {
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0002 00C8     while ((UCSR2A & DATA_REGISTER_EMPTY)==0);
;PCODE: $00000181 VOL: 0
;	c -> Y+0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0002 00C9     UDR2=c;
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0002 00CA }
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;#pragma used-
;
;
;/*============================================================*/
;// USART3 Receiver interrupt service routine
;interrupt [USART3_RXC] void usart3_rx_isr(void)
; 0002 00D1 {
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0002 00D2     char status,data;
; 0002 00D3     status=UCSR3A;
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0002 00D4     data=UDR3;
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0002 00D5     //putchar3(data);
; 0002 00D6     //putchar0(data);
; 0002 00D7     if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0002 00D8     {
; 0002 00D9         putchar3(data);
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0002 00DA //        putchar0(data);
; 0002 00DB         // Detect Package Header
; 0002 00DC         if(data == charHeader)
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0002 00DD         {
; 0002 00DE             rxPackageIndex3 = 0;
;PCODE: $0000019D VOL: 0
; 0002 00DF         }
; 0002 00E0 
; 0002 00E1         rxPackage3[rxPackageIndex3++] = data;
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0002 00E2 
; 0002 00E3         if(rxPackageIndex3 >= 64) rxPackageIndex3 = 0;
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0002 00E4 
; 0002 00E5         if(data == charTerminate)
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0002 00E6         {
; 0002 00E7             rxPackageIndexCount3 = rxPackageIndex3-1;
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
; 0002 00E8             rxPackageIndex3 = 0;
;PCODE: $000001AF VOL: 0
; 0002 00E9             flag_PackageTerminate3 = 1;
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
; 0002 00EA         }
; 0002 00EB     }
;PCODE: $000001B2 VOL: 0
; 0002 00EC }
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;
;/*============================================================*/
;// Write a character to the USART3 Transmitter
;#pragma used+
;void putchar3(char c)
; 0002 00F2 {
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
; 0002 00F3     while ((UCSR3A & DATA_REGISTER_EMPTY)==0);
;PCODE: $000001BA VOL: 0
;	c -> Y+0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
; 0002 00F4     UDR3=c;
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
; 0002 00F5 }
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;#pragma used-
;
;/*============================================================*/
;void send_uart(char port,char *buffer)
; 0002 00FA {
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
; 0002 00FB     char i = 0;
; 0002 00FC 
; 0002 00FD     switch (port)
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;	port -> Y+3
;	*buffer -> Y+1
;	i -> R17
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
; 0002 00FE     {
; 0002 00FF         case 0: puts(buffer);
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
; 0002 0100                 break;
;PCODE: $000001D2 VOL: 0
; 0002 0101 
; 0002 0102         case 1: while(buffer[i] != 0)
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0002 0103                 {
; 0002 0104                     //putchar1(buffer[i]);
; 0002 0105                     i++;
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
; 0002 0106                 }
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
; 0002 0107                 break;
;PCODE: $000001E0 VOL: 0
; 0002 0108 
; 0002 0109         case 2: while(buffer[i] != 0)
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0002 010A                 {
; 0002 010B                     putchar2(buffer[i]);
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
; 0002 010C                     i++;
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
; 0002 010D                 }
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
; 0002 010E                 break;
;PCODE: $000001F2 VOL: 0
; 0002 010F 
; 0002 0110         case 3: while(buffer[i] != 0)
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
; 0002 0111                 {
; 0002 0112                     putchar3(buffer[i]);
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
; 0002 0113                     i++;
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
; 0002 0114                 }
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
; 0002 0115                 break;
;PCODE: $00000204 VOL: 0
; 0002 0116     }
;PCODE: $00000205 VOL: 0
; 0002 0117 }
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;
;/*============================================================*/
;void init_uart(void)
; 0002 011B {
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
; 0002 011C //    // USART0 initialization
; 0002 011D //    // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0002 011E //    // USART0 Receiver: On
; 0002 011F //    // USART0 Transmitter: On
; 0002 0120 //    // USART0 Mode: Asynchronous
; 0002 0121 //    // USART0 Baud Rate: 38400
; 0002 0122 //    UCSR0A=0x00;
; 0002 0123 //    UCSR0B=0x98;
; 0002 0124 //    UCSR0C=0x06;
; 0002 0125 //    UBRR0H=0x00;
; 0002 0126 //    UBRR0L=0x0C;
; 0002 0127 
; 0002 0128     // USART0 initialization
; 0002 0129     // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0002 012A     // USART0 Receiver: On
; 0002 012B     // USART0 Transmitter: On
; 0002 012C     // USART0 Mode: Asynchronous
; 0002 012D     // USART0 Baud Rate: 9600
; 0002 012E     UCSR0A=0x00;
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
; 0002 012F     UCSR0B=0x98;
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
; 0002 0130     UCSR0C=0x06;
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
; 0002 0131     UBRR0H=0x00;
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
; 0002 0132     UBRR0L=0x33;
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
; 0002 0133 
; 0002 0134     // USART1 initialization
; 0002 0135     // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0002 0136     // USART1 Receiver: On
; 0002 0137     // USART1 Transmitter: On
; 0002 0138     // USART1 Mode: Asynchronous
; 0002 0139     // USART1 Baud Rate: 38400
; 0002 013A     UCSR1A=0x00;
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
; 0002 013B     UCSR1B=0x98;
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
; 0002 013C     UCSR1C=0x06;
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
; 0002 013D     UBRR1H=0x00;
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
; 0002 013E     UBRR1L=0x0C;
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
; 0002 013F 
; 0002 0140 //    // USART2 initialization
; 0002 0141 //    // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0002 0142 //    // USART2 Receiver: On
; 0002 0143 //    // USART2 Transmitter: On
; 0002 0144 //    // USART2 Mode: Asynchronous
; 0002 0145 //    // USART2 Baud Rate: 115200 (Double Speed Mode)
; 0002 0146 //    UCSR2A=0x02;
; 0002 0147 //    UCSR2B=0x98;
; 0002 0148 //    UCSR2C=0x06;
; 0002 0149 //    UBRR2H=0x00;
; 0002 014A //    UBRR2L=0x08;
; 0002 014B 
; 0002 014C     // USART2 initialization
; 0002 014D     // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0002 014E     // USART2 Receiver: On
; 0002 014F     // USART2 Transmitter: On
; 0002 0150     // USART2 Mode: Asynchronous
; 0002 0151     // USART2 Baud Rate: 38400
; 0002 0152     UCSR2A=0x00;
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
; 0002 0153     UCSR2B=0x98;
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
; 0002 0154     UCSR2C=0x06;
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
; 0002 0155     UBRR2H=0x00;
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
; 0002 0156     UBRR2L=0x0C;
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
; 0002 0157 
; 0002 0158     // USART3 initialization
; 0002 0159     // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0002 015A     // USART3 Receiver: On
; 0002 015B     // USART3 Transmitter: On
; 0002 015C     // USART3 Mode: Asynchronous
; 0002 015D     // USART3 Baud Rate: 38400
; 0002 015E     UCSR3A=0x00;
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
; 0002 015F     UCSR3B=0x98;
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
; 0002 0160     UCSR3C=0x06;
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
; 0002 0161     UBRR3H=0x00;
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
; 0002 0162     UBRR3L=0x0C;
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
; 0002 0163 }
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;
;/*============================================================*/
;
